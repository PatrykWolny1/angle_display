
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea70  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001110  0800eb80  0800eb80  0000fb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc90  0800fc90  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc90  0800fc90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc98  0800fc98  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc98  0800fc98  00010c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc9c  0800fc9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800fca0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003df0  200001f0  0800fe90  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fe0  0800fe90  00011fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc49  00000000  00000000  00011219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e40  00000000  00000000  00030e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00035ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000154f  00000000  00000000  00037820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e362  00000000  00000000  00038d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022dbe  00000000  00000000  000570d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1f2  00000000  00000000  00079e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c90  00000000  00000000  001170c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011fd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eb68 	.word	0x0800eb68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800eb68 	.word	0x0800eb68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <computeDT>:
#include "mpu6050.h"

PitchRollYaw resultsPRY;
CompFilter resultsCompFilter;

double computeDT(uint32_t *prevTick) {
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    uint32_t currTick = osKernelGetTickCount();  // Get current tick
 8000fec:	f005 fc6c 	bl	80068c8 <osKernelGetTickCount>
 8000ff0:	61b8      	str	r0, [r7, #24]
    uint32_t tickFreq = osKernelGetTickFreq();  // Get tick frequency (e.g., 1000 Hz)
 8000ff2:	f005 fc7e 	bl	80068f2 <osKernelGetTickFreq>
 8000ff6:	6178      	str	r0, [r7, #20]

    // Ensure tick frequency is valid
    if (tickFreq == 0) {
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <computeDT+0x2a>
        printf("Error: Tick frequency is zero!\n");
 8000ffe:	481a      	ldr	r0, [pc, #104]	@ (8001068 <computeDT+0x84>)
 8001000:	f00a f8ac 	bl	800b15c <puts>
        return 0.0;  // Avoid division by zero
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e026      	b.n	800105c <computeDT+0x78>
    }

    uint32_t deltaTicks;
    if (currTick >= *prevTick) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	d305      	bcc.n	8001024 <computeDT+0x40>
        deltaTicks = currTick - *prevTick;  // Normal case
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e004      	b.n	800102e <computeDT+0x4a>
    } else {
        deltaTicks = (0xFFFFFFFF - *prevTick) + currTick + 1;  // Handle overflow
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]
    }

    *prevTick = currTick;  // Update previous tick for the next call
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

    double dt = (double)deltaTicks / tickFreq;  // Convert ticks to seconds
 8001034:	69f8      	ldr	r0, [r7, #28]
 8001036:	f7ff f9d5 	bl	80003e4 <__aeabi_ui2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff f9d0 	bl	80003e4 <__aeabi_ui2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fb6e 	bl	800072c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Debugging output
//    printf("computeDT -> currTick: %lu, prevTick: %lu, deltaTicks: %lu, tickFreq: %lu, dt: %.6f\n",
//           currTick, *prevTick, deltaTicks, tickFreq, dt);

    return dt;  // Return time difference in seconds
 8001058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	0800eb80 	.word	0x0800eb80
 800106c:	00000000 	.word	0x00000000

08001070 <radiansToDegrees>:

float radiansToDegrees(float radians) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    return radians * (180.0f / M_PI);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f9d5 	bl	8000428 <__aeabi_f2d>
 800107e:	a308      	add	r3, pc, #32	@ (adr r3, 80010a0 <radiansToDegrees+0x30>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa28 	bl	80004d8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fcfa 	bl	8000a88 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	1a63c1f8 	.word	0x1a63c1f8
 80010a4:	404ca5dc 	.word	0x404ca5dc

080010a8 <Kalman_Init>:

	return &resultsCompFilter;
}

// Initialize the Kalman filter
void Kalman_Init(KalmanFilter *kf, float Q_angle, float Q_bias, float R_measure) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
    // Initialization of states
    kf->angle = 0.0f; // θ₀|₀ = 0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;  // b₀|₀ = 0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
    kf->rate = 0.0f;  // Unbiased angular rate is initialized to 0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]

    // Initialize the error covariance matrix P₀|₀
    kf->P[0][0] = 0.0f; kf->P[0][1] = 0.0f;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0f; kf->P[1][1] = 0.0f;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]

    // Set process and measurement noise covariances
    kf->Q_angle = Q_angle;    // Q_θ: Variance in angle
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	61da      	str	r2, [r3, #28]
    kf->Q_bias = Q_bias;      // Q_b: Variance in gyroscope bias
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	621a      	str	r2, [r3, #32]
    kf->R_measure = R_measure; // R: Variance in accelerometer measurement
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <Kalman_Update>:

// Update the Kalman filter with new sensor data
float Kalman_Update(KalmanFilter *kf, float new_angle, float new_rate, float dt) {
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b08b      	sub	sp, #44	@ 0x2c
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
    // Step 1: Prediction

    // Predict the unbiased rate: ωₖ - bₖ
    kf->rate = new_rate - kf->bias; // Equation: ωₖ - bₖ
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd06 	bl	8000b30 <__aeabi_fsub>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]

    // Predict the angle: θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * (ωₖ - bₖ)
    kf->angle += dt * kf->rate; // θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * rate
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe04 	bl	8000d44 <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	4619      	mov	r1, r3
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff fcf7 	bl	8000b34 <__addsf3>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	601a      	str	r2, [r3, #0]

    // Update the error covariance matrix:
    // Pₖ|ₖ₋₁ = F * Pₖ₋₁|ₖ₋₁ * Fᵀ + Q
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle); // Update Pₖ|ₖ₋₁[0][0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68dc      	ldr	r4, [r3, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdf3 	bl	8000d44 <__aeabi_fmul>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff fce1 	bl	8000b30 <__aeabi_fsub>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff fcd9 	bl	8000b30 <__aeabi_fsub>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f7ff fcd3 	bl	8000b34 <__addsf3>
 800118e:	4603      	mov	r3, r0
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdd6 	bl	8000d44 <__aeabi_fmul>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff fcc9 	bl	8000b34 <__addsf3>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[0][1]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	691c      	ldr	r4, [r3, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fdc5 	bl	8000d44 <__aeabi_fmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4619      	mov	r1, r3
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff fcb6 	bl	8000b30 <__aeabi_fsub>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[1][0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	695c      	ldr	r4, [r3, #20]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdb4 	bl	8000d44 <__aeabi_fmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fca5 	bl	8000b30 <__aeabi_fsub>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	615a      	str	r2, [r3, #20]
    kf->P[1][1] += kf->Q_bias * dt;  // Update Pₖ|ₖ₋₁[1][1]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	699c      	ldr	r4, [r3, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fda3 	bl	8000d44 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fc96 	bl	8000b34 <__addsf3>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	619a      	str	r2, [r3, #24]

    // Step 2: Update

    // Compute the innovation: yₖ = zₖ - H * θₖ|ₖ₋₁
    float y = new_angle - kf->angle; // Innovation: yₖ = zₖ - θₖ|ₖ₋₁
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fc8a 	bl	8000b30 <__aeabi_fsub>
 800121c:	4603      	mov	r3, r0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Compute the innovation covariance: S = H * Pₖ|ₖ₋₁ * Hᵀ + R
    float S = kf->P[0][0] + kf->R_measure; // S = Pₖ|ₖ₋₁[0][0] + R
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fc82 	bl	8000b34 <__addsf3>
 8001230:	4603      	mov	r3, r0
 8001232:	623b      	str	r3, [r7, #32]

    // Compute the Kalman gain: K = Pₖ|ₖ₋₁ * Hᵀ / S
    float K[2];
    K[0] = kf->P[0][0] / S; // K₁ = Pₖ|ₖ₋₁[0][0] / S
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	6a39      	ldr	r1, [r7, #32]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe36 	bl	8000eac <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	613b      	str	r3, [r7, #16]
    K[1] = kf->P[1][0] / S; // K₂ = Pₖ|ₖ₋₁[1][0] / S
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe2e 	bl	8000eac <__aeabi_fdiv>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]

    // Update the state estimates: θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
    kf->angle += K[0] * y; // θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681c      	ldr	r4, [r3, #0]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd71 	bl	8000d44 <__aeabi_fmul>
 8001262:	4603      	mov	r3, r0
 8001264:	4619      	mov	r1, r3
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fc64 	bl	8000b34 <__addsf3>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]

    // Update the bias: bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
    kf->bias += K[1] * y; // bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685c      	ldr	r4, [r3, #4]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd61 	bl	8000d44 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff fc54 	bl	8000b34 <__addsf3>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]

    // Update the error covariance matrix:
    // Pₖ|ₖ = (I - K * H) * Pₖ|ₖ₋₁
    float P00_temp = kf->P[0][0]; // Temporary value to hold Pₖ|ₖ₋₁[0][0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1]; // Temporary value to hold Pₖ|ₖ₋₁[0][1]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp; // Update Pₖ|ₖ[0][0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68dc      	ldr	r4, [r3, #12]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	69f9      	ldr	r1, [r7, #28]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd4b 	bl	8000d44 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fc3c 	bl	8000b30 <__aeabi_fsub>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp; // Update Pₖ|ₖ[0][1]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	691c      	ldr	r4, [r3, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fd3b 	bl	8000d44 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff fc2c 	bl	8000b30 <__aeabi_fsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp; // Update Pₖ|ₖ[1][0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	695c      	ldr	r4, [r3, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	69f9      	ldr	r1, [r7, #28]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd2b 	bl	8000d44 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc1c 	bl	8000b30 <__aeabi_fsub>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	615a      	str	r2, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp; // Update Pₖ|ₖ[1][1]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	699c      	ldr	r4, [r3, #24]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd1b 	bl	8000d44 <__aeabi_fmul>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fc0c 	bl	8000b30 <__aeabi_fsub>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	619a      	str	r2, [r3, #24]

    // Return the updated angle estimate
    return kf->angle; // Return θₖ|ₖ
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	372c      	adds	r7, #44	@ 0x2c
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <computeAngles>:


PitchRollYaw* computeAngles(MPU6050_Data *dataToProcess, uint32_t *prevTick) {
 800132c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f873 	bl	8000428 <__aeabi_f2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f86c 	bl	8000428 <__aeabi_f2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001358:	f00c fa66 	bl	800d828 <pow>
 800135c:	4680      	mov	r8, r0
 800135e:	4689      	mov	r9, r1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f85f 	bl	8000428 <__aeabi_f2d>
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001372:	f00c fa59 	bl	800d828 <pow>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4640      	mov	r0, r8
 800137c:	4649      	mov	r1, r9
 800137e:	f7fe fef5 	bl	800016c <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f00c fab5 	bl	800d8f8 <sqrt>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f00c fa45 	bl	800d824 <atan2>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb71 	bl	8000a88 <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a58      	ldr	r2, [pc, #352]	@ (800150c <computeAngles+0x1e0>)
 80013aa:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f839 	bl	8000428 <__aeabi_f2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f832 	bl	8000428 <__aeabi_f2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013cc:	f00c fa2c 	bl	800d828 <pow>
 80013d0:	4680      	mov	r8, r0
 80013d2:	4689      	mov	r9, r1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f825 	bl	8000428 <__aeabi_f2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e6:	f00c fa1f 	bl	800d828 <pow>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4640      	mov	r0, r8
 80013f0:	4649      	mov	r1, r9
 80013f2:	f7fe febb 	bl	800016c <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f00c fa7b 	bl	800d8f8 <sqrt>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4620      	mov	r0, r4
 8001408:	4629      	mov	r1, r5
 800140a:	f00c fa0b 	bl	800d824 <atan2>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb37 	bl	8000a88 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a3b      	ldr	r2, [pc, #236]	@ (800150c <computeAngles+0x1e0>)
 800141e:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 8001420:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <computeAngles+0x1e0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe23 	bl	8001070 <radiansToDegrees>
 800142a:	4603      	mov	r3, r0
 800142c:	4a37      	ldr	r2, [pc, #220]	@ (800150c <computeAngles+0x1e0>)
 800142e:	6013      	str	r3, [r2, #0]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <computeAngles+0x1e0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe1b 	bl	8001070 <radiansToDegrees>
 800143a:	4603      	mov	r3, r0
 800143c:	4a33      	ldr	r2, [pc, #204]	@ (800150c <computeAngles+0x1e0>)
 800143e:	6053      	str	r3, [r2, #4]

    double dt = computeDT(prevTick);
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff fdcf 	bl	8000fe4 <computeDT>
 8001446:	e9c7 0102 	strd	r0, r1, [r7, #8]

    resultsPRY.pitchGyroDelta = dataToProcess->gyroX * dt;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ffea 	bl	8000428 <__aeabi_f2d>
 8001454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001458:	f7ff f83e 	bl	80004d8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb10 	bl	8000a88 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	4a28      	ldr	r2, [pc, #160]	@ (800150c <computeAngles+0x1e0>)
 800146c:	6153      	str	r3, [r2, #20]
    resultsPRY.rollGyroDelta = dataToProcess->gyroY * dt;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ffd8 	bl	8000428 <__aeabi_f2d>
 8001478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800147c:	f7ff f82c 	bl	80004d8 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fafe 	bl	8000a88 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <computeAngles+0x1e0>)
 8001490:	6193      	str	r3, [r2, #24]
    resultsPRY.yawGyroDelta = dataToProcess->gyroZ * dt;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe ffc6 	bl	8000428 <__aeabi_f2d>
 800149c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014a0:	f7ff f81a 	bl	80004d8 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff faec 	bl	8000a88 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a16      	ldr	r2, [pc, #88]	@ (800150c <computeAngles+0x1e0>)
 80014b4:	61d3      	str	r3, [r2, #28]

    resultsPRY.pitchGyro += resultsPRY.pitchGyroDelta;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <computeAngles+0x1e0>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <computeAngles+0x1e0>)
 80014bc:	6952      	ldr	r2, [r2, #20]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb37 	bl	8000b34 <__addsf3>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <computeAngles+0x1e0>)
 80014cc:	609a      	str	r2, [r3, #8]
    resultsPRY.rollGyro += resultsPRY.rollGyroDelta;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <computeAngles+0x1e0>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <computeAngles+0x1e0>)
 80014d4:	6992      	ldr	r2, [r2, #24]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fb2b 	bl	8000b34 <__addsf3>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <computeAngles+0x1e0>)
 80014e4:	60da      	str	r2, [r3, #12]
    resultsPRY.yawGyro += resultsPRY.yawGyroDelta;
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <computeAngles+0x1e0>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <computeAngles+0x1e0>)
 80014ec:	69d2      	ldr	r2, [r2, #28]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fb1f 	bl	8000b34 <__addsf3>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <computeAngles+0x1e0>)
 80014fc:	611a      	str	r2, [r3, #16]

    return &resultsPRY;
 80014fe:	4b03      	ldr	r3, [pc, #12]	@ (800150c <computeAngles+0x1e0>)
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800150a:	bf00      	nop
 800150c:	2000020c 	.word	0x2000020c

08001510 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <MX_DMA_Init+0x48>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <MX_DMA_Init+0x48>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6153      	str	r3, [r2, #20]
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <MX_DMA_Init+0x48>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2105      	movs	r1, #5
 8001532:	2010      	movs	r0, #16
 8001534:	f001 fd31 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001538:	2010      	movs	r0, #16
 800153a:	f001 fd4a 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2105      	movs	r1, #5
 8001542:	2011      	movs	r0, #17
 8001544:	f001 fd29 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001548:	2011      	movs	r0, #17
 800154a:	f001 fd42 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <FreeRTOS_Init>:

/* USER CODE END Header_StartDefaultTask */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void FreeRTOS_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b092      	sub	sp, #72	@ 0x48
 8001560:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8001562:	f005 f969 	bl	8006838 <osKernelInitialize>

	// Create a message queue to pass data between threads
    dataQueue = osMessageQueueNew(10, sizeof(MPU6050_Data), NULL); // Assuming MPU6050_Data is the data structure for MPU6050 readings
 8001566:	2200      	movs	r2, #0
 8001568:	2124      	movs	r1, #36	@ 0x24
 800156a:	200a      	movs	r0, #10
 800156c:	f005 fbca 	bl	8006d04 <osMessageQueueNew>
 8001570:	4603      	mov	r3, r0
 8001572:	4a33      	ldr	r2, [pc, #204]	@ (8001640 <FreeRTOS_Init+0xe4>)
 8001574:	6013      	str	r3, [r2, #0]
    if (dataQueue == NULL) {
 8001576:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <FreeRTOS_Init+0xe4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <FreeRTOS_Init+0x2a>
        printf("Failed to create data queue\r\n");
 800157e:	4831      	ldr	r0, [pc, #196]	@ (8001644 <FreeRTOS_Init+0xe8>)
 8001580:	f009 fdec 	bl	800b15c <puts>
        return;
 8001584:	e058      	b.n	8001638 <FreeRTOS_Init+0xdc>
    }

    // Create a mutex for UART access
    uartMutex = osMutexNew(NULL);
 8001586:	2000      	movs	r0, #0
 8001588:	f005 fa68 	bl	8006a5c <osMutexNew>
 800158c:	4603      	mov	r3, r0
 800158e:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <FreeRTOS_Init+0xec>)
 8001590:	6013      	str	r3, [r2, #0]
    if (uartMutex == NULL) {
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <FreeRTOS_Init+0xec>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <FreeRTOS_Init+0x46>
        printf("Failed to create UART mutex\r\n");
 800159a:	482c      	ldr	r0, [pc, #176]	@ (800164c <FreeRTOS_Init+0xf0>)
 800159c:	f009 fdde 	bl	800b15c <puts>
        return;
 80015a0:	e04a      	b.n	8001638 <FreeRTOS_Init+0xdc>
    }

    // Create a semaphore for DMA TX completion signaling
    dmaTxCompleteSemaphore = osSemaphoreNew(1, 0, NULL);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2001      	movs	r0, #1
 80015a8:	f005 fade 	bl	8006b68 <osSemaphoreNew>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a28      	ldr	r2, [pc, #160]	@ (8001650 <FreeRTOS_Init+0xf4>)
 80015b0:	6013      	str	r3, [r2, #0]
    if (dmaTxCompleteSemaphore == NULL) {
 80015b2:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <FreeRTOS_Init+0xf4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <FreeRTOS_Init+0x66>
        printf("Failed to create DMA TX semaphore\r\n");
 80015ba:	4826      	ldr	r0, [pc, #152]	@ (8001654 <FreeRTOS_Init+0xf8>)
 80015bc:	f009 fdce 	bl	800b15c <puts>
        return;
 80015c0:	e03a      	b.n	8001638 <FreeRTOS_Init+0xdc>
    }

    // Create a thread for reading data from the MPU6050 sensor
    osThreadAttr_t mpu6050TaskAttributes = {
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	2224      	movs	r2, #36	@ 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f009 ff71 	bl	800b4b2 <memset>
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <FreeRTOS_Init+0xfc>)
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015da:	2318      	movs	r3, #24
 80015dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .name = "MPU6050Task",
        .priority = osPriorityNormal,
        .stack_size = 512 * 5  // Adjust stack size as needed
    };
    if (osThreadNew((osThreadFunc_t)mpu6050_ReadData, NULL, &mpu6050TaskAttributes) == NULL) {
 80015de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e2:	461a      	mov	r2, r3
 80015e4:	2100      	movs	r1, #0
 80015e6:	481d      	ldr	r0, [pc, #116]	@ (800165c <FreeRTOS_Init+0x100>)
 80015e8:	f005 f98b 	bl	8006902 <osThreadNew>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <FreeRTOS_Init+0x9e>
        printf("Failed to create MPU6050 task\r\n");
 80015f2:	481b      	ldr	r0, [pc, #108]	@ (8001660 <FreeRTOS_Init+0x104>)
 80015f4:	f009 fdb2 	bl	800b15c <puts>
        return;
 80015f8:	e01e      	b.n	8001638 <FreeRTOS_Init+0xdc>
    }

    // Create a thread for processing data
    osThreadAttr_t dataProcessingTaskAttributes = {
 80015fa:	463b      	mov	r3, r7
 80015fc:	2224      	movs	r2, #36	@ 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f009 ff56 	bl	800b4b2 <memset>
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <FreeRTOS_Init+0x108>)
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	2318      	movs	r3, #24
 8001612:	61bb      	str	r3, [r7, #24]
        .name = "DataProcessingTask",
        .priority = osPriorityNormal,
        .stack_size = 512 * 12  // Adjust stack size as needed
    };
    if (osThreadNew((osThreadFunc_t)DataProcessing, NULL, &dataProcessingTaskAttributes) == NULL) {
 8001614:	463b      	mov	r3, r7
 8001616:	461a      	mov	r2, r3
 8001618:	2100      	movs	r1, #0
 800161a:	4813      	ldr	r0, [pc, #76]	@ (8001668 <FreeRTOS_Init+0x10c>)
 800161c:	f005 f971 	bl	8006902 <osThreadNew>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <FreeRTOS_Init+0xd2>
        printf("Failed to create Data Processing task\r\n");
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <FreeRTOS_Init+0x110>)
 8001628:	f009 fd98 	bl	800b15c <puts>
        return;
 800162c:	e004      	b.n	8001638 <FreeRTOS_Init+0xdc>
    }

    printf("FreeRTOS initialization complete\r\n");
 800162e:	4810      	ldr	r0, [pc, #64]	@ (8001670 <FreeRTOS_Init+0x114>)
 8001630:	f009 fd94 	bl	800b15c <puts>

    osKernelStart();
 8001634:	f005 f922 	bl	800687c <osKernelStart>
}
 8001638:	3748      	adds	r7, #72	@ 0x48
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000022c 	.word	0x2000022c
 8001644:	0800eba0 	.word	0x0800eba0
 8001648:	20000230 	.word	0x20000230
 800164c:	0800ebc0 	.word	0x0800ebc0
 8001650:	20000234 	.word	0x20000234
 8001654:	0800ebe0 	.word	0x0800ebe0
 8001658:	0800ec04 	.word	0x0800ec04
 800165c:	08001f29 	.word	0x08001f29
 8001660:	0800ec10 	.word	0x0800ec10
 8001664:	0800ec30 	.word	0x0800ec30
 8001668:	08001fa1 	.word	0x08001fa1
 800166c:	0800ec44 	.word	0x0800ec44
 8001670:	0800ec6c 	.word	0x0800ec6c

08001674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <MX_GPIO_Init+0xcc>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a2c      	ldr	r2, [pc, #176]	@ (8001740 <MX_GPIO_Init+0xcc>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <MX_GPIO_Init+0xcc>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a26      	ldr	r2, [pc, #152]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a20      	ldr	r2, [pc, #128]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_GPIO_Init+0xcc>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2106      	movs	r1, #6
 80016ec:	4815      	ldr	r0, [pc, #84]	@ (8001744 <MX_GPIO_Init+0xd0>)
 80016ee:	f002 f817 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_GPIO_Init+0xd4>)
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	@ (800174c <MX_GPIO_Init+0xd8>)
 8001708:	f001 fe86 	bl	8003418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800170c:	2306      	movs	r3, #6
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2302      	movs	r3, #2
 800171a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4619      	mov	r1, r3
 8001722:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MX_GPIO_Init+0xd0>)
 8001724:	f001 fe78 	bl	8003418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2105      	movs	r1, #5
 800172c:	2028      	movs	r0, #40	@ 0x28
 800172e:	f001 fc34 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001732:	2028      	movs	r0, #40	@ 0x28
 8001734:	f001 fc4d 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	40010c00 	.word	0x40010c00
 8001748:	10110000 	.word	0x10110000
 800174c:	40011000 	.word	0x40011000

08001750 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001756:	4a13      	ldr	r2, [pc, #76]	@ (80017a4 <MX_I2C1_Init+0x54>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_I2C1_Init+0x50>)
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <MX_I2C1_Init+0x58>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <MX_I2C1_Init+0x50>)
 800176e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_I2C1_Init+0x50>)
 800178e:	f002 f801 	bl	8003794 <HAL_I2C_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 f8b6 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000238 	.word	0x20000238
 80017a4:	40005400 	.word	0x40005400
 80017a8:	00061a80 	.word	0x00061a80

080017ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a15      	ldr	r2, [pc, #84]	@ (800181c <HAL_I2C_MspInit+0x70>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d123      	bne.n	8001814 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e4:	23c0      	movs	r3, #192	@ 0xc0
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	@ (8001824 <HAL_I2C_MspInit+0x78>)
 80017f8:	f001 fe0e 	bl	8003418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_I2C_MspInit+0x74>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40005400 	.word	0x40005400
 8001820:	40021000 	.word	0x40021000
 8001824:	40010c00 	.word	0x40010c00

08001828 <main>:
/* USER CODE END PFP */
extern void initialise_monitor_handles(void);

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 800182c:	f008 fc70 	bl	800a110 <initialise_monitor_handles>
    HAL_Init();
 8001830:	f001 faa8 	bl	8002d84 <HAL_Init>
    SystemClock_Config();
 8001834:	f000 f814 	bl	8001860 <SystemClock_Config>
    MX_GPIO_Init();
 8001838:	f7ff ff1c 	bl	8001674 <MX_GPIO_Init>
    MX_I2C1_Init();
 800183c:	f7ff ff88 	bl	8001750 <MX_I2C1_Init>
    MX_SPI2_Init();
 8001840:	f000 fcc6 	bl	80021d0 <MX_SPI2_Init>
	HAL_SPI_MspInit(&hspi2);
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <main+0x34>)
 8001846:	f000 fcf9 	bl	800223c <HAL_SPI_MspInit>
    MX_DMA_Init();
 800184a:	f7ff fe61 	bl	8001510 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800184e:	f001 f8d3 	bl	80029f8 <MX_USART2_UART_Init>
    FreeRTOS_Init();
 8001852:	f7ff fe83 	bl	800155c <FreeRTOS_Init>

	while (1) {
 8001856:	bf00      	nop
 8001858:	e7fd      	b.n	8001856 <main+0x2e>
 800185a:	bf00      	nop
 800185c:	2000028c 	.word	0x2000028c

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b090      	sub	sp, #64	@ 0x40
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0318 	add.w	r3, r7, #24
 800186a:	2228      	movs	r2, #40	@ 0x28
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f009 fe1f 	bl	800b4b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001886:	2301      	movs	r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188a:	2310      	movs	r3, #16
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001892:	2300      	movs	r3, #0
 8001894:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001896:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800189a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f95d 	bl	8004b60 <HAL_RCC_OscConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018ac:	f000 f82c 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b0:	230f      	movs	r3, #15
 80018b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b4:	2302      	movs	r3, #2
 80018b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2102      	movs	r1, #2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fbca 	bl	8005064 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018d6:	f000 f817 	bl	8001908 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3740      	adds	r7, #64	@ 0x40
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f001 fa5b 	bl	8002db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012c00 	.word	0x40012c00

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <Error_Handler+0x8>

08001914 <MPU6050_Init>:
#include "mpu6050.h"
#include "write_printf.h"

extern MPU6050_Data dataToProcess;

void MPU6050_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 800191a:	f000 fa69 	bl	8001df0 <MPU6050_SoftReset>

    HAL_Delay(2000);
 800191e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001922:	f001 fa61 	bl	8002de8 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 8001926:	236b      	movs	r3, #107	@ 0x6b
 8001928:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 800192a:	2300      	movs	r3, #0
 800192c:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2302      	movs	r3, #2
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	4854      	ldr	r0, [pc, #336]	@ (8001a90 <MPU6050_Init+0x17c>)
 800193e:	f002 f86d 	bl	8003a1c <HAL_I2C_Master_Transmit>
    }

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	2301      	movs	r3, #1
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	f107 030b 	add.w	r3, r7, #11
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	221c      	movs	r2, #28
 800195a:	21d0      	movs	r1, #208	@ 0xd0
 800195c:	484c      	ldr	r0, [pc, #304]	@ (8001a90 <MPU6050_Init+0x17c>)
 800195e:	f002 f95b 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 8001962:	2300      	movs	r3, #0
 8001964:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f107 030b 	add.w	r3, r7, #11
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2301      	movs	r3, #1
 8001978:	221b      	movs	r2, #27
 800197a:	21d0      	movs	r1, #208	@ 0xd0
 800197c:	4844      	ldr	r0, [pc, #272]	@ (8001a90 <MPU6050_Init+0x17c>)
 800197e:	f002 f94b 	bl	8003c18 <HAL_I2C_Mem_Write>

    uint8_t config;


    // Set sample rate to 100 Hz
    config = 0x00; // 1000 / (1 + 9) = 100 Hz
 8001982:	2300      	movs	r3, #0
 8001984:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	2301      	movs	r3, #1
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	f107 030a 	add.w	r3, r7, #10
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	2219      	movs	r2, #25
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	483c      	ldr	r0, [pc, #240]	@ (8001a90 <MPU6050_Init+0x17c>)
 800199e:	f002 f93b 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Set DLPF_CFG to 0x02 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f107 030a 	add.w	r3, r7, #10
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	221a      	movs	r2, #26
 80019ba:	21d0      	movs	r1, #208	@ 0xd0
 80019bc:	4834      	ldr	r0, [pc, #208]	@ (8001a90 <MPU6050_Init+0x17c>)
 80019be:	f002 f92b 	bl	8003c18 <HAL_I2C_Mem_Write>

    config = 0x00;  // ACCEL_HPF = 0x01 (5 Hz cutoff frequency)
 80019c2:	2300      	movs	r3, #0
 80019c4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2301      	movs	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f107 030a 	add.w	r3, r7, #10
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	221c      	movs	r2, #28
 80019da:	21d0      	movs	r1, #208	@ 0xd0
 80019dc:	482c      	ldr	r0, [pc, #176]	@ (8001a90 <MPU6050_Init+0x17c>)
 80019de:	f002 f91b 	bl	8003c18 <HAL_I2C_Mem_Write>

    uint8_t whoAmI = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, 1, HAL_MAX_DELAY);
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2301      	movs	r3, #1
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	f107 0309 	add.w	r3, r7, #9
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2275      	movs	r2, #117	@ 0x75
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	4824      	ldr	r0, [pc, #144]	@ (8001a90 <MPU6050_Init+0x17c>)
 80019fe:	f002 fa05 	bl	8003e0c <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 8001a02:	7a7b      	ldrb	r3, [r7, #9]
 8001a04:	2b68      	cmp	r3, #104	@ 0x68
 8001a06:	d005      	beq.n	8001a14 <MPU6050_Init+0x100>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001a08:	7a7b      	ldrb	r3, [r7, #9]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4821      	ldr	r0, [pc, #132]	@ (8001a94 <MPU6050_Init+0x180>)
 8001a0e:	f009 fb3d 	bl	800b08c <iprintf>
 8001a12:	e004      	b.n	8001a1e <MPU6050_Init+0x10a>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001a14:	7a7b      	ldrb	r3, [r7, #9]
 8001a16:	4619      	mov	r1, r3
 8001a18:	481f      	ldr	r0, [pc, #124]	@ (8001a98 <MPU6050_Init+0x184>)
 8001a1a:	f009 fb37 	bl	800b08c <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a22:	9302      	str	r3, [sp, #8]
 8001a24:	2301      	movs	r3, #1
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2223      	movs	r2, #35	@ 0x23
 8001a32:	21d0      	movs	r1, #208	@ 0xd0
 8001a34:	4816      	ldr	r0, [pc, #88]	@ (8001a90 <MPU6050_Init+0x17c>)
 8001a36:	f002 f9e9 	bl	8003e0c <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2301      	movs	r3, #1
 8001a4a:	226a      	movs	r2, #106	@ 0x6a
 8001a4c:	21d0      	movs	r1, #208	@ 0xd0
 8001a4e:	4810      	ldr	r0, [pc, #64]	@ (8001a90 <MPU6050_Init+0x17c>)
 8001a50:	f002 f9dc 	bl	8003e0c <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	1dbb      	adds	r3, r7, #6
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	221c      	movs	r2, #28
 8001a66:	21d0      	movs	r1, #208	@ 0xd0
 8001a68:	4809      	ldr	r0, [pc, #36]	@ (8001a90 <MPU6050_Init+0x17c>)
 8001a6a:	f002 f9cf 	bl	8003e0c <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	1d7b      	adds	r3, r7, #5
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	221b      	movs	r2, #27
 8001a80:	21d0      	movs	r1, #208	@ 0xd0
 8001a82:	4803      	ldr	r0, [pc, #12]	@ (8001a90 <MPU6050_Init+0x17c>)
 8001a84:	f002 f9c2 	bl	8003e0c <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000238 	.word	0x20000238
 8001a94:	0800ec90 	.word	0x0800ec90
 8001a98:	0800ecbc 	.word	0x0800ecbc

08001a9c <MPU6050_ReadAll>:

void MPU6050_ReadAll(MPU6050_Data *dataToProcess) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	@ 0x38
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]

    int16_t accelX, accelY, accelZ;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	230e      	movs	r3, #14
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	223b      	movs	r2, #59	@ 0x3b
 8001ab8:	21d0      	movs	r1, #208	@ 0xd0
 8001aba:	485d      	ldr	r0, [pc, #372]	@ (8001c30 <MPU6050_ReadAll+0x194>)
 8001abc:	f002 f9a6 	bl	8003e0c <HAL_I2C_Mem_Read>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d159      	bne.n	8001b7a <MPU6050_ReadAll+0xde>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]) - dataToProcess->accelOffsets[0];
 8001ac6:	7b3b      	ldrb	r3, [r7, #12]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]) - dataToProcess->accelOffsets[1];
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	84bb      	strh	r3, [r7, #36]	@ 0x24
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]) - dataToProcess->accelOffsets[2];
 8001b02:	7c3b      	ldrb	r3, [r7, #16]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7c7b      	ldrb	r3, [r7, #17]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	847b      	strh	r3, [r7, #34]	@ 0x22
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]) - dataToProcess->gyroOffsets[0];
 8001b20:	7d3b      	ldrb	r3, [r7, #20]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	7d7b      	ldrb	r3, [r7, #21]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	843b      	strh	r3, [r7, #32]
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]) - dataToProcess->gyroOffsets[1];
 8001b3e:	7dbb      	ldrb	r3, [r7, #22]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	83fb      	strh	r3, [r7, #30]
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]) - dataToProcess->gyroOffsets[2];
 8001b5c:	7e3b      	ldrb	r3, [r7, #24]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	7e7b      	ldrb	r3, [r7, #25]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	83bb      	strh	r3, [r7, #28]
    } else {
    	//Error handle
    }
    dataToProcess->accelX = accelX / 16384.0f;
 8001b7a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f88c 	bl	8000c9c <__aeabi_i2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f98e 	bl	8000eac <__aeabi_fdiv>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
    dataToProcess->accelY = accelY / 16384.0f;
 8001b98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f87d 	bl	8000c9c <__aeabi_i2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f97f 	bl	8000eac <__aeabi_fdiv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	605a      	str	r2, [r3, #4]
    dataToProcess->accelZ = accelZ / 16384.0f;
 8001bb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f86e 	bl	8000c9c <__aeabi_i2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f970 	bl	8000eac <__aeabi_fdiv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

    dataToProcess->gyroX = gyroX / 131.0f;
 8001bd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f85f 	bl	8000c9c <__aeabi_i2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4914      	ldr	r1, [pc, #80]	@ (8001c34 <MPU6050_ReadAll+0x198>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f962 	bl	8000eac <__aeabi_fdiv>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
    dataToProcess->gyroY = gyroY / 131.0f;
 8001bf0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f851 	bl	8000c9c <__aeabi_i2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <MPU6050_ReadAll+0x198>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f954 	bl	8000eac <__aeabi_fdiv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
    dataToProcess->gyroZ = gyroZ / 131.0f;
 8001c0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f843 	bl	8000c9c <__aeabi_i2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4906      	ldr	r1, [pc, #24]	@ (8001c34 <MPU6050_ReadAll+0x198>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f946 	bl	8000eac <__aeabi_fdiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	615a      	str	r2, [r3, #20]
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	@ 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000238 	.word	0x20000238
 8001c34:	43030000 	.word	0x43030000

08001c38 <MPU6050_CalibrateExternal>:
    		dataToProcess->gyroOffsets[2]);

    HAL_Delay(2000);
}

void MPU6050_CalibrateExternal(MPU6050_Data *dataToProcess) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    // Calculate offsets
    MPU6050_CalculateOffsets(dataToProcess->accelOffsets, dataToProcess->gyroOffsets);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0218 	add.w	r2, r3, #24
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	331e      	adds	r3, #30
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	f000 f829 	bl	8001ca4 <MPU6050_CalculateOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c60:	461a      	mov	r2, r3
    		dataToProcess->accelOffsets[2]);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <MPU6050_CalibrateExternal+0x64>)
 8001c6a:	f009 fa0f 	bl	800b08c <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c74:	4619      	mov	r1, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c7c:	461a      	mov	r2, r3
    		dataToProcess->gyroOffsets[2]);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8001c84:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <MPU6050_CalibrateExternal+0x68>)
 8001c86:	f009 fa01 	bl	800b08c <iprintf>

    HAL_Delay(2000);
 8001c8a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c8e:	f001 f8ab 	bl	8002de8 <HAL_Delay>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800ece4 	.word	0x0800ece4
 8001ca0:	0800ed08 	.word	0x0800ed08

08001ca4 <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b092      	sub	sp, #72	@ 0x48
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]

    int n = 4000;
 8001cc6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001cca:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[14];

    for (int i = 0; i < n; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	e056      	b.n	8001d80 <MPU6050_CalculateOffsets+0xdc>
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 14, HAL_MAX_DELAY) == HAL_OK) {
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	230e      	movs	r3, #14
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	223b      	movs	r2, #59	@ 0x3b
 8001ce6:	21d0      	movs	r1, #208	@ 0xd0
 8001ce8:	4840      	ldr	r0, [pc, #256]	@ (8001dec <MPU6050_CalculateOffsets+0x148>)
 8001cea:	f002 f88f 	bl	8003e0c <HAL_I2C_Mem_Read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d142      	bne.n	8001d7a <MPU6050_CalculateOffsets+0xd6>
        	accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 8001cf4:	7a3b      	ldrb	r3, [r7, #8]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	7a7b      	ldrb	r3, [r7, #9]
 8001cfc:	b21b      	sxth	r3, r3
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d06:	4413      	add	r3, r2
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
        	accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8001d0a:	7abb      	ldrb	r3, [r7, #10]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1c:	4413      	add	r3, r2
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
        	accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]) - 16384;
 8001d20:	7b3b      	ldrb	r3, [r7, #12]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	7b7b      	ldrb	r3, [r7, #13]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d34:	4413      	add	r3, r2
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	gyroX_sum  += (int16_t)((rawData[8] << 8) | rawData[9]);
 8001d38:	7c3b      	ldrb	r3, [r7, #16]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	7c7b      	ldrb	r3, [r7, #17]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4a:	4413      	add	r3, r2
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
        	gyroY_sum  += (int16_t)((rawData[10] << 8) | rawData[11]);
 8001d4e:	7cbb      	ldrb	r3, [r7, #18]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	4413      	add	r3, r2
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
        	gyroZ_sum  += (int16_t)((rawData[12] << 8) | rawData[13]);
 8001d64:	7d3b      	ldrb	r3, [r7, #20]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	7d7b      	ldrb	r3, [r7, #21]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	4413      	add	r3, r2
 8001d78:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++) {
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dba4      	blt.n	8001cd2 <MPU6050_CalculateOffsets+0x2e>
        	//Error handle
        }
    }

    // Calculate average offsets
    accelOffsets[0] = (accelX_sum / n);
 8001d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = (accelY_sum / n);
 8001d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3302      	adds	r3, #2
 8001da2:	b212      	sxth	r2, r2
 8001da4:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / n);
 8001da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fb92 f2f3 	sdiv	r2, r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3304      	adds	r3, #4
 8001db2:	b212      	sxth	r2, r2
 8001db4:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = (gyroX_sum / n);
 8001db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = (gyroY_sum / n);
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	fb92 f2f3 	sdiv	r2, r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	3302      	adds	r3, #2
 8001dd0:	b212      	sxth	r2, r2
 8001dd2:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = (gyroZ_sum / n);
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3304      	adds	r3, #4
 8001de0:	b212      	sxth	r2, r2
 8001de2:	801a      	strh	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3738      	adds	r7, #56	@ 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000238 	.word	0x20000238

08001df0 <MPU6050_SoftReset>:
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
}

void MPU6050_SoftReset(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af04      	add	r7, sp, #16
    uint8_t data_rst = 0x80; // DEVICE_RESET bit
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data_rst, 1, HAL_MAX_DELAY);
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	2301      	movs	r3, #1
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	226b      	movs	r2, #107	@ 0x6b
 8001e0c:	21d0      	movs	r1, #208	@ 0xd0
 8001e0e:	482d      	ldr	r0, [pc, #180]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e10:	f001 ff02 	bl	8003c18 <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 8001e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e18:	f000 ffe6 	bl	8002de8 <HAL_Delay>
    uint8_t data[2] = {0x00, 0x00}; // Zero offset
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	80bb      	strh	r3, [r7, #4]

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e24:	9302      	str	r3, [sp, #8]
 8001e26:	2302      	movs	r3, #2
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	2206      	movs	r2, #6
 8001e32:	21d0      	movs	r1, #208	@ 0xd0
 8001e34:	4823      	ldr	r0, [pc, #140]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e36:	f001 feef 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	21d0      	movs	r1, #208	@ 0xd0
 8001e4e:	481d      	ldr	r0, [pc, #116]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e50:	f001 fee2 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	220a      	movs	r2, #10
 8001e66:	21d0      	movs	r1, #208	@ 0xd0
 8001e68:	4816      	ldr	r0, [pc, #88]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e6a:	f001 fed5 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2213      	movs	r2, #19
 8001e80:	21d0      	movs	r1, #208	@ 0xd0
 8001e82:	4810      	ldr	r0, [pc, #64]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e84:	f001 fec8 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2302      	movs	r3, #2
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2301      	movs	r3, #1
 8001e98:	2215      	movs	r2, #21
 8001e9a:	21d0      	movs	r1, #208	@ 0xd0
 8001e9c:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001e9e:	f001 febb 	bl	8003c18 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	2217      	movs	r2, #23
 8001eb4:	21d0      	movs	r1, #208	@ 0xd0
 8001eb6:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <MPU6050_SoftReset+0xd4>)
 8001eb8:	f001 feae 	bl	8003c18 <HAL_I2C_Mem_Write>

}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000238 	.word	0x20000238

08001ec8 <OLED_Init>:

#include "oled.h"

// I2C handle

void OLED_Init(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	if (HAL_SPI_Transmit(&hspi2, 0xAA, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	21aa      	movs	r1, #170	@ 0xaa
 8001ed4:	4807      	ldr	r0, [pc, #28]	@ (8001ef4 <OLED_Init+0x2c>)
 8001ed6:	f003 fb07 	bl	80054e8 <HAL_SPI_Transmit>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <OLED_Init+0x1e>
        printf("SPI transmission error\r\n");
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <OLED_Init+0x30>)
 8001ee2:	f009 f93b 	bl	800b15c <puts>
	}

	SSD1306_Init();
 8001ee6:	f000 fa51 	bl	800238c <SSD1306_Init>
	HAL_Delay(10);
 8001eea:	200a      	movs	r0, #10
 8001eec:	f000 ff7c 	bl	8002de8 <HAL_Delay>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000028c 	.word	0x2000028c
 8001ef8:	0800ee08 	.word	0x0800ee08

08001efc <HAL_UART_TxCpltCallback>:
extern osMessageQueueId_t dataQueue;
extern osMutexId_t uartMutex;
extern osSemaphoreId_t dmaTxCompleteSemaphore;
extern void initialise_monitor_handles(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_UART_TxCpltCallback+0x24>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d104      	bne.n	8001f16 <HAL_UART_TxCpltCallback+0x1a>
        osSemaphoreRelease(dmaTxCompleteSemaphore);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <HAL_UART_TxCpltCallback+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 feb3 	bl	8006c7c <osSemaphoreRelease>

    }
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000730 	.word	0x20000730
 8001f24:	20000234 	.word	0x20000234

08001f28 <mpu6050_ReadData>:

void mpu6050_ReadData(void *argument) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0be      	sub	sp, #248	@ 0xf8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    MPU6050_Data dataToProcess;

    char buffer[200];

    OLED_Init();
 8001f30:	f7ff ffca 	bl	8001ec8 <OLED_Init>
    printf("OLED initialized\r\n");
 8001f34:	4814      	ldr	r0, [pc, #80]	@ (8001f88 <mpu6050_ReadData+0x60>)
 8001f36:	f009 f911 	bl	800b15c <puts>
    MPU6050_Init();
 8001f3a:	f7ff fceb 	bl	8001914 <MPU6050_Init>
    printf("MPU6050 initialized\r\n");
 8001f3e:	4813      	ldr	r0, [pc, #76]	@ (8001f8c <mpu6050_ReadData+0x64>)
 8001f40:	f009 f90c 	bl	800b15c <puts>
    printf("MPU6050 calibrating...\r\n");
 8001f44:	4812      	ldr	r0, [pc, #72]	@ (8001f90 <mpu6050_ReadData+0x68>)
 8001f46:	f009 f909 	bl	800b15c <puts>

    //MPU6050_CalibrateInternal(&dataToProcess);
    MPU6050_CalibrateExternal(&dataToProcess);
 8001f4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fe72 	bl	8001c38 <MPU6050_CalibrateExternal>
    printf("MPU6050 calibrated\r\n");
 8001f54:	480f      	ldr	r0, [pc, #60]	@ (8001f94 <mpu6050_ReadData+0x6c>)
 8001f56:	f009 f901 	bl	800b15c <puts>
    while (1) {
        // Read sensor data
        MPU6050_ReadAll(&dataToProcess);
 8001f5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fd9c 	bl	8001a9c <MPU6050_ReadAll>
        //} else {
            //printf("UART mutex acquire failed\r\n");
        //}

        // Send data to the queue
        if (osMessageQueuePut(dataQueue, &dataToProcess, 0, 200) != osOK) {
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <mpu6050_ReadData+0x70>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001f6c:	23c8      	movs	r3, #200	@ 0xc8
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f004 ff3c 	bl	8006dec <osMessageQueuePut>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <mpu6050_ReadData+0x58>
            printf("Queue is full\r\n");
 8001f7a:	4808      	ldr	r0, [pc, #32]	@ (8001f9c <mpu6050_ReadData+0x74>)
 8001f7c:	f009 f8ee 	bl	800b15c <puts>
        }

        osDelay(2);  // Prevent rapid polling
 8001f80:	2002      	movs	r0, #2
 8001f82:	f004 fd50 	bl	8006a26 <osDelay>
        MPU6050_ReadAll(&dataToProcess);
 8001f86:	e7e8      	b.n	8001f5a <mpu6050_ReadData+0x32>
 8001f88:	0800ee20 	.word	0x0800ee20
 8001f8c:	0800ee34 	.word	0x0800ee34
 8001f90:	0800ee4c 	.word	0x0800ee4c
 8001f94:	0800ee64 	.word	0x0800ee64
 8001f98:	2000022c 	.word	0x2000022c
 8001f9c:	0800ee78 	.word	0x0800ee78

08001fa0 <DataProcessing>:
    }
}


void DataProcessing(void *argument) {
 8001fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa4:	b0e6      	sub	sp, #408	@ 0x198
 8001fa6:	af0a      	add	r7, sp, #40	@ 0x28
 8001fa8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001fac:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001fb0:	6018      	str	r0, [r3, #0]
    float kalmanRoll;
    float kalmanPitch;
    double dt;
    char buffer[200];

    errno = 0;
 8001fb2:	f009 fd3b 	bl	800ba2c <__errno>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    FILE *filePtr = fopen("/home/patryk/Programming/STM32CubeIDE/STM32_Workspace/camera_stabilizer/Core/Src/measurements.txt", "w");
 8001fbc:	4976      	ldr	r1, [pc, #472]	@ (8002198 <DataProcessing+0x1f8>)
 8001fbe:	4877      	ldr	r0, [pc, #476]	@ (800219c <DataProcessing+0x1fc>)
 8001fc0:	f008 ffd0 	bl	800af64 <fopen>
 8001fc4:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c

    if (filePtr == NULL) {
 8001fc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d111      	bne.n	8001ff4 <DataProcessing+0x54>
         printf("Error opening file: %s (errno: %d)\n", strerror(errno), errno);
 8001fd0:	f009 fd2c 	bl	800ba2c <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f009 fc59 	bl	800b890 <strerror>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	f009 fd24 	bl	800ba2c <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4621      	mov	r1, r4
 8001fec:	486c      	ldr	r0, [pc, #432]	@ (80021a0 <DataProcessing+0x200>)
 8001fee:	f009 f84d 	bl	800b08c <iprintf>
         return 1;
 8001ff2:	e0cb      	b.n	800218c <DataProcessing+0x1ec>
     }


    fprintf(filePtr, "Kalman Pitch|Kalman Roll|Acc Pitch|Acc Roll|Gyro Pitch|Gyro Roll\r\n");
 8001ff4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ff8:	2242      	movs	r2, #66	@ 0x42
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	4869      	ldr	r0, [pc, #420]	@ (80021a4 <DataProcessing+0x204>)
 8001ffe:	f009 f837 	bl	800b070 <fwrite>

    printf("DataProcessing task started\r\n");
 8002002:	4869      	ldr	r0, [pc, #420]	@ (80021a8 <DataProcessing+0x208>)
 8002004:	f009 f8aa 	bl	800b15c <puts>


    Kalman_Init(&resultKalmanFilterPitch, 0.001f, 0.003f, 0.03f); // Initialize the Kalman filter with noise parameters
 8002008:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800200c:	4b67      	ldr	r3, [pc, #412]	@ (80021ac <DataProcessing+0x20c>)
 800200e:	4a68      	ldr	r2, [pc, #416]	@ (80021b0 <DataProcessing+0x210>)
 8002010:	4968      	ldr	r1, [pc, #416]	@ (80021b4 <DataProcessing+0x214>)
 8002012:	f7ff f849 	bl	80010a8 <Kalman_Init>
    Kalman_Init(&resultKalmanFilterRoll, 0.005f, 0.001f, 0.004f); // Initialize the Kalman filter with noise parameters
 8002016:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 800201a:	4b67      	ldr	r3, [pc, #412]	@ (80021b8 <DataProcessing+0x218>)
 800201c:	4a65      	ldr	r2, [pc, #404]	@ (80021b4 <DataProcessing+0x214>)
 800201e:	4967      	ldr	r1, [pc, #412]	@ (80021bc <DataProcessing+0x21c>)
 8002020:	f7ff f842 	bl	80010a8 <Kalman_Init>
    uint32_t prevTick = osKernelGetTickCount();  // Initialize previous tick
 8002024:	f004 fc50 	bl	80068c8 <osKernelGetTickCount>
 8002028:	4602      	mov	r2, r0
 800202a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800202e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002032:	601a      	str	r2, [r3, #0]

    while (1) {

        // Get data from queue
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 8002034:	4b62      	ldr	r3, [pc, #392]	@ (80021c0 <DataProcessing+0x220>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 800203c:	23c8      	movs	r3, #200	@ 0xc8
 800203e:	2200      	movs	r2, #0
 8002040:	f004 ff34 	bl	8006eac <osMessageQueueGet>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f4      	bne.n	8002034 <DataProcessing+0x94>
        	// Record the start time
            SSD1306_DrawString(29, 16, "Pitch", 1); // Label for pitch
 800204a:	2301      	movs	r3, #1
 800204c:	4a5d      	ldr	r2, [pc, #372]	@ (80021c4 <DataProcessing+0x224>)
 800204e:	2110      	movs	r1, #16
 8002050:	201d      	movs	r0, #29
 8002052:	f000 fb53 	bl	80026fc <SSD1306_DrawString>
            SSD1306_DrawString(69, 16, "Roll", 1); // Label for pitch
 8002056:	2301      	movs	r3, #1
 8002058:	4a5b      	ldr	r2, [pc, #364]	@ (80021c8 <DataProcessing+0x228>)
 800205a:	2110      	movs	r1, #16
 800205c:	2045      	movs	r0, #69	@ 0x45
 800205e:	f000 fb4d 	bl	80026fc <SSD1306_DrawString>

            //resultsCompFilter = complementary_filter(&resultsPRY, &receivedData, &prevTick);
//            resultsPRY = computeAnglesAcc(&receivedData);
            resultsPRY = computeAngles(&receivedData, &prevTick);
 8002062:	f107 0218 	add.w	r2, r7, #24
 8002066:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f95d 	bl	800132c <computeAngles>
 8002072:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168

            // Clear regions where pitch and roll values are displayed
            SSD1306_ClearRegion(29, 28, 40, 8); // Clear the region for pitch value
 8002076:	2308      	movs	r3, #8
 8002078:	2228      	movs	r2, #40	@ 0x28
 800207a:	211c      	movs	r1, #28
 800207c:	201d      	movs	r0, #29
 800207e:	f000 fa19 	bl	80024b4 <SSD1306_ClearRegion>
            SSD1306_ClearRegion(69, 28, 40, 8); // Clear the region for roll value
 8002082:	2308      	movs	r3, #8
 8002084:	2228      	movs	r2, #40	@ 0x28
 8002086:	211c      	movs	r1, #28
 8002088:	2045      	movs	r0, #69	@ 0x45
 800208a:	f000 fa13 	bl	80024b4 <SSD1306_ClearRegion>

            dt = computeDT(&prevTick);
 800208e:	f107 0318 	add.w	r3, r7, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe ffa6 	bl	8000fe4 <computeDT>
 8002098:	e9c7 0158 	strd	r0, r1, [r7, #352]	@ 0x160
            kalmanPitch = Kalman_Update(&resultKalmanFilterPitch, resultsPRY->pitchAcc, receivedData.gyroX, (float)dt);
 800209c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020a0:	681c      	ldr	r4, [r3, #0]
 80020a2:	f8d7 5140 	ldr.w	r5, [r7, #320]	@ 0x140
 80020a6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80020aa:	f7fe fced 	bl	8000a88 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 80020b4:	462a      	mov	r2, r5
 80020b6:	4621      	mov	r1, r4
 80020b8:	f7ff f827 	bl	800110a <Kalman_Update>
 80020bc:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
            kalmanRoll = Kalman_Update(&resultKalmanFilterRoll, resultsPRY->rollAcc, receivedData.gyroY, (float)dt);
 80020c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020c4:	685c      	ldr	r4, [r3, #4]
 80020c6:	f8d7 5144 	ldr.w	r5, [r7, #324]	@ 0x144
 80020ca:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80020ce:	f7fe fcdb 	bl	8000a88 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 80020d8:	462a      	mov	r2, r5
 80020da:	4621      	mov	r1, r4
 80020dc:	f7ff f815 	bl	800110a <Kalman_Update>
 80020e0:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
             //SSD1306_DrawFloat(29, 28, resultsCompFilter->pitch, 1, 1);
            SSD1306_DrawFloat(29, 28, kalmanPitch, 1, 1);
 80020e4:	2301      	movs	r3, #1
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80020ee:	211c      	movs	r1, #28
 80020f0:	201d      	movs	r0, #29
 80020f2:	f000 fb29 	bl	8002748 <SSD1306_DrawFloat>

            //SSD1306_DrawFloat(69, 28, resultsCompFilter->roll, 1, 1);
            SSD1306_DrawFloat(69, 28, kalmanRoll, 1, 1);
 80020f6:	2301      	movs	r3, #1
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8002100:	211c      	movs	r1, #28
 8002102:	2045      	movs	r0, #69	@ 0x45
 8002104:	f000 fb20 	bl	8002748 <SSD1306_DrawFloat>

            SSD1306_UpdateScreen();
 8002108:	f000 fa08 	bl	800251c <SSD1306_UpdateScreen>


            fprintf(filePtr, "%.2f|%.2f|%.2f|%.2f|%.2f|%.2f\r\n",
 800210c:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 8002110:	f7fe f98a 	bl	8000428 <__aeabi_f2d>
 8002114:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002118:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 800211c:	f7fe f984 	bl	8000428 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
            		kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 8002124:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002128:	681b      	ldr	r3, [r3, #0]
            fprintf(filePtr, "%.2f|%.2f|%.2f|%.2f|%.2f|%.2f\r\n",
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f97c 	bl	8000428 <__aeabi_f2d>
 8002130:	4680      	mov	r8, r0
 8002132:	4689      	mov	r9, r1
            		kalmanPitch, kalmanRoll, resultsPRY->pitchAcc, resultsPRY->rollAcc,
 8002134:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002138:	685b      	ldr	r3, [r3, #4]
            fprintf(filePtr, "%.2f|%.2f|%.2f|%.2f|%.2f|%.2f\r\n",
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f974 	bl	8000428 <__aeabi_f2d>
 8002140:	4682      	mov	sl, r0
 8002142:	468b      	mov	fp, r1
					resultsPRY->pitchGyro, resultsPRY->rollGyro);
 8002144:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002148:	689b      	ldr	r3, [r3, #8]
            fprintf(filePtr, "%.2f|%.2f|%.2f|%.2f|%.2f|%.2f\r\n",
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f96c 	bl	8000428 <__aeabi_f2d>
 8002150:	e9c7 0100 	strd	r0, r1, [r7]
					resultsPRY->pitchGyro, resultsPRY->rollGyro);
 8002154:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002158:	68db      	ldr	r3, [r3, #12]
            fprintf(filePtr, "%.2f|%.2f|%.2f|%.2f|%.2f|%.2f\r\n",
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002168:	e9d7 1200 	ldrd	r1, r2, [r7]
 800216c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002170:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002174:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002178:	e9cd 4500 	strd	r4, r5, [sp]
 800217c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002180:	4912      	ldr	r1, [pc, #72]	@ (80021cc <DataProcessing+0x22c>)
 8002182:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002186:	f008 fef5 	bl	800af74 <fiprintf>
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 800218a:	e753      	b.n	8002034 <DataProcessing+0x94>
//    		osDelay(2);  // Prevent rapid polling
        } else {
//            printf("Queue is empty\r\n");
        }
    }
}
 800218c:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002196:	bf00      	nop
 8002198:	0800ee88 	.word	0x0800ee88
 800219c:	0800ee8c 	.word	0x0800ee8c
 80021a0:	0800eef0 	.word	0x0800eef0
 80021a4:	0800ef14 	.word	0x0800ef14
 80021a8:	0800ef58 	.word	0x0800ef58
 80021ac:	3cf5c28f 	.word	0x3cf5c28f
 80021b0:	3b449ba6 	.word	0x3b449ba6
 80021b4:	3a83126f 	.word	0x3a83126f
 80021b8:	3b83126f 	.word	0x3b83126f
 80021bc:	3ba3d70a 	.word	0x3ba3d70a
 80021c0:	2000022c 	.word	0x2000022c
 80021c4:	0800ef78 	.word	0x0800ef78
 80021c8:	0800ef80 	.word	0x0800ef80
 80021cc:	0800ef88 	.word	0x0800ef88

080021d0 <MX_SPI2_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
	hspi2.Instance = SPI2;  // Specify the SPI instance (e.g., SPI2)
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <MX_SPI2_Init+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;  // Set as master
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;  // Full-duplex communication
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;  // 8-bit data frame size
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;  // Clock polarity: idle low (CPOL = 0)
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;  // Data captured on first clock edge (CPHA = 0)
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;  // Software management of NSS (CS pin handled manually)
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <MX_SPI2_Init+0x64>)
 80021fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002200:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  // Set SPI clock (adjust as needed)
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <MX_SPI2_Init+0x64>)
 8002204:	2208      	movs	r2, #8
 8002206:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;  // MSB transmitted first
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <MX_SPI2_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;  // Disable TI mode
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_SPI2_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  // Disable CRC calculation
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <MX_SPI2_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;  // Default polynomial
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_SPI2_Init+0x64>)
 800221c:	2207      	movs	r2, #7
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_SPI2_Init+0x64>)
 8002222:	f003 f8dd 	bl	80053e0 <HAL_SPI_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_SPI2_Init+0x60>
		// Initialization error handling
		Error_Handler();
 800222c:	f7ff fb6c 	bl	8001908 <Error_Handler>
	}
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000028c 	.word	0x2000028c
 8002238:	40003800 	.word	0x40003800

0800223c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a37      	ldr	r2, [pc, #220]	@ (8002334 <HAL_SPI_MspInit+0xf8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d130      	bne.n	80022be <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225c:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 8002262:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a2f      	ldr	r2, [pc, #188]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800228c:	2320      	movs	r3, #32
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4619      	mov	r1, r3
 800229e:	4827      	ldr	r0, [pc, #156]	@ (800233c <HAL_SPI_MspInit+0x100>)
 80022a0:	f001 f8ba 	bl	8003418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a4:	2340      	movs	r3, #64	@ 0x40
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	4619      	mov	r1, r3
 80022b6:	4821      	ldr	r0, [pc, #132]	@ (800233c <HAL_SPI_MspInit+0x100>)
 80022b8:	f001 f8ae 	bl	8003418 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022bc:	e036      	b.n	800232c <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <HAL_SPI_MspInit+0x104>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d131      	bne.n	800232c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d2:	61d3      	str	r3, [r2, #28]
 80022d4:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_SPI_MspInit+0xfc>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022f8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4619      	mov	r1, r3
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <HAL_SPI_MspInit+0x108>)
 800230e:	f001 f883 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002312:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0318 	add.w	r3, r7, #24
 8002324:	4619      	mov	r1, r3
 8002326:	4807      	ldr	r0, [pc, #28]	@ (8002344 <HAL_SPI_MspInit+0x108>)
 8002328:	f001 f876 	bl	8003418 <HAL_GPIO_Init>
}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013000 	.word	0x40013000
 8002338:	40021000 	.word	0x40021000
 800233c:	40010800 	.word	0x40010800
 8002340:	40003800 	.word	0x40003800
 8002344:	40010c00 	.word	0x40010c00

08002348 <SSD1306_Write>:
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_RESET);
    HAL_Delay(10);
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_SET);
}

void SSD1306_Write(uint8_t data, uint8_t cmd) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	460a      	mov	r2, r1
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	4613      	mov	r3, r2
 8002356:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, cmd == SSD1306_DATA ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	2b01      	cmp	r3, #1
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	2104      	movs	r1, #4
 8002368:	4806      	ldr	r0, [pc, #24]	@ (8002384 <SSD1306_Write+0x3c>)
 800236a:	f001 f9d9 	bl	8003720 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(SSD1306_SPI, &data, 1, HAL_MAX_DELAY);
 800236e:	1df9      	adds	r1, r7, #7
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002374:	2201      	movs	r2, #1
 8002376:	4804      	ldr	r0, [pc, #16]	@ (8002388 <SSD1306_Write+0x40>)
 8002378:	f003 f8b6 	bl	80054e8 <HAL_SPI_Transmit>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010c00 	.word	0x40010c00
 8002388:	2000028c 	.word	0x2000028c

0800238c <SSD1306_Init>:

void SSD1306_Init(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    // Reset the OLED (if the RESET pin is connected)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Replace GPIOB and PIN_2 with your RESET pin
 8002390:	2200      	movs	r2, #0
 8002392:	2102      	movs	r1, #2
 8002394:	4840      	ldr	r0, [pc, #256]	@ (8002498 <SSD1306_Init+0x10c>)
 8002396:	f001 f9c3 	bl	8003720 <HAL_GPIO_WritePin>
    HAL_Delay(10);                                        // Wait 10ms
 800239a:	200a      	movs	r0, #10
 800239c:	f000 fd24 	bl	8002de8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2102      	movs	r1, #2
 80023a4:	483c      	ldr	r0, [pc, #240]	@ (8002498 <SSD1306_Init+0x10c>)
 80023a6:	f001 f9bb 	bl	8003720 <HAL_GPIO_WritePin>

    // Initialization commands for SSD1306
    SSD1306_Write(0xAE, SSD1306_COMMAND); // Display OFF
 80023aa:	2100      	movs	r1, #0
 80023ac:	20ae      	movs	r0, #174	@ 0xae
 80023ae:	f7ff ffcb 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x20, SSD1306_COMMAND); // Set Memory Addressing Mode
 80023b2:	2100      	movs	r1, #0
 80023b4:	2020      	movs	r0, #32
 80023b6:	f7ff ffc7 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Horizontal Addressing Mode
 80023ba:	2100      	movs	r1, #0
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff ffc3 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xB0, SSD1306_COMMAND); // Set Page Start Address
 80023c2:	2100      	movs	r1, #0
 80023c4:	20b0      	movs	r0, #176	@ 0xb0
 80023c6:	f7ff ffbf 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xC8, SSD1306_COMMAND); // COM Output Scan Direction
 80023ca:	2100      	movs	r1, #0
 80023cc:	20c8      	movs	r0, #200	@ 0xc8
 80023ce:	f7ff ffbb 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Set Low Column Address
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff ffb7 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x10, SSD1306_COMMAND); // Set High Column Address
 80023da:	2100      	movs	r1, #0
 80023dc:	2010      	movs	r0, #16
 80023de:	f7ff ffb3 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Set Start Line Address
 80023e2:	2100      	movs	r1, #0
 80023e4:	2040      	movs	r0, #64	@ 0x40
 80023e6:	f7ff ffaf 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x81, SSD1306_COMMAND); // Set Contrast Control
 80023ea:	2100      	movs	r1, #0
 80023ec:	2081      	movs	r0, #129	@ 0x81
 80023ee:	f7ff ffab 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xFF, SSD1306_COMMAND); // Max contrast
 80023f2:	2100      	movs	r1, #0
 80023f4:	20ff      	movs	r0, #255	@ 0xff
 80023f6:	f7ff ffa7 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xA1, SSD1306_COMMAND); // Set Segment Re-map
 80023fa:	2100      	movs	r1, #0
 80023fc:	20a1      	movs	r0, #161	@ 0xa1
 80023fe:	f7ff ffa3 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xA6, SSD1306_COMMAND); // Set Normal Display
 8002402:	2100      	movs	r1, #0
 8002404:	20a6      	movs	r0, #166	@ 0xa6
 8002406:	f7ff ff9f 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xA8, SSD1306_COMMAND); // Set Multiplex Ratio
 800240a:	2100      	movs	r1, #0
 800240c:	20a8      	movs	r0, #168	@ 0xa8
 800240e:	f7ff ff9b 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x3F, SSD1306_COMMAND); // 1/64 Duty
 8002412:	2100      	movs	r1, #0
 8002414:	203f      	movs	r0, #63	@ 0x3f
 8002416:	f7ff ff97 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xA4, SSD1306_COMMAND); // Disable Entire Display ON
 800241a:	2100      	movs	r1, #0
 800241c:	20a4      	movs	r0, #164	@ 0xa4
 800241e:	f7ff ff93 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xD3, SSD1306_COMMAND); // Set Display Offset
 8002422:	2100      	movs	r1, #0
 8002424:	20d3      	movs	r0, #211	@ 0xd3
 8002426:	f7ff ff8f 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // No offset
 800242a:	2100      	movs	r1, #0
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff ff8b 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xD5, SSD1306_COMMAND); // Set Display Clock Divide Ratio
 8002432:	2100      	movs	r1, #0
 8002434:	20d5      	movs	r0, #213	@ 0xd5
 8002436:	f7ff ff87 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x80, SSD1306_COMMAND); // Default clock ratio
 800243a:	2100      	movs	r1, #0
 800243c:	2080      	movs	r0, #128	@ 0x80
 800243e:	f7ff ff83 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xD9, SSD1306_COMMAND); // Set Pre-charge Period
 8002442:	2100      	movs	r1, #0
 8002444:	20d9      	movs	r0, #217	@ 0xd9
 8002446:	f7ff ff7f 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xF1, SSD1306_COMMAND); // Default pre-charge
 800244a:	2100      	movs	r1, #0
 800244c:	20f1      	movs	r0, #241	@ 0xf1
 800244e:	f7ff ff7b 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xDA, SSD1306_COMMAND); // Set COM Pins Hardware Configuration
 8002452:	2100      	movs	r1, #0
 8002454:	20da      	movs	r0, #218	@ 0xda
 8002456:	f7ff ff77 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x12, SSD1306_COMMAND); // Alternative COM pins
 800245a:	2100      	movs	r1, #0
 800245c:	2012      	movs	r0, #18
 800245e:	f7ff ff73 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xDB, SSD1306_COMMAND); // Set VCOMH Deselect Level
 8002462:	2100      	movs	r1, #0
 8002464:	20db      	movs	r0, #219	@ 0xdb
 8002466:	f7ff ff6f 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Default VCOMH
 800246a:	2100      	movs	r1, #0
 800246c:	2040      	movs	r0, #64	@ 0x40
 800246e:	f7ff ff6b 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x8D, SSD1306_COMMAND); // Enable charge pump
 8002472:	2100      	movs	r1, #0
 8002474:	208d      	movs	r0, #141	@ 0x8d
 8002476:	f7ff ff67 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0x14, SSD1306_COMMAND);
 800247a:	2100      	movs	r1, #0
 800247c:	2014      	movs	r0, #20
 800247e:	f7ff ff63 	bl	8002348 <SSD1306_Write>
    SSD1306_Write(0xAF, SSD1306_COMMAND); // Display ON
 8002482:	2100      	movs	r1, #0
 8002484:	20af      	movs	r0, #175	@ 0xaf
 8002486:	f7ff ff5f 	bl	8002348 <SSD1306_Write>

    SSD1306_Clear();
 800248a:	f000 f807 	bl	800249c <SSD1306_Clear>
    SSD1306_UpdateScreen();
 800248e:	f000 f845 	bl	800251c <SSD1306_UpdateScreen>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40010c00 	.word	0x40010c00

0800249c <SSD1306_Clear>:

void SSD1306_Clear(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    memset(SSD1306_Buffer, 0x00, sizeof(SSD1306_Buffer));
 80024a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a4:	2100      	movs	r1, #0
 80024a6:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <SSD1306_Clear+0x14>)
 80024a8:	f009 f803 	bl	800b4b2 <memset>
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200002e4 	.word	0x200002e4

080024b4 <SSD1306_ClearRegion>:

void SSD1306_ClearRegion(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	71fb      	strb	r3, [r7, #7]
 80024c6:	4603      	mov	r3, r0
 80024c8:	71bb      	strb	r3, [r7, #6]
 80024ca:	460b      	mov	r3, r1
 80024cc:	717b      	strb	r3, [r7, #5]
 80024ce:	4613      	mov	r3, r2
 80024d0:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = 0; i < width; i++) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e018      	b.n	800250a <SSD1306_ClearRegion+0x56>
        for (uint8_t j = 0; j < height; j++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	73bb      	strb	r3, [r7, #14]
 80024dc:	e00e      	b.n	80024fc <SSD1306_ClearRegion+0x48>
            SSD1306_DrawPixel(x + i, y + j, 0); // Draw black pixels
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2d8      	uxtb	r0, r3
 80024e6:	79ba      	ldrb	r2, [r7, #6]
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	4413      	add	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f000 f849 	bl	8002588 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < height; j++) {
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	3301      	adds	r3, #1
 80024fa:	73bb      	strb	r3, [r7, #14]
 80024fc:	7bba      	ldrb	r2, [r7, #14]
 80024fe:	793b      	ldrb	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d3ec      	bcc.n	80024de <SSD1306_ClearRegion+0x2a>
    for (uint8_t i = 0; i < width; i++) {
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	3301      	adds	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3e2      	bcc.n	80024d8 <SSD1306_ClearRegion+0x24>
        }
    }
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e020      	b.n	800256a <SSD1306_UpdateScreen+0x4e>
        SSD1306_Write(0xB0 + page, SSD1306_COMMAND);
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	3b50      	subs	r3, #80	@ 0x50
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff09 	bl	8002348 <SSD1306_Write>
        SSD1306_Write(0x00, SSD1306_COMMAND);
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff ff05 	bl	8002348 <SSD1306_Write>
        SSD1306_Write(0x10, SSD1306_COMMAND);
 800253e:	2100      	movs	r1, #0
 8002540:	2010      	movs	r0, #16
 8002542:	f7ff ff01 	bl	8002348 <SSD1306_Write>
        HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2104      	movs	r1, #4
 800254a:	480c      	ldr	r0, [pc, #48]	@ (800257c <SSD1306_UpdateScreen+0x60>)
 800254c:	f001 f8e8 	bl	8003720 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(SSD1306_SPI, &SSD1306_Buffer[page * SSD1306_WIDTH], SSD1306_WIDTH, HAL_MAX_DELAY);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	01db      	lsls	r3, r3, #7
 8002554:	4a0a      	ldr	r2, [pc, #40]	@ (8002580 <SSD1306_UpdateScreen+0x64>)
 8002556:	1899      	adds	r1, r3, r2
 8002558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	4809      	ldr	r0, [pc, #36]	@ (8002584 <SSD1306_UpdateScreen+0x68>)
 8002560:	f002 ffc2 	bl	80054e8 <HAL_SPI_Transmit>
    for (uint8_t page = 0; page < 8; page++) {
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	3301      	adds	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b07      	cmp	r3, #7
 800256e:	d9db      	bls.n	8002528 <SSD1306_UpdateScreen+0xc>
    }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40010c00 	.word	0x40010c00
 8002580:	200002e4 	.word	0x200002e4
 8002584:	2000028c 	.word	0x2000028c

08002588 <SSD1306_DrawPixel>:
        }
    }
}


void SSD1306_DrawPixel(uint8_t x, uint8_t y, uint8_t color) {
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db3d      	blt.n	800261e <SSD1306_DrawPixel+0x96>
 80025a2:	79bb      	ldrb	r3, [r7, #6]
 80025a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a6:	d83a      	bhi.n	800261e <SSD1306_DrawPixel+0x96>

    if (color) {
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01a      	beq.n	80025e4 <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y % 8));
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	08db      	lsrs	r3, r3, #3
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002628 <SSD1306_DrawPixel+0xa0>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2101      	movs	r1, #1
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b259      	sxtb	r1, r3
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	4603      	mov	r3, r0
 80025d8:	01db      	lsls	r3, r3, #7
 80025da:	4413      	add	r3, r2
 80025dc:	b2c9      	uxtb	r1, r1
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <SSD1306_DrawPixel+0xa0>)
 80025e0:	54d1      	strb	r1, [r2, r3]
 80025e2:	e01d      	b.n	8002620 <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	79bb      	ldrb	r3, [r7, #6]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	b2d8      	uxtb	r0, r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	4413      	add	r3, r2
 80025f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <SSD1306_DrawPixel+0xa0>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	b25a      	sxtb	r2, r3
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	b25b      	sxtb	r3, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	b25b      	sxtb	r3, r3
 800260a:	4013      	ands	r3, r2
 800260c:	b259      	sxtb	r1, r3
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	4603      	mov	r3, r0
 8002612:	01db      	lsls	r3, r3, #7
 8002614:	4413      	add	r3, r2
 8002616:	b2c9      	uxtb	r1, r1
 8002618:	4a03      	ldr	r2, [pc, #12]	@ (8002628 <SSD1306_DrawPixel+0xa0>)
 800261a:	54d1      	strb	r1, [r2, r3]
 800261c:	e000      	b.n	8002620 <SSD1306_DrawPixel+0x98>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 800261e:	bf00      	nop
    }
}
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	200002e4 	.word	0x200002e4

0800262c <SSD1306_DrawChar>:

void SSD1306_DrawChar(uint8_t x, uint8_t y, char c, uint8_t color) {
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	4603      	mov	r3, r0
 8002640:	71bb      	strb	r3, [r7, #6]
 8002642:	460b      	mov	r3, r1
 8002644:	717b      	strb	r3, [r7, #5]
 8002646:	4613      	mov	r3, r2
 8002648:	713b      	strb	r3, [r7, #4]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db4e      	blt.n	80026f0 <SSD1306_DrawChar+0xc4>
 8002652:	79bb      	ldrb	r3, [r7, #6]
 8002654:	2b3f      	cmp	r3, #63	@ 0x3f
 8002656:	d84b      	bhi.n	80026f0 <SSD1306_DrawChar+0xc4>

    if (c < 32 || c > 126) c = '?'; // Replace unsupported characters with '?'
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	2b1f      	cmp	r3, #31
 800265c:	d902      	bls.n	8002664 <SSD1306_DrawChar+0x38>
 800265e:	797b      	ldrb	r3, [r7, #5]
 8002660:	2b7e      	cmp	r3, #126	@ 0x7e
 8002662:	d901      	bls.n	8002668 <SSD1306_DrawChar+0x3c>
 8002664:	233f      	movs	r3, #63	@ 0x3f
 8002666:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e03c      	b.n	80026e8 <SSD1306_DrawChar+0xbc>
        uint8_t line = Font5x7[(c - 32) * 5 + i];
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	f1a3 0220 	sub.w	r2, r3, #32
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	4413      	add	r3, r2
 800267e:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <SSD1306_DrawChar+0xcc>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 8002684:	2300      	movs	r3, #0
 8002686:	73bb      	strb	r3, [r7, #14]
 8002688:	e028      	b.n	80026dc <SSD1306_DrawChar+0xb0>
            if (line & (1 << j)) {
 800268a:	7b7a      	ldrb	r2, [r7, #13]
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	fa42 f303 	asr.w	r3, r2, r3
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <SSD1306_DrawChar+0x88>
                SSD1306_DrawPixel(x + i, y + j, color);
 800269a:	79fa      	ldrb	r2, [r7, #7]
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	4413      	add	r3, r2
 80026a0:	b2d8      	uxtb	r0, r3
 80026a2:	79ba      	ldrb	r2, [r7, #6]
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	4413      	add	r3, r2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	793a      	ldrb	r2, [r7, #4]
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7ff ff6b 	bl	8002588 <SSD1306_DrawPixel>
 80026b2:	e010      	b.n	80026d6 <SSD1306_DrawChar+0xaa>
            } else {
                SSD1306_DrawPixel(x + i, y + j, !color);
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	4413      	add	r3, r2
 80026ba:	b2d8      	uxtb	r0, r3
 80026bc:	79ba      	ldrb	r2, [r7, #6]
 80026be:	7bbb      	ldrb	r3, [r7, #14]
 80026c0:	4413      	add	r3, r2
 80026c2:	b2d9      	uxtb	r1, r3
 80026c4:	793b      	ldrb	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	f7ff ff59 	bl	8002588 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	3301      	adds	r3, #1
 80026da:	73bb      	strb	r3, [r7, #14]
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	2b07      	cmp	r3, #7
 80026e0:	d9d3      	bls.n	800268a <SSD1306_DrawChar+0x5e>
    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	3301      	adds	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d9bf      	bls.n	800266e <SSD1306_DrawChar+0x42>
 80026ee:	e000      	b.n	80026f2 <SSD1306_DrawChar+0xc6>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 80026f0:	bf00      	nop
            }
        }
    }
}
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	0800efcc 	.word	0x0800efcc

080026fc <SSD1306_DrawString>:

void SSD1306_DrawString(uint8_t x, uint8_t y, const char* str, uint8_t color) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	603a      	str	r2, [r7, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	460b      	mov	r3, r1
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	4613      	mov	r3, r2
 8002710:	717b      	strb	r3, [r7, #5]
    while (*str) {
 8002712:	e00f      	b.n	8002734 <SSD1306_DrawString+0x38>
        SSD1306_DrawChar(x, y, *str, color);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	797b      	ldrb	r3, [r7, #5]
 800271a:	79b9      	ldrb	r1, [r7, #6]
 800271c:	79f8      	ldrb	r0, [r7, #7]
 800271e:	f7ff ff85 	bl	800262c <SSD1306_DrawChar>
        x += 6; // Move to the next character (5 pixels + 1 space)
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	3306      	adds	r3, #6
 8002726:	71fb      	strb	r3, [r7, #7]
        str++;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	603b      	str	r3, [r7, #0]
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b7a      	cmp	r3, #122	@ 0x7a
 8002732:	d804      	bhi.n	800273e <SSD1306_DrawString+0x42>
    while (*str) {
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1eb      	bne.n	8002714 <SSD1306_DrawString+0x18>
    }
}
 800273c:	e000      	b.n	8002740 <SSD1306_DrawString+0x44>
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 800273e:	bf00      	nop
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SSD1306_DrawFloat>:
    char buffer[12]; // Buffer to hold the number as a string
    snprintf(buffer, sizeof(buffer), "%d", number); // Convert number to string
    SSD1306_DrawString(x, y, buffer, color);
}

void SSD1306_DrawFloat(uint8_t x, uint8_t y, float number, uint8_t decimal_places, uint8_t color) {
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b08b      	sub	sp, #44	@ 0x2c
 800274c:	af02      	add	r7, sp, #8
 800274e:	603a      	str	r2, [r7, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	460b      	mov	r3, r1
 8002758:	71bb      	strb	r3, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	717b      	strb	r3, [r7, #5]
    char buffer[20]; // Buffer to hold the converted float as a string
    snprintf(buffer, sizeof(buffer), "%.*f", decimal_places, number); // Convert float to string
 800275e:	797c      	ldrb	r4, [r7, #5]
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7fd fe61 	bl	8000428 <__aeabi_f2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	f107 000c 	add.w	r0, r7, #12
 800276e:	e9cd 2300 	strd	r2, r3, [sp]
 8002772:	4623      	mov	r3, r4
 8002774:	4a07      	ldr	r2, [pc, #28]	@ (8002794 <SSD1306_DrawFloat+0x4c>)
 8002776:	2114      	movs	r1, #20
 8002778:	f008 fcf8 	bl	800b16c <sniprintf>
    SSD1306_DrawString(x, y, buffer, color); // Use the existing string drawing function
 800277c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002780:	f107 020c 	add.w	r2, r7, #12
 8002784:	79b9      	ldrb	r1, [r7, #6]
 8002786:	79f8      	ldrb	r0, [r7, #7]
 8002788:	f7ff ffb8 	bl	80026fc <SSD1306_DrawString>
}
 800278c:	bf00      	nop
 800278e:	3724      	adds	r7, #36	@ 0x24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	0800efac 	.word	0x0800efac

08002798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800279e:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <HAL_MspInit+0x68>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4a17      	ldr	r2, [pc, #92]	@ (8002800 <HAL_MspInit+0x68>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	4b15      	ldr	r3, [pc, #84]	@ (8002800 <HAL_MspInit+0x68>)
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <HAL_MspInit+0x68>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a11      	ldr	r2, [pc, #68]	@ (8002800 <HAL_MspInit+0x68>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]
 80027c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <HAL_MspInit+0x68>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	210f      	movs	r1, #15
 80027d2:	f06f 0001 	mvn.w	r0, #1
 80027d6:	f000 fbe0 	bl	8002f9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_MspInit+0x6c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	4a04      	ldr	r2, [pc, #16]	@ (8002804 <HAL_MspInit+0x6c>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	40010000 	.word	0x40010000

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800281e:	4b2e      	ldr	r3, [pc, #184]	@ (80028d8 <HAL_InitTick+0xd0>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	4a2d      	ldr	r2, [pc, #180]	@ (80028d8 <HAL_InitTick+0xd0>)
 8002824:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002828:	6193      	str	r3, [r2, #24]
 800282a:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_InitTick+0xd0>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f002 fd7f 	bl	8005344 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002846:	f002 fd69 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 800284a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284e:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <HAL_InitTick+0xd4>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9b      	lsrs	r3, r3, #18
 8002856:	3b01      	subs	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800285a:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_InitTick+0xd8>)
 800285c:	4a21      	ldr	r2, [pc, #132]	@ (80028e4 <HAL_InitTick+0xdc>)
 800285e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <HAL_InitTick+0xd8>)
 8002862:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002866:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002868:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <HAL_InitTick+0xd8>)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <HAL_InitTick+0xd8>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HAL_InitTick+0xd8>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_InitTick+0xd8>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002880:	4817      	ldr	r0, [pc, #92]	@ (80028e0 <HAL_InitTick+0xd8>)
 8002882:	f003 f82e 	bl	80058e2 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800288c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11b      	bne.n	80028cc <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002894:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <HAL_InitTick+0xd8>)
 8002896:	f003 f87d 	bl	8005994 <HAL_TIM_Base_Start_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80028a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028a8:	2019      	movs	r0, #25
 80028aa:	f000 fb92 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d808      	bhi.n	80028c6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	2019      	movs	r0, #25
 80028ba:	f000 fb6e 	bl	8002f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_InitTick+0xe0>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e002      	b.n	80028cc <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3730      	adds	r7, #48	@ 0x30
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	200006e4 	.word	0x200006e4
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	20000004 	.word	0x20000004

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <NMI_Handler+0x4>

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <MemManage_Handler+0x4>

08002904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <UsageFault_Handler+0x4>

08002914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <DMA1_Channel6_IRQHandler+0x10>)
 8002926:	f000 fc71 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000778 	.word	0x20000778

08002934 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <DMA1_Channel7_IRQHandler+0x10>)
 800293a:	f000 fc67 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200007bc 	.word	0x200007bc

08002948 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800294c:	4802      	ldr	r0, [pc, #8]	@ (8002958 <TIM1_UP_IRQHandler+0x10>)
 800294e:	f003 f873 	bl	8005a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200006e4 	.word	0x200006e4

0800295c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <USART2_IRQHandler+0x10>)
 8002962:	f003 fa4d 	bl	8005e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000730 	.word	0x20000730

08002970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002974:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002978:	f000 feea 	bl	8003750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <_sbrk+0x5c>)
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <_sbrk+0x60>)
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <_sbrk+0x64>)
 800299e:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <_sbrk+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b0:	f009 f83c 	bl	800ba2c <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	220c      	movs	r2, #12
 80029b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029be:	e009      	b.n	80029d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <_sbrk+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20005000 	.word	0x20005000
 80029e0:	00000400 	.word	0x00000400
 80029e4:	2000072c 	.word	0x2000072c
 80029e8:	20003fe0 	.word	0x20003fe0

080029ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 80029fe:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <MX_USART2_UART_Init+0x50>)
 8002a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a02:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a1e:	220c      	movs	r2, #12
 8002a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <MX_USART2_UART_Init+0x4c>)
 8002a30:	f003 f996 	bl	8005d60 <HAL_UART_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a3a:	f7fe ff65 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000730 	.word	0x20000730
 8002a48:	40004400 	.word	0x40004400

08002a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3f      	ldr	r2, [pc, #252]	@ (8002b64 <HAL_UART_MspInit+0x118>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d177      	bne.n	8002b5c <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a3d      	ldr	r2, [pc, #244]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a76:	61d3      	str	r3, [r2, #28]
 8002a78:	4b3b      	ldr	r3, [pc, #236]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	4b38      	ldr	r3, [pc, #224]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a37      	ldr	r2, [pc, #220]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <HAL_UART_MspInit+0x11c>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	482f      	ldr	r0, [pc, #188]	@ (8002b6c <HAL_UART_MspInit+0x120>)
 8002ab0:	f000 fcb2 	bl	8003418 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b74 <HAL_UART_MspInit+0x128>)
 8002ab8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aba:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ac8:	2280      	movs	r2, #128	@ 0x80
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad2:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ada:	2220      	movs	r2, #32
 8002adc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ade:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ae4:	4822      	ldr	r0, [pc, #136]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002ae6:	f000 fa83 	bl	8002ff0 <HAL_DMA_Init>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8002af0:	f7fe ff0a 	bl	8001908 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002af8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002afa:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_UART_MspInit+0x124>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b02:	4a1e      	ldr	r2, [pc, #120]	@ (8002b7c <HAL_UART_MspInit+0x130>)
 8002b04:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b06:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b08:	2210      	movs	r2, #16
 8002b0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b18:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002b24:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b30:	4811      	ldr	r0, [pc, #68]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b32:	f000 fa5d 	bl	8002ff0 <HAL_DMA_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002b3c:	f7fe fee4 	bl	8001908 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b44:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b46:	4a0c      	ldr	r2, [pc, #48]	@ (8002b78 <HAL_UART_MspInit+0x12c>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2105      	movs	r1, #5
 8002b50:	2026      	movs	r0, #38	@ 0x26
 8002b52:	f000 fa22 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b56:	2026      	movs	r0, #38	@ 0x26
 8002b58:	f000 fa3b 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40004400 	.word	0x40004400
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	20000778 	.word	0x20000778
 8002b74:	4002006c 	.word	0x4002006c
 8002b78:	200007bc 	.word	0x200007bc
 8002b7c:	40020080 	.word	0x40020080

08002b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b80:	f7ff ff34 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480b      	ldr	r0, [pc, #44]	@ (8002bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b86:	490c      	ldr	r1, [pc, #48]	@ (8002bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b88:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b9c:	4c09      	ldr	r4, [pc, #36]	@ (8002bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002baa:	f008 ff45 	bl	800ba38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bae:	f7fe fe3b 	bl	8001828 <main>
  bx lr
 8002bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002bbc:	0800fca0 	.word	0x0800fca0
  ldr r2, =_sbss
 8002bc0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002bc4:	20003fe0 	.word	0x20003fe0

08002bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC1_2_IRQHandler>

08002bca <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
 8002bdc:	f7fe fe94 	bl	8001908 <Error_Handler>
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e007      	b.n	8002bfa <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d9f4      	bls.n	8002bea <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	721a      	strb	r2, [r3, #8]
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1c:	b672      	cpsid	i
}
 8002c1e:	bf00      	nop
 8002c20:	f7fe fe72 	bl	8001908 <Error_Handler>
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a1b      	ldrb	r3, [r3, #8]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d905      	bls.n	8002c3c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
}
 8002c32:	bf00      	nop
 8002c34:	f7fe fe68 	bl	8001908 <Error_Handler>
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7a1b      	ldrb	r3, [r3, #8]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	b2d1      	uxtb	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	7211      	strb	r1, [r2, #8]
 8002c48:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	60fa      	str	r2, [r7, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
 8002c84:	f7fe fe40 	bl	8001908 <Error_Handler>
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7a1b      	ldrb	r3, [r3, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7a1b      	ldrb	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d905      	bls.n	8002cac <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca0:	b672      	cpsid	i
}
 8002ca2:	bf00      	nop
 8002ca4:	f7fe fe30 	bl	8001908 <Error_Handler>
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7a1b      	ldrb	r3, [r3, #8]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cc0:	bf00      	nop
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002cd8:	f008 fea8 	bl	800ba2c <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2216      	movs	r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
    return;
 8002ce2:	e016      	b.n	8002d12 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002ce4:	200c      	movs	r0, #12
 8002ce6:	f007 fad9 	bl	800a29c <malloc>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff63 	bl	8002bca <stm32_lock_init>
    return;
 8002d04:	e005      	b.n	8002d12 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d06:	b672      	cpsid	i
}
 8002d08:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002d0a:	f7fe fdfd 	bl	8001908 <Error_Handler>
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <__retarget_lock_init_recursive+0x44>
}
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <__retarget_lock_close_recursive>:
/**
  * @brief Close recursive lock
  * @param lock The lock
  */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  free(lock);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f007 fac3 	bl	800a2ac <free>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d3c:	b672      	cpsid	i
}
 8002d3e:	bf00      	nop
 8002d40:	f7fe fde2 	bl	8001908 <Error_Handler>
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff5f 	bl	8002c0e <stm32_lock_acquire>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d66:	b672      	cpsid	i
}
 8002d68:	bf00      	nop
 8002d6a:	f7fe fdcd 	bl	8001908 <Error_Handler>
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff7c 	bl	8002c72 <stm32_lock_release>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_Init+0x28>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <HAL_Init+0x28>)
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d94:	2003      	movs	r0, #3
 8002d96:	f000 f8f5 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9a:	200f      	movs	r0, #15
 8002d9c:	f7ff fd34 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fcfa 	bl	8002798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000

08002db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_IncTick+0x1c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_IncTick+0x20>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a03      	ldr	r2, [pc, #12]	@ (8002dd0 <HAL_IncTick+0x20>)
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20000008 	.word	0x20000008
 8002dd0:	20000818 	.word	0x20000818

08002dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <HAL_GetTick+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000818 	.word	0x20000818

08002de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff fff0 	bl	8002dd4 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e00:	d005      	beq.n	8002e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <HAL_Delay+0x44>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e0e:	bf00      	nop
 8002e10:	f7ff ffe0 	bl	8002dd4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f7      	bhi.n	8002e10 <HAL_Delay+0x28>
  {
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000008 	.word	0x20000008

08002e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e62:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <__NVIC_SetPriorityGrouping+0x44>)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	60d3      	str	r3, [r2, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <__NVIC_GetPriorityGrouping+0x18>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	f003 0307 	and.w	r3, r3, #7
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db0b      	blt.n	8002ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4906      	ldr	r1, [pc, #24]	@ (8002ec8 <__NVIC_EnableIRQ+0x34>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	@ (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff4f 	bl	8002e30 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff64 	bl	8002e78 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ffb2 	bl	8002f20 <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff81 	bl	8002ecc <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff57 	bl	8002e94 <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e043      	b.n	800308e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <HAL_DMA_Init+0xa8>)
 800300e:	4413      	add	r3, r2
 8003010:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Init+0xac>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <HAL_DMA_Init+0xb0>)
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800303a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800303e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	bffdfff8 	.word	0xbffdfff8
 800309c:	cccccccd 	.word	0xcccccccd
 80030a0:	40020000 	.word	0x40020000

080030a4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 020e 	bic.w	r2, r2, #14
 80030dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d005      	beq.n	8003140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2204      	movs	r2, #4
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e051      	b.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 020e 	bic.w	r2, r2, #14
 800314e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_DMA_Abort_IT+0xd4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d029      	beq.n	80031be <HAL_DMA_Abort_IT+0xa2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <HAL_DMA_Abort_IT+0xd8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <HAL_DMA_Abort_IT+0x9e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1f      	ldr	r2, [pc, #124]	@ (80031f8 <HAL_DMA_Abort_IT+0xdc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01a      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x98>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <HAL_DMA_Abort_IT+0xe0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d012      	beq.n	80031ae <HAL_DMA_Abort_IT+0x92>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1c      	ldr	r2, [pc, #112]	@ (8003200 <HAL_DMA_Abort_IT+0xe4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00a      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x8c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <HAL_DMA_Abort_IT+0xe8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d102      	bne.n	80031a2 <HAL_DMA_Abort_IT+0x86>
 800319c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80031a0:	e00e      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031a6:	e00b      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031ac:	e008      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031b2:	e005      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b8:	e002      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031ba:	2310      	movs	r3, #16
 80031bc:	e000      	b.n	80031c0 <HAL_DMA_Abort_IT+0xa4>
 80031be:	2301      	movs	r3, #1
 80031c0:	4a11      	ldr	r2, [pc, #68]	@ (8003208 <HAL_DMA_Abort_IT+0xec>)
 80031c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4798      	blx	r3
    } 
  }
  return status;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40020008 	.word	0x40020008
 80031f4:	4002001c 	.word	0x4002001c
 80031f8:	40020030 	.word	0x40020030
 80031fc:	40020044 	.word	0x40020044
 8003200:	40020058 	.word	0x40020058
 8003204:	4002006c 	.word	0x4002006c
 8003208:	40020000 	.word	0x40020000

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	2204      	movs	r2, #4
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d04f      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xc8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d04a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d107      	bne.n	800325c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a66      	ldr	r2, [pc, #408]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d029      	beq.n	80032ba <HAL_DMA_IRQHandler+0xae>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a65      	ldr	r2, [pc, #404]	@ (8003400 <HAL_DMA_IRQHandler+0x1f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xaa>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a63      	ldr	r2, [pc, #396]	@ (8003404 <HAL_DMA_IRQHandler+0x1f8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xa4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a62      	ldr	r2, [pc, #392]	@ (8003408 <HAL_DMA_IRQHandler+0x1fc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d012      	beq.n	80032aa <HAL_DMA_IRQHandler+0x9e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a60      	ldr	r2, [pc, #384]	@ (800340c <HAL_DMA_IRQHandler+0x200>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00a      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x98>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_DMA_IRQHandler+0x204>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d102      	bne.n	800329e <HAL_DMA_IRQHandler+0x92>
 8003298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800329c:	e00e      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 800329e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032a2:	e00b      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80032a8:	e008      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032ae:	e005      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032b4:	e002      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032b6:	2340      	movs	r3, #64	@ 0x40
 80032b8:	e000      	b.n	80032bc <HAL_DMA_IRQHandler+0xb0>
 80032ba:	2304      	movs	r3, #4
 80032bc:	4a55      	ldr	r2, [pc, #340]	@ (8003414 <HAL_DMA_IRQHandler+0x208>)
 80032be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8094 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	e08e      	b.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2202      	movs	r2, #2
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d056      	beq.n	8003392 <HAL_DMA_IRQHandler+0x186>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d051      	beq.n	8003392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 020a 	bic.w	r2, r2, #10
 800330a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <HAL_DMA_IRQHandler+0x1f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d029      	beq.n	8003372 <HAL_DMA_IRQHandler+0x166>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a37      	ldr	r2, [pc, #220]	@ (8003400 <HAL_DMA_IRQHandler+0x1f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_DMA_IRQHandler+0x162>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a35      	ldr	r2, [pc, #212]	@ (8003404 <HAL_DMA_IRQHandler+0x1f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x15c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a34      	ldr	r2, [pc, #208]	@ (8003408 <HAL_DMA_IRQHandler+0x1fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d012      	beq.n	8003362 <HAL_DMA_IRQHandler+0x156>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a32      	ldr	r2, [pc, #200]	@ (800340c <HAL_DMA_IRQHandler+0x200>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00a      	beq.n	800335c <HAL_DMA_IRQHandler+0x150>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a31      	ldr	r2, [pc, #196]	@ (8003410 <HAL_DMA_IRQHandler+0x204>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_DMA_IRQHandler+0x14a>
 8003350:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003354:	e00e      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800335a:	e00b      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 800335c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003360:	e008      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003366:	e005      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336c:	e002      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 800336e:	2320      	movs	r3, #32
 8003370:	e000      	b.n	8003374 <HAL_DMA_IRQHandler+0x168>
 8003372:	2302      	movs	r3, #2
 8003374:	4a27      	ldr	r2, [pc, #156]	@ (8003414 <HAL_DMA_IRQHandler+0x208>)
 8003376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d034      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003390:	e02f      	b.n	80033f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2208      	movs	r2, #8
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 020e 	bic.w	r2, r2, #14
 80033ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
    }
  }
  return;
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
}
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40020008 	.word	0x40020008
 8003400:	4002001c 	.word	0x4002001c
 8003404:	40020030 	.word	0x40020030
 8003408:	40020044 	.word	0x40020044
 800340c:	40020058 	.word	0x40020058
 8003410:	4002006c 	.word	0x4002006c
 8003414:	40020000 	.word	0x40020000

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b08b      	sub	sp, #44	@ 0x2c
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342a:	e169      	b.n	8003700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800342c:	2201      	movs	r2, #1
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 8158 	bne.w	80036fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4a9a      	ldr	r2, [pc, #616]	@ (80036b8 <HAL_GPIO_Init+0x2a0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d05e      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003454:	4a98      	ldr	r2, [pc, #608]	@ (80036b8 <HAL_GPIO_Init+0x2a0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d875      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800345a:	4a98      	ldr	r2, [pc, #608]	@ (80036bc <HAL_GPIO_Init+0x2a4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d058      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003460:	4a96      	ldr	r2, [pc, #600]	@ (80036bc <HAL_GPIO_Init+0x2a4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d86f      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003466:	4a96      	ldr	r2, [pc, #600]	@ (80036c0 <HAL_GPIO_Init+0x2a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d052      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 800346c:	4a94      	ldr	r2, [pc, #592]	@ (80036c0 <HAL_GPIO_Init+0x2a8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d869      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003472:	4a94      	ldr	r2, [pc, #592]	@ (80036c4 <HAL_GPIO_Init+0x2ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d04c      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003478:	4a92      	ldr	r2, [pc, #584]	@ (80036c4 <HAL_GPIO_Init+0x2ac>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d863      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800347e:	4a92      	ldr	r2, [pc, #584]	@ (80036c8 <HAL_GPIO_Init+0x2b0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d046      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
 8003484:	4a90      	ldr	r2, [pc, #576]	@ (80036c8 <HAL_GPIO_Init+0x2b0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d85d      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 800348a:	2b12      	cmp	r3, #18
 800348c:	d82a      	bhi.n	80034e4 <HAL_GPIO_Init+0xcc>
 800348e:	2b12      	cmp	r3, #18
 8003490:	d859      	bhi.n	8003546 <HAL_GPIO_Init+0x12e>
 8003492:	a201      	add	r2, pc, #4	@ (adr r2, 8003498 <HAL_GPIO_Init+0x80>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	08003513 	.word	0x08003513
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080034ff 	.word	0x080034ff
 80034a4:	08003541 	.word	0x08003541
 80034a8:	08003547 	.word	0x08003547
 80034ac:	08003547 	.word	0x08003547
 80034b0:	08003547 	.word	0x08003547
 80034b4:	08003547 	.word	0x08003547
 80034b8:	08003547 	.word	0x08003547
 80034bc:	08003547 	.word	0x08003547
 80034c0:	08003547 	.word	0x08003547
 80034c4:	08003547 	.word	0x08003547
 80034c8:	08003547 	.word	0x08003547
 80034cc:	08003547 	.word	0x08003547
 80034d0:	08003547 	.word	0x08003547
 80034d4:	08003547 	.word	0x08003547
 80034d8:	08003547 	.word	0x08003547
 80034dc:	080034f5 	.word	0x080034f5
 80034e0:	08003509 	.word	0x08003509
 80034e4:	4a79      	ldr	r2, [pc, #484]	@ (80036cc <HAL_GPIO_Init+0x2b4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034ea:	e02c      	b.n	8003546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	623b      	str	r3, [r7, #32]
          break;
 80034f2:	e029      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	3304      	adds	r3, #4
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e024      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	3308      	adds	r3, #8
 8003504:	623b      	str	r3, [r7, #32]
          break;
 8003506:	e01f      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	330c      	adds	r3, #12
 800350e:	623b      	str	r3, [r7, #32]
          break;
 8003510:	e01a      	b.n	8003548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800351a:	2304      	movs	r3, #4
 800351c:	623b      	str	r3, [r7, #32]
          break;
 800351e:	e013      	b.n	8003548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003528:	2308      	movs	r3, #8
 800352a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	611a      	str	r2, [r3, #16]
          break;
 8003532:	e009      	b.n	8003548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003534:	2308      	movs	r3, #8
 8003536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	615a      	str	r2, [r3, #20]
          break;
 800353e:	e003      	b.n	8003548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
          break;
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x130>
          break;
 8003546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2bff      	cmp	r3, #255	@ 0xff
 800354c:	d801      	bhi.n	8003552 <HAL_GPIO_Init+0x13a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_Init+0x13e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2bff      	cmp	r3, #255	@ 0xff
 800355c:	d802      	bhi.n	8003564 <HAL_GPIO_Init+0x14c>
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	e002      	b.n	800356a <HAL_GPIO_Init+0x152>
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	3b08      	subs	r3, #8
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	210f      	movs	r1, #15
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	431a      	orrs	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80b1 	beq.w	80036fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003598:	4b4d      	ldr	r3, [pc, #308]	@ (80036d0 <HAL_GPIO_Init+0x2b8>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4a4c      	ldr	r2, [pc, #304]	@ (80036d0 <HAL_GPIO_Init+0x2b8>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6193      	str	r3, [r2, #24]
 80035a4:	4b4a      	ldr	r3, [pc, #296]	@ (80036d0 <HAL_GPIO_Init+0x2b8>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035b0:	4a48      	ldr	r2, [pc, #288]	@ (80036d4 <HAL_GPIO_Init+0x2bc>)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	@ (80036d8 <HAL_GPIO_Init+0x2c0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <HAL_GPIO_Init+0x1ec>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3f      	ldr	r2, [pc, #252]	@ (80036dc <HAL_GPIO_Init+0x2c4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00d      	beq.n	8003600 <HAL_GPIO_Init+0x1e8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3e      	ldr	r2, [pc, #248]	@ (80036e0 <HAL_GPIO_Init+0x2c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <HAL_GPIO_Init+0x1e4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	@ (80036e4 <HAL_GPIO_Init+0x2cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_GPIO_Init+0x1e0>
 80035f4:	2303      	movs	r3, #3
 80035f6:	e006      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 80035f8:	2304      	movs	r3, #4
 80035fa:	e004      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e002      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_GPIO_Init+0x1ee>
 8003604:	2300      	movs	r3, #0
 8003606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003608:	f002 0203 	and.w	r2, r2, #3
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	4093      	lsls	r3, r2
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003616:	492f      	ldr	r1, [pc, #188]	@ (80036d4 <HAL_GPIO_Init+0x2bc>)
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3302      	adds	r3, #2
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003630:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	492c      	ldr	r1, [pc, #176]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800363e:	4b2a      	ldr	r3, [pc, #168]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	43db      	mvns	r3, r3
 8003646:	4928      	ldr	r1, [pc, #160]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003648:	4013      	ands	r3, r2
 800364a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4922      	ldr	r1, [pc, #136]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	60cb      	str	r3, [r1, #12]
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	43db      	mvns	r3, r3
 800366e:	491e      	ldr	r1, [pc, #120]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003670:	4013      	ands	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003680:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	4918      	ldr	r1, [pc, #96]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	43db      	mvns	r3, r3
 8003696:	4914      	ldr	r1, [pc, #80]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 8003698:	4013      	ands	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d021      	beq.n	80036ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036a8:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	490e      	ldr	r1, [pc, #56]	@ (80036e8 <HAL_GPIO_Init+0x2d0>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	600b      	str	r3, [r1, #0]
 80036b4:	e021      	b.n	80036fa <HAL_GPIO_Init+0x2e2>
 80036b6:	bf00      	nop
 80036b8:	10320000 	.word	0x10320000
 80036bc:	10310000 	.word	0x10310000
 80036c0:	10220000 	.word	0x10220000
 80036c4:	10210000 	.word	0x10210000
 80036c8:	10120000 	.word	0x10120000
 80036cc:	10110000 	.word	0x10110000
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40010800 	.word	0x40010800
 80036dc:	40010c00 	.word	0x40010c00
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40011400 	.word	0x40011400
 80036e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	@ (800371c <HAL_GPIO_Init+0x304>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	43db      	mvns	r3, r3
 80036f4:	4909      	ldr	r1, [pc, #36]	@ (800371c <HAL_GPIO_Init+0x304>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	3301      	adds	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	fa22 f303 	lsr.w	r3, r2, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	f47f ae8e 	bne.w	800342c <HAL_GPIO_Init+0x14>
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	372c      	adds	r7, #44	@ 0x2c
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40010400 	.word	0x40010400

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800375a:	4b08      	ldr	r3, [pc, #32]	@ (800377c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d006      	beq.n	8003774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003766:	4a05      	ldr	r2, [pc, #20]	@ (800377c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 f806 	bl	8003780 <HAL_GPIO_EXTI_Callback>
  }
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40010400 	.word	0x40010400

08003780 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e12b      	b.n	80039fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fff6 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	@ 0x24
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f8:	f001 fd7c 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 80037fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a81      	ldr	r2, [pc, #516]	@ (8003a08 <HAL_I2C_Init+0x274>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d807      	bhi.n	8003818 <HAL_I2C_Init+0x84>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4a80      	ldr	r2, [pc, #512]	@ (8003a0c <HAL_I2C_Init+0x278>)
 800380c:	4293      	cmp	r3, r2
 800380e:	bf94      	ite	ls
 8003810:	2301      	movls	r3, #1
 8003812:	2300      	movhi	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e006      	b.n	8003826 <HAL_I2C_Init+0x92>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a10 <HAL_I2C_Init+0x27c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	bf94      	ite	ls
 8003820:	2301      	movls	r3, #1
 8003822:	2300      	movhi	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0e7      	b.n	80039fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a78      	ldr	r2, [pc, #480]	@ (8003a14 <HAL_I2C_Init+0x280>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0c9b      	lsrs	r3, r3, #18
 8003838:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a6a      	ldr	r2, [pc, #424]	@ (8003a08 <HAL_I2C_Init+0x274>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d802      	bhi.n	8003868 <HAL_I2C_Init+0xd4>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3301      	adds	r3, #1
 8003866:	e009      	b.n	800387c <HAL_I2C_Init+0xe8>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a69      	ldr	r2, [pc, #420]	@ (8003a18 <HAL_I2C_Init+0x284>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	3301      	adds	r3, #1
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800388e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	495c      	ldr	r1, [pc, #368]	@ (8003a08 <HAL_I2C_Init+0x274>)
 8003898:	428b      	cmp	r3, r1
 800389a:	d819      	bhi.n	80038d0 <HAL_I2C_Init+0x13c>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e59      	subs	r1, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038b0:	400b      	ands	r3, r1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_I2C_Init+0x138>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1e59      	subs	r1, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ca:	e051      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038cc:	2304      	movs	r3, #4
 80038ce:	e04f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <HAL_I2C_Init+0x168>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e58      	subs	r0, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	e012      	b.n	8003922 <HAL_I2C_Init+0x18e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x196>
 8003926:	2301      	movs	r3, #1
 8003928:	e022      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_I2C_Init+0x1bc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1e58      	subs	r0, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	440b      	add	r3, r1
 8003940:	fbb0 f3f3 	udiv	r3, r0, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800394e:	e00f      	b.n	8003970 <HAL_I2C_Init+0x1dc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	6809      	ldr	r1, [r1, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800399e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6911      	ldr	r1, [r2, #16]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	000186a0 	.word	0x000186a0
 8003a0c:	001e847f 	.word	0x001e847f
 8003a10:	003d08ff 	.word	0x003d08ff
 8003a14:	431bde83 	.word	0x431bde83
 8003a18:	10624dd3 	.word	0x10624dd3

08003a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff f9d0 	bl	8002dd4 <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	f040 80e0 	bne.w	8003c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4970      	ldr	r1, [pc, #448]	@ (8003c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fe50 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0d3      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2C_Master_Transmit+0x50>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0cc      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d007      	beq.n	8003a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2221      	movs	r2, #33	@ 0x21
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2210      	movs	r2, #16
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	893a      	ldrh	r2, [r7, #8]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a50      	ldr	r2, [pc, #320]	@ (8003c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad4:	8979      	ldrh	r1, [r7, #10]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fc0a 	bl	80042f4 <I2C_MasterRequestWrite>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e08d      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b00:	e066      	b.n	8003bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	6a39      	ldr	r1, [r7, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 ff0e 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d107      	bne.n	8003b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06b      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_I2C_Master_Transmit+0x188>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d017      	beq.n	8003ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	6a39      	ldr	r1, [r7, #32]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 ff05 	bl	80049b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d107      	bne.n	8003bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e01a      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d194      	bne.n	8003b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000

08003c18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	4608      	mov	r0, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	461a      	mov	r2, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	817b      	strh	r3, [r7, #10]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	813b      	strh	r3, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c32:	f7ff f8cf 	bl	8002dd4 <HAL_GetTick>
 8003c36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	f040 80d9 	bne.w	8003df8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2319      	movs	r3, #25
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	496d      	ldr	r1, [pc, #436]	@ (8003e04 <HAL_I2C_Mem_Write+0x1ec>)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fd4f 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0cc      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Mem_Write+0x56>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0c5      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d007      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2221      	movs	r2, #33	@ 0x21
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2240      	movs	r2, #64	@ 0x40
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_I2C_Mem_Write+0x1f0>)
 8003cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd6:	88f8      	ldrh	r0, [r7, #6]
 8003cd8:	893a      	ldrh	r2, [r7, #8]
 8003cda:	8979      	ldrh	r1, [r7, #10]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb86 	bl	80043f8 <I2C_RequestMemoryWrite>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d052      	beq.n	8003d98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e081      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fe14 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d107      	bne.n	8003d1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11b      	bne.n	8003d98 <HAL_I2C_Mem_Write+0x180>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d017      	beq.n	8003d98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1aa      	bne.n	8003cf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fe07 	bl	80049b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d107      	bne.n	8003dc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e016      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	@ 0x30
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7fe ffd3 	bl	8002dd4 <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	f040 8250 	bne.w	80042de <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2319      	movs	r3, #25
 8003e44:	2201      	movs	r2, #1
 8003e46:	4982      	ldr	r1, [pc, #520]	@ (8004050 <HAL_I2C_Mem_Read+0x244>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fc53 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
 8003e56:	e243      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Mem_Read+0x5a>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e23c      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2222      	movs	r2, #34	@ 0x22
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	@ 0x40
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a62      	ldr	r2, [pc, #392]	@ (8004054 <HAL_I2C_Mem_Read+0x248>)
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ece:	88f8      	ldrh	r0, [r7, #6]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fb20 	bl	8004524 <I2C_RequestMemoryRead>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e1f8      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e1cc      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d11e      	bne.n	8003f64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f36:	b672      	cpsid	i
}
 8003f38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f60:	b662      	cpsie	i
}
 8003f62:	e035      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d11e      	bne.n	8003faa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f7c:	b672      	cpsid	i
}
 8003f7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fa6:	b662      	cpsie	i
}
 8003fa8:	e012      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fd0:	e172      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	f200 811f 	bhi.w	800421a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d123      	bne.n	800402c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fd2d 	bl	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e173      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800402a:	e145      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004030:	2b02      	cmp	r3, #2
 8004032:	d152      	bne.n	80040da <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	2200      	movs	r2, #0
 800403c:	4906      	ldr	r1, [pc, #24]	@ (8004058 <HAL_I2C_Mem_Read+0x24c>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fb58 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e148      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000
 8004058:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
}
 800405e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040a2:	b662      	cpsie	i
}
 80040a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040d8:	e0ee      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2200      	movs	r2, #0
 80040e2:	4981      	ldr	r1, [pc, #516]	@ (80042e8 <HAL_I2C_Mem_Read+0x4dc>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb05 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0f5      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004102:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004104:	b672      	cpsid	i
}
 8004106:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800413a:	4b6c      	ldr	r3, [pc, #432]	@ (80042ec <HAL_I2C_Mem_Read+0x4e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	08db      	lsrs	r3, r3, #3
 8004140:	4a6b      	ldr	r2, [pc, #428]	@ (80042f0 <HAL_I2C_Mem_Read+0x4e4>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0a1a      	lsrs	r2, r3, #8
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	00da      	lsls	r2, r3, #3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	3b01      	subs	r3, #1
 8004158:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d118      	bne.n	8004192 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004182:	b662      	cpsie	i
}
 8004184:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0a6      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d1d9      	bne.n	8004154 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041e2:	b662      	cpsie	i
}
 80041e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004218:	e04e      	b.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fc12 	bl	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e058      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d124      	bne.n	80042b8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	2b03      	cmp	r3, #3
 8004274:	d107      	bne.n	8004286 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f ae88 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3728      	adds	r7, #40	@ 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	00010004 	.word	0x00010004
 80042ec:	20000000 	.word	0x20000000
 80042f0:	14f8b589 	.word	0x14f8b589

080042f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	460b      	mov	r3, r1
 8004302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d006      	beq.n	800431e <I2C_MasterRequestWrite+0x2a>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d003      	beq.n	800431e <I2C_MasterRequestWrite+0x2a>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800431c:	d108      	bne.n	8004330 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e00b      	b.n	8004348 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	2b12      	cmp	r3, #18
 8004336:	d107      	bne.n	8004348 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f9cd 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	d103      	bne.n	8004378 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e035      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004384:	d108      	bne.n	8004398 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004394:	611a      	str	r2, [r3, #16]
 8004396:	e01b      	b.n	80043d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	11db      	asrs	r3, r3, #7
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0306 	and.w	r3, r3, #6
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f063 030f 	orn	r3, r3, #15
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	490e      	ldr	r1, [pc, #56]	@ (80043f0 <I2C_MasterRequestWrite+0xfc>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa16 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e010      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043c6:	897b      	ldrh	r3, [r7, #10]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4907      	ldr	r1, [pc, #28]	@ (80043f4 <I2C_MasterRequestWrite+0x100>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa06 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	00010008 	.word	0x00010008
 80043f4:	00010002 	.word	0x00010002

080043f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2200      	movs	r2, #0
 800442a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f960 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004448:	d103      	bne.n	8004452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e05f      	b.n	8004516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004456:	897b      	ldrh	r3, [r7, #10]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	492d      	ldr	r1, [pc, #180]	@ (8004520 <I2C_RequestMemoryWrite+0x128>)
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f9bb 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e04c      	b.n	8004516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004494:	6a39      	ldr	r1, [r7, #32]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa46 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d107      	bne.n	80044ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e02b      	b.n	8004516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	e021      	b.n	8004514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044d0:	893b      	ldrh	r3, [r7, #8]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fa20 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00d      	beq.n	800450a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d107      	bne.n	8004506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e005      	b.n	8004516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800450a:	893b      	ldrh	r3, [r7, #8]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	00010002 	.word	0x00010002

08004524 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	4603      	mov	r3, r0
 8004534:	817b      	strh	r3, [r7, #10]
 8004536:	460b      	mov	r3, r1
 8004538:	813b      	strh	r3, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2200      	movs	r2, #0
 8004566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f8c2 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00d      	beq.n	8004592 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004584:	d103      	bne.n	800458e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0aa      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004592:	897b      	ldrh	r3, [r7, #10]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	4952      	ldr	r1, [pc, #328]	@ (80046f0 <I2C_RequestMemoryRead+0x1cc>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f91d 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e097      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f9a8 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e076      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004600:	893b      	ldrh	r3, [r7, #8]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	e021      	b.n	8004650 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b29b      	uxth	r3, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461c:	6a39      	ldr	r1, [r7, #32]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f982 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00d      	beq.n	8004646 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	2b04      	cmp	r3, #4
 8004630:	d107      	bne.n	8004642 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e050      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004646:	893b      	ldrh	r3, [r7, #8]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004652:	6a39      	ldr	r1, [r7, #32]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f967 	bl	8004928 <I2C_WaitOnTXEFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00d      	beq.n	800467c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	2b04      	cmp	r3, #4
 8004666:	d107      	bne.n	8004678 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e035      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2200      	movs	r2, #0
 8004694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f82b 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d103      	bne.n	80046bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e013      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	4906      	ldr	r1, [pc, #24]	@ (80046f0 <I2C_RequestMemoryRead+0x1cc>)
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f886 	bl	80047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	00010002 	.word	0x00010002

080046f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004704:	e048      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800470c:	d044      	beq.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fe fb61 	bl	8002dd4 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d139      	bne.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0c1b      	lsrs	r3, r3, #16
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10d      	bne.n	800474a <I2C_WaitOnFlagUntilTimeout+0x56>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	e00c      	b.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x70>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	43da      	mvns	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4013      	ands	r3, r2
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	79fb      	ldrb	r3, [r7, #7]
 8004766:	429a      	cmp	r2, r3
 8004768:	d116      	bne.n	8004798 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e023      	b.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10d      	bne.n	80047be <I2C_WaitOnFlagUntilTimeout+0xca>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	e00c      	b.n	80047d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	43da      	mvns	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d093      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047f6:	e071      	b.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004806:	d123      	bne.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e067      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004856:	d041      	beq.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004858:	f7fe fabc 	bl	8002dd4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d302      	bcc.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d136      	bne.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10c      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e00b      	b.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	43da      	mvns	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e021      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d10c      	bne.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	43da      	mvns	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4013      	ands	r3, r2
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e00b      	b.n	8004918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	43da      	mvns	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	f47f af6d 	bne.w	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004934:	e034      	b.n	80049a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f8e3 	bl	8004b02 <I2C_IsAcknowledgeFailed>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e034      	b.n	80049b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800494c:	d028      	beq.n	80049a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fe fa41 	bl	8002dd4 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11d      	bne.n	80049a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496e:	2b80      	cmp	r3, #128	@ 0x80
 8004970:	d016      	beq.n	80049a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e007      	b.n	80049b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049aa:	2b80      	cmp	r3, #128	@ 0x80
 80049ac:	d1c3      	bne.n	8004936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049c4:	e034      	b.n	8004a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f89b 	bl	8004b02 <I2C_IsAcknowledgeFailed>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e034      	b.n	8004a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049dc:	d028      	beq.n	8004a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fe f9f9 	bl	8002dd4 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11d      	bne.n	8004a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d016      	beq.n	8004a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e007      	b.n	8004a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d1c3      	bne.n	80049c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a54:	e049      	b.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d119      	bne.n	8004a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0210 	mvn.w	r2, #16
 8004a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e030      	b.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a98:	f7fe f99c 	bl	8002dd4 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11d      	bne.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b40      	cmp	r3, #64	@ 0x40
 8004aba:	d016      	beq.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e007      	b.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d1ae      	bne.n	8004a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b18:	d11b      	bne.n	8004b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f043 0204 	orr.w	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e272      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8087 	beq.w	8004c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b80:	4b92      	ldr	r3, [pc, #584]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 030c 	and.w	r3, r3, #12
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d00c      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d112      	bne.n	8004bbe <HAL_RCC_OscConfig+0x5e>
 8004b98:	4b8c      	ldr	r3, [pc, #560]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d10b      	bne.n	8004bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba6:	4b89      	ldr	r3, [pc, #548]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d06c      	beq.n	8004c8c <HAL_RCC_OscConfig+0x12c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d168      	bne.n	8004c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e24c      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x76>
 8004bc8:	4b80      	ldr	r3, [pc, #512]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7f      	ldr	r2, [pc, #508]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e02e      	b.n	8004c34 <HAL_RCC_OscConfig+0xd4>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x98>
 8004bde:	4b7b      	ldr	r3, [pc, #492]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a7a      	ldr	r2, [pc, #488]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b78      	ldr	r3, [pc, #480]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a77      	ldr	r2, [pc, #476]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xd4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0xbc>
 8004c02:	4b72      	ldr	r3, [pc, #456]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a71      	ldr	r2, [pc, #452]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6e      	ldr	r2, [pc, #440]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xd4>
 8004c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a6a      	ldr	r2, [pc, #424]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b68      	ldr	r3, [pc, #416]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a67      	ldr	r2, [pc, #412]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f8ca 	bl	8002dd4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fe f8c6 	bl	8002dd4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e200      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b5d      	ldr	r3, [pc, #372]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xe4>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fe f8b6 	bl	8002dd4 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fe f8b2 	bl	8002dd4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	@ 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1ec      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b53      	ldr	r3, [pc, #332]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x10c>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ca6:	4b49      	ldr	r3, [pc, #292]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d11c      	bne.n	8004cec <HAL_RCC_OscConfig+0x18c>
 8004cb2:	4b46      	ldr	r3, [pc, #280]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	4b43      	ldr	r3, [pc, #268]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x176>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1c0      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4939      	ldr	r1, [pc, #228]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cea:	e03a      	b.n	8004d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d020      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf4:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fe f86b 	bl	8002dd4 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d02:	f7fe f867 	bl	8002dd4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1a1      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d14:	4b2d      	ldr	r3, [pc, #180]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d20:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4927      	ldr	r1, [pc, #156]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
 8004d34:	e015      	b.n	8004d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d36:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fe f84a 	bl	8002dd4 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d44:	f7fe f846 	bl	8002dd4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e180      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d56:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03a      	beq.n	8004de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d019      	beq.n	8004daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d76:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <HAL_RCC_OscConfig+0x274>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d7c:	f7fe f82a 	bl	8002dd4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d84:	f7fe f826 	bl	8002dd4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e160      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d96:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <HAL_RCC_OscConfig+0x26c>)
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004da2:	2001      	movs	r0, #1
 8004da4:	f000 fafe 	bl	80053a4 <RCC_Delay>
 8004da8:	e01c      	b.n	8004de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004daa:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <HAL_RCC_OscConfig+0x274>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db0:	f7fe f810 	bl	8002dd4 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db6:	e00f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fe f80c 	bl	8002dd4 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d908      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e146      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	42420000 	.word	0x42420000
 8004dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	4b92      	ldr	r3, [pc, #584]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e9      	bne.n	8004db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a6 	beq.w	8004f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df6:	4b8b      	ldr	r3, [pc, #556]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e02:	4b88      	ldr	r3, [pc, #544]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4a87      	ldr	r2, [pc, #540]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	61d3      	str	r3, [r2, #28]
 8004e0e:	4b85      	ldr	r3, [pc, #532]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b82      	ldr	r3, [pc, #520]	@ (8005028 <HAL_RCC_OscConfig+0x4c8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8005028 <HAL_RCC_OscConfig+0x4c8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005028 <HAL_RCC_OscConfig+0x4c8>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fd ffcd 	bl	8002dd4 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fd ffc9 	bl	8002dd4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b64      	cmp	r3, #100	@ 0x64
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e103      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b75      	ldr	r3, [pc, #468]	@ (8005028 <HAL_RCC_OscConfig+0x4c8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x312>
 8004e64:	4b6f      	ldr	r3, [pc, #444]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a6e      	ldr	r2, [pc, #440]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6213      	str	r3, [r2, #32]
 8004e70:	e02d      	b.n	8004ece <HAL_RCC_OscConfig+0x36e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x334>
 8004e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	4a69      	ldr	r2, [pc, #420]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	6213      	str	r3, [r2, #32]
 8004e86:	4b67      	ldr	r3, [pc, #412]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	4a66      	ldr	r2, [pc, #408]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	f023 0304 	bic.w	r3, r3, #4
 8004e90:	6213      	str	r3, [r2, #32]
 8004e92:	e01c      	b.n	8004ece <HAL_RCC_OscConfig+0x36e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	d10c      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x356>
 8004e9c:	4b61      	ldr	r3, [pc, #388]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4a60      	ldr	r2, [pc, #384]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	6213      	str	r3, [r2, #32]
 8004ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	4a5d      	ldr	r2, [pc, #372]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6213      	str	r3, [r2, #32]
 8004eb4:	e00b      	b.n	8004ece <HAL_RCC_OscConfig+0x36e>
 8004eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	4a5a      	ldr	r2, [pc, #360]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	6213      	str	r3, [r2, #32]
 8004ec2:	4b58      	ldr	r3, [pc, #352]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4a57      	ldr	r2, [pc, #348]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d015      	beq.n	8004f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd ff7d 	bl	8002dd4 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fd ff79 	bl	8002dd4 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e0b1      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ee      	beq.n	8004ede <HAL_RCC_OscConfig+0x37e>
 8004f00:	e014      	b.n	8004f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f02:	f7fd ff67 	bl	8002dd4 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fd ff63 	bl	8002dd4 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e09b      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f20:	4b40      	ldr	r3, [pc, #256]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1ee      	bne.n	8004f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f32:	4b3c      	ldr	r3, [pc, #240]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4a3b      	ldr	r2, [pc, #236]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8087 	beq.w	8005056 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f48:	4b36      	ldr	r3, [pc, #216]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 030c 	and.w	r3, r3, #12
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d061      	beq.n	8005018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d146      	bne.n	8004fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5c:	4b33      	ldr	r3, [pc, #204]	@ (800502c <HAL_RCC_OscConfig+0x4cc>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f62:	f7fd ff37 	bl	8002dd4 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fd ff33 	bl	8002dd4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e06d      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f7c:	4b29      	ldr	r3, [pc, #164]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f90:	d108      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f92:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4921      	ldr	r1, [pc, #132]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a19      	ldr	r1, [r3, #32]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	491b      	ldr	r1, [pc, #108]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x4cc>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc2:	f7fd ff07 	bl	8002dd4 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fca:	f7fd ff03 	bl	8002dd4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e03d      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fdc:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x46a>
 8004fe8:	e035      	b.n	8005056 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_RCC_OscConfig+0x4cc>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd fef0 	bl	8002dd4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd feec 	bl	8002dd4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e026      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RCC_OscConfig+0x4c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x498>
 8005016:	e01e      	b.n	8005056 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d107      	bne.n	8005030 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e019      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
 8005024:	40021000 	.word	0x40021000
 8005028:	40007000 	.word	0x40007000
 800502c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005030:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <HAL_RCC_OscConfig+0x500>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	429a      	cmp	r2, r3
 8005042:	d106      	bne.n	8005052 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d001      	beq.n	8005056 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021000 	.word	0x40021000

08005064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0d0      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d910      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b67      	ldr	r3, [pc, #412]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 0207 	bic.w	r2, r3, #7
 800508e:	4965      	ldr	r1, [pc, #404]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b63      	ldr	r3, [pc, #396]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0b8      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c0:	4b59      	ldr	r3, [pc, #356]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a58      	ldr	r2, [pc, #352]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050d8:	4b53      	ldr	r3, [pc, #332]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a52      	ldr	r2, [pc, #328]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80050e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b50      	ldr	r3, [pc, #320]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	494d      	ldr	r1, [pc, #308]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d040      	beq.n	8005184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b47      	ldr	r3, [pc, #284]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d115      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e07f      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005122:	4b41      	ldr	r3, [pc, #260]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e073      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005132:	4b3d      	ldr	r3, [pc, #244]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06b      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005142:	4b39      	ldr	r3, [pc, #228]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f023 0203 	bic.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4936      	ldr	r1, [pc, #216]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005154:	f7fd fe3e 	bl	8002dd4 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	e00a      	b.n	8005172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f7fd fe3a 	bl	8002dd4 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e053      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	4b2d      	ldr	r3, [pc, #180]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 020c 	and.w	r2, r3, #12
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	429a      	cmp	r2, r3
 8005182:	d1eb      	bne.n	800515c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005184:	4b27      	ldr	r3, [pc, #156]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d210      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	4922      	ldr	r1, [pc, #136]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e032      	b.n	800521a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	4b19      	ldr	r3, [pc, #100]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4916      	ldr	r1, [pc, #88]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051de:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	490e      	ldr	r1, [pc, #56]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051f2:	f000 f821 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051f6:	4602      	mov	r2, r0
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	490a      	ldr	r1, [pc, #40]	@ (800522c <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	5ccb      	ldrb	r3, [r1, r3]
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	4a09      	ldr	r2, [pc, #36]	@ (8005230 <HAL_RCC_ClockConfig+0x1cc>)
 800520c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800520e:	4b09      	ldr	r3, [pc, #36]	@ (8005234 <HAL_RCC_ClockConfig+0x1d0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fd faf8 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40022000 	.word	0x40022000
 8005228:	40021000 	.word	0x40021000
 800522c:	0800f1a8 	.word	0x0800f1a8
 8005230:	20000000 	.word	0x20000000
 8005234:	20000004 	.word	0x20000004

08005238 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005252:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b04      	cmp	r3, #4
 8005260:	d002      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x30>
 8005262:	2b08      	cmp	r3, #8
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0x36>
 8005266:	e027      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005268:	4b19      	ldr	r3, [pc, #100]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800526a:	613b      	str	r3, [r7, #16]
      break;
 800526c:	e027      	b.n	80052be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	0c9b      	lsrs	r3, r3, #18
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005278:	5cd3      	ldrb	r3, [r2, r3]
 800527a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	0c5b      	lsrs	r3, r3, #17
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	4a11      	ldr	r2, [pc, #68]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005292:	5cd3      	ldrb	r3, [r2, r3]
 8005294:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a0d      	ldr	r2, [pc, #52]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800529a:	fb03 f202 	mul.w	r2, r3, r2
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e004      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0c      	ldr	r2, [pc, #48]	@ (80052dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	613b      	str	r3, [r7, #16]
      break;
 80052b6:	e002      	b.n	80052be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052b8:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80052ba:	613b      	str	r3, [r7, #16]
      break;
 80052bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052be:	693b      	ldr	r3, [r7, #16]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	007a1200 	.word	0x007a1200
 80052d4:	0800f1c0 	.word	0x0800f1c0
 80052d8:	0800f1d0 	.word	0x0800f1d0
 80052dc:	003d0900 	.word	0x003d0900

080052e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b02      	ldr	r3, [pc, #8]	@ (80052f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	20000000 	.word	0x20000000

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f8:	f7ff fff2 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	@ (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	0800f1b8 	.word	0x0800f1b8

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005320:	f7ff ffde 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b05      	ldr	r3, [pc, #20]	@ (800533c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0adb      	lsrs	r3, r3, #11
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4903      	ldr	r1, [pc, #12]	@ (8005340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	0800f1b8 	.word	0x0800f1b8

08005344 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	220f      	movs	r2, #15
 8005352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005354:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_GetClockConfig+0x58>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0203 	and.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005360:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <HAL_RCC_GetClockConfig+0x58>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_RCC_GetClockConfig+0x58>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005378:	4b08      	ldr	r3, [pc, #32]	@ (800539c <HAL_RCC_GetClockConfig+0x58>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	08db      	lsrs	r3, r3, #3
 800537e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005386:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0207 	and.w	r2, r3, #7
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	40021000 	.word	0x40021000
 80053a0:	40022000 	.word	0x40022000

080053a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <RCC_Delay+0x34>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0a      	ldr	r2, [pc, #40]	@ (80053dc <RCC_Delay+0x38>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0a5b      	lsrs	r3, r3, #9
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80053c0:	bf00      	nop
  }
  while (Delay --);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f9      	bne.n	80053c0 <RCC_Delay+0x1c>
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr
 80053d8:	20000000 	.word	0x20000000
 80053dc:	10624dd3 	.word	0x10624dd3

080053e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e076      	b.n	80054e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005402:	d009      	beq.n	8005418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
 800540a:	e005      	b.n	8005418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc ff02 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0c1a      	lsrs	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f002 0204 	and.w	r2, r2, #4
 80054be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f8:	f7fd fc6c 	bl	8002dd4 <HAL_GetTick>
 80054fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d001      	beq.n	8005512 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
 8005510:	e12a      	b.n	8005768 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x36>
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e122      	b.n	8005768 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_Transmit+0x48>
 800552c:	2302      	movs	r3, #2
 800552e:	e11b      	b.n	8005768 <HAL_SPI_Transmit+0x280>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2203      	movs	r2, #3
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	88fa      	ldrh	r2, [r7, #6]
 8005550:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800557e:	d10f      	bne.n	80055a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800558e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800559e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d007      	beq.n	80055be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c6:	d152      	bne.n	800566e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_SPI_Transmit+0xee>
 80055d0:	8b7b      	ldrh	r3, [r7, #26]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d145      	bne.n	8005662 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	1c9a      	adds	r2, r3, #2
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055fa:	e032      	b.n	8005662 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b02      	cmp	r3, #2
 8005608:	d112      	bne.n	8005630 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800562e:	e018      	b.n	8005662 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005630:	f7fd fbd0 	bl	8002dd4 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d803      	bhi.n	8005648 <HAL_SPI_Transmit+0x160>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005646:	d102      	bne.n	800564e <HAL_SPI_Transmit+0x166>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e082      	b.n	8005768 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1c7      	bne.n	80055fc <HAL_SPI_Transmit+0x114>
 800566c:	e053      	b.n	8005716 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_SPI_Transmit+0x194>
 8005676:	8b7b      	ldrh	r3, [r7, #26]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d147      	bne.n	800570c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	7812      	ldrb	r2, [r2, #0]
 8005688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056a2:	e033      	b.n	800570c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d113      	bne.n	80056da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056d8:	e018      	b.n	800570c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fd fb7b 	bl	8002dd4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x20a>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x210>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e02d      	b.n	8005768 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1c6      	bne.n	80056a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f8b0 	bl	8005880 <SPI_EndRxTxTransaction>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005766:	2300      	movs	r3, #0
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005780:	f7fd fb28 	bl	8002dd4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005790:	f7fd fb20 	bl	8002dd4 <HAL_GetTick>
 8005794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005796:	4b39      	ldr	r3, [pc, #228]	@ (800587c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	015b      	lsls	r3, r3, #5
 800579c:	0d1b      	lsrs	r3, r3, #20
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a6:	e054      	b.n	8005852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057ae:	d050      	beq.n	8005852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b0:	f7fd fb10 	bl	8002dd4 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d902      	bls.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d13d      	bne.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057de:	d111      	bne.n	8005804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e8:	d004      	beq.n	80057f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f2:	d107      	bne.n	8005804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800580c:	d10f      	bne.n	800582e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800582c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e017      	b.n	8005872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3b01      	subs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	429a      	cmp	r2, r3
 8005860:	bf0c      	ite	eq
 8005862:	2301      	moveq	r3, #1
 8005864:	2300      	movne	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	429a      	cmp	r2, r3
 800586e:	d19b      	bne.n	80057a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000000 	.word	0x20000000

08005880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2201      	movs	r2, #1
 8005894:	2102      	movs	r1, #2
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff ff6a 	bl	8005770 <SPI_WaitFlagStateUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e013      	b.n	80058da <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff57 	bl	8005770 <SPI_WaitFlagStateUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e000      	b.n	80058da <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e041      	b.n	8005978 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f839 	bl	8005980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f000 f99d 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e03a      	b.n	8005a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a18      	ldr	r2, [pc, #96]	@ (8005a2c <HAL_TIM_Base_Start_IT+0x98>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d6:	d009      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0x58>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d111      	bne.n	8005a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d010      	beq.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800

08005a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0202 	mvn.w	r2, #2
 8005a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f8d1 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8c4 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8d3 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0204 	mvn.w	r2, #4
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8ab 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f89e 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f8ad 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0208 	mvn.w	r2, #8
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f885 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f878 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f887 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0310 	and.w	r3, r3, #16
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01b      	beq.n	8005b80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0210 	mvn.w	r2, #16
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2208      	movs	r2, #8
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f85f 	bl	8005c2a <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f852 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f861 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fea0 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8c3 	bl	8005d4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00c      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d007      	beq.n	8005bec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f831 	bl	8005c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0220 	mvn.w	r2, #32
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f896 	bl	8005d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a2f      	ldr	r2, [pc, #188]	@ (8005d30 <TIM_Base_SetConfig+0xd0>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a2c      	ldr	r2, [pc, #176]	@ (8005d34 <TIM_Base_SetConfig+0xd4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x30>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005d38 <TIM_Base_SetConfig+0xd8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	@ (8005d30 <TIM_Base_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d34 <TIM_Base_SetConfig+0xd4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0x62>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d38 <TIM_Base_SetConfig+0xd8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005d30 <TIM_Base_SetConfig+0xd0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f023 0201 	bic.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]
  }
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800

08005d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e042      	b.n	8005df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fc fe60 	bl	8002a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	@ 0x24
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fc75 	bl	8006694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0ba      	sub	sp, #232	@ 0xe8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fb5a 	bl	8006518 <UART_Receive_IT>
      return;
 8005e64:	e25b      	b.n	800631e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 80de 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80d1 	beq.w	800602c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
 8005eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f043 0202 	orr.w	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
 8005ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d011      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0208 	orr.w	r2, r3, #8
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 81f2 	beq.w	8006314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d008      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fae5 	bl	8006518 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_UART_IRQHandler+0x17a>
 8005f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d04f      	beq.n	800601a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9ef 	bl	800635e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d041      	beq.n	8006012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1d9      	bne.n	8005f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d013      	beq.n	800600a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80061e0 <HAL_UART_IRQHandler+0x3e0>)
 8005fe8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd f894 	bl	800311c <HAL_DMA_Abort_IT>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00e      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f993 	bl	8006336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e00a      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f98f 	bl	8006336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e006      	b.n	8006028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f98b 	bl	8006336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006026:	e175      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	bf00      	nop
    return;
 800602a:	e173      	b.n	8006314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 814f 	bne.w	80062d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8148 	beq.w	80062d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8141 	beq.w	80062d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 80b6 	beq.w	80061e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8145 	beq.w	8006318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006096:	429a      	cmp	r2, r3
 8006098:	f080 813e 	bcs.w	8006318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	f000 8088 	beq.w	80061c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060be:	e853 3f00 	ldrex	r3, [r3]
 80060c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1d9      	bne.n	80060b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800610c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006120:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800614a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800615c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800615e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800616a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e3      	bne.n	8006138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800618e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006190:	f023 0310 	bic.w	r3, r3, #16
 8006194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fc ff72 	bl	80030a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8b6 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061dc:	e09c      	b.n	8006318 <HAL_UART_IRQHandler+0x518>
 80061de:	bf00      	nop
 80061e0:	08006423 	.word	0x08006423
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 808e 	beq.w	800631c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8089 	beq.w	800631c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	330c      	adds	r3, #12
 8006210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800621a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800622e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800623c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	623b      	str	r3, [r7, #32]
   return(result);
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006266:	633a      	str	r2, [r7, #48]	@ 0x30
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800626c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e3      	bne.n	8006242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	60fb      	str	r3, [r7, #12]
   return(result);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0310 	bic.w	r3, r3, #16
 800629e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	330c      	adds	r3, #12
 80062a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062ac:	61fa      	str	r2, [r7, #28]
 80062ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e3      	bne.n	8006288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f83b 	bl	8006348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d2:	e023      	b.n	800631c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <HAL_UART_IRQHandler+0x4f4>
 80062e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8ac 	bl	800644a <UART_Transmit_IT>
    return;
 80062f2:	e014      	b.n	800631e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00e      	beq.n	800631e <HAL_UART_IRQHandler+0x51e>
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8eb 	bl	80064e8 <UART_EndTransmit_IT>
    return;
 8006312:	e004      	b.n	800631e <HAL_UART_IRQHandler+0x51e>
    return;
 8006314:	bf00      	nop
 8006316:	e002      	b.n	800631e <HAL_UART_IRQHandler+0x51e>
      return;
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <HAL_UART_IRQHandler+0x51e>
      return;
 800631c:	bf00      	nop
  }
}
 800631e:	37e8      	adds	r7, #232	@ 0xe8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800635e:	b480      	push	{r7}
 8006360:	b095      	sub	sp, #84	@ 0x54
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800637c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006386:	643a      	str	r2, [r7, #64]	@ 0x40
 8006388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800638c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e5      	bne.n	8006366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d119      	bne.n	800640a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f023 0310 	bic.w	r3, r3, #16
 80063ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063f6:	61ba      	str	r2, [r7, #24]
 80063f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	613b      	str	r3, [r7, #16]
   return(result);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e5      	bne.n	80063d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006418:	bf00      	nop
 800641a:	3754      	adds	r7, #84	@ 0x54
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr

08006422 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f7ff ff7a 	bl	8006336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b21      	cmp	r3, #33	@ 0x21
 800645c:	d13e      	bne.n	80064dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006466:	d114      	bne.n	8006492 <UART_Transmit_IT+0x48>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d110      	bne.n	8006492 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006484:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	1c9a      	adds	r2, r3, #2
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]
 8006490:	e008      	b.n	80064a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	1c59      	adds	r1, r3, #1
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6211      	str	r1, [r2, #32]
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4619      	mov	r1, r3
 80064b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	e000      	b.n	80064de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064dc:	2302      	movs	r3, #2
  }
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fb fcf7 	bl	8001efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	@ 0x30
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b22      	cmp	r3, #34	@ 0x22
 800652a:	f040 80ae 	bne.w	800668a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006536:	d117      	bne.n	8006568 <UART_Receive_IT+0x50>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d113      	bne.n	8006568 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006540:	2300      	movs	r3, #0
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	b29a      	uxth	r2, r3
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	629a      	str	r2, [r3, #40]	@ 0x28
 8006566:	e026      	b.n	80065b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800656e:	2300      	movs	r3, #0
 8006570:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657a:	d007      	beq.n	800658c <UART_Receive_IT+0x74>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <UART_Receive_IT+0x82>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e008      	b.n	80065ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4619      	mov	r1, r3
 80065c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d15d      	bne.n	8006686 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0220 	bic.w	r2, r2, #32
 80065d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	2b01      	cmp	r3, #1
 800660e:	d135      	bne.n	800667c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	613b      	str	r3, [r7, #16]
   return(result);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f023 0310 	bic.w	r3, r3, #16
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006636:	623a      	str	r2, [r7, #32]
 8006638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	61bb      	str	r3, [r7, #24]
   return(result);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e5      	bne.n	8006616 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b10      	cmp	r3, #16
 8006656:	d10a      	bne.n	800666e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff fe67 	bl	8006348 <HAL_UARTEx_RxEventCallback>
 800667a:	e002      	b.n	8006682 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff fe51 	bl	8006324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e002      	b.n	800668c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800668a:	2302      	movs	r3, #2
  }
}
 800668c:	4618      	mov	r0, r3
 800668e:	3730      	adds	r7, #48	@ 0x30
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80066ce:	f023 030c 	bic.w	r3, r3, #12
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	430b      	orrs	r3, r1
 80066da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2c      	ldr	r2, [pc, #176]	@ (80067a8 <UART_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d103      	bne.n	8006704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe fe0e 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	e002      	b.n	800670a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006704:	f7fe fdf6 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8006708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009a      	lsls	r2, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	4a22      	ldr	r2, [pc, #136]	@ (80067ac <UART_SetConfig+0x118>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	0119      	lsls	r1, r3, #4
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009a      	lsls	r2, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006740:	4b1a      	ldr	r3, [pc, #104]	@ (80067ac <UART_SetConfig+0x118>)
 8006742:	fba3 0302 	umull	r0, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	2064      	movs	r0, #100	@ 0x64
 800674a:	fb00 f303 	mul.w	r3, r0, r3
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	3332      	adds	r3, #50	@ 0x32
 8006754:	4a15      	ldr	r2, [pc, #84]	@ (80067ac <UART_SetConfig+0x118>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006760:	4419      	add	r1, r3
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	fbb2 f2f3 	udiv	r2, r2, r3
 8006778:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <UART_SetConfig+0x118>)
 800677a:	fba3 0302 	umull	r0, r3, r3, r2
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2064      	movs	r0, #100	@ 0x64
 8006782:	fb00 f303 	mul.w	r3, r0, r3
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	3332      	adds	r3, #50	@ 0x32
 800678c:	4a07      	ldr	r2, [pc, #28]	@ (80067ac <UART_SetConfig+0x118>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	440a      	add	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	40013800 	.word	0x40013800
 80067ac:	51eb851f 	.word	0x51eb851f

080067b0 <__NVIC_SetPriority>:
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	6039      	str	r1, [r7, #0]
 80067ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	db0a      	blt.n	80067da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	490c      	ldr	r1, [pc, #48]	@ (80067fc <__NVIC_SetPriority+0x4c>)
 80067ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ce:	0112      	lsls	r2, r2, #4
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	440b      	add	r3, r1
 80067d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067d8:	e00a      	b.n	80067f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	4908      	ldr	r1, [pc, #32]	@ (8006800 <__NVIC_SetPriority+0x50>)
 80067e0:	79fb      	ldrb	r3, [r7, #7]
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	3b04      	subs	r3, #4
 80067e8:	0112      	lsls	r2, r2, #4
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	440b      	add	r3, r1
 80067ee:	761a      	strb	r2, [r3, #24]
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e100 	.word	0xe000e100
 8006800:	e000ed00 	.word	0xe000ed00

08006804 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <SysTick_Handler+0x1c>)
 800680a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800680c:	f002 fa42 	bl	8008c94 <xTaskGetSchedulerState>
 8006810:	4603      	mov	r3, r0
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006816:	f002 ffe7 	bl	80097e8 <xPortSysTickHandler>
  }
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	e000e010 	.word	0xe000e010

08006824 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006828:	2100      	movs	r1, #0
 800682a:	f06f 0004 	mvn.w	r0, #4
 800682e:	f7ff ffbf 	bl	80067b0 <__NVIC_SetPriority>
#endif
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800683e:	f3ef 8305 	mrs	r3, IPSR
 8006842:	603b      	str	r3, [r7, #0]
  return(result);
 8006844:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800684a:	f06f 0305 	mvn.w	r3, #5
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	e00c      	b.n	800686c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <osKernelInitialize+0x40>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d105      	bne.n	8006866 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800685a:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <osKernelInitialize+0x40>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006860:	2300      	movs	r3, #0
 8006862:	607b      	str	r3, [r7, #4]
 8006864:	e002      	b.n	800686c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800686a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800686c:	687b      	ldr	r3, [r7, #4]
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	2000081c 	.word	0x2000081c

0800687c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006882:	f3ef 8305 	mrs	r3, IPSR
 8006886:	603b      	str	r3, [r7, #0]
  return(result);
 8006888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <osKernelStart+0x1a>
    stat = osErrorISR;
 800688e:	f06f 0305 	mvn.w	r3, #5
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	e010      	b.n	80068b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006896:	4b0b      	ldr	r3, [pc, #44]	@ (80068c4 <osKernelStart+0x48>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d109      	bne.n	80068b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800689e:	f7ff ffc1 	bl	8006824 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068a2:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <osKernelStart+0x48>)
 80068a4:	2202      	movs	r2, #2
 80068a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068a8:	f001 fd82 	bl	80083b0 <vTaskStartScheduler>
      stat = osOK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	607b      	str	r3, [r7, #4]
 80068b0:	e002      	b.n	80068b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2000081c 	.word	0x2000081c

080068c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ce:	f3ef 8305 	mrs	r3, IPSR
 80068d2:	603b      	str	r3, [r7, #0]
  return(result);
 80068d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80068da:	f001 fe93 	bl	8008604 <xTaskGetTickCountFromISR>
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	e002      	b.n	80068e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80068e2:	f001 fe81 	bl	80085e8 <xTaskGetTickCount>
 80068e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80068e8:	687b      	ldr	r3, [r7, #4]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80068f2:	b480      	push	{r7}
 80068f4:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80068f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr

08006902 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006902:	b580      	push	{r7, lr}
 8006904:	b08e      	sub	sp, #56	@ 0x38
 8006906:	af04      	add	r7, sp, #16
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006912:	f3ef 8305 	mrs	r3, IPSR
 8006916:	617b      	str	r3, [r7, #20]
  return(result);
 8006918:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800691a:	2b00      	cmp	r3, #0
 800691c:	d17e      	bne.n	8006a1c <osThreadNew+0x11a>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d07b      	beq.n	8006a1c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006924:	2380      	movs	r3, #128	@ 0x80
 8006926:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006928:	2318      	movs	r3, #24
 800692a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006934:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d045      	beq.n	80069c8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <osThreadNew+0x48>
        name = attr->name;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <osThreadNew+0x6e>
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	2b38      	cmp	r3, #56	@ 0x38
 8006962:	d805      	bhi.n	8006970 <osThreadNew+0x6e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <osThreadNew+0x72>
        return (NULL);
 8006970:	2300      	movs	r3, #0
 8006972:	e054      	b.n	8006a1e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	089b      	lsrs	r3, r3, #2
 8006982:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00e      	beq.n	80069aa <osThreadNew+0xa8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	2ba7      	cmp	r3, #167	@ 0xa7
 8006992:	d90a      	bls.n	80069aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <osThreadNew+0xa8>
        mem = 1;
 80069a4:	2301      	movs	r3, #1
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e010      	b.n	80069cc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <osThreadNew+0xca>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <osThreadNew+0xca>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <osThreadNew+0xca>
          mem = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	e001      	b.n	80069cc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d110      	bne.n	80069f4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069da:	9202      	str	r2, [sp, #8]
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6a3a      	ldr	r2, [r7, #32]
 80069e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 faed 	bl	8007fc8 <xTaskCreateStatic>
 80069ee:	4603      	mov	r3, r0
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e013      	b.n	8006a1c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d110      	bne.n	8006a1c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 fb3b 	bl	8008088 <xTaskCreate>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d001      	beq.n	8006a1c <osThreadNew+0x11a>
            hTask = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a1c:	693b      	ldr	r3, [r7, #16]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3728      	adds	r7, #40	@ 0x28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <osDelay+0x1c>
    stat = osErrorISR;
 8006a3a:	f06f 0305 	mvn.w	r3, #5
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e007      	b.n	8006a52 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fc79 	bl	8008344 <vTaskDelay>
    }
  }

  return (stat);
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a68:	f3ef 8305 	mrs	r3, IPSR
 8006a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a6e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d174      	bne.n	8006b5e <osMutexNew+0x102>
    if (attr != NULL) {
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e001      	b.n	8006a86 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <osMutexNew+0x3a>
      rmtx = 1U;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e001      	b.n	8006a9a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d15c      	bne.n	8006b5e <osMutexNew+0x102>
      mem = -1;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006aa8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d006      	beq.n	8006ac6 <osMutexNew+0x6a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b4f      	cmp	r3, #79	@ 0x4f
 8006abe:	d902      	bls.n	8006ac6 <osMutexNew+0x6a>
          mem = 1;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	e00c      	b.n	8006ae0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d108      	bne.n	8006ae0 <osMutexNew+0x84>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <osMutexNew+0x84>
            mem = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e001      	b.n	8006ae0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d112      	bne.n	8006b0c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4619      	mov	r1, r3
 8006af2:	2004      	movs	r0, #4
 8006af4:	f000 fc91 	bl	800741a <xQueueCreateMutexStatic>
 8006af8:	61f8      	str	r0, [r7, #28]
 8006afa:	e016      	b.n	8006b2a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2001      	movs	r0, #1
 8006b04:	f000 fc89 	bl	800741a <xQueueCreateMutexStatic>
 8006b08:	61f8      	str	r0, [r7, #28]
 8006b0a:	e00e      	b.n	8006b2a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b18:	2004      	movs	r0, #4
 8006b1a:	f000 fc66 	bl	80073ea <xQueueCreateMutex>
 8006b1e:	61f8      	str	r0, [r7, #28]
 8006b20:	e003      	b.n	8006b2a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006b22:	2001      	movs	r0, #1
 8006b24:	f000 fc61 	bl	80073ea <xQueueCreateMutex>
 8006b28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <osMutexNew+0xee>
        if (attr != NULL) {
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osMutexNew+0xe2>
          name = attr->name;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	e001      	b.n	8006b42 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	69f8      	ldr	r0, [r7, #28]
 8006b46:	f001 f9b9 	bl	8007ebc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <osMutexNew+0x102>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006b5e:	69fb      	ldr	r3, [r7, #28]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	@ 0x28
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b78:	f3ef 8305 	mrs	r3, IPSR
 8006b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d175      	bne.n	8006c70 <osSemaphoreNew+0x108>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d072      	beq.n	8006c70 <osSemaphoreNew+0x108>
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d86e      	bhi.n	8006c70 <osSemaphoreNew+0x108>
    mem = -1;
 8006b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d015      	beq.n	8006bca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d006      	beq.n	8006bb4 <osSemaphoreNew+0x4c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	2b4f      	cmp	r3, #79	@ 0x4f
 8006bac:	d902      	bls.n	8006bb4 <osSemaphoreNew+0x4c>
        mem = 1;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e00c      	b.n	8006bce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <osSemaphoreNew+0x66>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <osSemaphoreNew+0x66>
          mem = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e001      	b.n	8006bce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd4:	d04c      	beq.n	8006c70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d128      	bne.n	8006c2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d10a      	bne.n	8006bf8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	2203      	movs	r2, #3
 8006be8:	9200      	str	r2, [sp, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	2001      	movs	r0, #1
 8006bf0:	f000 fb06 	bl	8007200 <xQueueGenericCreateStatic>
 8006bf4:	61f8      	str	r0, [r7, #28]
 8006bf6:	e005      	b.n	8006c04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	f000 fb7c 	bl	80072fa <xQueueGenericCreate>
 8006c02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d022      	beq.n	8006c50 <osSemaphoreNew+0xe8>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01f      	beq.n	8006c50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	69f8      	ldr	r0, [r7, #28]
 8006c18:	f000 fc88 	bl	800752c <xQueueGenericSend>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d016      	beq.n	8006c50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006c22:	69f8      	ldr	r0, [r7, #28]
 8006c24:	f001 f816 	bl	8007c54 <vQueueDelete>
            hSemaphore = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e010      	b.n	8006c50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d108      	bne.n	8006c46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fc07 	bl	8007450 <xQueueCreateCountingSemaphoreStatic>
 8006c42:	61f8      	str	r0, [r7, #28]
 8006c44:	e004      	b.n	8006c50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fc3a 	bl	80074c2 <xQueueCreateCountingSemaphore>
 8006c4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e001      	b.n	8006c68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c68:	6979      	ldr	r1, [r7, #20]
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f001 f926 	bl	8007ebc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006c70:	69fb      	ldr	r3, [r7, #28]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006c92:	f06f 0303 	mvn.w	r3, #3
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e02c      	b.n	8006cf4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c9a:	f3ef 8305 	mrs	r3, IPSR
 8006c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01a      	beq.n	8006cdc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f000 fddb 	bl	800786c <xQueueGiveFromISR>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d003      	beq.n	8006cc4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006cbc:	f06f 0302 	mvn.w	r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	e017      	b.n	8006cf4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <osSemaphoreRelease+0x78>
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <osSemaphoreRelease+0x84>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	e00b      	b.n	8006cf4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f000 fc22 	bl	800752c <xQueueGenericSend>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d002      	beq.n	8006cf4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006cee:	f06f 0302 	mvn.w	r3, #2
 8006cf2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006cf4:	697b      	ldr	r3, [r7, #20]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	@ 0x28
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d14:	f3ef 8305 	mrs	r3, IPSR
 8006d18:	613b      	str	r3, [r7, #16]
  return(result);
 8006d1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d15f      	bne.n	8006de0 <osMessageQueueNew+0xdc>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d05c      	beq.n	8006de0 <osMessageQueueNew+0xdc>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d059      	beq.n	8006de0 <osMessageQueueNew+0xdc>
    mem = -1;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d029      	beq.n	8006d8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <osMessageQueueNew+0x62>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b4f      	cmp	r3, #79	@ 0x4f
 8006d46:	d90e      	bls.n	8006d66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00a      	beq.n	8006d66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d302      	bcc.n	8006d66 <osMessageQueueNew+0x62>
        mem = 1;
 8006d60:	2301      	movs	r3, #1
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e014      	b.n	8006d90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d110      	bne.n	8006d90 <osMessageQueueNew+0x8c>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10c      	bne.n	8006d90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <osMessageQueueNew+0x8c>
          mem = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e001      	b.n	8006d90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d10b      	bne.n	8006dae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2100      	movs	r1, #0
 8006da0:	9100      	str	r1, [sp, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fa2b 	bl	8007200 <xQueueGenericCreateStatic>
 8006daa:	61f8      	str	r0, [r7, #28]
 8006dac:	e008      	b.n	8006dc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d105      	bne.n	8006dc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006db4:	2200      	movs	r2, #0
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fa9e 	bl	80072fa <xQueueGenericCreate>
 8006dbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e001      	b.n	8006dd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	69f8      	ldr	r0, [r7, #28]
 8006ddc:	f001 f86e 	bl	8007ebc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006de0:	69fb      	ldr	r3, [r7, #28]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e04:	f3ef 8305 	mrs	r3, IPSR
 8006e08:	617b      	str	r3, [r7, #20]
  return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d028      	beq.n	8006e62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <osMessageQueuePut+0x36>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <osMessageQueuePut+0x36>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006e22:	f06f 0303 	mvn.w	r3, #3
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	e038      	b.n	8006e9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006e2e:	f107 0210 	add.w	r2, r7, #16
 8006e32:	2300      	movs	r3, #0
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f000 fc7a 	bl	8007730 <xQueueGenericSendFromISR>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006e42:	f06f 0302 	mvn.w	r3, #2
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	e028      	b.n	8006e9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d025      	beq.n	8006e9c <osMessageQueuePut+0xb0>
 8006e50:	4b15      	ldr	r3, [pc, #84]	@ (8006ea8 <osMessageQueuePut+0xbc>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	e01c      	b.n	8006e9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <osMessageQueuePut+0x82>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d103      	bne.n	8006e76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006e6e:	f06f 0303 	mvn.w	r3, #3
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	e012      	b.n	8006e9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e76:	2300      	movs	r3, #0
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	69b8      	ldr	r0, [r7, #24]
 8006e7e:	f000 fb55 	bl	800752c <xQueueGenericSend>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d009      	beq.n	8006e9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006e8e:	f06f 0301 	mvn.w	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e002      	b.n	8006e9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006e96:	f06f 0302 	mvn.w	r3, #2
 8006e9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec2:	f3ef 8305 	mrs	r3, IPSR
 8006ec6:	617b      	str	r3, [r7, #20]
  return(result);
 8006ec8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d028      	beq.n	8006f20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <osMessageQueueGet+0x34>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <osMessageQueueGet+0x34>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006ee0:	f06f 0303 	mvn.w	r3, #3
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e037      	b.n	8006f58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006eec:	f107 0310 	add.w	r3, r7, #16
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	69b8      	ldr	r0, [r7, #24]
 8006ef6:	f000 fe2b 	bl	8007b50 <xQueueReceiveFromISR>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d003      	beq.n	8006f08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f00:	f06f 0302 	mvn.w	r3, #2
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e027      	b.n	8006f58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d024      	beq.n	8006f58 <osMessageQueueGet+0xac>
 8006f0e:	4b15      	ldr	r3, [pc, #84]	@ (8006f64 <osMessageQueueGet+0xb8>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	e01b      	b.n	8006f58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <osMessageQueueGet+0x80>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006f2c:	f06f 0303 	mvn.w	r3, #3
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	e011      	b.n	8006f58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	69b8      	ldr	r0, [r7, #24]
 8006f3a:	f000 fd27 	bl	800798c <xQueueReceive>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d009      	beq.n	8006f58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006f4a:	f06f 0301 	mvn.w	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e002      	b.n	8006f58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006f52:	f06f 0302 	mvn.w	r3, #2
 8006f56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f58:	69fb      	ldr	r3, [r7, #28]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4a06      	ldr	r2, [pc, #24]	@ (8006f90 <vApplicationGetIdleTaskMemory+0x28>)
 8006f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4a05      	ldr	r2, [pc, #20]	@ (8006f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2280      	movs	r2, #128	@ 0x80
 8006f84:	601a      	str	r2, [r3, #0]
}
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bc80      	pop	{r7}
 8006f8e:	4770      	bx	lr
 8006f90:	20000820 	.word	0x20000820
 8006f94:	200008c8 	.word	0x200008c8

08006f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4a07      	ldr	r2, [pc, #28]	@ (8006fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a06      	ldr	r2, [pc, #24]	@ (8006fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fb6:	601a      	str	r2, [r3, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bc80      	pop	{r7}
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000ac8 	.word	0x20000ac8
 8006fc8:	20000b70 	.word	0x20000b70

08006fcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f103 0208 	add.w	r2, r3, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f103 0208 	add.w	r2, r3, #8
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f103 0208 	add.w	r2, r3, #8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr

0800700a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr

08007022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	bf00      	nop
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	bc80      	pop	{r7}
 8007066:	4770      	bx	lr

08007068 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800707e:	d103      	bne.n	8007088 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e00c      	b.n	80070a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3308      	adds	r3, #8
 800708c:	60fb      	str	r3, [r7, #12]
 800708e:	e002      	b.n	8007096 <vListInsert+0x2e>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d2f6      	bcs.n	8007090 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	601a      	str	r2, [r3, #0]
}
 80070ce:	bf00      	nop
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6892      	ldr	r2, [r2, #8]
 80070ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6852      	ldr	r2, [r2, #4]
 80070f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d103      	bne.n	800710c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	1e5a      	subs	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
	...

0800712c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <xQueueGenericReset+0x2c>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60bb      	str	r3, [r7, #8]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007158:	f002 fac8 	bl	80096ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	68f9      	ldr	r1, [r7, #12]
 8007166:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	441a      	add	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	3b01      	subs	r3, #1
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	22ff      	movs	r2, #255	@ 0xff
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	22ff      	movs	r2, #255	@ 0xff
 80071a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d114      	bne.n	80071d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01a      	beq.n	80071ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3310      	adds	r3, #16
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 fba4 	bl	8008908 <xTaskRemoveFromEventList>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d012      	beq.n	80071ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071c6:	4b0d      	ldr	r3, [pc, #52]	@ (80071fc <xQueueGenericReset+0xd0>)
 80071c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	e009      	b.n	80071ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3310      	adds	r3, #16
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fef5 	bl	8006fcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3324      	adds	r3, #36	@ 0x24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fef0 	bl	8006fcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071ec:	f002 faae 	bl	800974c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071f0:	2301      	movs	r3, #1
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08e      	sub	sp, #56	@ 0x38
 8007204:	af02      	add	r7, sp, #8
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	e7fd      	b.n	8007228 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10b      	bne.n	800724a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <xQueueGenericCreateStatic+0x56>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <xQueueGenericCreateStatic+0x5a>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGenericCreateStatic+0x5c>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	623b      	str	r3, [r7, #32]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <xQueueGenericCreateStatic+0x84>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <xQueueGenericCreateStatic+0x88>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <xQueueGenericCreateStatic+0x8a>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	61fb      	str	r3, [r7, #28]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072a6:	2350      	movs	r3, #80	@ 0x50
 80072a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b50      	cmp	r3, #80	@ 0x50
 80072ae:	d00b      	beq.n	80072c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	61bb      	str	r3, [r7, #24]
}
 80072c2:	bf00      	nop
 80072c4:	bf00      	nop
 80072c6:	e7fd      	b.n	80072c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 f840 	bl	8007370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3730      	adds	r7, #48	@ 0x30
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b08a      	sub	sp, #40	@ 0x28
 80072fe:	af02      	add	r7, sp, #8
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	4613      	mov	r3, r2
 8007306:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <xQueueGenericCreate+0x2c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	613b      	str	r3, [r7, #16]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	3350      	adds	r3, #80	@ 0x50
 8007334:	4618      	mov	r0, r3
 8007336:	f002 fadb 	bl	80098f0 <pvPortMalloc>
 800733a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d011      	beq.n	8007366 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	3350      	adds	r3, #80	@ 0x50
 800734a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007354:	79fa      	ldrb	r2, [r7, #7]
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 f805 	bl	8007370 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007366:	69bb      	ldr	r3, [r7, #24]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e002      	b.n	8007392 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800739e:	2101      	movs	r1, #1
 80073a0:	69b8      	ldr	r0, [r7, #24]
 80073a2:	f7ff fec3 	bl	800712c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	78fa      	ldrb	r2, [r7, #3]
 80073aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073d6:	2300      	movs	r3, #0
 80073d8:	2200      	movs	r2, #0
 80073da:	2100      	movs	r1, #0
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8a5 	bl	800752c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	4603      	mov	r3, r0
 80073f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073f4:	2301      	movs	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	2300      	movs	r3, #0
 80073fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	461a      	mov	r2, r3
 8007400:	6939      	ldr	r1, [r7, #16]
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	f7ff ff79 	bl	80072fa <xQueueGenericCreate>
 8007408:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff ffd3 	bl	80073b6 <prvInitialiseMutex>

		return xNewQueue;
 8007410:	68fb      	ldr	r3, [r7, #12]
	}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800741a:	b580      	push	{r7, lr}
 800741c:	b088      	sub	sp, #32
 800741e:	af02      	add	r7, sp, #8
 8007420:	4603      	mov	r3, r0
 8007422:	6039      	str	r1, [r7, #0]
 8007424:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007426:	2301      	movs	r3, #1
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	2300      	movs	r3, #0
 800742c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2200      	movs	r2, #0
 8007436:	6939      	ldr	r1, [r7, #16]
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	f7ff fee1 	bl	8007200 <xQueueGenericCreateStatic>
 800743e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff ffb8 	bl	80073b6 <prvInitialiseMutex>

		return xNewQueue;
 8007446:	68fb      	ldr	r3, [r7, #12]
	}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	@ 0x28
 8007454:	af02      	add	r7, sp, #8
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	61bb      	str	r3, [r7, #24]
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	e7fd      	b.n	8007476 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	429a      	cmp	r2, r3
 8007480:	d90b      	bls.n	800749a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	617b      	str	r3, [r7, #20]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800749a:	2302      	movs	r3, #2
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff feab 	bl	8007200 <xQueueGenericCreateStatic>
 80074aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074b8:	69fb      	ldr	r3, [r7, #28]
	}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	613b      	str	r3, [r7, #16]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d90b      	bls.n	800750a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60fb      	str	r3, [r7, #12]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800750a:	2202      	movs	r2, #2
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fef3 	bl	80072fa <xQueueGenericCreate>
 8007514:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007522:	697b      	ldr	r3, [r7, #20]
	}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08e      	sub	sp, #56	@ 0x38
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800753a:	2300      	movs	r3, #0
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <xQueueGenericSend+0x34>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <xQueueGenericSend+0x42>
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueGenericSend+0x46>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueGenericSend+0x48>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <xQueueGenericSend+0x64>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d103      	bne.n	800759e <xQueueGenericSend+0x72>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <xQueueGenericSend+0x76>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueGenericSend+0x78>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xQueueGenericSend+0x94>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	623b      	str	r3, [r7, #32]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075c0:	f001 fb68 	bl	8008c94 <xTaskGetSchedulerState>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <xQueueGenericSend+0xa4>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <xQueueGenericSend+0xa8>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e000      	b.n	80075d6 <xQueueGenericSend+0xaa>
 80075d4:	2300      	movs	r3, #0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	61fb      	str	r3, [r7, #28]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075f2:	f002 f87b 	bl	80096ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fe:	429a      	cmp	r2, r3
 8007600:	d302      	bcc.n	8007608 <xQueueGenericSend+0xdc>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d129      	bne.n	800765c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800760e:	f000 fb45 	bl	8007c9c <prvCopyDataToQueue>
 8007612:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d010      	beq.n	800763e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	3324      	adds	r3, #36	@ 0x24
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f971 	bl	8008908 <xTaskRemoveFromEventList>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d013      	beq.n	8007654 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800762c:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <xQueueGenericSend+0x200>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	e00a      	b.n	8007654 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007644:	4b39      	ldr	r3, [pc, #228]	@ (800772c <xQueueGenericSend+0x200>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007654:	f002 f87a 	bl	800974c <vPortExitCritical>
				return pdPASS;
 8007658:	2301      	movs	r3, #1
 800765a:	e063      	b.n	8007724 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007662:	f002 f873 	bl	800974c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007666:	2300      	movs	r3, #0
 8007668:	e05c      	b.n	8007724 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800766a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	4618      	mov	r0, r3
 8007676:	f001 f9ab 	bl	80089d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800767a:	2301      	movs	r3, #1
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800767e:	f002 f865 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007682:	f000 ff05 	bl	8008490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007686:	f002 f831 	bl	80096ec <vPortEnterCritical>
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007690:	b25b      	sxtb	r3, r3
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007696:	d103      	bne.n	80076a0 <xQueueGenericSend+0x174>
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076a6:	b25b      	sxtb	r3, r3
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ac:	d103      	bne.n	80076b6 <xQueueGenericSend+0x18a>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076b6:	f002 f849 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ba:	1d3a      	adds	r2, r7, #4
 80076bc:	f107 0314 	add.w	r3, r7, #20
 80076c0:	4611      	mov	r1, r2
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 f99a 	bl	80089fc <xTaskCheckForTimeOut>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d124      	bne.n	8007718 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076d0:	f000 fbdc 	bl	8007e8c <prvIsQueueFull>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d018      	beq.n	800770c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076dc:	3310      	adds	r3, #16
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 f8be 	bl	8008864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076ea:	f000 fb67 	bl	8007dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076ee:	f000 fedd 	bl	80084ac <xTaskResumeAll>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f47f af7c 	bne.w	80075f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076fa:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <xQueueGenericSend+0x200>)
 80076fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	e772      	b.n	80075f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800770c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800770e:	f000 fb55 	bl	8007dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007712:	f000 fecb 	bl	80084ac <xTaskResumeAll>
 8007716:	e76c      	b.n	80075f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800771a:	f000 fb4f 	bl	8007dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800771e:	f000 fec5 	bl	80084ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007724:	4618      	mov	r0, r3
 8007726:	3738      	adds	r7, #56	@ 0x38
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b090      	sub	sp, #64	@ 0x40
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <xQueueGenericSendFromISR+0x3e>
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <xQueueGenericSendFromISR+0x42>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <xQueueGenericSendFromISR+0x44>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <xQueueGenericSendFromISR+0x6e>
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <xQueueGenericSendFromISR+0x72>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <xQueueGenericSendFromISR+0x74>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	623b      	str	r3, [r7, #32]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077c0:	f002 f856 	bl	8009870 <vPortValidateInterruptPriority>
	__asm volatile
 80077c4:	f3ef 8211 	mrs	r2, BASEPRI
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80077dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d302      	bcc.n	80077f2 <xQueueGenericSendFromISR+0xc2>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d12f      	bne.n	8007852 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007808:	f000 fa48 	bl	8007c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800780c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007814:	d112      	bne.n	800783c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007820:	3324      	adds	r3, #36	@ 0x24
 8007822:	4618      	mov	r0, r3
 8007824:	f001 f870 	bl	8008908 <xTaskRemoveFromEventList>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00e      	beq.n	800784c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e007      	b.n	800784c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800783c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007840:	3301      	adds	r3, #1
 8007842:	b2db      	uxtb	r3, r3
 8007844:	b25a      	sxtb	r2, r3
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800784c:	2301      	movs	r3, #1
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007850:	e001      	b.n	8007856 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007852:	2300      	movs	r3, #0
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007858:	617b      	str	r3, [r7, #20]
	__asm volatile
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f383 8811 	msr	BASEPRI, r3
}
 8007860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007864:	4618      	mov	r0, r3
 8007866:	3740      	adds	r7, #64	@ 0x40
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	@ 0x38
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	623b      	str	r3, [r7, #32]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	61fb      	str	r3, [r7, #28]
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <xQueueGiveFromISR+0x5c>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <xQueueGiveFromISR+0x60>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <xQueueGiveFromISR+0x62>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <xQueueGiveFromISR+0x7e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61bb      	str	r3, [r7, #24]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ea:	f001 ffc1 	bl	8009870 <vPortValidateInterruptPriority>
	__asm volatile
 80078ee:	f3ef 8211 	mrs	r2, BASEPRI
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	617a      	str	r2, [r7, #20]
 8007904:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007906:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007916:	429a      	cmp	r2, r3
 8007918:	d22b      	bcs.n	8007972 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800792c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007934:	d112      	bne.n	800795c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	2b00      	cmp	r3, #0
 800793c:	d016      	beq.n	800796c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3324      	adds	r3, #36	@ 0x24
 8007942:	4618      	mov	r0, r3
 8007944:	f000 ffe0 	bl	8008908 <xTaskRemoveFromEventList>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2201      	movs	r2, #1
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e007      	b.n	800796c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800795c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007960:	3301      	adds	r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	b25a      	sxtb	r2, r3
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800796c:	2301      	movs	r3, #1
 800796e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007970:	e001      	b.n	8007976 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007978:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f383 8811 	msr	BASEPRI, r3
}
 8007980:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007984:	4618      	mov	r0, r3
 8007986:	3738      	adds	r7, #56	@ 0x38
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	@ 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007998:	2300      	movs	r3, #0
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <xQueueReceive+0x32>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	623b      	str	r3, [r7, #32]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d103      	bne.n	80079cc <xQueueReceive+0x40>
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <xQueueReceive+0x44>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <xQueueReceive+0x46>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10b      	bne.n	80079ee <xQueueReceive+0x62>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	61fb      	str	r3, [r7, #28]
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	e7fd      	b.n	80079ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079ee:	f001 f951 	bl	8008c94 <xTaskGetSchedulerState>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <xQueueReceive+0x72>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <xQueueReceive+0x76>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <xQueueReceive+0x78>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <xQueueReceive+0x94>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	61bb      	str	r3, [r7, #24]
}
 8007a1a:	bf00      	nop
 8007a1c:	bf00      	nop
 8007a1e:	e7fd      	b.n	8007a1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a20:	f001 fe64 	bl	80096ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01f      	beq.n	8007a70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a34:	f000 f99c 	bl	8007d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	1e5a      	subs	r2, r3, #1
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00f      	beq.n	8007a68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 ff5b 	bl	8008908 <xTaskRemoveFromEventList>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a58:	4b3c      	ldr	r3, [pc, #240]	@ (8007b4c <xQueueReceive+0x1c0>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a68:	f001 fe70 	bl	800974c <vPortExitCritical>
				return pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e069      	b.n	8007b44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a76:	f001 fe69 	bl	800974c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e062      	b.n	8007b44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a84:	f107 0310 	add.w	r3, r7, #16
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 ffa1 	bl	80089d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a92:	f001 fe5b 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a96:	f000 fcfb 	bl	8008490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9a:	f001 fe27 	bl	80096ec <vPortEnterCritical>
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aaa:	d103      	bne.n	8007ab4 <xQueueReceive+0x128>
 8007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ac0:	d103      	bne.n	8007aca <xQueueReceive+0x13e>
 8007ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aca:	f001 fe3f 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ace:	1d3a      	adds	r2, r7, #4
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 ff90 	bl	80089fc <xTaskCheckForTimeOut>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d123      	bne.n	8007b2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae4:	f000 f9bc 	bl	8007e60 <prvIsQueueEmpty>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d017      	beq.n	8007b1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	3324      	adds	r3, #36	@ 0x24
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 feb4 	bl	8008864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007afe:	f000 f95d 	bl	8007dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b02:	f000 fcd3 	bl	80084ac <xTaskResumeAll>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d189      	bne.n	8007a20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b4c <xQueueReceive+0x1c0>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	e780      	b.n	8007a20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b20:	f000 f94c 	bl	8007dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b24:	f000 fcc2 	bl	80084ac <xTaskResumeAll>
 8007b28:	e77a      	b.n	8007a20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b2c:	f000 f946 	bl	8007dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b30:	f000 fcbc 	bl	80084ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b36:	f000 f993 	bl	8007e60 <prvIsQueueEmpty>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f43f af6f 	beq.w	8007a20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3730      	adds	r7, #48	@ 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	e000ed04 	.word	0xe000ed04

08007b50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	@ 0x38
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	623b      	str	r3, [r7, #32]
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	e7fd      	b.n	8007b7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <xQueueReceiveFromISR+0x3c>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <xQueueReceiveFromISR+0x40>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <xQueueReceiveFromISR+0x42>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61fb      	str	r3, [r7, #28]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bae:	f001 fe5f 	bl	8009870 <vPortValidateInterruptPriority>
	__asm volatile
 8007bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	61ba      	str	r2, [r7, #24]
 8007bc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02f      	beq.n	8007c3a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007be8:	f000 f8c2 	bl	8007d70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	1e5a      	subs	r2, r3, #1
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bfc:	d112      	bne.n	8007c24 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d016      	beq.n	8007c34 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	3310      	adds	r3, #16
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fe7c 	bl	8008908 <xTaskRemoveFromEventList>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00e      	beq.n	8007c34 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e007      	b.n	8007c34 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c28:	3301      	adds	r3, #1
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	b25a      	sxtb	r2, r3
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c38:	e001      	b.n	8007c3e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f383 8811 	msr	BASEPRI, r3
}
 8007c48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3738      	adds	r7, #56	@ 0x38
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10b      	bne.n	8007c7e <vQueueDelete+0x2a>
	__asm volatile
 8007c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60bb      	str	r3, [r7, #8]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 f944 	bl	8007f0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f001 fefc 	bl	8009a8c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10d      	bne.n	8007cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d14d      	bne.n	8007d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f802 	bl	8008cd0 <xTaskPriorityDisinherit>
 8007ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	e043      	b.n	8007d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d119      	bne.n	8007d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6858      	ldr	r0, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	f003 fed8 	bl	800ba9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf4:	441a      	add	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d32b      	bcc.n	8007d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
 8007d0e:	e026      	b.n	8007d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68d8      	ldr	r0, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	f003 febe 	bl	800ba9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d28:	425b      	negs	r3, r3
 8007d2a:	441a      	add	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68da      	ldr	r2, [r3, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d207      	bcs.n	8007d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d44:	425b      	negs	r3, r3
 8007d46:	441a      	add	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d105      	bne.n	8007d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d66:	697b      	ldr	r3, [r7, #20]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d018      	beq.n	8007db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8a:	441a      	add	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d303      	bcc.n	8007da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68d9      	ldr	r1, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dac:	461a      	mov	r2, r3
 8007dae:	6838      	ldr	r0, [r7, #0]
 8007db0:	f003 fe74 	bl	800ba9c <memcpy>
	}
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dc4:	f001 fc92 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dd0:	e011      	b.n	8007df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d012      	beq.n	8007e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3324      	adds	r3, #36	@ 0x24
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fd92 	bl	8008908 <xTaskRemoveFromEventList>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dea:	f000 fe6b 	bl	8008ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dce9      	bgt.n	8007dd2 <prvUnlockQueue+0x16>
 8007dfe:	e000      	b.n	8007e02 <prvUnlockQueue+0x46>
					break;
 8007e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	22ff      	movs	r2, #255	@ 0xff
 8007e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007e0a:	f001 fc9f 	bl	800974c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0e:	f001 fc6d 	bl	80096ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e1a:	e011      	b.n	8007e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d012      	beq.n	8007e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3310      	adds	r3, #16
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fd6d 	bl	8008908 <xTaskRemoveFromEventList>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e34:	f000 fe46 	bl	8008ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e38:	7bbb      	ldrb	r3, [r7, #14]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dce9      	bgt.n	8007e1c <prvUnlockQueue+0x60>
 8007e48:	e000      	b.n	8007e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	22ff      	movs	r2, #255	@ 0xff
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e54:	f001 fc7a 	bl	800974c <vPortExitCritical>
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e68:	f001 fc40 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e001      	b.n	8007e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7e:	f001 fc65 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007e82:	68fb      	ldr	r3, [r7, #12]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e94:	f001 fc2a 	bl	80096ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d102      	bne.n	8007eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e001      	b.n	8007eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f001 fc4d 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e014      	b.n	8007ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8007f08 <vQueueAddToRegistry+0x4c>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed8:	490b      	ldr	r1, [pc, #44]	@ (8007f08 <vQueueAddToRegistry+0x4c>)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ee2:	4a09      	ldr	r2, [pc, #36]	@ (8007f08 <vQueueAddToRegistry+0x4c>)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4413      	add	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007eee:	e006      	b.n	8007efe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b07      	cmp	r3, #7
 8007efa:	d9e7      	bls.n	8007ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr
 8007f08:	20000f70 	.word	0x20000f70

08007f0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e016      	b.n	8007f48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f1a:	4a10      	ldr	r2, [pc, #64]	@ (8007f5c <vQueueUnregisterQueue+0x50>)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	4413      	add	r3, r2
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d10b      	bne.n	8007f42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f5c <vQueueUnregisterQueue+0x50>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f34:	4a09      	ldr	r2, [pc, #36]	@ (8007f5c <vQueueUnregisterQueue+0x50>)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	4413      	add	r3, r2
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	605a      	str	r2, [r3, #4]
				break;
 8007f40:	e006      	b.n	8007f50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b07      	cmp	r3, #7
 8007f4c:	d9e5      	bls.n	8007f1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000f70 	.word	0x20000f70

08007f60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f70:	f001 fbbc 	bl	80096ec <vPortEnterCritical>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f80:	d103      	bne.n	8007f8a <vQueueWaitForMessageRestricted+0x2a>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f96:	d103      	bne.n	8007fa0 <vQueueWaitForMessageRestricted+0x40>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fa0:	f001 fbd4 	bl	800974c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3324      	adds	r3, #36	@ 0x24
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fc7b 	bl	80088b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7ff fefe 	bl	8007dbc <prvUnlockQueue>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	@ 0x38
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10b      	bne.n	8007ff4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61fb      	str	r3, [r7, #28]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008012:	23a8      	movs	r3, #168	@ 0xa8
 8008014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2ba8      	cmp	r3, #168	@ 0xa8
 800801a:	d00b      	beq.n	8008034 <xTaskCreateStatic+0x6c>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	61bb      	str	r3, [r7, #24]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008034:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01e      	beq.n	800807a <xTaskCreateStatic+0xb2>
 800803c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01b      	beq.n	800807a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	2202      	movs	r2, #2
 8008050:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008054:	2300      	movs	r3, #0
 8008056:	9303      	str	r3, [sp, #12]
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	9302      	str	r3, [sp, #8]
 800805c:	f107 0314 	add.w	r3, r7, #20
 8008060:	9301      	str	r3, [sp, #4]
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f851 	bl	8008114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008072:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008074:	f000 f8f6 	bl	8008264 <prvAddNewTaskToReadyList>
 8008078:	e001      	b.n	800807e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800807e:	697b      	ldr	r3, [r7, #20]
	}
 8008080:	4618      	mov	r0, r3
 8008082:	3728      	adds	r7, #40	@ 0x28
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	@ 0x30
 800808c:	af04      	add	r7, sp, #16
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	4613      	mov	r3, r2
 8008096:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008098:	88fb      	ldrh	r3, [r7, #6]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fc27 	bl	80098f0 <pvPortMalloc>
 80080a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00e      	beq.n	80080c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080aa:	20a8      	movs	r0, #168	@ 0xa8
 80080ac:	f001 fc20 	bl	80098f0 <pvPortMalloc>
 80080b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80080be:	e005      	b.n	80080cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080c0:	6978      	ldr	r0, [r7, #20]
 80080c2:	f001 fce3 	bl	8009a8c <vPortFree>
 80080c6:	e001      	b.n	80080cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d017      	beq.n	8008102 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	2300      	movs	r3, #0
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	9302      	str	r3, [sp, #8]
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f80f 	bl	8008114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080f6:	69f8      	ldr	r0, [r7, #28]
 80080f8:	f000 f8b4 	bl	8008264 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080fc:	2301      	movs	r3, #1
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	e002      	b.n	8008108 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008106:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008108:	69bb      	ldr	r3, [r7, #24]
	}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	461a      	mov	r2, r3
 800812c:	21a5      	movs	r1, #165	@ 0xa5
 800812e:	f003 f9c0 	bl	800b4b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800813c:	3b01      	subs	r3, #1
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f023 0307 	bic.w	r3, r3, #7
 800814a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	617b      	str	r3, [r7, #20]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01f      	beq.n	80081b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e012      	b.n	80081a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	7819      	ldrb	r1, [r3, #0]
 8008182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	3334      	adds	r3, #52	@ 0x34
 800818a:	460a      	mov	r2, r1
 800818c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d006      	beq.n	80081a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	3301      	adds	r3, #1
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b0f      	cmp	r3, #15
 80081a4:	d9e9      	bls.n	800817a <prvInitialiseNewTask+0x66>
 80081a6:	e000      	b.n	80081aa <prvInitialiseNewTask+0x96>
			{
				break;
 80081a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081b2:	e003      	b.n	80081bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081be:	2b37      	cmp	r3, #55	@ 0x37
 80081c0:	d901      	bls.n	80081c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081c2:	2337      	movs	r3, #55	@ 0x37
 80081c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	2200      	movs	r2, #0
 80081d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	3304      	adds	r3, #4
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe ff14 	bl	800700a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	3318      	adds	r3, #24
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fe ff0f 	bl	800700a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008200:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	2200      	movs	r2, #0
 8008206:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	2200      	movs	r2, #0
 800820e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	3354      	adds	r3, #84	@ 0x54
 8008216:	224c      	movs	r2, #76	@ 0x4c
 8008218:	2100      	movs	r1, #0
 800821a:	4618      	mov	r0, r3
 800821c:	f003 f949 	bl	800b4b2 <memset>
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	4a0d      	ldr	r2, [pc, #52]	@ (8008258 <prvInitialiseNewTask+0x144>)
 8008224:	659a      	str	r2, [r3, #88]	@ 0x58
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	4a0c      	ldr	r2, [pc, #48]	@ (800825c <prvInitialiseNewTask+0x148>)
 800822a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	4a0c      	ldr	r2, [pc, #48]	@ (8008260 <prvInitialiseNewTask+0x14c>)
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	68f9      	ldr	r1, [r7, #12]
 8008236:	69b8      	ldr	r0, [r7, #24]
 8008238:	f001 f966 	bl	8009508 <pxPortInitialiseStack>
 800823c:	4602      	mov	r2, r0
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800824c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800824e:	bf00      	nop
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20003ea0 	.word	0x20003ea0
 800825c:	20003f08 	.word	0x20003f08
 8008260:	20003f70 	.word	0x20003f70

08008264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800826c:	f001 fa3e 	bl	80096ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008270:	4b2d      	ldr	r3, [pc, #180]	@ (8008328 <prvAddNewTaskToReadyList+0xc4>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	4a2c      	ldr	r2, [pc, #176]	@ (8008328 <prvAddNewTaskToReadyList+0xc4>)
 8008278:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800827a:	4b2c      	ldr	r3, [pc, #176]	@ (800832c <prvAddNewTaskToReadyList+0xc8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d109      	bne.n	8008296 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008282:	4a2a      	ldr	r2, [pc, #168]	@ (800832c <prvAddNewTaskToReadyList+0xc8>)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008288:	4b27      	ldr	r3, [pc, #156]	@ (8008328 <prvAddNewTaskToReadyList+0xc4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d110      	bne.n	80082b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008290:	f000 fc3c 	bl	8008b0c <prvInitialiseTaskLists>
 8008294:	e00d      	b.n	80082b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008296:	4b26      	ldr	r3, [pc, #152]	@ (8008330 <prvAddNewTaskToReadyList+0xcc>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800829e:	4b23      	ldr	r3, [pc, #140]	@ (800832c <prvAddNewTaskToReadyList+0xc8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d802      	bhi.n	80082b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082ac:	4a1f      	ldr	r2, [pc, #124]	@ (800832c <prvAddNewTaskToReadyList+0xc8>)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082b2:	4b20      	ldr	r3, [pc, #128]	@ (8008334 <prvAddNewTaskToReadyList+0xd0>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3301      	adds	r3, #1
 80082b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008334 <prvAddNewTaskToReadyList+0xd0>)
 80082ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008334 <prvAddNewTaskToReadyList+0xd0>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <prvAddNewTaskToReadyList+0xd4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d903      	bls.n	80082d8 <prvAddNewTaskToReadyList+0x74>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a18      	ldr	r2, [pc, #96]	@ (8008338 <prvAddNewTaskToReadyList+0xd4>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a15      	ldr	r2, [pc, #84]	@ (800833c <prvAddNewTaskToReadyList+0xd8>)
 80082e6:	441a      	add	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fe fe97 	bl	8007022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082f4:	f001 fa2a 	bl	800974c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008330 <prvAddNewTaskToReadyList+0xcc>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00e      	beq.n	800831e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008300:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <prvAddNewTaskToReadyList+0xc8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	429a      	cmp	r2, r3
 800830c:	d207      	bcs.n	800831e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800830e:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <prvAddNewTaskToReadyList+0xdc>)
 8008310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20001484 	.word	0x20001484
 800832c:	20000fb0 	.word	0x20000fb0
 8008330:	20001490 	.word	0x20001490
 8008334:	200014a0 	.word	0x200014a0
 8008338:	2000148c 	.word	0x2000148c
 800833c:	20000fb4 	.word	0x20000fb4
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d018      	beq.n	8008388 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <vTaskDelay+0x64>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00b      	beq.n	8008376 <vTaskDelay+0x32>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	60bb      	str	r3, [r7, #8]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008376:	f000 f88b 	bl	8008490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800837a:	2100      	movs	r1, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fd17 	bl	8008db0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008382:	f000 f893 	bl	80084ac <xTaskResumeAll>
 8008386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800838e:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <vTaskDelay+0x68>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200014ac 	.word	0x200014ac
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	@ 0x28
 80083b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083be:	463a      	mov	r2, r7
 80083c0:	1d39      	adds	r1, r7, #4
 80083c2:	f107 0308 	add.w	r3, r7, #8
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fdce 	bl	8006f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	9202      	str	r2, [sp, #8]
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	460a      	mov	r2, r1
 80083de:	4924      	ldr	r1, [pc, #144]	@ (8008470 <vTaskStartScheduler+0xc0>)
 80083e0:	4824      	ldr	r0, [pc, #144]	@ (8008474 <vTaskStartScheduler+0xc4>)
 80083e2:	f7ff fdf1 	bl	8007fc8 <xTaskCreateStatic>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4a23      	ldr	r2, [pc, #140]	@ (8008478 <vTaskStartScheduler+0xc8>)
 80083ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083ec:	4b22      	ldr	r3, [pc, #136]	@ (8008478 <vTaskStartScheduler+0xc8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e001      	b.n	80083fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d102      	bne.n	800840a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008404:	f000 fd28 	bl	8008e58 <xTimerCreateTimerTask>
 8008408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d11b      	bne.n	8008448 <vTaskStartScheduler+0x98>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008424:	4b15      	ldr	r3, [pc, #84]	@ (800847c <vTaskStartScheduler+0xcc>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3354      	adds	r3, #84	@ 0x54
 800842a:	4a15      	ldr	r2, [pc, #84]	@ (8008480 <vTaskStartScheduler+0xd0>)
 800842c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800842e:	4b15      	ldr	r3, [pc, #84]	@ (8008484 <vTaskStartScheduler+0xd4>)
 8008430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <vTaskStartScheduler+0xd8>)
 8008438:	2201      	movs	r2, #1
 800843a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800843c:	4b13      	ldr	r3, [pc, #76]	@ (800848c <vTaskStartScheduler+0xdc>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008442:	f001 f8e1 	bl	8009608 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008446:	e00f      	b.n	8008468 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800844e:	d10b      	bne.n	8008468 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <vTaskStartScheduler+0xb4>
}
 8008468:	bf00      	nop
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	0800efb4 	.word	0x0800efb4
 8008474:	08008add 	.word	0x08008add
 8008478:	200014a8 	.word	0x200014a8
 800847c:	20000fb0 	.word	0x20000fb0
 8008480:	20000024 	.word	0x20000024
 8008484:	200014a4 	.word	0x200014a4
 8008488:	20001490 	.word	0x20001490
 800848c:	20001488 	.word	0x20001488

08008490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008494:	4b04      	ldr	r3, [pc, #16]	@ (80084a8 <vTaskSuspendAll+0x18>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	4a03      	ldr	r2, [pc, #12]	@ (80084a8 <vTaskSuspendAll+0x18>)
 800849c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800849e:	bf00      	nop
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	200014ac 	.word	0x200014ac

080084ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084ba:	4b42      	ldr	r3, [pc, #264]	@ (80085c4 <xTaskResumeAll+0x118>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <xTaskResumeAll+0x2e>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	603b      	str	r3, [r7, #0]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084da:	f001 f907 	bl	80096ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084de:	4b39      	ldr	r3, [pc, #228]	@ (80085c4 <xTaskResumeAll+0x118>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	4a37      	ldr	r2, [pc, #220]	@ (80085c4 <xTaskResumeAll+0x118>)
 80084e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e8:	4b36      	ldr	r3, [pc, #216]	@ (80085c4 <xTaskResumeAll+0x118>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d162      	bne.n	80085b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084f0:	4b35      	ldr	r3, [pc, #212]	@ (80085c8 <xTaskResumeAll+0x11c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d05e      	beq.n	80085b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f8:	e02f      	b.n	800855a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fa:	4b34      	ldr	r3, [pc, #208]	@ (80085cc <xTaskResumeAll+0x120>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3318      	adds	r3, #24
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fde6 	bl	80070d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3304      	adds	r3, #4
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fde1 	bl	80070d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851a:	4b2d      	ldr	r3, [pc, #180]	@ (80085d0 <xTaskResumeAll+0x124>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d903      	bls.n	800852a <xTaskResumeAll+0x7e>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	4a2a      	ldr	r2, [pc, #168]	@ (80085d0 <xTaskResumeAll+0x124>)
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a27      	ldr	r2, [pc, #156]	@ (80085d4 <xTaskResumeAll+0x128>)
 8008538:	441a      	add	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7fe fd6e 	bl	8007022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854a:	4b23      	ldr	r3, [pc, #140]	@ (80085d8 <xTaskResumeAll+0x12c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008550:	429a      	cmp	r2, r3
 8008552:	d302      	bcc.n	800855a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008554:	4b21      	ldr	r3, [pc, #132]	@ (80085dc <xTaskResumeAll+0x130>)
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800855a:	4b1c      	ldr	r3, [pc, #112]	@ (80085cc <xTaskResumeAll+0x120>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1cb      	bne.n	80084fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008568:	f000 fb74 	bl	8008c54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800856c:	4b1c      	ldr	r3, [pc, #112]	@ (80085e0 <xTaskResumeAll+0x134>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d010      	beq.n	800859a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008578:	f000 f856 	bl	8008628 <xTaskIncrementTick>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008582:	4b16      	ldr	r3, [pc, #88]	@ (80085dc <xTaskResumeAll+0x130>)
 8008584:	2201      	movs	r2, #1
 8008586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3b01      	subs	r3, #1
 800858c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1f1      	bne.n	8008578 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008594:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <xTaskResumeAll+0x134>)
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800859a:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <xTaskResumeAll+0x130>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d009      	beq.n	80085b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085a6:	4b0f      	ldr	r3, [pc, #60]	@ (80085e4 <xTaskResumeAll+0x138>)
 80085a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085b6:	f001 f8c9 	bl	800974c <vPortExitCritical>

	return xAlreadyYielded;
 80085ba:	68bb      	ldr	r3, [r7, #8]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200014ac 	.word	0x200014ac
 80085c8:	20001484 	.word	0x20001484
 80085cc:	20001444 	.word	0x20001444
 80085d0:	2000148c 	.word	0x2000148c
 80085d4:	20000fb4 	.word	0x20000fb4
 80085d8:	20000fb0 	.word	0x20000fb0
 80085dc:	20001498 	.word	0x20001498
 80085e0:	20001494 	.word	0x20001494
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085ee:	4b04      	ldr	r3, [pc, #16]	@ (8008600 <xTaskGetTickCount+0x18>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085f4:	687b      	ldr	r3, [r7, #4]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr
 8008600:	20001488 	.word	0x20001488

08008604 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800860a:	f001 f931 	bl	8009870 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008612:	4b04      	ldr	r3, [pc, #16]	@ (8008624 <xTaskGetTickCountFromISR+0x20>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008618:	683b      	ldr	r3, [r7, #0]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20001488 	.word	0x20001488

08008628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008632:	4b4f      	ldr	r3, [pc, #316]	@ (8008770 <xTaskIncrementTick+0x148>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8090 	bne.w	800875c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800863c:	4b4d      	ldr	r3, [pc, #308]	@ (8008774 <xTaskIncrementTick+0x14c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008644:	4a4b      	ldr	r2, [pc, #300]	@ (8008774 <xTaskIncrementTick+0x14c>)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d121      	bne.n	8008694 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008650:	4b49      	ldr	r3, [pc, #292]	@ (8008778 <xTaskIncrementTick+0x150>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00b      	beq.n	8008672 <xTaskIncrementTick+0x4a>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	603b      	str	r3, [r7, #0]
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <xTaskIncrementTick+0x46>
 8008672:	4b41      	ldr	r3, [pc, #260]	@ (8008778 <xTaskIncrementTick+0x150>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	4b40      	ldr	r3, [pc, #256]	@ (800877c <xTaskIncrementTick+0x154>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a3e      	ldr	r2, [pc, #248]	@ (8008778 <xTaskIncrementTick+0x150>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	4a3e      	ldr	r2, [pc, #248]	@ (800877c <xTaskIncrementTick+0x154>)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b3e      	ldr	r3, [pc, #248]	@ (8008780 <xTaskIncrementTick+0x158>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	4a3c      	ldr	r2, [pc, #240]	@ (8008780 <xTaskIncrementTick+0x158>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f000 fae0 	bl	8008c54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008694:	4b3b      	ldr	r3, [pc, #236]	@ (8008784 <xTaskIncrementTick+0x15c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	429a      	cmp	r2, r3
 800869c:	d349      	bcc.n	8008732 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800869e:	4b36      	ldr	r3, [pc, #216]	@ (8008778 <xTaskIncrementTick+0x150>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a8:	4b36      	ldr	r3, [pc, #216]	@ (8008784 <xTaskIncrementTick+0x15c>)
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086ae:	601a      	str	r2, [r3, #0]
					break;
 80086b0:	e03f      	b.n	8008732 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b2:	4b31      	ldr	r3, [pc, #196]	@ (8008778 <xTaskIncrementTick+0x150>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d203      	bcs.n	80086d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008784 <xTaskIncrementTick+0x15c>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086d0:	e02f      	b.n	8008732 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fcfe 	bl	80070d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3318      	adds	r3, #24
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fcf5 	bl	80070d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f2:	4b25      	ldr	r3, [pc, #148]	@ (8008788 <xTaskIncrementTick+0x160>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <xTaskIncrementTick+0xda>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fe:	4a22      	ldr	r2, [pc, #136]	@ (8008788 <xTaskIncrementTick+0x160>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a1f      	ldr	r2, [pc, #124]	@ (800878c <xTaskIncrementTick+0x164>)
 8008710:	441a      	add	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe fc82 	bl	8007022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <xTaskIncrementTick+0x168>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	429a      	cmp	r2, r3
 800872a:	d3b8      	bcc.n	800869e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008730:	e7b5      	b.n	800869e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008732:	4b17      	ldr	r3, [pc, #92]	@ (8008790 <xTaskIncrementTick+0x168>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008738:	4914      	ldr	r1, [pc, #80]	@ (800878c <xTaskIncrementTick+0x164>)
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d901      	bls.n	800874e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800874a:	2301      	movs	r3, #1
 800874c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800874e:	4b11      	ldr	r3, [pc, #68]	@ (8008794 <xTaskIncrementTick+0x16c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e004      	b.n	8008766 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800875c:	4b0e      	ldr	r3, [pc, #56]	@ (8008798 <xTaskIncrementTick+0x170>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3301      	adds	r3, #1
 8008762:	4a0d      	ldr	r2, [pc, #52]	@ (8008798 <xTaskIncrementTick+0x170>)
 8008764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008766:	697b      	ldr	r3, [r7, #20]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	200014ac 	.word	0x200014ac
 8008774:	20001488 	.word	0x20001488
 8008778:	2000143c 	.word	0x2000143c
 800877c:	20001440 	.word	0x20001440
 8008780:	2000149c 	.word	0x2000149c
 8008784:	200014a4 	.word	0x200014a4
 8008788:	2000148c 	.word	0x2000148c
 800878c:	20000fb4 	.word	0x20000fb4
 8008790:	20000fb0 	.word	0x20000fb0
 8008794:	20001498 	.word	0x20001498
 8008798:	20001494 	.word	0x20001494

0800879c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087a2:	4b2a      	ldr	r3, [pc, #168]	@ (800884c <vTaskSwitchContext+0xb0>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087aa:	4b29      	ldr	r3, [pc, #164]	@ (8008850 <vTaskSwitchContext+0xb4>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087b0:	e047      	b.n	8008842 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80087b2:	4b27      	ldr	r3, [pc, #156]	@ (8008850 <vTaskSwitchContext+0xb4>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b8:	4b26      	ldr	r3, [pc, #152]	@ (8008854 <vTaskSwitchContext+0xb8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	e011      	b.n	80087e4 <vTaskSwitchContext+0x48>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <vTaskSwitchContext+0x42>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	607b      	str	r3, [r7, #4]
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	e7fd      	b.n	80087da <vTaskSwitchContext+0x3e>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	491c      	ldr	r1, [pc, #112]	@ (8008858 <vTaskSwitchContext+0xbc>)
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0e3      	beq.n	80087c0 <vTaskSwitchContext+0x24>
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4a15      	ldr	r2, [pc, #84]	@ (8008858 <vTaskSwitchContext+0xbc>)
 8008804:	4413      	add	r3, r2
 8008806:	60bb      	str	r3, [r7, #8]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	3308      	adds	r3, #8
 800881a:	429a      	cmp	r2, r3
 800881c:	d104      	bne.n	8008828 <vTaskSwitchContext+0x8c>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	605a      	str	r2, [r3, #4]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	4a0b      	ldr	r2, [pc, #44]	@ (800885c <vTaskSwitchContext+0xc0>)
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	4a08      	ldr	r2, [pc, #32]	@ (8008854 <vTaskSwitchContext+0xb8>)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008838:	4b08      	ldr	r3, [pc, #32]	@ (800885c <vTaskSwitchContext+0xc0>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3354      	adds	r3, #84	@ 0x54
 800883e:	4a08      	ldr	r2, [pc, #32]	@ (8008860 <vTaskSwitchContext+0xc4>)
 8008840:	6013      	str	r3, [r2, #0]
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	200014ac 	.word	0x200014ac
 8008850:	20001498 	.word	0x20001498
 8008854:	2000148c 	.word	0x2000148c
 8008858:	20000fb4 	.word	0x20000fb4
 800885c:	20000fb0 	.word	0x20000fb0
 8008860:	20000024 	.word	0x20000024

08008864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60fb      	str	r3, [r7, #12]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800888c:	4b07      	ldr	r3, [pc, #28]	@ (80088ac <vTaskPlaceOnEventList+0x48>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3318      	adds	r3, #24
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fe fbe7 	bl	8007068 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800889a:	2101      	movs	r1, #1
 800889c:	6838      	ldr	r0, [r7, #0]
 800889e:	f000 fa87 	bl	8008db0 <prvAddCurrentTaskToDelayedList>
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000fb0 	.word	0x20000fb0

080088b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088da:	4b0a      	ldr	r3, [pc, #40]	@ (8008904 <vTaskPlaceOnEventListRestricted+0x54>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3318      	adds	r3, #24
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7fe fb9d 	bl	8007022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d002      	beq.n	80088f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	68b8      	ldr	r0, [r7, #8]
 80088f8:	f000 fa5a 	bl	8008db0 <prvAddCurrentTaskToDelayedList>
	}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000fb0 	.word	0x20000fb0

08008908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3318      	adds	r3, #24
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fbcc 	bl	80070d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008940:	4b1d      	ldr	r3, [pc, #116]	@ (80089b8 <xTaskRemoveFromEventList+0xb0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11d      	bne.n	8008984 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3304      	adds	r3, #4
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fbc3 	bl	80070d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	4b19      	ldr	r3, [pc, #100]	@ (80089bc <xTaskRemoveFromEventList+0xb4>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d903      	bls.n	8008966 <xTaskRemoveFromEventList+0x5e>
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008962:	4a16      	ldr	r2, [pc, #88]	@ (80089bc <xTaskRemoveFromEventList+0xb4>)
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4a13      	ldr	r2, [pc, #76]	@ (80089c0 <xTaskRemoveFromEventList+0xb8>)
 8008974:	441a      	add	r2, r3
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	3304      	adds	r3, #4
 800897a:	4619      	mov	r1, r3
 800897c:	4610      	mov	r0, r2
 800897e:	f7fe fb50 	bl	8007022 <vListInsertEnd>
 8008982:	e005      	b.n	8008990 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	3318      	adds	r3, #24
 8008988:	4619      	mov	r1, r3
 800898a:	480e      	ldr	r0, [pc, #56]	@ (80089c4 <xTaskRemoveFromEventList+0xbc>)
 800898c:	f7fe fb49 	bl	8007022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <xTaskRemoveFromEventList+0xc0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899a:	429a      	cmp	r2, r3
 800899c:	d905      	bls.n	80089aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800899e:	2301      	movs	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <xTaskRemoveFromEventList+0xc4>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	e001      	b.n	80089ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089ae:	697b      	ldr	r3, [r7, #20]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	200014ac 	.word	0x200014ac
 80089bc:	2000148c 	.word	0x2000148c
 80089c0:	20000fb4 	.word	0x20000fb4
 80089c4:	20001444 	.word	0x20001444
 80089c8:	20000fb0 	.word	0x20000fb0
 80089cc:	20001498 	.word	0x20001498

080089d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089d8:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <vTaskInternalSetTimeOutState+0x24>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089e0:	4b05      	ldr	r3, [pc, #20]	@ (80089f8 <vTaskInternalSetTimeOutState+0x28>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	2000149c 	.word	0x2000149c
 80089f8:	20001488 	.word	0x20001488

080089fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	613b      	str	r3, [r7, #16]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10b      	bne.n	8008a42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	60fb      	str	r3, [r7, #12]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008a42:	f000 fe53 	bl	80096ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a46:	4b1d      	ldr	r3, [pc, #116]	@ (8008abc <xTaskCheckForTimeOut+0xc0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a5e:	d102      	bne.n	8008a66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e023      	b.n	8008aae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <xTaskCheckForTimeOut+0xc4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d007      	beq.n	8008a82 <xTaskCheckForTimeOut+0x86>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d302      	bcc.n	8008a82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	e015      	b.n	8008aae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d20b      	bcs.n	8008aa4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff99 	bl	80089d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e004      	b.n	8008aae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008aae:	f000 fe4d 	bl	800974c <vPortExitCritical>

	return xReturn;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20001488 	.word	0x20001488
 8008ac0:	2000149c 	.word	0x2000149c

08008ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ac8:	4b03      	ldr	r3, [pc, #12]	@ (8008ad8 <vTaskMissedYield+0x14>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	20001498 	.word	0x20001498

08008adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ae4:	f000 f852 	bl	8008b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <prvIdleTask+0x28>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d9f9      	bls.n	8008ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <prvIdleTask+0x2c>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b00:	e7f0      	b.n	8008ae4 <prvIdleTask+0x8>
 8008b02:	bf00      	nop
 8008b04:	20000fb4 	.word	0x20000fb4
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e00c      	b.n	8008b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a12      	ldr	r2, [pc, #72]	@ (8008b6c <prvInitialiseTaskLists+0x60>)
 8008b24:	4413      	add	r3, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fa50 	bl	8006fcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b37      	cmp	r3, #55	@ 0x37
 8008b36:	d9ef      	bls.n	8008b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b38:	480d      	ldr	r0, [pc, #52]	@ (8008b70 <prvInitialiseTaskLists+0x64>)
 8008b3a:	f7fe fa47 	bl	8006fcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b3e:	480d      	ldr	r0, [pc, #52]	@ (8008b74 <prvInitialiseTaskLists+0x68>)
 8008b40:	f7fe fa44 	bl	8006fcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b44:	480c      	ldr	r0, [pc, #48]	@ (8008b78 <prvInitialiseTaskLists+0x6c>)
 8008b46:	f7fe fa41 	bl	8006fcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b4a:	480c      	ldr	r0, [pc, #48]	@ (8008b7c <prvInitialiseTaskLists+0x70>)
 8008b4c:	f7fe fa3e 	bl	8006fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b50:	480b      	ldr	r0, [pc, #44]	@ (8008b80 <prvInitialiseTaskLists+0x74>)
 8008b52:	f7fe fa3b 	bl	8006fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <prvInitialiseTaskLists+0x78>)
 8008b58:	4a05      	ldr	r2, [pc, #20]	@ (8008b70 <prvInitialiseTaskLists+0x64>)
 8008b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <prvInitialiseTaskLists+0x7c>)
 8008b5e:	4a05      	ldr	r2, [pc, #20]	@ (8008b74 <prvInitialiseTaskLists+0x68>)
 8008b60:	601a      	str	r2, [r3, #0]
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000fb4 	.word	0x20000fb4
 8008b70:	20001414 	.word	0x20001414
 8008b74:	20001428 	.word	0x20001428
 8008b78:	20001444 	.word	0x20001444
 8008b7c:	20001458 	.word	0x20001458
 8008b80:	20001470 	.word	0x20001470
 8008b84:	2000143c 	.word	0x2000143c
 8008b88:	20001440 	.word	0x20001440

08008b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b92:	e019      	b.n	8008bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b94:	f000 fdaa 	bl	80096ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b98:	4b10      	ldr	r3, [pc, #64]	@ (8008bdc <prvCheckTasksWaitingTermination+0x50>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe fa97 	bl	80070d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008baa:	4b0d      	ldr	r3, [pc, #52]	@ (8008be0 <prvCheckTasksWaitingTermination+0x54>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8008be0 <prvCheckTasksWaitingTermination+0x54>)
 8008bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a0a      	ldr	r2, [pc, #40]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bbe:	f000 fdc5 	bl	800974c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f810 	bl	8008be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e1      	bne.n	8008b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20001458 	.word	0x20001458
 8008be0:	20001484 	.word	0x20001484
 8008be4:	2000146c 	.word	0x2000146c

08008be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3354      	adds	r3, #84	@ 0x54
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f002 fe6b 	bl	800b8d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d108      	bne.n	8008c16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 ff3f 	bl	8009a8c <vPortFree>
				vPortFree( pxTCB );
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 ff3c 	bl	8009a8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c14:	e019      	b.n	8008c4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d103      	bne.n	8008c28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 ff33 	bl	8009a8c <vPortFree>
	}
 8008c26:	e010      	b.n	8008c4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d00b      	beq.n	8008c4a <prvDeleteTCB+0x62>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60fb      	str	r3, [r7, #12]
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	e7fd      	b.n	8008c46 <prvDeleteTCB+0x5e>
	}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c8c <prvResetNextTaskUnblockTime+0x38>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c64:	4b0a      	ldr	r3, [pc, #40]	@ (8008c90 <prvResetNextTaskUnblockTime+0x3c>)
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c6c:	e008      	b.n	8008c80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6e:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <prvResetNextTaskUnblockTime+0x38>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4a04      	ldr	r2, [pc, #16]	@ (8008c90 <prvResetNextTaskUnblockTime+0x3c>)
 8008c7e:	6013      	str	r3, [r2, #0]
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bc80      	pop	{r7}
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	2000143c 	.word	0x2000143c
 8008c90:	200014a4 	.word	0x200014a4

08008c94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc8 <xTaskGetSchedulerState+0x34>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	e008      	b.n	8008cba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ca8:	4b08      	ldr	r3, [pc, #32]	@ (8008ccc <xTaskGetSchedulerState+0x38>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	607b      	str	r3, [r7, #4]
 8008cb4:	e001      	b.n	8008cba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cba:	687b      	ldr	r3, [r7, #4]
	}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	20001490 	.word	0x20001490
 8008ccc:	200014ac 	.word	0x200014ac

08008cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d058      	beq.n	8008d98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8008da4 <xTaskPriorityDisinherit+0xd4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d00b      	beq.n	8008d08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	e7fd      	b.n	8008d04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10b      	bne.n	8008d28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60bb      	str	r3, [r7, #8]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2c:	1e5a      	subs	r2, r3, #1
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d02c      	beq.n	8008d98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d128      	bne.n	8008d98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe f9c4 	bl	80070d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d68:	4b0f      	ldr	r3, [pc, #60]	@ (8008da8 <xTaskPriorityDisinherit+0xd8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d903      	bls.n	8008d78 <xTaskPriorityDisinherit+0xa8>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	4a0c      	ldr	r2, [pc, #48]	@ (8008da8 <xTaskPriorityDisinherit+0xd8>)
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4a09      	ldr	r2, [pc, #36]	@ (8008dac <xTaskPriorityDisinherit+0xdc>)
 8008d86:	441a      	add	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe f947 	bl	8007022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d94:	2301      	movs	r3, #1
 8008d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d98:	697b      	ldr	r3, [r7, #20]
	}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000fb0 	.word	0x20000fb0
 8008da8:	2000148c 	.word	0x2000148c
 8008dac:	20000fb4 	.word	0x20000fb4

08008db0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dba:	4b21      	ldr	r3, [pc, #132]	@ (8008e40 <prvAddCurrentTaskToDelayedList+0x90>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc0:	4b20      	ldr	r3, [pc, #128]	@ (8008e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe f986 	bl	80070d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dd2:	d10a      	bne.n	8008dea <prvAddCurrentTaskToDelayedList+0x3a>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dda:	4b1a      	ldr	r3, [pc, #104]	@ (8008e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3304      	adds	r3, #4
 8008de0:	4619      	mov	r1, r3
 8008de2:	4819      	ldr	r0, [pc, #100]	@ (8008e48 <prvAddCurrentTaskToDelayedList+0x98>)
 8008de4:	f7fe f91d 	bl	8007022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008de8:	e026      	b.n	8008e38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4413      	add	r3, r2
 8008df0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008df2:	4b14      	ldr	r3, [pc, #80]	@ (8008e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d209      	bcs.n	8008e16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e02:	4b12      	ldr	r3, [pc, #72]	@ (8008e4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f7fe f92a 	bl	8007068 <vListInsert>
}
 8008e14:	e010      	b.n	8008e38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e16:	4b0e      	ldr	r3, [pc, #56]	@ (8008e50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e44 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f7fe f920 	bl	8007068 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e28:	4b0a      	ldr	r3, [pc, #40]	@ (8008e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d202      	bcs.n	8008e38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e32:	4a08      	ldr	r2, [pc, #32]	@ (8008e54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6013      	str	r3, [r2, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20001488 	.word	0x20001488
 8008e44:	20000fb0 	.word	0x20000fb0
 8008e48:	20001470 	.word	0x20001470
 8008e4c:	20001440 	.word	0x20001440
 8008e50:	2000143c 	.word	0x2000143c
 8008e54:	200014a4 	.word	0x200014a4

08008e58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08a      	sub	sp, #40	@ 0x28
 8008e5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e62:	f000 fb11 	bl	8009488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e66:	4b1d      	ldr	r3, [pc, #116]	@ (8008edc <xTimerCreateTimerTask+0x84>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d021      	beq.n	8008eb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e76:	1d3a      	adds	r2, r7, #4
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	f107 030c 	add.w	r3, r7, #12
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fe f889 	bl	8006f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	9202      	str	r2, [sp, #8]
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	2302      	movs	r3, #2
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	2300      	movs	r3, #0
 8008e96:	460a      	mov	r2, r1
 8008e98:	4911      	ldr	r1, [pc, #68]	@ (8008ee0 <xTimerCreateTimerTask+0x88>)
 8008e9a:	4812      	ldr	r0, [pc, #72]	@ (8008ee4 <xTimerCreateTimerTask+0x8c>)
 8008e9c:	f7ff f894 	bl	8007fc8 <xTaskCreateStatic>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	4a11      	ldr	r2, [pc, #68]	@ (8008ee8 <xTimerCreateTimerTask+0x90>)
 8008ea4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ea6:	4b10      	ldr	r3, [pc, #64]	@ (8008ee8 <xTimerCreateTimerTask+0x90>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	613b      	str	r3, [r7, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ed0:	697b      	ldr	r3, [r7, #20]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200014e0 	.word	0x200014e0
 8008ee0:	0800efbc 	.word	0x0800efbc
 8008ee4:	08009025 	.word	0x08009025
 8008ee8:	200014e4 	.word	0x200014e4

08008eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08a      	sub	sp, #40	@ 0x28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10b      	bne.n	8008f1c <xTimerGenericCommand+0x30>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	623b      	str	r3, [r7, #32]
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	e7fd      	b.n	8008f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f1c:	4b19      	ldr	r3, [pc, #100]	@ (8008f84 <xTimerGenericCommand+0x98>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d02a      	beq.n	8008f7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	dc18      	bgt.n	8008f68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f36:	f7ff fead 	bl	8008c94 <xTaskGetSchedulerState>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d109      	bne.n	8008f54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f40:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <xTimerGenericCommand+0x98>)
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	f107 0110 	add.w	r1, r7, #16
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4c:	f7fe faee 	bl	800752c <xQueueGenericSend>
 8008f50:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f52:	e012      	b.n	8008f7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f54:	4b0b      	ldr	r3, [pc, #44]	@ (8008f84 <xTimerGenericCommand+0x98>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	f107 0110 	add.w	r1, r7, #16
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f7fe fae4 	bl	800752c <xQueueGenericSend>
 8008f64:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f66:	e008      	b.n	8008f7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <xTimerGenericCommand+0x98>)
 8008f6a:	6818      	ldr	r0, [r3, #0]
 8008f6c:	f107 0110 	add.w	r1, r7, #16
 8008f70:	2300      	movs	r3, #0
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	f7fe fbdc 	bl	8007730 <xQueueGenericSendFromISR>
 8008f78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3728      	adds	r7, #40	@ 0x28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	200014e0 	.word	0x200014e0

08008f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af02      	add	r7, sp, #8
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f92:	4b23      	ldr	r3, [pc, #140]	@ (8009020 <prvProcessExpiredTimer+0x98>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe f899 	bl	80070d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d023      	beq.n	8008ffc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	18d1      	adds	r1, r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	6978      	ldr	r0, [r7, #20]
 8008fc2:	f000 f8d3 	bl	800916c <prvInsertTimerInActiveList>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d020      	beq.n	800900e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6978      	ldr	r0, [r7, #20]
 8008fd8:	f7ff ff88 	bl	8008eec <xTimerGenericCommand>
 8008fdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d114      	bne.n	800900e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009002:	f023 0301 	bic.w	r3, r3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	6978      	ldr	r0, [r7, #20]
 8009014:	4798      	blx	r3
}
 8009016:	bf00      	nop
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	200014d8 	.word	0x200014d8

08009024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800902c:	f107 0308 	add.w	r3, r7, #8
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f859 	bl	80090e8 <prvGetNextExpireTime>
 8009036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4619      	mov	r1, r3
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f805 	bl	800904c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009042:	f000 f8d5 	bl	80091f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009046:	bf00      	nop
 8009048:	e7f0      	b.n	800902c <prvTimerTask+0x8>
	...

0800904c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009056:	f7ff fa1b 	bl	8008490 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800905a:	f107 0308 	add.w	r3, r7, #8
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f864 	bl	800912c <prvSampleTimeNow>
 8009064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d130      	bne.n	80090ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <prvProcessTimerOrBlockTask+0x3c>
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	429a      	cmp	r2, r3
 8009078:	d806      	bhi.n	8009088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800907a:	f7ff fa17 	bl	80084ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ff81 	bl	8008f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009086:	e024      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800908e:	4b13      	ldr	r3, [pc, #76]	@ (80090dc <prvProcessTimerOrBlockTask+0x90>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <prvProcessTimerOrBlockTask+0x50>
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <prvProcessTimerOrBlockTask+0x52>
 800909c:	2300      	movs	r3, #0
 800909e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090a0:	4b0f      	ldr	r3, [pc, #60]	@ (80090e0 <prvProcessTimerOrBlockTask+0x94>)
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	f7fe ff57 	bl	8007f60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090b2:	f7ff f9fb 	bl	80084ac <xTaskResumeAll>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090bc:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <prvProcessTimerOrBlockTask+0x98>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
}
 80090cc:	e001      	b.n	80090d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090ce:	f7ff f9ed 	bl	80084ac <xTaskResumeAll>
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	200014dc 	.word	0x200014dc
 80090e0:	200014e0 	.word	0x200014e0
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <prvGetNextExpireTime+0x40>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <prvGetNextExpireTime+0x16>
 80090fa:	2201      	movs	r2, #1
 80090fc:	e000      	b.n	8009100 <prvGetNextExpireTime+0x18>
 80090fe:	2200      	movs	r2, #0
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <prvGetNextExpireTime+0x40>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e001      	b.n	800911c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800911c:	68fb      	ldr	r3, [r7, #12]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	bc80      	pop	{r7}
 8009126:	4770      	bx	lr
 8009128:	200014d8 	.word	0x200014d8

0800912c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009134:	f7ff fa58 	bl	80085e8 <xTaskGetTickCount>
 8009138:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800913a:	4b0b      	ldr	r3, [pc, #44]	@ (8009168 <prvSampleTimeNow+0x3c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	429a      	cmp	r2, r3
 8009142:	d205      	bcs.n	8009150 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009144:	f000 f93a 	bl	80093bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e002      	b.n	8009156 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009156:	4a04      	ldr	r2, [pc, #16]	@ (8009168 <prvSampleTimeNow+0x3c>)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800915c:	68fb      	ldr	r3, [r7, #12]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200014e8 	.word	0x200014e8

0800916c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	429a      	cmp	r2, r3
 8009190:	d812      	bhi.n	80091b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	429a      	cmp	r2, r3
 800919e:	d302      	bcc.n	80091a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091a0:	2301      	movs	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	e01b      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091a6:	4b10      	ldr	r3, [pc, #64]	@ (80091e8 <prvInsertTimerInActiveList+0x7c>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fd ff59 	bl	8007068 <vListInsert>
 80091b6:	e012      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d206      	bcs.n	80091ce <prvInsertTimerInActiveList+0x62>
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d302      	bcc.n	80091ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091c8:	2301      	movs	r3, #1
 80091ca:	617b      	str	r3, [r7, #20]
 80091cc:	e007      	b.n	80091de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091ce:	4b07      	ldr	r3, [pc, #28]	@ (80091ec <prvInsertTimerInActiveList+0x80>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3304      	adds	r3, #4
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f7fd ff45 	bl	8007068 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80091de:	697b      	ldr	r3, [r7, #20]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	200014dc 	.word	0x200014dc
 80091ec:	200014d8 	.word	0x200014d8

080091f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08e      	sub	sp, #56	@ 0x38
 80091f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091f6:	e0ce      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da19      	bge.n	8009232 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80091fe:	1d3b      	adds	r3, r7, #4
 8009200:	3304      	adds	r3, #4
 8009202:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10b      	bne.n	8009222 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	61fb      	str	r3, [r7, #28]
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	e7fd      	b.n	800921e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009228:	6850      	ldr	r0, [r2, #4]
 800922a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800922c:	6892      	ldr	r2, [r2, #8]
 800922e:	4611      	mov	r1, r2
 8009230:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	f2c0 80ae 	blt.w	8009396 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	3304      	adds	r3, #4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fd ff44 	bl	80070d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009250:	463b      	mov	r3, r7
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff ff6a 	bl	800912c <prvSampleTimeNow>
 8009258:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b09      	cmp	r3, #9
 800925e:	f200 8097 	bhi.w	8009390 <prvProcessReceivedCommands+0x1a0>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <prvProcessReceivedCommands+0x78>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	08009291 	.word	0x08009291
 800926c:	08009291 	.word	0x08009291
 8009270:	08009291 	.word	0x08009291
 8009274:	08009307 	.word	0x08009307
 8009278:	0800931b 	.word	0x0800931b
 800927c:	08009367 	.word	0x08009367
 8009280:	08009291 	.word	0x08009291
 8009284:	08009291 	.word	0x08009291
 8009288:	08009307 	.word	0x08009307
 800928c:	0800931b 	.word	0x0800931b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009296:	f043 0301 	orr.w	r3, r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	18d1      	adds	r1, r2, r3
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092b0:	f7ff ff5c 	bl	800916c <prvInsertTimerInActiveList>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d06c      	beq.n	8009394 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d061      	beq.n	8009394 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	441a      	add	r2, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092e2:	f7ff fe03 	bl	8008eec <xTimerGenericCommand>
 80092e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d152      	bne.n	8009394 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	61bb      	str	r3, [r7, #24]
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	e7fd      	b.n	8009302 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800930c:	f023 0301 	bic.w	r3, r3, #1
 8009310:	b2da      	uxtb	r2, r3
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009318:	e03d      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009330:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	617b      	str	r3, [r7, #20]
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	e7fd      	b.n	800934e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	18d1      	adds	r1, r2, r3
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800935e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009360:	f7ff ff04 	bl	800916c <prvInsertTimerInActiveList>
					break;
 8009364:	e017      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009376:	f000 fb89 	bl	8009a8c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800937a:	e00c      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009382:	f023 0301 	bic.w	r3, r3, #1
 8009386:	b2da      	uxtb	r2, r3
 8009388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800938e:	e002      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <prvProcessReceivedCommands+0x1a6>
					break;
 8009394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009396:	4b08      	ldr	r3, [pc, #32]	@ (80093b8 <prvProcessReceivedCommands+0x1c8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	1d39      	adds	r1, r7, #4
 800939c:	2200      	movs	r2, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe faf4 	bl	800798c <xQueueReceive>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f47f af26 	bne.w	80091f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	3730      	adds	r7, #48	@ 0x30
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200014e0 	.word	0x200014e0

080093bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093c2:	e049      	b.n	8009458 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3304      	adds	r3, #4
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fd fe7b 	bl	80070d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d02f      	beq.n	8009458 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	429a      	cmp	r2, r3
 8009408:	d90e      	bls.n	8009428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009416:	4b1a      	ldr	r3, [pc, #104]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3304      	adds	r3, #4
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fd fe21 	bl	8007068 <vListInsert>
 8009426:	e017      	b.n	8009458 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009428:	2300      	movs	r3, #0
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fd5a 	bl	8008eec <xTimerGenericCommand>
 8009438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10b      	bne.n	8009458 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	603b      	str	r3, [r7, #0]
}
 8009452:	bf00      	nop
 8009454:	bf00      	nop
 8009456:	e7fd      	b.n	8009454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009458:	4b09      	ldr	r3, [pc, #36]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1b0      	bne.n	80093c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009462:	4b07      	ldr	r3, [pc, #28]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009468:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <prvSwitchTimerLists+0xc8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a04      	ldr	r2, [pc, #16]	@ (8009480 <prvSwitchTimerLists+0xc4>)
 800946e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009470:	4a04      	ldr	r2, [pc, #16]	@ (8009484 <prvSwitchTimerLists+0xc8>)
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6013      	str	r3, [r2, #0]
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200014d8 	.word	0x200014d8
 8009484:	200014dc 	.word	0x200014dc

08009488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800948e:	f000 f92d 	bl	80096ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009492:	4b15      	ldr	r3, [pc, #84]	@ (80094e8 <prvCheckForValidListAndQueue+0x60>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d120      	bne.n	80094dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800949a:	4814      	ldr	r0, [pc, #80]	@ (80094ec <prvCheckForValidListAndQueue+0x64>)
 800949c:	f7fd fd96 	bl	8006fcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094a0:	4813      	ldr	r0, [pc, #76]	@ (80094f0 <prvCheckForValidListAndQueue+0x68>)
 80094a2:	f7fd fd93 	bl	8006fcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094a6:	4b13      	ldr	r3, [pc, #76]	@ (80094f4 <prvCheckForValidListAndQueue+0x6c>)
 80094a8:	4a10      	ldr	r2, [pc, #64]	@ (80094ec <prvCheckForValidListAndQueue+0x64>)
 80094aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094ac:	4b12      	ldr	r3, [pc, #72]	@ (80094f8 <prvCheckForValidListAndQueue+0x70>)
 80094ae:	4a10      	ldr	r2, [pc, #64]	@ (80094f0 <prvCheckForValidListAndQueue+0x68>)
 80094b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094b2:	2300      	movs	r3, #0
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	4b11      	ldr	r3, [pc, #68]	@ (80094fc <prvCheckForValidListAndQueue+0x74>)
 80094b8:	4a11      	ldr	r2, [pc, #68]	@ (8009500 <prvCheckForValidListAndQueue+0x78>)
 80094ba:	2110      	movs	r1, #16
 80094bc:	200a      	movs	r0, #10
 80094be:	f7fd fe9f 	bl	8007200 <xQueueGenericCreateStatic>
 80094c2:	4603      	mov	r3, r0
 80094c4:	4a08      	ldr	r2, [pc, #32]	@ (80094e8 <prvCheckForValidListAndQueue+0x60>)
 80094c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094c8:	4b07      	ldr	r3, [pc, #28]	@ (80094e8 <prvCheckForValidListAndQueue+0x60>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094d0:	4b05      	ldr	r3, [pc, #20]	@ (80094e8 <prvCheckForValidListAndQueue+0x60>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	490b      	ldr	r1, [pc, #44]	@ (8009504 <prvCheckForValidListAndQueue+0x7c>)
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fcf0 	bl	8007ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094dc:	f000 f936 	bl	800974c <vPortExitCritical>
}
 80094e0:	bf00      	nop
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200014e0 	.word	0x200014e0
 80094ec:	200014b0 	.word	0x200014b0
 80094f0:	200014c4 	.word	0x200014c4
 80094f4:	200014d8 	.word	0x200014d8
 80094f8:	200014dc 	.word	0x200014dc
 80094fc:	2000158c 	.word	0x2000158c
 8009500:	200014ec 	.word	0x200014ec
 8009504:	0800efc4 	.word	0x0800efc4

08009508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3b04      	subs	r3, #4
 8009518:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3b04      	subs	r3, #4
 8009526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f023 0201 	bic.w	r2, r3, #1
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b04      	subs	r3, #4
 8009536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009538:	4a08      	ldr	r2, [pc, #32]	@ (800955c <pxPortInitialiseStack+0x54>)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3b14      	subs	r3, #20
 8009542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3b20      	subs	r3, #32
 800954e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009550:	68fb      	ldr	r3, [r7, #12]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr
 800955c:	08009561 	.word	0x08009561

08009560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800956a:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <prvTaskExitError+0x54>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009572:	d00b      	beq.n	800958c <prvTaskExitError+0x2c>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	60fb      	str	r3, [r7, #12]
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	e7fd      	b.n	8009588 <prvTaskExitError+0x28>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60bb      	str	r3, [r7, #8]
}
 800959e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095a0:	bf00      	nop
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d0fc      	beq.n	80095a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bc80      	pop	{r7}
 80095b2:	4770      	bx	lr
 80095b4:	2000000c 	.word	0x2000000c
	...

080095c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <pxCurrentTCBConst2>)
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095ca:	f380 8809 	msr	PSP, r0
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	f04e 0e0d 	orr.w	lr, lr, #13
 80095de:	4770      	bx	lr

080095e0 <pxCurrentTCBConst2>:
 80095e0:	20000fb0 	.word	0x20000fb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80095e8:	4806      	ldr	r0, [pc, #24]	@ (8009604 <prvPortStartFirstTask+0x1c>)
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	6800      	ldr	r0, [r0, #0]
 80095ee:	f380 8808 	msr	MSP, r0
 80095f2:	b662      	cpsie	i
 80095f4:	b661      	cpsie	f
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	df00      	svc	0
 8009600:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009602:	bf00      	nop
 8009604:	e000ed08 	.word	0xe000ed08

08009608 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800960e:	4b32      	ldr	r3, [pc, #200]	@ (80096d8 <xPortStartScheduler+0xd0>)
 8009610:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	22ff      	movs	r2, #255	@ 0xff
 800961e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009630:	b2da      	uxtb	r2, r3
 8009632:	4b2a      	ldr	r3, [pc, #168]	@ (80096dc <xPortStartScheduler+0xd4>)
 8009634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009636:	4b2a      	ldr	r3, [pc, #168]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009638:	2207      	movs	r2, #7
 800963a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800963c:	e009      	b.n	8009652 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800963e:	4b28      	ldr	r3, [pc, #160]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3b01      	subs	r3, #1
 8009644:	4a26      	ldr	r2, [pc, #152]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	b2db      	uxtb	r3, r3
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	b2db      	uxtb	r3, r3
 8009650:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965a:	2b80      	cmp	r3, #128	@ 0x80
 800965c:	d0ef      	beq.n	800963e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800965e:	4b20      	ldr	r3, [pc, #128]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1c3 0307 	rsb	r3, r3, #7
 8009666:	2b04      	cmp	r3, #4
 8009668:	d00b      	beq.n	8009682 <xPortStartScheduler+0x7a>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	60bb      	str	r3, [r7, #8]
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	e7fd      	b.n	800967e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009682:	4b17      	ldr	r3, [pc, #92]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	4a15      	ldr	r2, [pc, #84]	@ (80096e0 <xPortStartScheduler+0xd8>)
 800968a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800968c:	4b14      	ldr	r3, [pc, #80]	@ (80096e0 <xPortStartScheduler+0xd8>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009694:	4a12      	ldr	r2, [pc, #72]	@ (80096e0 <xPortStartScheduler+0xd8>)
 8009696:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	b2da      	uxtb	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096a0:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <xPortStartScheduler+0xdc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a0f      	ldr	r2, [pc, #60]	@ (80096e4 <xPortStartScheduler+0xdc>)
 80096a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80096aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <xPortStartScheduler+0xdc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a0c      	ldr	r2, [pc, #48]	@ (80096e4 <xPortStartScheduler+0xdc>)
 80096b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80096b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096b8:	f000 f8b8 	bl	800982c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	@ (80096e8 <xPortStartScheduler+0xe0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096c2:	f7ff ff91 	bl	80095e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096c6:	f7ff f869 	bl	800879c <vTaskSwitchContext>
	prvTaskExitError();
 80096ca:	f7ff ff49 	bl	8009560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000e400 	.word	0xe000e400
 80096dc:	200015dc 	.word	0x200015dc
 80096e0:	200015e0 	.word	0x200015e0
 80096e4:	e000ed20 	.word	0xe000ed20
 80096e8:	2000000c 	.word	0x2000000c

080096ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	607b      	str	r3, [r7, #4]
}
 8009704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009706:	4b0f      	ldr	r3, [pc, #60]	@ (8009744 <vPortEnterCritical+0x58>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	4a0d      	ldr	r2, [pc, #52]	@ (8009744 <vPortEnterCritical+0x58>)
 800970e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009710:	4b0c      	ldr	r3, [pc, #48]	@ (8009744 <vPortEnterCritical+0x58>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d110      	bne.n	800973a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009718:	4b0b      	ldr	r3, [pc, #44]	@ (8009748 <vPortEnterCritical+0x5c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00b      	beq.n	800973a <vPortEnterCritical+0x4e>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	603b      	str	r3, [r7, #0]
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <vPortEnterCritical+0x4a>
	}
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	bc80      	pop	{r7}
 8009742:	4770      	bx	lr
 8009744:	2000000c 	.word	0x2000000c
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009752:	4b12      	ldr	r3, [pc, #72]	@ (800979c <vPortExitCritical+0x50>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10b      	bne.n	8009772 <vPortExitCritical+0x26>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	e7fd      	b.n	800976e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009772:	4b0a      	ldr	r3, [pc, #40]	@ (800979c <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3b01      	subs	r3, #1
 8009778:	4a08      	ldr	r2, [pc, #32]	@ (800979c <vPortExitCritical+0x50>)
 800977a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800977c:	4b07      	ldr	r3, [pc, #28]	@ (800979c <vPortExitCritical+0x50>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <vPortExitCritical+0x44>
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	2000000c 	.word	0x2000000c

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b0d      	ldr	r3, [pc, #52]	@ (80097e0 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097b0:	6010      	str	r0, [r2, #0]
 80097b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80097b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097ba:	f380 8811 	msr	BASEPRI, r0
 80097be:	f7fe ffed 	bl	800879c <vTaskSwitchContext>
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f380 8811 	msr	BASEPRI, r0
 80097ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6808      	ldr	r0, [r1, #0]
 80097d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097d6:	f380 8809 	msr	PSP, r0
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	4770      	bx	lr

080097e0 <pxCurrentTCBConst>:
 80097e0:	20000fb0 	.word	0x20000fb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	607b      	str	r3, [r7, #4]
}
 8009800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009802:	f7fe ff11 	bl	8008628 <xTaskIncrementTick>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800980c:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <xPortSysTickHandler+0x40>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f383 8811 	msr	BASEPRI, r3
}
 800981e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <vPortSetupTimerInterrupt+0x30>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009836:	4b0a      	ldr	r3, [pc, #40]	@ (8009860 <vPortSetupTimerInterrupt+0x34>)
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800983c:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <vPortSetupTimerInterrupt+0x38>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a09      	ldr	r2, [pc, #36]	@ (8009868 <vPortSetupTimerInterrupt+0x3c>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	099b      	lsrs	r3, r3, #6
 8009848:	4a08      	ldr	r2, [pc, #32]	@ (800986c <vPortSetupTimerInterrupt+0x40>)
 800984a:	3b01      	subs	r3, #1
 800984c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800984e:	4b03      	ldr	r3, [pc, #12]	@ (800985c <vPortSetupTimerInterrupt+0x30>)
 8009850:	2207      	movs	r2, #7
 8009852:	601a      	str	r2, [r3, #0]
}
 8009854:	bf00      	nop
 8009856:	46bd      	mov	sp, r7
 8009858:	bc80      	pop	{r7}
 800985a:	4770      	bx	lr
 800985c:	e000e010 	.word	0xe000e010
 8009860:	e000e018 	.word	0xe000e018
 8009864:	20000000 	.word	0x20000000
 8009868:	10624dd3 	.word	0x10624dd3
 800986c:	e000e014 	.word	0xe000e014

08009870 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009876:	f3ef 8305 	mrs	r3, IPSR
 800987a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b0f      	cmp	r3, #15
 8009880:	d915      	bls.n	80098ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009882:	4a17      	ldr	r2, [pc, #92]	@ (80098e0 <vPortValidateInterruptPriority+0x70>)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4413      	add	r3, r2
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800988c:	4b15      	ldr	r3, [pc, #84]	@ (80098e4 <vPortValidateInterruptPriority+0x74>)
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	7afa      	ldrb	r2, [r7, #11]
 8009892:	429a      	cmp	r2, r3
 8009894:	d20b      	bcs.n	80098ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	607b      	str	r3, [r7, #4]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098ae:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <vPortValidateInterruptPriority+0x78>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098b6:	4b0d      	ldr	r3, [pc, #52]	@ (80098ec <vPortValidateInterruptPriority+0x7c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d90b      	bls.n	80098d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <vPortValidateInterruptPriority+0x62>
	}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr
 80098e0:	e000e3f0 	.word	0xe000e3f0
 80098e4:	200015dc 	.word	0x200015dc
 80098e8:	e000ed0c 	.word	0xe000ed0c
 80098ec:	200015e0 	.word	0x200015e0

080098f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	@ 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098fc:	f7fe fdc8 	bl	8008490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009900:	4b5c      	ldr	r3, [pc, #368]	@ (8009a74 <pvPortMalloc+0x184>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009908:	f000 f924 	bl	8009b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800990c:	4b5a      	ldr	r3, [pc, #360]	@ (8009a78 <pvPortMalloc+0x188>)
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4013      	ands	r3, r2
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 8095 	bne.w	8009a44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01e      	beq.n	800995e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009920:	2208      	movs	r2, #8
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4413      	add	r3, r2
 8009926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d015      	beq.n	800995e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f023 0307 	bic.w	r3, r3, #7
 8009938:	3308      	adds	r3, #8
 800993a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f003 0307 	and.w	r3, r3, #7
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <pvPortMalloc+0x6e>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	617b      	str	r3, [r7, #20]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d06f      	beq.n	8009a44 <pvPortMalloc+0x154>
 8009964:	4b45      	ldr	r3, [pc, #276]	@ (8009a7c <pvPortMalloc+0x18c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	429a      	cmp	r2, r3
 800996c:	d86a      	bhi.n	8009a44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800996e:	4b44      	ldr	r3, [pc, #272]	@ (8009a80 <pvPortMalloc+0x190>)
 8009970:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009972:	4b43      	ldr	r3, [pc, #268]	@ (8009a80 <pvPortMalloc+0x190>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009978:	e004      	b.n	8009984 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800997e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	429a      	cmp	r2, r3
 800998c:	d903      	bls.n	8009996 <pvPortMalloc+0xa6>
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1f1      	bne.n	800997a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009996:	4b37      	ldr	r3, [pc, #220]	@ (8009a74 <pvPortMalloc+0x184>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800999c:	429a      	cmp	r2, r3
 800999e:	d051      	beq.n	8009a44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2208      	movs	r2, #8
 80099a6:	4413      	add	r3, r2
 80099a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	1ad2      	subs	r2, r2, r3
 80099ba:	2308      	movs	r3, #8
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	429a      	cmp	r2, r3
 80099c0:	d920      	bls.n	8009a04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4413      	add	r3, r2
 80099c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	f003 0307 	and.w	r3, r3, #7
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <pvPortMalloc+0xfc>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	613b      	str	r3, [r7, #16]
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	e7fd      	b.n	80099e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	1ad2      	subs	r2, r2, r3
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099fe:	69b8      	ldr	r0, [r7, #24]
 8009a00:	f000 f90a 	bl	8009c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a04:	4b1d      	ldr	r3, [pc, #116]	@ (8009a7c <pvPortMalloc+0x18c>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a7c <pvPortMalloc+0x18c>)
 8009a10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a12:	4b1a      	ldr	r3, [pc, #104]	@ (8009a7c <pvPortMalloc+0x18c>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	4b1b      	ldr	r3, [pc, #108]	@ (8009a84 <pvPortMalloc+0x194>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d203      	bcs.n	8009a26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a1e:	4b17      	ldr	r3, [pc, #92]	@ (8009a7c <pvPortMalloc+0x18c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a18      	ldr	r2, [pc, #96]	@ (8009a84 <pvPortMalloc+0x194>)
 8009a24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	4b13      	ldr	r3, [pc, #76]	@ (8009a78 <pvPortMalloc+0x188>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	2200      	movs	r2, #0
 8009a38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	@ (8009a88 <pvPortMalloc+0x198>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4a11      	ldr	r2, [pc, #68]	@ (8009a88 <pvPortMalloc+0x198>)
 8009a42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a44:	f7fe fd32 	bl	80084ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00b      	beq.n	8009a6a <pvPortMalloc+0x17a>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60fb      	str	r3, [r7, #12]
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	e7fd      	b.n	8009a66 <pvPortMalloc+0x176>
	return pvReturn;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3728      	adds	r7, #40	@ 0x28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20003dd4 	.word	0x20003dd4
 8009a78:	20003de8 	.word	0x20003de8
 8009a7c:	20003dd8 	.word	0x20003dd8
 8009a80:	20003dcc 	.word	0x20003dcc
 8009a84:	20003ddc 	.word	0x20003ddc
 8009a88:	20003de0 	.word	0x20003de0

08009a8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d04f      	beq.n	8009b3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a9e:	2308      	movs	r3, #8
 8009aa0:	425b      	negs	r3, r3
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	4b25      	ldr	r3, [pc, #148]	@ (8009b48 <vPortFree+0xbc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <vPortFree+0x46>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60fb      	str	r3, [r7, #12]
}
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	e7fd      	b.n	8009ace <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00b      	beq.n	8009af2 <vPortFree+0x66>
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	60bb      	str	r3, [r7, #8]
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	e7fd      	b.n	8009aee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	4b14      	ldr	r3, [pc, #80]	@ (8009b48 <vPortFree+0xbc>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4013      	ands	r3, r2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01e      	beq.n	8009b3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11a      	bne.n	8009b3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b48 <vPortFree+0xbc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	43db      	mvns	r3, r3
 8009b12:	401a      	ands	r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b18:	f7fe fcba 	bl	8008490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	4b0a      	ldr	r3, [pc, #40]	@ (8009b4c <vPortFree+0xc0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4413      	add	r3, r2
 8009b26:	4a09      	ldr	r2, [pc, #36]	@ (8009b4c <vPortFree+0xc0>)
 8009b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f000 f874 	bl	8009c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b30:	4b07      	ldr	r3, [pc, #28]	@ (8009b50 <vPortFree+0xc4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a06      	ldr	r2, [pc, #24]	@ (8009b50 <vPortFree+0xc4>)
 8009b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b3a:	f7fe fcb7 	bl	80084ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b3e:	bf00      	nop
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20003de8 	.word	0x20003de8
 8009b4c:	20003dd8 	.word	0x20003dd8
 8009b50:	20003de4 	.word	0x20003de4

08009b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b5a:	f242 73e8 	movw	r3, #10216	@ 0x27e8
 8009b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b60:	4b27      	ldr	r3, [pc, #156]	@ (8009c00 <prvHeapInit+0xac>)
 8009b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00c      	beq.n	8009b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3307      	adds	r3, #7
 8009b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f023 0307 	bic.w	r3, r3, #7
 8009b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a1f      	ldr	r2, [pc, #124]	@ (8009c00 <prvHeapInit+0xac>)
 8009b84:	4413      	add	r3, r2
 8009b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c04 <prvHeapInit+0xb0>)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b92:	4b1c      	ldr	r3, [pc, #112]	@ (8009c04 <prvHeapInit+0xb0>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a15      	ldr	r2, [pc, #84]	@ (8009c08 <prvHeapInit+0xb4>)
 8009bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bb6:	4b14      	ldr	r3, [pc, #80]	@ (8009c08 <prvHeapInit+0xb4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bbe:	4b12      	ldr	r3, [pc, #72]	@ (8009c08 <prvHeapInit+0xb4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c08 <prvHeapInit+0xb4>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c0c <prvHeapInit+0xb8>)
 8009be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4a09      	ldr	r2, [pc, #36]	@ (8009c10 <prvHeapInit+0xbc>)
 8009bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bec:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <prvHeapInit+0xc0>)
 8009bee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bf2:	601a      	str	r2, [r3, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	200015e4 	.word	0x200015e4
 8009c04:	20003dcc 	.word	0x20003dcc
 8009c08:	20003dd4 	.word	0x20003dd4
 8009c0c:	20003ddc 	.word	0x20003ddc
 8009c10:	20003dd8 	.word	0x20003dd8
 8009c14:	20003de8 	.word	0x20003de8

08009c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c20:	4b27      	ldr	r3, [pc, #156]	@ (8009cc0 <prvInsertBlockIntoFreeList+0xa8>)
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e002      	b.n	8009c2c <prvInsertBlockIntoFreeList+0x14>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d8f7      	bhi.n	8009c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d108      	bne.n	8009c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	441a      	add	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d118      	bne.n	8009ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b14      	ldr	r3, [pc, #80]	@ (8009cc4 <prvInsertBlockIntoFreeList+0xac>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d00d      	beq.n	8009c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	e008      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <prvInsertBlockIntoFreeList+0xac>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e003      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d002      	beq.n	8009cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bc80      	pop	{r7}
 8009cbe:	4770      	bx	lr
 8009cc0:	20003dcc 	.word	0x20003dcc
 8009cc4:	20003dd4 	.word	0x20003dd4

08009cc8 <findslot>:
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <findslot+0x2c>)
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	4604      	mov	r4, r0
 8009cce:	6818      	ldr	r0, [r3, #0]
 8009cd0:	b118      	cbz	r0, 8009cda <findslot+0x12>
 8009cd2:	6a03      	ldr	r3, [r0, #32]
 8009cd4:	b90b      	cbnz	r3, 8009cda <findslot+0x12>
 8009cd6:	f001 f8d9 	bl	800ae8c <__sinit>
 8009cda:	2c13      	cmp	r4, #19
 8009cdc:	d807      	bhi.n	8009cee <findslot+0x26>
 8009cde:	4806      	ldr	r0, [pc, #24]	@ (8009cf8 <findslot+0x30>)
 8009ce0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8009ce4:	3201      	adds	r2, #1
 8009ce6:	d002      	beq.n	8009cee <findslot+0x26>
 8009ce8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8009cec:	bd10      	pop	{r4, pc}
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e7fc      	b.n	8009cec <findslot+0x24>
 8009cf2:	bf00      	nop
 8009cf4:	20000024 	.word	0x20000024
 8009cf8:	20003df8 	.word	0x20003df8

08009cfc <error>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	f001 fe94 	bl	800ba2c <__errno>
 8009d04:	2613      	movs	r6, #19
 8009d06:	4605      	mov	r5, r0
 8009d08:	2700      	movs	r7, #0
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	4639      	mov	r1, r7
 8009d0e:	beab      	bkpt	0x00ab
 8009d10:	4606      	mov	r6, r0
 8009d12:	4620      	mov	r0, r4
 8009d14:	602e      	str	r6, [r5, #0]
 8009d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d18 <checkerror>:
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d101      	bne.n	8009d20 <checkerror+0x8>
 8009d1c:	f7ff bfee 	b.w	8009cfc <error>
 8009d20:	4770      	bx	lr

08009d22 <_swiread>:
 8009d22:	b530      	push	{r4, r5, lr}
 8009d24:	b085      	sub	sp, #20
 8009d26:	2406      	movs	r4, #6
 8009d28:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009d2c:	9203      	str	r2, [sp, #12]
 8009d2e:	ad01      	add	r5, sp, #4
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	beab      	bkpt	0x00ab
 8009d36:	4604      	mov	r4, r0
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f7ff ffed 	bl	8009d18 <checkerror>
 8009d3e:	b005      	add	sp, #20
 8009d40:	bd30      	pop	{r4, r5, pc}

08009d42 <_read>:
 8009d42:	b570      	push	{r4, r5, r6, lr}
 8009d44:	460e      	mov	r6, r1
 8009d46:	4614      	mov	r4, r2
 8009d48:	f7ff ffbe 	bl	8009cc8 <findslot>
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	b930      	cbnz	r0, 8009d5e <_read+0x1c>
 8009d50:	f001 fe6c 	bl	800ba2c <__errno>
 8009d54:	2309      	movs	r3, #9
 8009d56:	6003      	str	r3, [r0, #0]
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4631      	mov	r1, r6
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	f7ff ffdd 	bl	8009d22 <_swiread>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d0f5      	beq.n	8009d58 <_read+0x16>
 8009d6c:	686b      	ldr	r3, [r5, #4]
 8009d6e:	1a20      	subs	r0, r4, r0
 8009d70:	4403      	add	r3, r0
 8009d72:	606b      	str	r3, [r5, #4]
 8009d74:	e7f2      	b.n	8009d5c <_read+0x1a>

08009d76 <_swilseek>:
 8009d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d78:	460c      	mov	r4, r1
 8009d7a:	4616      	mov	r6, r2
 8009d7c:	f7ff ffa4 	bl	8009cc8 <findslot>
 8009d80:	4605      	mov	r5, r0
 8009d82:	b940      	cbnz	r0, 8009d96 <_swilseek+0x20>
 8009d84:	f001 fe52 	bl	800ba2c <__errno>
 8009d88:	2309      	movs	r3, #9
 8009d8a:	6003      	str	r3, [r0, #0]
 8009d8c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009d90:	4620      	mov	r0, r4
 8009d92:	b003      	add	sp, #12
 8009d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d96:	2e02      	cmp	r6, #2
 8009d98:	d903      	bls.n	8009da2 <_swilseek+0x2c>
 8009d9a:	f001 fe47 	bl	800ba2c <__errno>
 8009d9e:	2316      	movs	r3, #22
 8009da0:	e7f3      	b.n	8009d8a <_swilseek+0x14>
 8009da2:	2e01      	cmp	r6, #1
 8009da4:	d112      	bne.n	8009dcc <_swilseek+0x56>
 8009da6:	6843      	ldr	r3, [r0, #4]
 8009da8:	18e4      	adds	r4, r4, r3
 8009daa:	d4f6      	bmi.n	8009d9a <_swilseek+0x24>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	260a      	movs	r6, #10
 8009db0:	466f      	mov	r7, sp
 8009db2:	e9cd 3400 	strd	r3, r4, [sp]
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	beab      	bkpt	0x00ab
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ffaa 	bl	8009d18 <checkerror>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dbe1      	blt.n	8009d8c <_swilseek+0x16>
 8009dc8:	606c      	str	r4, [r5, #4]
 8009dca:	e7e1      	b.n	8009d90 <_swilseek+0x1a>
 8009dcc:	2e02      	cmp	r6, #2
 8009dce:	6803      	ldr	r3, [r0, #0]
 8009dd0:	d1ec      	bne.n	8009dac <_swilseek+0x36>
 8009dd2:	260c      	movs	r6, #12
 8009dd4:	466f      	mov	r7, sp
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	beab      	bkpt	0x00ab
 8009dde:	4606      	mov	r6, r0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ff99 	bl	8009d18 <checkerror>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d0d0      	beq.n	8009d8c <_swilseek+0x16>
 8009dea:	4404      	add	r4, r0
 8009dec:	e7de      	b.n	8009dac <_swilseek+0x36>

08009dee <_lseek>:
 8009dee:	f7ff bfc2 	b.w	8009d76 <_swilseek>

08009df2 <_swiwrite>:
 8009df2:	b530      	push	{r4, r5, lr}
 8009df4:	b085      	sub	sp, #20
 8009df6:	2405      	movs	r4, #5
 8009df8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009dfc:	9203      	str	r2, [sp, #12]
 8009dfe:	ad01      	add	r5, sp, #4
 8009e00:	4620      	mov	r0, r4
 8009e02:	4629      	mov	r1, r5
 8009e04:	beab      	bkpt	0x00ab
 8009e06:	4604      	mov	r4, r0
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f7ff ff85 	bl	8009d18 <checkerror>
 8009e0e:	b005      	add	sp, #20
 8009e10:	bd30      	pop	{r4, r5, pc}

08009e12 <_write>:
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	460e      	mov	r6, r1
 8009e16:	4615      	mov	r5, r2
 8009e18:	f7ff ff56 	bl	8009cc8 <findslot>
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	b930      	cbnz	r0, 8009e2e <_write+0x1c>
 8009e20:	f001 fe04 	bl	800ba2c <__errno>
 8009e24:	2309      	movs	r3, #9
 8009e26:	6003      	str	r3, [r0, #0]
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e2c:	bd70      	pop	{r4, r5, r6, pc}
 8009e2e:	462a      	mov	r2, r5
 8009e30:	4631      	mov	r1, r6
 8009e32:	6800      	ldr	r0, [r0, #0]
 8009e34:	f7ff ffdd 	bl	8009df2 <_swiwrite>
 8009e38:	1e03      	subs	r3, r0, #0
 8009e3a:	dbf5      	blt.n	8009e28 <_write+0x16>
 8009e3c:	6862      	ldr	r2, [r4, #4]
 8009e3e:	1ae8      	subs	r0, r5, r3
 8009e40:	4402      	add	r2, r0
 8009e42:	42ab      	cmp	r3, r5
 8009e44:	6062      	str	r2, [r4, #4]
 8009e46:	d1f1      	bne.n	8009e2c <_write+0x1a>
 8009e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	f7ff bf55 	b.w	8009cfc <error>

08009e52 <_swiclose>:
 8009e52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e54:	2402      	movs	r4, #2
 8009e56:	9001      	str	r0, [sp, #4]
 8009e58:	ad01      	add	r5, sp, #4
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	beab      	bkpt	0x00ab
 8009e60:	4604      	mov	r4, r0
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff ff58 	bl	8009d18 <checkerror>
 8009e68:	b003      	add	sp, #12
 8009e6a:	bd30      	pop	{r4, r5, pc}

08009e6c <_close>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4605      	mov	r5, r0
 8009e70:	f7ff ff2a 	bl	8009cc8 <findslot>
 8009e74:	4604      	mov	r4, r0
 8009e76:	b930      	cbnz	r0, 8009e86 <_close+0x1a>
 8009e78:	f001 fdd8 	bl	800ba2c <__errno>
 8009e7c:	2309      	movs	r3, #9
 8009e7e:	6003      	str	r3, [r0, #0]
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	3d01      	subs	r5, #1
 8009e88:	2d01      	cmp	r5, #1
 8009e8a:	d809      	bhi.n	8009ea0 <_close+0x34>
 8009e8c:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <_close+0x40>)
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d104      	bne.n	8009ea0 <_close+0x34>
 8009e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	e7f1      	b.n	8009e84 <_close+0x18>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	f7ff ffd6 	bl	8009e52 <_swiclose>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0f5      	beq.n	8009e96 <_close+0x2a>
 8009eaa:	e7eb      	b.n	8009e84 <_close+0x18>
 8009eac:	20003df8 	.word	0x20003df8

08009eb0 <_getpid>:
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	4770      	bx	lr

08009eb4 <_swistat>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	f7ff ff06 	bl	8009cc8 <findslot>
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	b930      	cbnz	r0, 8009ece <_swistat+0x1a>
 8009ec0:	f001 fdb4 	bl	800ba2c <__errno>
 8009ec4:	2309      	movs	r3, #9
 8009ec6:	6003      	str	r3, [r0, #0]
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ecc:	bd70      	pop	{r4, r5, r6, pc}
 8009ece:	6863      	ldr	r3, [r4, #4]
 8009ed0:	260c      	movs	r6, #12
 8009ed2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009edc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	beab      	bkpt	0x00ab
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f7ff ff16 	bl	8009d18 <checkerror>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d0eb      	beq.n	8009ec8 <_swistat+0x14>
 8009ef0:	6120      	str	r0, [r4, #16]
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e7ea      	b.n	8009ecc <_swistat+0x18>

08009ef6 <_fstat>:
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	2100      	movs	r1, #0
 8009efc:	4604      	mov	r4, r0
 8009efe:	2258      	movs	r2, #88	@ 0x58
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 fad6 	bl	800b4b2 <memset>
 8009f06:	4601      	mov	r1, r0
 8009f08:	4620      	mov	r0, r4
 8009f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f0e:	f7ff bfd1 	b.w	8009eb4 <_swistat>

08009f12 <_stat>:
 8009f12:	b538      	push	{r3, r4, r5, lr}
 8009f14:	460d      	mov	r5, r1
 8009f16:	4604      	mov	r4, r0
 8009f18:	2258      	movs	r2, #88	@ 0x58
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f001 fac8 	bl	800b4b2 <memset>
 8009f22:	4620      	mov	r0, r4
 8009f24:	2100      	movs	r1, #0
 8009f26:	f000 f811 	bl	8009f4c <_swiopen>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	d00b      	beq.n	8009f48 <_stat+0x36>
 8009f30:	686b      	ldr	r3, [r5, #4]
 8009f32:	4629      	mov	r1, r5
 8009f34:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009f38:	606b      	str	r3, [r5, #4]
 8009f3a:	f7ff ffbb 	bl	8009eb4 <_swistat>
 8009f3e:	4605      	mov	r5, r0
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff ff93 	bl	8009e6c <_close>
 8009f46:	462c      	mov	r4, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}

08009f4c <_swiopen>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	4682      	mov	sl, r0
 8009f52:	460e      	mov	r6, r1
 8009f54:	2400      	movs	r4, #0
 8009f56:	4f28      	ldr	r7, [pc, #160]	@ (8009ff8 <_swiopen+0xac>)
 8009f58:	b096      	sub	sp, #88	@ 0x58
 8009f5a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8009f5e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8009f62:	3301      	adds	r3, #1
 8009f64:	d00c      	beq.n	8009f80 <_swiopen+0x34>
 8009f66:	3401      	adds	r4, #1
 8009f68:	2c14      	cmp	r4, #20
 8009f6a:	d1f6      	bne.n	8009f5a <_swiopen+0xe>
 8009f6c:	f001 fd5e 	bl	800ba2c <__errno>
 8009f70:	2318      	movs	r3, #24
 8009f72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	b016      	add	sp, #88	@ 0x58
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8009f84:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f88:	46e9      	mov	r9, sp
 8009f8a:	d109      	bne.n	8009fa0 <_swiopen+0x54>
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f7ff ffbf 	bl	8009f12 <_stat>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d003      	beq.n	8009fa0 <_swiopen+0x54>
 8009f98:	f001 fd48 	bl	800ba2c <__errno>
 8009f9c:	2311      	movs	r3, #17
 8009f9e:	e7e8      	b.n	8009f72 <_swiopen+0x26>
 8009fa0:	f240 6301 	movw	r3, #1537	@ 0x601
 8009fa4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8009fa8:	07b2      	lsls	r2, r6, #30
 8009faa:	bf48      	it	mi
 8009fac:	f045 0502 	orrmi.w	r5, r5, #2
 8009fb0:	421e      	tst	r6, r3
 8009fb2:	bf18      	it	ne
 8009fb4:	f045 0504 	orrne.w	r5, r5, #4
 8009fb8:	0733      	lsls	r3, r6, #28
 8009fba:	bf48      	it	mi
 8009fbc:	f025 0504 	bicmi.w	r5, r5, #4
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	bf48      	it	mi
 8009fc4:	f045 0508 	orrmi.w	r5, r5, #8
 8009fc8:	f8cd a000 	str.w	sl, [sp]
 8009fcc:	f7f6 f8c0 	bl	8000150 <strlen>
 8009fd0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8009fd4:	2501      	movs	r5, #1
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4649      	mov	r1, r9
 8009fda:	beab      	bkpt	0x00ab
 8009fdc:	4605      	mov	r5, r0
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	db05      	blt.n	8009fee <_swiopen+0xa2>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8009fe8:	4447      	add	r7, r8
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	e7c4      	b.n	8009f78 <_swiopen+0x2c>
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f7ff fe84 	bl	8009cfc <error>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	e7bf      	b.n	8009f78 <_swiopen+0x2c>
 8009ff8:	20003df8 	.word	0x20003df8

08009ffc <_open>:
 8009ffc:	b40e      	push	{r1, r2, r3}
 8009ffe:	b500      	push	{lr}
 800a000:	9901      	ldr	r1, [sp, #4]
 800a002:	f7ff ffa3 	bl	8009f4c <_swiopen>
 800a006:	f85d eb04 	ldr.w	lr, [sp], #4
 800a00a:	b003      	add	sp, #12
 800a00c:	4770      	bx	lr
	...

0800a010 <_get_semihosting_exts>:
 800a010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4829      	ldr	r0, [pc, #164]	@ (800a0c0 <_get_semihosting_exts+0xb0>)
 800a01a:	2100      	movs	r1, #0
 800a01c:	4615      	mov	r5, r2
 800a01e:	f7ff ff95 	bl	8009f4c <_swiopen>
 800a022:	4604      	mov	r4, r0
 800a024:	462a      	mov	r2, r5
 800a026:	2100      	movs	r1, #0
 800a028:	4630      	mov	r0, r6
 800a02a:	f001 fa42 	bl	800b4b2 <memset>
 800a02e:	1c63      	adds	r3, r4, #1
 800a030:	d014      	beq.n	800a05c <_get_semihosting_exts+0x4c>
 800a032:	4620      	mov	r0, r4
 800a034:	f7ff fe48 	bl	8009cc8 <findslot>
 800a038:	f04f 080c 	mov.w	r8, #12
 800a03c:	4681      	mov	r9, r0
 800a03e:	4640      	mov	r0, r8
 800a040:	4649      	mov	r1, r9
 800a042:	beab      	bkpt	0x00ab
 800a044:	4680      	mov	r8, r0
 800a046:	4640      	mov	r0, r8
 800a048:	f7ff fe66 	bl	8009d18 <checkerror>
 800a04c:	2803      	cmp	r0, #3
 800a04e:	dd02      	ble.n	800a056 <_get_semihosting_exts+0x46>
 800a050:	1ec3      	subs	r3, r0, #3
 800a052:	42ab      	cmp	r3, r5
 800a054:	dc07      	bgt.n	800a066 <_get_semihosting_exts+0x56>
 800a056:	4620      	mov	r0, r4
 800a058:	f7ff ff08 	bl	8009e6c <_close>
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a060:	b003      	add	sp, #12
 800a062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a066:	2204      	movs	r2, #4
 800a068:	4620      	mov	r0, r4
 800a06a:	eb0d 0102 	add.w	r1, sp, r2
 800a06e:	f7ff fe68 	bl	8009d42 <_read>
 800a072:	2803      	cmp	r0, #3
 800a074:	ddef      	ble.n	800a056 <_get_semihosting_exts+0x46>
 800a076:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a07a:	2b53      	cmp	r3, #83	@ 0x53
 800a07c:	d1eb      	bne.n	800a056 <_get_semihosting_exts+0x46>
 800a07e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a082:	2b48      	cmp	r3, #72	@ 0x48
 800a084:	d1e7      	bne.n	800a056 <_get_semihosting_exts+0x46>
 800a086:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a08a:	2b46      	cmp	r3, #70	@ 0x46
 800a08c:	d1e3      	bne.n	800a056 <_get_semihosting_exts+0x46>
 800a08e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a092:	2b42      	cmp	r3, #66	@ 0x42
 800a094:	d1df      	bne.n	800a056 <_get_semihosting_exts+0x46>
 800a096:	2201      	movs	r2, #1
 800a098:	4639      	mov	r1, r7
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff fe6b 	bl	8009d76 <_swilseek>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dbd8      	blt.n	800a056 <_get_semihosting_exts+0x46>
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff fe4a 	bl	8009d42 <_read>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff fedb 	bl	8009e6c <_close>
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f7ff fe2e 	bl	8009d18 <checkerror>
 800a0bc:	e7d0      	b.n	800a060 <_get_semihosting_exts+0x50>
 800a0be:	bf00      	nop
 800a0c0:	0800f1d2 	.word	0x0800f1d2

0800a0c4 <initialise_semihosting_exts>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	4d09      	ldr	r5, [pc, #36]	@ (800a0f0 <initialise_semihosting_exts+0x2c>)
 800a0cc:	4c09      	ldr	r4, [pc, #36]	@ (800a0f4 <initialise_semihosting_exts+0x30>)
 800a0ce:	a801      	add	r0, sp, #4
 800a0d0:	6029      	str	r1, [r5, #0]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	f7ff ff9c 	bl	800a010 <_get_semihosting_exts>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	dd07      	ble.n	800a0ec <initialise_semihosting_exts+0x28>
 800a0dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0e0:	f003 0201 	and.w	r2, r3, #1
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	b003      	add	sp, #12
 800a0ee:	bd30      	pop	{r4, r5, pc}
 800a0f0:	20000014 	.word	0x20000014
 800a0f4:	20000010 	.word	0x20000010

0800a0f8 <_has_ext_stdout_stderr>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4c04      	ldr	r4, [pc, #16]	@ (800a10c <_has_ext_stdout_stderr+0x14>)
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da01      	bge.n	800a106 <_has_ext_stdout_stderr+0xe>
 800a102:	f7ff ffdf 	bl	800a0c4 <initialise_semihosting_exts>
 800a106:	6820      	ldr	r0, [r4, #0]
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	20000010 	.word	0x20000010

0800a110 <initialise_monitor_handles>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	2303      	movs	r3, #3
 800a116:	2400      	movs	r4, #0
 800a118:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 800a1bc <initialise_monitor_handles+0xac>
 800a11c:	b085      	sub	sp, #20
 800a11e:	f8cd 9004 	str.w	r9, [sp, #4]
 800a122:	af01      	add	r7, sp, #4
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	2501      	movs	r5, #1
 800a128:	9402      	str	r4, [sp, #8]
 800a12a:	4628      	mov	r0, r5
 800a12c:	4639      	mov	r1, r7
 800a12e:	beab      	bkpt	0x00ab
 800a130:	4605      	mov	r5, r0
 800a132:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a136:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800a1c0 <initialise_monitor_handles+0xb0>
 800a13a:	4623      	mov	r3, r4
 800a13c:	4c21      	ldr	r4, [pc, #132]	@ (800a1c4 <initialise_monitor_handles+0xb4>)
 800a13e:	f8c8 5000 	str.w	r5, [r8]
 800a142:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800a146:	3301      	adds	r3, #1
 800a148:	2b14      	cmp	r3, #20
 800a14a:	d1fa      	bne.n	800a142 <initialise_monitor_handles+0x32>
 800a14c:	f7ff ffd4 	bl	800a0f8 <_has_ext_stdout_stderr>
 800a150:	4d1d      	ldr	r5, [pc, #116]	@ (800a1c8 <initialise_monitor_handles+0xb8>)
 800a152:	b1d0      	cbz	r0, 800a18a <initialise_monitor_handles+0x7a>
 800a154:	f04f 0a03 	mov.w	sl, #3
 800a158:	2304      	movs	r3, #4
 800a15a:	f8cd 9004 	str.w	r9, [sp, #4]
 800a15e:	2601      	movs	r6, #1
 800a160:	f8cd a00c 	str.w	sl, [sp, #12]
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	4630      	mov	r0, r6
 800a168:	4639      	mov	r1, r7
 800a16a:	beab      	bkpt	0x00ab
 800a16c:	4683      	mov	fp, r0
 800a16e:	4b17      	ldr	r3, [pc, #92]	@ (800a1cc <initialise_monitor_handles+0xbc>)
 800a170:	f8cd 9004 	str.w	r9, [sp, #4]
 800a174:	f8c3 b000 	str.w	fp, [r3]
 800a178:	2308      	movs	r3, #8
 800a17a:	f8cd a00c 	str.w	sl, [sp, #12]
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	beab      	bkpt	0x00ab
 800a186:	4606      	mov	r6, r0
 800a188:	602e      	str	r6, [r5, #0]
 800a18a:	2600      	movs	r6, #0
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	6066      	str	r6, [r4, #4]
 800a190:	3301      	adds	r3, #1
 800a192:	bf02      	ittt	eq
 800a194:	4b0d      	ldreq	r3, [pc, #52]	@ (800a1cc <initialise_monitor_handles+0xbc>)
 800a196:	681b      	ldreq	r3, [r3, #0]
 800a198:	602b      	streq	r3, [r5, #0]
 800a19a:	f8d8 3000 	ldr.w	r3, [r8]
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	f7ff ffaa 	bl	800a0f8 <_has_ext_stdout_stderr>
 800a1a4:	b130      	cbz	r0, 800a1b4 <initialise_monitor_handles+0xa4>
 800a1a6:	4b09      	ldr	r3, [pc, #36]	@ (800a1cc <initialise_monitor_handles+0xbc>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800a1b4:	b005      	add	sp, #20
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800f1e8 	.word	0x0800f1e8
 800a1c0:	20003df4 	.word	0x20003df4
 800a1c4:	20003df8 	.word	0x20003df8
 800a1c8:	20003dec 	.word	0x20003dec
 800a1cc:	20003df0 	.word	0x20003df0

0800a1d0 <_isatty>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	f7ff fd79 	bl	8009cc8 <findslot>
 800a1d6:	2409      	movs	r4, #9
 800a1d8:	4605      	mov	r5, r0
 800a1da:	b920      	cbnz	r0, 800a1e6 <_isatty+0x16>
 800a1dc:	f001 fc26 	bl	800ba2c <__errno>
 800a1e0:	6004      	str	r4, [r0, #0]
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	beab      	bkpt	0x00ab
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	2c01      	cmp	r4, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	d0f7      	beq.n	800a1e4 <_isatty+0x14>
 800a1f4:	f001 fc1a 	bl	800ba2c <__errno>
 800a1f8:	2513      	movs	r5, #19
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	4628      	mov	r0, r5
 800a200:	4631      	mov	r1, r6
 800a202:	beab      	bkpt	0x00ab
 800a204:	4605      	mov	r5, r0
 800a206:	6025      	str	r5, [r4, #0]
 800a208:	e7eb      	b.n	800a1e2 <_isatty+0x12>
	...

0800a20c <_free_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4605      	mov	r5, r0
 800a210:	2900      	cmp	r1, #0
 800a212:	d040      	beq.n	800a296 <_free_r+0x8a>
 800a214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a218:	1f0c      	subs	r4, r1, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfb8      	it	lt
 800a21e:	18e4      	addlt	r4, r4, r3
 800a220:	f000 f8ee 	bl	800a400 <__malloc_lock>
 800a224:	4a1c      	ldr	r2, [pc, #112]	@ (800a298 <_free_r+0x8c>)
 800a226:	6813      	ldr	r3, [r2, #0]
 800a228:	b933      	cbnz	r3, 800a238 <_free_r+0x2c>
 800a22a:	6063      	str	r3, [r4, #4]
 800a22c:	6014      	str	r4, [r2, #0]
 800a22e:	4628      	mov	r0, r5
 800a230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a234:	f000 b8ea 	b.w	800a40c <__malloc_unlock>
 800a238:	42a3      	cmp	r3, r4
 800a23a:	d908      	bls.n	800a24e <_free_r+0x42>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	1821      	adds	r1, r4, r0
 800a240:	428b      	cmp	r3, r1
 800a242:	bf01      	itttt	eq
 800a244:	6819      	ldreq	r1, [r3, #0]
 800a246:	685b      	ldreq	r3, [r3, #4]
 800a248:	1809      	addeq	r1, r1, r0
 800a24a:	6021      	streq	r1, [r4, #0]
 800a24c:	e7ed      	b.n	800a22a <_free_r+0x1e>
 800a24e:	461a      	mov	r2, r3
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	b10b      	cbz	r3, 800a258 <_free_r+0x4c>
 800a254:	42a3      	cmp	r3, r4
 800a256:	d9fa      	bls.n	800a24e <_free_r+0x42>
 800a258:	6811      	ldr	r1, [r2, #0]
 800a25a:	1850      	adds	r0, r2, r1
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d10b      	bne.n	800a278 <_free_r+0x6c>
 800a260:	6820      	ldr	r0, [r4, #0]
 800a262:	4401      	add	r1, r0
 800a264:	1850      	adds	r0, r2, r1
 800a266:	4283      	cmp	r3, r0
 800a268:	6011      	str	r1, [r2, #0]
 800a26a:	d1e0      	bne.n	800a22e <_free_r+0x22>
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	4408      	add	r0, r1
 800a272:	6010      	str	r0, [r2, #0]
 800a274:	6053      	str	r3, [r2, #4]
 800a276:	e7da      	b.n	800a22e <_free_r+0x22>
 800a278:	d902      	bls.n	800a280 <_free_r+0x74>
 800a27a:	230c      	movs	r3, #12
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	e7d6      	b.n	800a22e <_free_r+0x22>
 800a280:	6820      	ldr	r0, [r4, #0]
 800a282:	1821      	adds	r1, r4, r0
 800a284:	428b      	cmp	r3, r1
 800a286:	bf01      	itttt	eq
 800a288:	6819      	ldreq	r1, [r3, #0]
 800a28a:	685b      	ldreq	r3, [r3, #4]
 800a28c:	1809      	addeq	r1, r1, r0
 800a28e:	6021      	streq	r1, [r4, #0]
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	6054      	str	r4, [r2, #4]
 800a294:	e7cb      	b.n	800a22e <_free_r+0x22>
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20003e9c 	.word	0x20003e9c

0800a29c <malloc>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	@ (800a2a8 <malloc+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 b82d 	b.w	800a300 <_malloc_r>
 800a2a6:	bf00      	nop
 800a2a8:	20000024 	.word	0x20000024

0800a2ac <free>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	@ (800a2b8 <free+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f7ff bfab 	b.w	800a20c <_free_r>
 800a2b6:	bf00      	nop
 800a2b8:	20000024 	.word	0x20000024

0800a2bc <sbrk_aligned>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4e0f      	ldr	r6, [pc, #60]	@ (800a2fc <sbrk_aligned+0x40>)
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	6831      	ldr	r1, [r6, #0]
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	b911      	cbnz	r1, 800a2ce <sbrk_aligned+0x12>
 800a2c8:	f001 fb8e 	bl	800b9e8 <_sbrk_r>
 800a2cc:	6030      	str	r0, [r6, #0]
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f001 fb89 	bl	800b9e8 <_sbrk_r>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	d103      	bne.n	800a2e2 <sbrk_aligned+0x26>
 800a2da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2de:	4620      	mov	r0, r4
 800a2e0:	bd70      	pop	{r4, r5, r6, pc}
 800a2e2:	1cc4      	adds	r4, r0, #3
 800a2e4:	f024 0403 	bic.w	r4, r4, #3
 800a2e8:	42a0      	cmp	r0, r4
 800a2ea:	d0f8      	beq.n	800a2de <sbrk_aligned+0x22>
 800a2ec:	1a21      	subs	r1, r4, r0
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f001 fb7a 	bl	800b9e8 <_sbrk_r>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d1f2      	bne.n	800a2de <sbrk_aligned+0x22>
 800a2f8:	e7ef      	b.n	800a2da <sbrk_aligned+0x1e>
 800a2fa:	bf00      	nop
 800a2fc:	20003e98 	.word	0x20003e98

0800a300 <_malloc_r>:
 800a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a304:	1ccd      	adds	r5, r1, #3
 800a306:	f025 0503 	bic.w	r5, r5, #3
 800a30a:	3508      	adds	r5, #8
 800a30c:	2d0c      	cmp	r5, #12
 800a30e:	bf38      	it	cc
 800a310:	250c      	movcc	r5, #12
 800a312:	2d00      	cmp	r5, #0
 800a314:	4606      	mov	r6, r0
 800a316:	db01      	blt.n	800a31c <_malloc_r+0x1c>
 800a318:	42a9      	cmp	r1, r5
 800a31a:	d904      	bls.n	800a326 <_malloc_r+0x26>
 800a31c:	230c      	movs	r3, #12
 800a31e:	6033      	str	r3, [r6, #0]
 800a320:	2000      	movs	r0, #0
 800a322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a326:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3fc <_malloc_r+0xfc>
 800a32a:	f000 f869 	bl	800a400 <__malloc_lock>
 800a32e:	f8d8 3000 	ldr.w	r3, [r8]
 800a332:	461c      	mov	r4, r3
 800a334:	bb44      	cbnz	r4, 800a388 <_malloc_r+0x88>
 800a336:	4629      	mov	r1, r5
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff ffbf 	bl	800a2bc <sbrk_aligned>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	4604      	mov	r4, r0
 800a342:	d158      	bne.n	800a3f6 <_malloc_r+0xf6>
 800a344:	f8d8 4000 	ldr.w	r4, [r8]
 800a348:	4627      	mov	r7, r4
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	d143      	bne.n	800a3d6 <_malloc_r+0xd6>
 800a34e:	2c00      	cmp	r4, #0
 800a350:	d04b      	beq.n	800a3ea <_malloc_r+0xea>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	4639      	mov	r1, r7
 800a356:	4630      	mov	r0, r6
 800a358:	eb04 0903 	add.w	r9, r4, r3
 800a35c:	f001 fb44 	bl	800b9e8 <_sbrk_r>
 800a360:	4581      	cmp	r9, r0
 800a362:	d142      	bne.n	800a3ea <_malloc_r+0xea>
 800a364:	6821      	ldr	r1, [r4, #0]
 800a366:	4630      	mov	r0, r6
 800a368:	1a6d      	subs	r5, r5, r1
 800a36a:	4629      	mov	r1, r5
 800a36c:	f7ff ffa6 	bl	800a2bc <sbrk_aligned>
 800a370:	3001      	adds	r0, #1
 800a372:	d03a      	beq.n	800a3ea <_malloc_r+0xea>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	442b      	add	r3, r5
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	f8d8 3000 	ldr.w	r3, [r8]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	bb62      	cbnz	r2, 800a3dc <_malloc_r+0xdc>
 800a382:	f8c8 7000 	str.w	r7, [r8]
 800a386:	e00f      	b.n	800a3a8 <_malloc_r+0xa8>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	1b52      	subs	r2, r2, r5
 800a38c:	d420      	bmi.n	800a3d0 <_malloc_r+0xd0>
 800a38e:	2a0b      	cmp	r2, #11
 800a390:	d917      	bls.n	800a3c2 <_malloc_r+0xc2>
 800a392:	1961      	adds	r1, r4, r5
 800a394:	42a3      	cmp	r3, r4
 800a396:	6025      	str	r5, [r4, #0]
 800a398:	bf18      	it	ne
 800a39a:	6059      	strne	r1, [r3, #4]
 800a39c:	6863      	ldr	r3, [r4, #4]
 800a39e:	bf08      	it	eq
 800a3a0:	f8c8 1000 	streq.w	r1, [r8]
 800a3a4:	5162      	str	r2, [r4, r5]
 800a3a6:	604b      	str	r3, [r1, #4]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f82f 	bl	800a40c <__malloc_unlock>
 800a3ae:	f104 000b 	add.w	r0, r4, #11
 800a3b2:	1d23      	adds	r3, r4, #4
 800a3b4:	f020 0007 	bic.w	r0, r0, #7
 800a3b8:	1ac2      	subs	r2, r0, r3
 800a3ba:	bf1c      	itt	ne
 800a3bc:	1a1b      	subne	r3, r3, r0
 800a3be:	50a3      	strne	r3, [r4, r2]
 800a3c0:	e7af      	b.n	800a322 <_malloc_r+0x22>
 800a3c2:	6862      	ldr	r2, [r4, #4]
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	bf0c      	ite	eq
 800a3c8:	f8c8 2000 	streq.w	r2, [r8]
 800a3cc:	605a      	strne	r2, [r3, #4]
 800a3ce:	e7eb      	b.n	800a3a8 <_malloc_r+0xa8>
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	6864      	ldr	r4, [r4, #4]
 800a3d4:	e7ae      	b.n	800a334 <_malloc_r+0x34>
 800a3d6:	463c      	mov	r4, r7
 800a3d8:	687f      	ldr	r7, [r7, #4]
 800a3da:	e7b6      	b.n	800a34a <_malloc_r+0x4a>
 800a3dc:	461a      	mov	r2, r3
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d1fb      	bne.n	800a3dc <_malloc_r+0xdc>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	6053      	str	r3, [r2, #4]
 800a3e8:	e7de      	b.n	800a3a8 <_malloc_r+0xa8>
 800a3ea:	230c      	movs	r3, #12
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	6033      	str	r3, [r6, #0]
 800a3f0:	f000 f80c 	bl	800a40c <__malloc_unlock>
 800a3f4:	e794      	b.n	800a320 <_malloc_r+0x20>
 800a3f6:	6005      	str	r5, [r0, #0]
 800a3f8:	e7d6      	b.n	800a3a8 <_malloc_r+0xa8>
 800a3fa:	bf00      	nop
 800a3fc:	20003e9c 	.word	0x20003e9c

0800a400 <__malloc_lock>:
 800a400:	4801      	ldr	r0, [pc, #4]	@ (800a408 <__malloc_lock+0x8>)
 800a402:	f7f8 bc94 	b.w	8002d2e <__retarget_lock_acquire_recursive>
 800a406:	bf00      	nop
 800a408:	2000080c 	.word	0x2000080c

0800a40c <__malloc_unlock>:
 800a40c:	4801      	ldr	r0, [pc, #4]	@ (800a414 <__malloc_unlock+0x8>)
 800a40e:	f7f8 bca3 	b.w	8002d58 <__retarget_lock_release_recursive>
 800a412:	bf00      	nop
 800a414:	2000080c 	.word	0x2000080c

0800a418 <__cvt>:
 800a418:	2b00      	cmp	r3, #0
 800a41a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41e:	461d      	mov	r5, r3
 800a420:	bfbb      	ittet	lt
 800a422:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a426:	461d      	movlt	r5, r3
 800a428:	2300      	movge	r3, #0
 800a42a:	232d      	movlt	r3, #45	@ 0x2d
 800a42c:	b088      	sub	sp, #32
 800a42e:	4614      	mov	r4, r2
 800a430:	bfb8      	it	lt
 800a432:	4614      	movlt	r4, r2
 800a434:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a436:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a438:	7013      	strb	r3, [r2, #0]
 800a43a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a43c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a440:	f023 0820 	bic.w	r8, r3, #32
 800a444:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a448:	d005      	beq.n	800a456 <__cvt+0x3e>
 800a44a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a44e:	d100      	bne.n	800a452 <__cvt+0x3a>
 800a450:	3601      	adds	r6, #1
 800a452:	2302      	movs	r3, #2
 800a454:	e000      	b.n	800a458 <__cvt+0x40>
 800a456:	2303      	movs	r3, #3
 800a458:	aa07      	add	r2, sp, #28
 800a45a:	9204      	str	r2, [sp, #16]
 800a45c:	aa06      	add	r2, sp, #24
 800a45e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a462:	e9cd 3600 	strd	r3, r6, [sp]
 800a466:	4622      	mov	r2, r4
 800a468:	462b      	mov	r3, r5
 800a46a:	f001 fbad 	bl	800bbc8 <_dtoa_r>
 800a46e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a472:	4607      	mov	r7, r0
 800a474:	d119      	bne.n	800a4aa <__cvt+0x92>
 800a476:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d50e      	bpl.n	800a49a <__cvt+0x82>
 800a47c:	eb00 0906 	add.w	r9, r0, r6
 800a480:	2200      	movs	r2, #0
 800a482:	2300      	movs	r3, #0
 800a484:	4620      	mov	r0, r4
 800a486:	4629      	mov	r1, r5
 800a488:	f7f6 fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800a48c:	b108      	cbz	r0, 800a492 <__cvt+0x7a>
 800a48e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a492:	2230      	movs	r2, #48	@ 0x30
 800a494:	9b07      	ldr	r3, [sp, #28]
 800a496:	454b      	cmp	r3, r9
 800a498:	d31e      	bcc.n	800a4d8 <__cvt+0xc0>
 800a49a:	4638      	mov	r0, r7
 800a49c:	9b07      	ldr	r3, [sp, #28]
 800a49e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a4a0:	1bdb      	subs	r3, r3, r7
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	b008      	add	sp, #32
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4ae:	eb00 0906 	add.w	r9, r0, r6
 800a4b2:	d1e5      	bne.n	800a480 <__cvt+0x68>
 800a4b4:	7803      	ldrb	r3, [r0, #0]
 800a4b6:	2b30      	cmp	r3, #48	@ 0x30
 800a4b8:	d10a      	bne.n	800a4d0 <__cvt+0xb8>
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f6 fa71 	bl	80009a8 <__aeabi_dcmpeq>
 800a4c6:	b918      	cbnz	r0, 800a4d0 <__cvt+0xb8>
 800a4c8:	f1c6 0601 	rsb	r6, r6, #1
 800a4cc:	f8ca 6000 	str.w	r6, [sl]
 800a4d0:	f8da 3000 	ldr.w	r3, [sl]
 800a4d4:	4499      	add	r9, r3
 800a4d6:	e7d3      	b.n	800a480 <__cvt+0x68>
 800a4d8:	1c59      	adds	r1, r3, #1
 800a4da:	9107      	str	r1, [sp, #28]
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e7d9      	b.n	800a494 <__cvt+0x7c>

0800a4e0 <__exponent>:
 800a4e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4e2:	2900      	cmp	r1, #0
 800a4e4:	bfb6      	itet	lt
 800a4e6:	232d      	movlt	r3, #45	@ 0x2d
 800a4e8:	232b      	movge	r3, #43	@ 0x2b
 800a4ea:	4249      	neglt	r1, r1
 800a4ec:	2909      	cmp	r1, #9
 800a4ee:	7002      	strb	r2, [r0, #0]
 800a4f0:	7043      	strb	r3, [r0, #1]
 800a4f2:	dd29      	ble.n	800a548 <__exponent+0x68>
 800a4f4:	f10d 0307 	add.w	r3, sp, #7
 800a4f8:	461d      	mov	r5, r3
 800a4fa:	270a      	movs	r7, #10
 800a4fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800a500:	461a      	mov	r2, r3
 800a502:	fb07 1416 	mls	r4, r7, r6, r1
 800a506:	3430      	adds	r4, #48	@ 0x30
 800a508:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a50c:	460c      	mov	r4, r1
 800a50e:	2c63      	cmp	r4, #99	@ 0x63
 800a510:	4631      	mov	r1, r6
 800a512:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a516:	dcf1      	bgt.n	800a4fc <__exponent+0x1c>
 800a518:	3130      	adds	r1, #48	@ 0x30
 800a51a:	1e94      	subs	r4, r2, #2
 800a51c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a520:	4623      	mov	r3, r4
 800a522:	1c41      	adds	r1, r0, #1
 800a524:	42ab      	cmp	r3, r5
 800a526:	d30a      	bcc.n	800a53e <__exponent+0x5e>
 800a528:	f10d 0309 	add.w	r3, sp, #9
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	42ac      	cmp	r4, r5
 800a530:	bf88      	it	hi
 800a532:	2300      	movhi	r3, #0
 800a534:	3302      	adds	r3, #2
 800a536:	4403      	add	r3, r0
 800a538:	1a18      	subs	r0, r3, r0
 800a53a:	b003      	add	sp, #12
 800a53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a53e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a542:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a546:	e7ed      	b.n	800a524 <__exponent+0x44>
 800a548:	2330      	movs	r3, #48	@ 0x30
 800a54a:	3130      	adds	r1, #48	@ 0x30
 800a54c:	7083      	strb	r3, [r0, #2]
 800a54e:	70c1      	strb	r1, [r0, #3]
 800a550:	1d03      	adds	r3, r0, #4
 800a552:	e7f1      	b.n	800a538 <__exponent+0x58>

0800a554 <_printf_float>:
 800a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	b091      	sub	sp, #68	@ 0x44
 800a55a:	460c      	mov	r4, r1
 800a55c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a560:	4616      	mov	r6, r2
 800a562:	461f      	mov	r7, r3
 800a564:	4605      	mov	r5, r0
 800a566:	f001 f99f 	bl	800b8a8 <_localeconv_r>
 800a56a:	6803      	ldr	r3, [r0, #0]
 800a56c:	4618      	mov	r0, r3
 800a56e:	9308      	str	r3, [sp, #32]
 800a570:	f7f5 fdee 	bl	8000150 <strlen>
 800a574:	2300      	movs	r3, #0
 800a576:	930e      	str	r3, [sp, #56]	@ 0x38
 800a578:	f8d8 3000 	ldr.w	r3, [r8]
 800a57c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a57e:	3307      	adds	r3, #7
 800a580:	f023 0307 	bic.w	r3, r3, #7
 800a584:	f103 0208 	add.w	r2, r3, #8
 800a588:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a58c:	f8d4 b000 	ldr.w	fp, [r4]
 800a590:	f8c8 2000 	str.w	r2, [r8]
 800a594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a598:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a59c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a59e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a5a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a820 <_printf_float+0x2cc>)
 800a5b0:	f7f6 fa2c 	bl	8000a0c <__aeabi_dcmpun>
 800a5b4:	bb70      	cbnz	r0, 800a614 <_printf_float+0xc0>
 800a5b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5be:	4b98      	ldr	r3, [pc, #608]	@ (800a820 <_printf_float+0x2cc>)
 800a5c0:	f7f6 fa06 	bl	80009d0 <__aeabi_dcmple>
 800a5c4:	bb30      	cbnz	r0, 800a614 <_printf_float+0xc0>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f6 f9f5 	bl	80009bc <__aeabi_dcmplt>
 800a5d2:	b110      	cbz	r0, 800a5da <_printf_float+0x86>
 800a5d4:	232d      	movs	r3, #45	@ 0x2d
 800a5d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5da:	4a92      	ldr	r2, [pc, #584]	@ (800a824 <_printf_float+0x2d0>)
 800a5dc:	4b92      	ldr	r3, [pc, #584]	@ (800a828 <_printf_float+0x2d4>)
 800a5de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5e2:	bf94      	ite	ls
 800a5e4:	4690      	movls	r8, r2
 800a5e6:	4698      	movhi	r8, r3
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	f04f 0900 	mov.w	r9, #0
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	f02b 0304 	bic.w	r3, fp, #4
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	4633      	mov	r3, r6
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	9700      	str	r7, [sp, #0]
 800a5fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a600:	f000 f9d4 	bl	800a9ac <_printf_common>
 800a604:	3001      	adds	r0, #1
 800a606:	f040 8090 	bne.w	800a72a <_printf_float+0x1d6>
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a60e:	b011      	add	sp, #68	@ 0x44
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	4642      	mov	r2, r8
 800a616:	464b      	mov	r3, r9
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f6 f9f6 	bl	8000a0c <__aeabi_dcmpun>
 800a620:	b148      	cbz	r0, 800a636 <_printf_float+0xe2>
 800a622:	464b      	mov	r3, r9
 800a624:	2b00      	cmp	r3, #0
 800a626:	bfb8      	it	lt
 800a628:	232d      	movlt	r3, #45	@ 0x2d
 800a62a:	4a80      	ldr	r2, [pc, #512]	@ (800a82c <_printf_float+0x2d8>)
 800a62c:	bfb8      	it	lt
 800a62e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a632:	4b7f      	ldr	r3, [pc, #508]	@ (800a830 <_printf_float+0x2dc>)
 800a634:	e7d3      	b.n	800a5de <_printf_float+0x8a>
 800a636:	6863      	ldr	r3, [r4, #4]
 800a638:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	d13f      	bne.n	800a6c0 <_printf_float+0x16c>
 800a640:	2306      	movs	r3, #6
 800a642:	6063      	str	r3, [r4, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	9206      	str	r2, [sp, #24]
 800a64e:	aa0e      	add	r2, sp, #56	@ 0x38
 800a650:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a654:	aa0d      	add	r2, sp, #52	@ 0x34
 800a656:	9203      	str	r2, [sp, #12]
 800a658:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a65c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	4642      	mov	r2, r8
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	4628      	mov	r0, r5
 800a668:	464b      	mov	r3, r9
 800a66a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a66c:	f7ff fed4 	bl	800a418 <__cvt>
 800a670:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a672:	4680      	mov	r8, r0
 800a674:	2947      	cmp	r1, #71	@ 0x47
 800a676:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a678:	d128      	bne.n	800a6cc <_printf_float+0x178>
 800a67a:	1cc8      	adds	r0, r1, #3
 800a67c:	db02      	blt.n	800a684 <_printf_float+0x130>
 800a67e:	6863      	ldr	r3, [r4, #4]
 800a680:	4299      	cmp	r1, r3
 800a682:	dd40      	ble.n	800a706 <_printf_float+0x1b2>
 800a684:	f1aa 0a02 	sub.w	sl, sl, #2
 800a688:	fa5f fa8a 	uxtb.w	sl, sl
 800a68c:	4652      	mov	r2, sl
 800a68e:	3901      	subs	r1, #1
 800a690:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a694:	910d      	str	r1, [sp, #52]	@ 0x34
 800a696:	f7ff ff23 	bl	800a4e0 <__exponent>
 800a69a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a69c:	4681      	mov	r9, r0
 800a69e:	1813      	adds	r3, r2, r0
 800a6a0:	2a01      	cmp	r2, #1
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	dc02      	bgt.n	800a6ac <_printf_float+0x158>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	07d2      	lsls	r2, r2, #31
 800a6aa:	d501      	bpl.n	800a6b0 <_printf_float+0x15c>
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d09e      	beq.n	800a5f6 <_printf_float+0xa2>
 800a6b8:	232d      	movs	r3, #45	@ 0x2d
 800a6ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6be:	e79a      	b.n	800a5f6 <_printf_float+0xa2>
 800a6c0:	2947      	cmp	r1, #71	@ 0x47
 800a6c2:	d1bf      	bne.n	800a644 <_printf_float+0xf0>
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1bd      	bne.n	800a644 <_printf_float+0xf0>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e7ba      	b.n	800a642 <_printf_float+0xee>
 800a6cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6d0:	d9dc      	bls.n	800a68c <_printf_float+0x138>
 800a6d2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6d6:	d118      	bne.n	800a70a <_printf_float+0x1b6>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	6863      	ldr	r3, [r4, #4]
 800a6dc:	dd0b      	ble.n	800a6f6 <_printf_float+0x1a2>
 800a6de:	6121      	str	r1, [r4, #16]
 800a6e0:	b913      	cbnz	r3, 800a6e8 <_printf_float+0x194>
 800a6e2:	6822      	ldr	r2, [r4, #0]
 800a6e4:	07d0      	lsls	r0, r2, #31
 800a6e6:	d502      	bpl.n	800a6ee <_printf_float+0x19a>
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	440b      	add	r3, r1
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6f4:	e7dc      	b.n	800a6b0 <_printf_float+0x15c>
 800a6f6:	b913      	cbnz	r3, 800a6fe <_printf_float+0x1aa>
 800a6f8:	6822      	ldr	r2, [r4, #0]
 800a6fa:	07d2      	lsls	r2, r2, #31
 800a6fc:	d501      	bpl.n	800a702 <_printf_float+0x1ae>
 800a6fe:	3302      	adds	r3, #2
 800a700:	e7f4      	b.n	800a6ec <_printf_float+0x198>
 800a702:	2301      	movs	r3, #1
 800a704:	e7f2      	b.n	800a6ec <_printf_float+0x198>
 800a706:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a70c:	4299      	cmp	r1, r3
 800a70e:	db05      	blt.n	800a71c <_printf_float+0x1c8>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	6121      	str	r1, [r4, #16]
 800a714:	07d8      	lsls	r0, r3, #31
 800a716:	d5ea      	bpl.n	800a6ee <_printf_float+0x19a>
 800a718:	1c4b      	adds	r3, r1, #1
 800a71a:	e7e7      	b.n	800a6ec <_printf_float+0x198>
 800a71c:	2900      	cmp	r1, #0
 800a71e:	bfcc      	ite	gt
 800a720:	2201      	movgt	r2, #1
 800a722:	f1c1 0202 	rsble	r2, r1, #2
 800a726:	4413      	add	r3, r2
 800a728:	e7e0      	b.n	800a6ec <_printf_float+0x198>
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	055a      	lsls	r2, r3, #21
 800a72e:	d407      	bmi.n	800a740 <_printf_float+0x1ec>
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	4642      	mov	r2, r8
 800a734:	4631      	mov	r1, r6
 800a736:	4628      	mov	r0, r5
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	d12b      	bne.n	800a796 <_printf_float+0x242>
 800a73e:	e764      	b.n	800a60a <_printf_float+0xb6>
 800a740:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a744:	f240 80dc 	bls.w	800a900 <_printf_float+0x3ac>
 800a748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a74c:	2200      	movs	r2, #0
 800a74e:	2300      	movs	r3, #0
 800a750:	f7f6 f92a 	bl	80009a8 <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d033      	beq.n	800a7c0 <_printf_float+0x26c>
 800a758:	2301      	movs	r3, #1
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	4a35      	ldr	r2, [pc, #212]	@ (800a834 <_printf_float+0x2e0>)
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f af51 	beq.w	800a60a <_printf_float+0xb6>
 800a768:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a76c:	4543      	cmp	r3, r8
 800a76e:	db02      	blt.n	800a776 <_printf_float+0x222>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	07d8      	lsls	r0, r3, #31
 800a774:	d50f      	bpl.n	800a796 <_printf_float+0x242>
 800a776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f af42 	beq.w	800a60a <_printf_float+0xb6>
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a78e:	f104 0a1a 	add.w	sl, r4, #26
 800a792:	45c8      	cmp	r8, r9
 800a794:	dc09      	bgt.n	800a7aa <_printf_float+0x256>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	079b      	lsls	r3, r3, #30
 800a79a:	f100 8102 	bmi.w	800a9a2 <_printf_float+0x44e>
 800a79e:	68e0      	ldr	r0, [r4, #12]
 800a7a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7a2:	4298      	cmp	r0, r3
 800a7a4:	bfb8      	it	lt
 800a7a6:	4618      	movlt	r0, r3
 800a7a8:	e731      	b.n	800a60e <_printf_float+0xba>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b8      	blx	r7
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	f43f af28 	beq.w	800a60a <_printf_float+0xb6>
 800a7ba:	f109 0901 	add.w	r9, r9, #1
 800a7be:	e7e8      	b.n	800a792 <_printf_float+0x23e>
 800a7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dc38      	bgt.n	800a838 <_printf_float+0x2e4>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	4a19      	ldr	r2, [pc, #100]	@ (800a834 <_printf_float+0x2e0>)
 800a7ce:	47b8      	blx	r7
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f43f af1a 	beq.w	800a60a <_printf_float+0xb6>
 800a7d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a7da:	ea59 0303 	orrs.w	r3, r9, r3
 800a7de:	d102      	bne.n	800a7e6 <_printf_float+0x292>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d5d7      	bpl.n	800a796 <_printf_float+0x242>
 800a7e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b8      	blx	r7
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	f43f af0a 	beq.w	800a60a <_printf_float+0xb6>
 800a7f6:	f04f 0a00 	mov.w	sl, #0
 800a7fa:	f104 0b1a 	add.w	fp, r4, #26
 800a7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a800:	425b      	negs	r3, r3
 800a802:	4553      	cmp	r3, sl
 800a804:	dc01      	bgt.n	800a80a <_printf_float+0x2b6>
 800a806:	464b      	mov	r3, r9
 800a808:	e793      	b.n	800a732 <_printf_float+0x1de>
 800a80a:	2301      	movs	r3, #1
 800a80c:	465a      	mov	r2, fp
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f aef8 	beq.w	800a60a <_printf_float+0xb6>
 800a81a:	f10a 0a01 	add.w	sl, sl, #1
 800a81e:	e7ee      	b.n	800a7fe <_printf_float+0x2aa>
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	0800f1ec 	.word	0x0800f1ec
 800a828:	0800f1f0 	.word	0x0800f1f0
 800a82c:	0800f1f4 	.word	0x0800f1f4
 800a830:	0800f1f8 	.word	0x0800f1f8
 800a834:	0800f1fc 	.word	0x0800f1fc
 800a838:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a83a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a83e:	4553      	cmp	r3, sl
 800a840:	bfa8      	it	ge
 800a842:	4653      	movge	r3, sl
 800a844:	2b00      	cmp	r3, #0
 800a846:	4699      	mov	r9, r3
 800a848:	dc36      	bgt.n	800a8b8 <_printf_float+0x364>
 800a84a:	f04f 0b00 	mov.w	fp, #0
 800a84e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a852:	f104 021a 	add.w	r2, r4, #26
 800a856:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a858:	930a      	str	r3, [sp, #40]	@ 0x28
 800a85a:	eba3 0309 	sub.w	r3, r3, r9
 800a85e:	455b      	cmp	r3, fp
 800a860:	dc31      	bgt.n	800a8c6 <_printf_float+0x372>
 800a862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a864:	459a      	cmp	sl, r3
 800a866:	dc3a      	bgt.n	800a8de <_printf_float+0x38a>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07da      	lsls	r2, r3, #31
 800a86c:	d437      	bmi.n	800a8de <_printf_float+0x38a>
 800a86e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a870:	ebaa 0903 	sub.w	r9, sl, r3
 800a874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a876:	ebaa 0303 	sub.w	r3, sl, r3
 800a87a:	4599      	cmp	r9, r3
 800a87c:	bfa8      	it	ge
 800a87e:	4699      	movge	r9, r3
 800a880:	f1b9 0f00 	cmp.w	r9, #0
 800a884:	dc33      	bgt.n	800a8ee <_printf_float+0x39a>
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a88e:	f104 0b1a 	add.w	fp, r4, #26
 800a892:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a894:	ebaa 0303 	sub.w	r3, sl, r3
 800a898:	eba3 0309 	sub.w	r3, r3, r9
 800a89c:	4543      	cmp	r3, r8
 800a89e:	f77f af7a 	ble.w	800a796 <_printf_float+0x242>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	465a      	mov	r2, fp
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f aeac 	beq.w	800a60a <_printf_float+0xb6>
 800a8b2:	f108 0801 	add.w	r8, r8, #1
 800a8b6:	e7ec      	b.n	800a892 <_printf_float+0x33e>
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d1c2      	bne.n	800a84a <_printf_float+0x2f6>
 800a8c4:	e6a1      	b.n	800a60a <_printf_float+0xb6>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	920a      	str	r2, [sp, #40]	@ 0x28
 800a8ce:	47b8      	blx	r7
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f43f ae9a 	beq.w	800a60a <_printf_float+0xb6>
 800a8d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8d8:	f10b 0b01 	add.w	fp, fp, #1
 800a8dc:	e7bb      	b.n	800a856 <_printf_float+0x302>
 800a8de:	4631      	mov	r1, r6
 800a8e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d1c0      	bne.n	800a86e <_printf_float+0x31a>
 800a8ec:	e68d      	b.n	800a60a <_printf_float+0xb6>
 800a8ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	4442      	add	r2, r8
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d1c3      	bne.n	800a886 <_printf_float+0x332>
 800a8fe:	e684      	b.n	800a60a <_printf_float+0xb6>
 800a900:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a904:	f1ba 0f01 	cmp.w	sl, #1
 800a908:	dc01      	bgt.n	800a90e <_printf_float+0x3ba>
 800a90a:	07db      	lsls	r3, r3, #31
 800a90c:	d536      	bpl.n	800a97c <_printf_float+0x428>
 800a90e:	2301      	movs	r3, #1
 800a910:	4642      	mov	r2, r8
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae76 	beq.w	800a60a <_printf_float+0xb6>
 800a91e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f ae6e 	beq.w	800a60a <_printf_float+0xb6>
 800a92e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a93a:	f7f6 f835 	bl	80009a8 <__aeabi_dcmpeq>
 800a93e:	b9c0      	cbnz	r0, 800a972 <_printf_float+0x41e>
 800a940:	4653      	mov	r3, sl
 800a942:	f108 0201 	add.w	r2, r8, #1
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d10c      	bne.n	800a96a <_printf_float+0x416>
 800a950:	e65b      	b.n	800a60a <_printf_float+0xb6>
 800a952:	2301      	movs	r3, #1
 800a954:	465a      	mov	r2, fp
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae54 	beq.w	800a60a <_printf_float+0xb6>
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	45d0      	cmp	r8, sl
 800a968:	dbf3      	blt.n	800a952 <_printf_float+0x3fe>
 800a96a:	464b      	mov	r3, r9
 800a96c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a970:	e6e0      	b.n	800a734 <_printf_float+0x1e0>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	f104 0b1a 	add.w	fp, r4, #26
 800a97a:	e7f4      	b.n	800a966 <_printf_float+0x412>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4642      	mov	r2, r8
 800a980:	e7e1      	b.n	800a946 <_printf_float+0x3f2>
 800a982:	2301      	movs	r3, #1
 800a984:	464a      	mov	r2, r9
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	f43f ae3c 	beq.w	800a60a <_printf_float+0xb6>
 800a992:	f108 0801 	add.w	r8, r8, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	4543      	cmp	r3, r8
 800a99e:	dcf0      	bgt.n	800a982 <_printf_float+0x42e>
 800a9a0:	e6fd      	b.n	800a79e <_printf_float+0x24a>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	f104 0919 	add.w	r9, r4, #25
 800a9aa:	e7f4      	b.n	800a996 <_printf_float+0x442>

0800a9ac <_printf_common>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	4698      	mov	r8, r3
 800a9b4:	688a      	ldr	r2, [r1, #8]
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	bfb8      	it	lt
 800a9be:	4613      	movlt	r3, r2
 800a9c0:	6033      	str	r3, [r6, #0]
 800a9c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9cc:	b10a      	cbz	r2, 800a9d2 <_printf_common+0x26>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	6033      	str	r3, [r6, #0]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	0699      	lsls	r1, r3, #26
 800a9d6:	bf42      	ittt	mi
 800a9d8:	6833      	ldrmi	r3, [r6, #0]
 800a9da:	3302      	addmi	r3, #2
 800a9dc:	6033      	strmi	r3, [r6, #0]
 800a9de:	6825      	ldr	r5, [r4, #0]
 800a9e0:	f015 0506 	ands.w	r5, r5, #6
 800a9e4:	d106      	bne.n	800a9f4 <_printf_common+0x48>
 800a9e6:	f104 0a19 	add.w	sl, r4, #25
 800a9ea:	68e3      	ldr	r3, [r4, #12]
 800a9ec:	6832      	ldr	r2, [r6, #0]
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	42ab      	cmp	r3, r5
 800a9f2:	dc2b      	bgt.n	800aa4c <_printf_common+0xa0>
 800a9f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	3b00      	subs	r3, #0
 800a9fc:	bf18      	it	ne
 800a9fe:	2301      	movne	r3, #1
 800aa00:	0692      	lsls	r2, r2, #26
 800aa02:	d430      	bmi.n	800aa66 <_printf_common+0xba>
 800aa04:	4641      	mov	r1, r8
 800aa06:	4638      	mov	r0, r7
 800aa08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa0c:	47c8      	blx	r9
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d023      	beq.n	800aa5a <_printf_common+0xae>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	f003 0306 	and.w	r3, r3, #6
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	bf14      	ite	ne
 800aa1e:	2500      	movne	r5, #0
 800aa20:	6833      	ldreq	r3, [r6, #0]
 800aa22:	f04f 0600 	mov.w	r6, #0
 800aa26:	bf08      	it	eq
 800aa28:	68e5      	ldreq	r5, [r4, #12]
 800aa2a:	f104 041a 	add.w	r4, r4, #26
 800aa2e:	bf08      	it	eq
 800aa30:	1aed      	subeq	r5, r5, r3
 800aa32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa36:	bf08      	it	eq
 800aa38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bfc4      	itt	gt
 800aa40:	1a9b      	subgt	r3, r3, r2
 800aa42:	18ed      	addgt	r5, r5, r3
 800aa44:	42b5      	cmp	r5, r6
 800aa46:	d11a      	bne.n	800aa7e <_printf_common+0xd2>
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e008      	b.n	800aa5e <_printf_common+0xb2>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	4652      	mov	r2, sl
 800aa50:	4641      	mov	r1, r8
 800aa52:	4638      	mov	r0, r7
 800aa54:	47c8      	blx	r9
 800aa56:	3001      	adds	r0, #1
 800aa58:	d103      	bne.n	800aa62 <_printf_common+0xb6>
 800aa5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa62:	3501      	adds	r5, #1
 800aa64:	e7c1      	b.n	800a9ea <_printf_common+0x3e>
 800aa66:	2030      	movs	r0, #48	@ 0x30
 800aa68:	18e1      	adds	r1, r4, r3
 800aa6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa74:	4422      	add	r2, r4
 800aa76:	3302      	adds	r3, #2
 800aa78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa7c:	e7c2      	b.n	800aa04 <_printf_common+0x58>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4622      	mov	r2, r4
 800aa82:	4641      	mov	r1, r8
 800aa84:	4638      	mov	r0, r7
 800aa86:	47c8      	blx	r9
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d0e6      	beq.n	800aa5a <_printf_common+0xae>
 800aa8c:	3601      	adds	r6, #1
 800aa8e:	e7d9      	b.n	800aa44 <_printf_common+0x98>

0800aa90 <_printf_i>:
 800aa90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	7e0f      	ldrb	r7, [r1, #24]
 800aa96:	4691      	mov	r9, r2
 800aa98:	2f78      	cmp	r7, #120	@ 0x78
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	460c      	mov	r4, r1
 800aa9e:	469a      	mov	sl, r3
 800aaa0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaa6:	d807      	bhi.n	800aab8 <_printf_i+0x28>
 800aaa8:	2f62      	cmp	r7, #98	@ 0x62
 800aaaa:	d80a      	bhi.n	800aac2 <_printf_i+0x32>
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	f000 80d3 	beq.w	800ac58 <_printf_i+0x1c8>
 800aab2:	2f58      	cmp	r7, #88	@ 0x58
 800aab4:	f000 80ba 	beq.w	800ac2c <_printf_i+0x19c>
 800aab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aabc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aac0:	e03a      	b.n	800ab38 <_printf_i+0xa8>
 800aac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aac6:	2b15      	cmp	r3, #21
 800aac8:	d8f6      	bhi.n	800aab8 <_printf_i+0x28>
 800aaca:	a101      	add	r1, pc, #4	@ (adr r1, 800aad0 <_printf_i+0x40>)
 800aacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aad0:	0800ab29 	.word	0x0800ab29
 800aad4:	0800ab3d 	.word	0x0800ab3d
 800aad8:	0800aab9 	.word	0x0800aab9
 800aadc:	0800aab9 	.word	0x0800aab9
 800aae0:	0800aab9 	.word	0x0800aab9
 800aae4:	0800aab9 	.word	0x0800aab9
 800aae8:	0800ab3d 	.word	0x0800ab3d
 800aaec:	0800aab9 	.word	0x0800aab9
 800aaf0:	0800aab9 	.word	0x0800aab9
 800aaf4:	0800aab9 	.word	0x0800aab9
 800aaf8:	0800aab9 	.word	0x0800aab9
 800aafc:	0800ac3f 	.word	0x0800ac3f
 800ab00:	0800ab67 	.word	0x0800ab67
 800ab04:	0800abf9 	.word	0x0800abf9
 800ab08:	0800aab9 	.word	0x0800aab9
 800ab0c:	0800aab9 	.word	0x0800aab9
 800ab10:	0800ac61 	.word	0x0800ac61
 800ab14:	0800aab9 	.word	0x0800aab9
 800ab18:	0800ab67 	.word	0x0800ab67
 800ab1c:	0800aab9 	.word	0x0800aab9
 800ab20:	0800aab9 	.word	0x0800aab9
 800ab24:	0800ac01 	.word	0x0800ac01
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	1d1a      	adds	r2, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6032      	str	r2, [r6, #0]
 800ab30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e09e      	b.n	800ac7a <_printf_i+0x1ea>
 800ab3c:	6833      	ldr	r3, [r6, #0]
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	6031      	str	r1, [r6, #0]
 800ab44:	0606      	lsls	r6, r0, #24
 800ab46:	d501      	bpl.n	800ab4c <_printf_i+0xbc>
 800ab48:	681d      	ldr	r5, [r3, #0]
 800ab4a:	e003      	b.n	800ab54 <_printf_i+0xc4>
 800ab4c:	0645      	lsls	r5, r0, #25
 800ab4e:	d5fb      	bpl.n	800ab48 <_printf_i+0xb8>
 800ab50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab54:	2d00      	cmp	r5, #0
 800ab56:	da03      	bge.n	800ab60 <_printf_i+0xd0>
 800ab58:	232d      	movs	r3, #45	@ 0x2d
 800ab5a:	426d      	negs	r5, r5
 800ab5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab60:	230a      	movs	r3, #10
 800ab62:	4859      	ldr	r0, [pc, #356]	@ (800acc8 <_printf_i+0x238>)
 800ab64:	e011      	b.n	800ab8a <_printf_i+0xfa>
 800ab66:	6821      	ldr	r1, [r4, #0]
 800ab68:	6833      	ldr	r3, [r6, #0]
 800ab6a:	0608      	lsls	r0, r1, #24
 800ab6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab70:	d402      	bmi.n	800ab78 <_printf_i+0xe8>
 800ab72:	0649      	lsls	r1, r1, #25
 800ab74:	bf48      	it	mi
 800ab76:	b2ad      	uxthmi	r5, r5
 800ab78:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab7a:	6033      	str	r3, [r6, #0]
 800ab7c:	bf14      	ite	ne
 800ab7e:	230a      	movne	r3, #10
 800ab80:	2308      	moveq	r3, #8
 800ab82:	4851      	ldr	r0, [pc, #324]	@ (800acc8 <_printf_i+0x238>)
 800ab84:	2100      	movs	r1, #0
 800ab86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab8a:	6866      	ldr	r6, [r4, #4]
 800ab8c:	2e00      	cmp	r6, #0
 800ab8e:	bfa8      	it	ge
 800ab90:	6821      	ldrge	r1, [r4, #0]
 800ab92:	60a6      	str	r6, [r4, #8]
 800ab94:	bfa4      	itt	ge
 800ab96:	f021 0104 	bicge.w	r1, r1, #4
 800ab9a:	6021      	strge	r1, [r4, #0]
 800ab9c:	b90d      	cbnz	r5, 800aba2 <_printf_i+0x112>
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	d04b      	beq.n	800ac3a <_printf_i+0x1aa>
 800aba2:	4616      	mov	r6, r2
 800aba4:	fbb5 f1f3 	udiv	r1, r5, r3
 800aba8:	fb03 5711 	mls	r7, r3, r1, r5
 800abac:	5dc7      	ldrb	r7, [r0, r7]
 800abae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abb2:	462f      	mov	r7, r5
 800abb4:	42bb      	cmp	r3, r7
 800abb6:	460d      	mov	r5, r1
 800abb8:	d9f4      	bls.n	800aba4 <_printf_i+0x114>
 800abba:	2b08      	cmp	r3, #8
 800abbc:	d10b      	bne.n	800abd6 <_printf_i+0x146>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	07df      	lsls	r7, r3, #31
 800abc2:	d508      	bpl.n	800abd6 <_printf_i+0x146>
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	6861      	ldr	r1, [r4, #4]
 800abc8:	4299      	cmp	r1, r3
 800abca:	bfde      	ittt	le
 800abcc:	2330      	movle	r3, #48	@ 0x30
 800abce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abd2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800abd6:	1b92      	subs	r2, r2, r6
 800abd8:	6122      	str	r2, [r4, #16]
 800abda:	464b      	mov	r3, r9
 800abdc:	4621      	mov	r1, r4
 800abde:	4640      	mov	r0, r8
 800abe0:	f8cd a000 	str.w	sl, [sp]
 800abe4:	aa03      	add	r2, sp, #12
 800abe6:	f7ff fee1 	bl	800a9ac <_printf_common>
 800abea:	3001      	adds	r0, #1
 800abec:	d14a      	bne.n	800ac84 <_printf_i+0x1f4>
 800abee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abf2:	b004      	add	sp, #16
 800abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	f043 0320 	orr.w	r3, r3, #32
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	2778      	movs	r7, #120	@ 0x78
 800ac02:	4832      	ldr	r0, [pc, #200]	@ (800accc <_printf_i+0x23c>)
 800ac04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	6831      	ldr	r1, [r6, #0]
 800ac0c:	061f      	lsls	r7, r3, #24
 800ac0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac12:	d402      	bmi.n	800ac1a <_printf_i+0x18a>
 800ac14:	065f      	lsls	r7, r3, #25
 800ac16:	bf48      	it	mi
 800ac18:	b2ad      	uxthmi	r5, r5
 800ac1a:	6031      	str	r1, [r6, #0]
 800ac1c:	07d9      	lsls	r1, r3, #31
 800ac1e:	bf44      	itt	mi
 800ac20:	f043 0320 	orrmi.w	r3, r3, #32
 800ac24:	6023      	strmi	r3, [r4, #0]
 800ac26:	b11d      	cbz	r5, 800ac30 <_printf_i+0x1a0>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	e7ab      	b.n	800ab84 <_printf_i+0xf4>
 800ac2c:	4826      	ldr	r0, [pc, #152]	@ (800acc8 <_printf_i+0x238>)
 800ac2e:	e7e9      	b.n	800ac04 <_printf_i+0x174>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	f023 0320 	bic.w	r3, r3, #32
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	e7f6      	b.n	800ac28 <_printf_i+0x198>
 800ac3a:	4616      	mov	r6, r2
 800ac3c:	e7bd      	b.n	800abba <_printf_i+0x12a>
 800ac3e:	6833      	ldr	r3, [r6, #0]
 800ac40:	6825      	ldr	r5, [r4, #0]
 800ac42:	1d18      	adds	r0, r3, #4
 800ac44:	6961      	ldr	r1, [r4, #20]
 800ac46:	6030      	str	r0, [r6, #0]
 800ac48:	062e      	lsls	r6, r5, #24
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	d501      	bpl.n	800ac52 <_printf_i+0x1c2>
 800ac4e:	6019      	str	r1, [r3, #0]
 800ac50:	e002      	b.n	800ac58 <_printf_i+0x1c8>
 800ac52:	0668      	lsls	r0, r5, #25
 800ac54:	d5fb      	bpl.n	800ac4e <_printf_i+0x1be>
 800ac56:	8019      	strh	r1, [r3, #0]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4616      	mov	r6, r2
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	e7bc      	b.n	800abda <_printf_i+0x14a>
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	2100      	movs	r1, #0
 800ac64:	1d1a      	adds	r2, r3, #4
 800ac66:	6032      	str	r2, [r6, #0]
 800ac68:	681e      	ldr	r6, [r3, #0]
 800ac6a:	6862      	ldr	r2, [r4, #4]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 ff07 	bl	800ba80 <memchr>
 800ac72:	b108      	cbz	r0, 800ac78 <_printf_i+0x1e8>
 800ac74:	1b80      	subs	r0, r0, r6
 800ac76:	6060      	str	r0, [r4, #4]
 800ac78:	6863      	ldr	r3, [r4, #4]
 800ac7a:	6123      	str	r3, [r4, #16]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac82:	e7aa      	b.n	800abda <_printf_i+0x14a>
 800ac84:	4632      	mov	r2, r6
 800ac86:	4649      	mov	r1, r9
 800ac88:	4640      	mov	r0, r8
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	47d0      	blx	sl
 800ac8e:	3001      	adds	r0, #1
 800ac90:	d0ad      	beq.n	800abee <_printf_i+0x15e>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	079b      	lsls	r3, r3, #30
 800ac96:	d413      	bmi.n	800acc0 <_printf_i+0x230>
 800ac98:	68e0      	ldr	r0, [r4, #12]
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	4298      	cmp	r0, r3
 800ac9e:	bfb8      	it	lt
 800aca0:	4618      	movlt	r0, r3
 800aca2:	e7a6      	b.n	800abf2 <_printf_i+0x162>
 800aca4:	2301      	movs	r3, #1
 800aca6:	4632      	mov	r2, r6
 800aca8:	4649      	mov	r1, r9
 800acaa:	4640      	mov	r0, r8
 800acac:	47d0      	blx	sl
 800acae:	3001      	adds	r0, #1
 800acb0:	d09d      	beq.n	800abee <_printf_i+0x15e>
 800acb2:	3501      	adds	r5, #1
 800acb4:	68e3      	ldr	r3, [r4, #12]
 800acb6:	9903      	ldr	r1, [sp, #12]
 800acb8:	1a5b      	subs	r3, r3, r1
 800acba:	42ab      	cmp	r3, r5
 800acbc:	dcf2      	bgt.n	800aca4 <_printf_i+0x214>
 800acbe:	e7eb      	b.n	800ac98 <_printf_i+0x208>
 800acc0:	2500      	movs	r5, #0
 800acc2:	f104 0619 	add.w	r6, r4, #25
 800acc6:	e7f5      	b.n	800acb4 <_printf_i+0x224>
 800acc8:	0800f1fe 	.word	0x0800f1fe
 800accc:	0800f20f 	.word	0x0800f20f

0800acd0 <std>:
 800acd0:	2300      	movs	r3, #0
 800acd2:	b510      	push	{r4, lr}
 800acd4:	4604      	mov	r4, r0
 800acd6:	e9c0 3300 	strd	r3, r3, [r0]
 800acda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acde:	6083      	str	r3, [r0, #8]
 800ace0:	8181      	strh	r1, [r0, #12]
 800ace2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ace4:	81c2      	strh	r2, [r0, #14]
 800ace6:	6183      	str	r3, [r0, #24]
 800ace8:	4619      	mov	r1, r3
 800acea:	2208      	movs	r2, #8
 800acec:	305c      	adds	r0, #92	@ 0x5c
 800acee:	f000 fbe0 	bl	800b4b2 <memset>
 800acf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad28 <std+0x58>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	6263      	str	r3, [r4, #36]	@ 0x24
 800acf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ad2c <std+0x5c>)
 800acfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <std+0x60>)
 800acfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad00:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <std+0x64>)
 800ad02:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad04:	4b0c      	ldr	r3, [pc, #48]	@ (800ad38 <std+0x68>)
 800ad06:	429c      	cmp	r4, r3
 800ad08:	d006      	beq.n	800ad18 <std+0x48>
 800ad0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad0e:	4294      	cmp	r4, r2
 800ad10:	d002      	beq.n	800ad18 <std+0x48>
 800ad12:	33d0      	adds	r3, #208	@ 0xd0
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d105      	bne.n	800ad24 <std+0x54>
 800ad18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad20:	f7f7 bfd3 	b.w	8002cca <__retarget_lock_init_recursive>
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	bf00      	nop
 800ad28:	0800b1d5 	.word	0x0800b1d5
 800ad2c:	0800b1f7 	.word	0x0800b1f7
 800ad30:	0800b22f 	.word	0x0800b22f
 800ad34:	0800b253 	.word	0x0800b253
 800ad38:	20003ea0 	.word	0x20003ea0

0800ad3c <stdio_exit_handler>:
 800ad3c:	4a02      	ldr	r2, [pc, #8]	@ (800ad48 <stdio_exit_handler+0xc>)
 800ad3e:	4903      	ldr	r1, [pc, #12]	@ (800ad4c <stdio_exit_handler+0x10>)
 800ad40:	4803      	ldr	r0, [pc, #12]	@ (800ad50 <stdio_exit_handler+0x14>)
 800ad42:	f000 b92b 	b.w	800af9c <_fwalk_sglue>
 800ad46:	bf00      	nop
 800ad48:	20000018 	.word	0x20000018
 800ad4c:	0800d489 	.word	0x0800d489
 800ad50:	20000028 	.word	0x20000028

0800ad54 <cleanup_stdio>:
 800ad54:	6841      	ldr	r1, [r0, #4]
 800ad56:	4b0c      	ldr	r3, [pc, #48]	@ (800ad88 <cleanup_stdio+0x34>)
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4299      	cmp	r1, r3
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	d001      	beq.n	800ad64 <cleanup_stdio+0x10>
 800ad60:	f002 fb92 	bl	800d488 <_fflush_r>
 800ad64:	68a1      	ldr	r1, [r4, #8]
 800ad66:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <cleanup_stdio+0x38>)
 800ad68:	4299      	cmp	r1, r3
 800ad6a:	d002      	beq.n	800ad72 <cleanup_stdio+0x1e>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f002 fb8b 	bl	800d488 <_fflush_r>
 800ad72:	68e1      	ldr	r1, [r4, #12]
 800ad74:	4b06      	ldr	r3, [pc, #24]	@ (800ad90 <cleanup_stdio+0x3c>)
 800ad76:	4299      	cmp	r1, r3
 800ad78:	d004      	beq.n	800ad84 <cleanup_stdio+0x30>
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad80:	f002 bb82 	b.w	800d488 <_fflush_r>
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	bf00      	nop
 800ad88:	20003ea0 	.word	0x20003ea0
 800ad8c:	20003f08 	.word	0x20003f08
 800ad90:	20003f70 	.word	0x20003f70

0800ad94 <global_stdio_init.part.0>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	4b0b      	ldr	r3, [pc, #44]	@ (800adc4 <global_stdio_init.part.0+0x30>)
 800ad98:	4c0b      	ldr	r4, [pc, #44]	@ (800adc8 <global_stdio_init.part.0+0x34>)
 800ad9a:	4a0c      	ldr	r2, [pc, #48]	@ (800adcc <global_stdio_init.part.0+0x38>)
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	2104      	movs	r1, #4
 800ada2:	2200      	movs	r2, #0
 800ada4:	f7ff ff94 	bl	800acd0 <std>
 800ada8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adac:	2201      	movs	r2, #1
 800adae:	2109      	movs	r1, #9
 800adb0:	f7ff ff8e 	bl	800acd0 <std>
 800adb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800adb8:	2202      	movs	r2, #2
 800adba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adbe:	2112      	movs	r1, #18
 800adc0:	f7ff bf86 	b.w	800acd0 <std>
 800adc4:	20003fd8 	.word	0x20003fd8
 800adc8:	20003ea0 	.word	0x20003ea0
 800adcc:	0800ad3d 	.word	0x0800ad3d

0800add0 <__sfp_lock_acquire>:
 800add0:	4801      	ldr	r0, [pc, #4]	@ (800add8 <__sfp_lock_acquire+0x8>)
 800add2:	f7f7 bfac 	b.w	8002d2e <__retarget_lock_acquire_recursive>
 800add6:	bf00      	nop
 800add8:	20000800 	.word	0x20000800

0800addc <__sfp_lock_release>:
 800addc:	4801      	ldr	r0, [pc, #4]	@ (800ade4 <__sfp_lock_release+0x8>)
 800adde:	f7f7 bfbb 	b.w	8002d58 <__retarget_lock_release_recursive>
 800ade2:	bf00      	nop
 800ade4:	20000800 	.word	0x20000800

0800ade8 <__sfp>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	4607      	mov	r7, r0
 800adec:	f7ff fff0 	bl	800add0 <__sfp_lock_acquire>
 800adf0:	4b23      	ldr	r3, [pc, #140]	@ (800ae80 <__sfp+0x98>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	b90b      	cbnz	r3, 800adfa <__sfp+0x12>
 800adf6:	f7ff ffcd 	bl	800ad94 <global_stdio_init.part.0>
 800adfa:	4e22      	ldr	r6, [pc, #136]	@ (800ae84 <__sfp+0x9c>)
 800adfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	d50f      	bpl.n	800ae24 <__sfp+0x3c>
 800ae04:	6835      	ldr	r5, [r6, #0]
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	d137      	bne.n	800ae7a <__sfp+0x92>
 800ae0a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f7ff fa76 	bl	800a300 <_malloc_r>
 800ae14:	4604      	mov	r4, r0
 800ae16:	bb28      	cbnz	r0, 800ae64 <__sfp+0x7c>
 800ae18:	6030      	str	r0, [r6, #0]
 800ae1a:	f7ff ffdf 	bl	800addc <__sfp_lock_release>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	603b      	str	r3, [r7, #0]
 800ae22:	e01b      	b.n	800ae5c <__sfp+0x74>
 800ae24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae28:	b9d5      	cbnz	r5, 800ae60 <__sfp+0x78>
 800ae2a:	4b17      	ldr	r3, [pc, #92]	@ (800ae88 <__sfp+0xa0>)
 800ae2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae30:	60e3      	str	r3, [r4, #12]
 800ae32:	6665      	str	r5, [r4, #100]	@ 0x64
 800ae34:	f7f7 ff49 	bl	8002cca <__retarget_lock_init_recursive>
 800ae38:	f7ff ffd0 	bl	800addc <__sfp_lock_release>
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	4629      	mov	r1, r5
 800ae40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae48:	6025      	str	r5, [r4, #0]
 800ae4a:	61a5      	str	r5, [r4, #24]
 800ae4c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800ae50:	f000 fb2f 	bl	800b4b2 <memset>
 800ae54:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800ae58:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae60:	3468      	adds	r4, #104	@ 0x68
 800ae62:	e7cd      	b.n	800ae00 <__sfp+0x18>
 800ae64:	2304      	movs	r3, #4
 800ae66:	6005      	str	r5, [r0, #0]
 800ae68:	6043      	str	r3, [r0, #4]
 800ae6a:	300c      	adds	r0, #12
 800ae6c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800ae70:	4629      	mov	r1, r5
 800ae72:	60a0      	str	r0, [r4, #8]
 800ae74:	f000 fb1d 	bl	800b4b2 <memset>
 800ae78:	6034      	str	r4, [r6, #0]
 800ae7a:	6836      	ldr	r6, [r6, #0]
 800ae7c:	e7be      	b.n	800adfc <__sfp+0x14>
 800ae7e:	bf00      	nop
 800ae80:	20003fd8 	.word	0x20003fd8
 800ae84:	20000018 	.word	0x20000018
 800ae88:	ffff0001 	.word	0xffff0001

0800ae8c <__sinit>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4604      	mov	r4, r0
 800ae90:	f7ff ff9e 	bl	800add0 <__sfp_lock_acquire>
 800ae94:	6a23      	ldr	r3, [r4, #32]
 800ae96:	b11b      	cbz	r3, 800aea0 <__sinit+0x14>
 800ae98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae9c:	f7ff bf9e 	b.w	800addc <__sfp_lock_release>
 800aea0:	4b04      	ldr	r3, [pc, #16]	@ (800aeb4 <__sinit+0x28>)
 800aea2:	6223      	str	r3, [r4, #32]
 800aea4:	4b04      	ldr	r3, [pc, #16]	@ (800aeb8 <__sinit+0x2c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f5      	bne.n	800ae98 <__sinit+0xc>
 800aeac:	f7ff ff72 	bl	800ad94 <global_stdio_init.part.0>
 800aeb0:	e7f2      	b.n	800ae98 <__sinit+0xc>
 800aeb2:	bf00      	nop
 800aeb4:	0800ad55 	.word	0x0800ad55
 800aeb8:	20003fd8 	.word	0x20003fd8

0800aebc <_fopen_r>:
 800aebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aebe:	460f      	mov	r7, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	aa01      	add	r2, sp, #4
 800aec4:	4606      	mov	r6, r0
 800aec6:	f002 fb07 	bl	800d4d8 <__sflags>
 800aeca:	4605      	mov	r5, r0
 800aecc:	b1b0      	cbz	r0, 800aefc <_fopen_r+0x40>
 800aece:	4630      	mov	r0, r6
 800aed0:	f7ff ff8a 	bl	800ade8 <__sfp>
 800aed4:	4604      	mov	r4, r0
 800aed6:	b188      	cbz	r0, 800aefc <_fopen_r+0x40>
 800aed8:	4639      	mov	r1, r7
 800aeda:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800aede:	4630      	mov	r0, r6
 800aee0:	9a01      	ldr	r2, [sp, #4]
 800aee2:	f000 fd5d 	bl	800b9a0 <_open_r>
 800aee6:	1e07      	subs	r7, r0, #0
 800aee8:	da0c      	bge.n	800af04 <_fopen_r+0x48>
 800aeea:	f7ff ff71 	bl	800add0 <__sfp_lock_acquire>
 800aeee:	2300      	movs	r3, #0
 800aef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	f7f7 ff10 	bl	8002d18 <__retarget_lock_close_recursive>
 800aef8:	f7ff ff70 	bl	800addc <__sfp_lock_release>
 800aefc:	2400      	movs	r4, #0
 800aefe:	4620      	mov	r0, r4
 800af00:	b003      	add	sp, #12
 800af02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af06:	07db      	lsls	r3, r3, #31
 800af08:	d405      	bmi.n	800af16 <_fopen_r+0x5a>
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	0598      	lsls	r0, r3, #22
 800af0e:	d402      	bmi.n	800af16 <_fopen_r+0x5a>
 800af10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af12:	f7f7 ff0c 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800af16:	4b0f      	ldr	r3, [pc, #60]	@ (800af54 <_fopen_r+0x98>)
 800af18:	b22d      	sxth	r5, r5
 800af1a:	6263      	str	r3, [r4, #36]	@ 0x24
 800af1c:	4b0e      	ldr	r3, [pc, #56]	@ (800af58 <_fopen_r+0x9c>)
 800af1e:	05e9      	lsls	r1, r5, #23
 800af20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af22:	4b0e      	ldr	r3, [pc, #56]	@ (800af5c <_fopen_r+0xa0>)
 800af24:	81e7      	strh	r7, [r4, #14]
 800af26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af28:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <_fopen_r+0xa4>)
 800af2a:	81a5      	strh	r5, [r4, #12]
 800af2c:	6224      	str	r4, [r4, #32]
 800af2e:	6323      	str	r3, [r4, #48]	@ 0x30
 800af30:	d505      	bpl.n	800af3e <_fopen_r+0x82>
 800af32:	2302      	movs	r3, #2
 800af34:	2200      	movs	r2, #0
 800af36:	4621      	mov	r1, r4
 800af38:	4630      	mov	r0, r6
 800af3a:	f000 f82d 	bl	800af98 <_fseek_r>
 800af3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af40:	07da      	lsls	r2, r3, #31
 800af42:	d4dc      	bmi.n	800aefe <_fopen_r+0x42>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	059b      	lsls	r3, r3, #22
 800af48:	d4d9      	bmi.n	800aefe <_fopen_r+0x42>
 800af4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af4c:	f7f7 ff04 	bl	8002d58 <__retarget_lock_release_recursive>
 800af50:	e7d5      	b.n	800aefe <_fopen_r+0x42>
 800af52:	bf00      	nop
 800af54:	0800b1d5 	.word	0x0800b1d5
 800af58:	0800b1f7 	.word	0x0800b1f7
 800af5c:	0800b22f 	.word	0x0800b22f
 800af60:	0800b253 	.word	0x0800b253

0800af64 <fopen>:
 800af64:	4b02      	ldr	r3, [pc, #8]	@ (800af70 <fopen+0xc>)
 800af66:	460a      	mov	r2, r1
 800af68:	4601      	mov	r1, r0
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	f7ff bfa6 	b.w	800aebc <_fopen_r>
 800af70:	20000024 	.word	0x20000024

0800af74 <fiprintf>:
 800af74:	b40e      	push	{r1, r2, r3}
 800af76:	b503      	push	{r0, r1, lr}
 800af78:	4601      	mov	r1, r0
 800af7a:	ab03      	add	r3, sp, #12
 800af7c:	4805      	ldr	r0, [pc, #20]	@ (800af94 <fiprintf+0x20>)
 800af7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af82:	6800      	ldr	r0, [r0, #0]
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	f002 f8e7 	bl	800d158 <_vfiprintf_r>
 800af8a:	b002      	add	sp, #8
 800af8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af90:	b003      	add	sp, #12
 800af92:	4770      	bx	lr
 800af94:	20000024 	.word	0x20000024

0800af98 <_fseek_r>:
 800af98:	f000 b9f4 	b.w	800b384 <_fseeko_r>

0800af9c <_fwalk_sglue>:
 800af9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa0:	4607      	mov	r7, r0
 800afa2:	4688      	mov	r8, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	2600      	movs	r6, #0
 800afa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afac:	f1b9 0901 	subs.w	r9, r9, #1
 800afb0:	d505      	bpl.n	800afbe <_fwalk_sglue+0x22>
 800afb2:	6824      	ldr	r4, [r4, #0]
 800afb4:	2c00      	cmp	r4, #0
 800afb6:	d1f7      	bne.n	800afa8 <_fwalk_sglue+0xc>
 800afb8:	4630      	mov	r0, r6
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d907      	bls.n	800afd4 <_fwalk_sglue+0x38>
 800afc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afc8:	3301      	adds	r3, #1
 800afca:	d003      	beq.n	800afd4 <_fwalk_sglue+0x38>
 800afcc:	4629      	mov	r1, r5
 800afce:	4638      	mov	r0, r7
 800afd0:	47c0      	blx	r8
 800afd2:	4306      	orrs	r6, r0
 800afd4:	3568      	adds	r5, #104	@ 0x68
 800afd6:	e7e9      	b.n	800afac <_fwalk_sglue+0x10>

0800afd8 <_fwrite_r>:
 800afd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afdc:	9c08      	ldr	r4, [sp, #32]
 800afde:	468a      	mov	sl, r1
 800afe0:	4690      	mov	r8, r2
 800afe2:	4606      	mov	r6, r0
 800afe4:	fb02 f903 	mul.w	r9, r2, r3
 800afe8:	b118      	cbz	r0, 800aff2 <_fwrite_r+0x1a>
 800afea:	6a03      	ldr	r3, [r0, #32]
 800afec:	b90b      	cbnz	r3, 800aff2 <_fwrite_r+0x1a>
 800afee:	f7ff ff4d 	bl	800ae8c <__sinit>
 800aff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aff4:	07dd      	lsls	r5, r3, #31
 800aff6:	d405      	bmi.n	800b004 <_fwrite_r+0x2c>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	0598      	lsls	r0, r3, #22
 800affc:	d402      	bmi.n	800b004 <_fwrite_r+0x2c>
 800affe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b000:	f7f7 fe95 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	0719      	lsls	r1, r3, #28
 800b008:	d516      	bpl.n	800b038 <_fwrite_r+0x60>
 800b00a:	6923      	ldr	r3, [r4, #16]
 800b00c:	b1a3      	cbz	r3, 800b038 <_fwrite_r+0x60>
 800b00e:	2500      	movs	r5, #0
 800b010:	454d      	cmp	r5, r9
 800b012:	d01f      	beq.n	800b054 <_fwrite_r+0x7c>
 800b014:	68a7      	ldr	r7, [r4, #8]
 800b016:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800b01a:	3f01      	subs	r7, #1
 800b01c:	2f00      	cmp	r7, #0
 800b01e:	60a7      	str	r7, [r4, #8]
 800b020:	da04      	bge.n	800b02c <_fwrite_r+0x54>
 800b022:	69a3      	ldr	r3, [r4, #24]
 800b024:	429f      	cmp	r7, r3
 800b026:	db0f      	blt.n	800b048 <_fwrite_r+0x70>
 800b028:	290a      	cmp	r1, #10
 800b02a:	d00d      	beq.n	800b048 <_fwrite_r+0x70>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	6022      	str	r2, [r4, #0]
 800b032:	7019      	strb	r1, [r3, #0]
 800b034:	3501      	adds	r5, #1
 800b036:	e7eb      	b.n	800b010 <_fwrite_r+0x38>
 800b038:	4621      	mov	r1, r4
 800b03a:	4630      	mov	r0, r6
 800b03c:	f000 f94c 	bl	800b2d8 <__swsetup_r>
 800b040:	2800      	cmp	r0, #0
 800b042:	d0e4      	beq.n	800b00e <_fwrite_r+0x36>
 800b044:	2500      	movs	r5, #0
 800b046:	e005      	b.n	800b054 <_fwrite_r+0x7c>
 800b048:	4622      	mov	r2, r4
 800b04a:	4630      	mov	r0, r6
 800b04c:	f000 f905 	bl	800b25a <__swbuf_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d1ef      	bne.n	800b034 <_fwrite_r+0x5c>
 800b054:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b056:	07da      	lsls	r2, r3, #31
 800b058:	d405      	bmi.n	800b066 <_fwrite_r+0x8e>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	059b      	lsls	r3, r3, #22
 800b05e:	d402      	bmi.n	800b066 <_fwrite_r+0x8e>
 800b060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b062:	f7f7 fe79 	bl	8002d58 <__retarget_lock_release_recursive>
 800b066:	fbb5 f0f8 	udiv	r0, r5, r8
 800b06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b070 <fwrite>:
 800b070:	b507      	push	{r0, r1, r2, lr}
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	4613      	mov	r3, r2
 800b076:	460a      	mov	r2, r1
 800b078:	4601      	mov	r1, r0
 800b07a:	4803      	ldr	r0, [pc, #12]	@ (800b088 <fwrite+0x18>)
 800b07c:	6800      	ldr	r0, [r0, #0]
 800b07e:	f7ff ffab 	bl	800afd8 <_fwrite_r>
 800b082:	b003      	add	sp, #12
 800b084:	f85d fb04 	ldr.w	pc, [sp], #4
 800b088:	20000024 	.word	0x20000024

0800b08c <iprintf>:
 800b08c:	b40f      	push	{r0, r1, r2, r3}
 800b08e:	b507      	push	{r0, r1, r2, lr}
 800b090:	4906      	ldr	r1, [pc, #24]	@ (800b0ac <iprintf+0x20>)
 800b092:	ab04      	add	r3, sp, #16
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	6881      	ldr	r1, [r0, #8]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	f002 f85b 	bl	800d158 <_vfiprintf_r>
 800b0a2:	b003      	add	sp, #12
 800b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a8:	b004      	add	sp, #16
 800b0aa:	4770      	bx	lr
 800b0ac:	20000024 	.word	0x20000024

0800b0b0 <_puts_r>:
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b570      	push	{r4, r5, r6, lr}
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460e      	mov	r6, r1
 800b0b8:	6884      	ldr	r4, [r0, #8]
 800b0ba:	b90b      	cbnz	r3, 800b0c0 <_puts_r+0x10>
 800b0bc:	f7ff fee6 	bl	800ae8c <__sinit>
 800b0c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0c2:	07db      	lsls	r3, r3, #31
 800b0c4:	d405      	bmi.n	800b0d2 <_puts_r+0x22>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	0598      	lsls	r0, r3, #22
 800b0ca:	d402      	bmi.n	800b0d2 <_puts_r+0x22>
 800b0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0ce:	f7f7 fe2e 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	0719      	lsls	r1, r3, #28
 800b0d6:	d502      	bpl.n	800b0de <_puts_r+0x2e>
 800b0d8:	6923      	ldr	r3, [r4, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d135      	bne.n	800b14a <_puts_r+0x9a>
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f000 f8f9 	bl	800b2d8 <__swsetup_r>
 800b0e6:	b380      	cbz	r0, 800b14a <_puts_r+0x9a>
 800b0e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b0ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ee:	07da      	lsls	r2, r3, #31
 800b0f0:	d405      	bmi.n	800b0fe <_puts_r+0x4e>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	059b      	lsls	r3, r3, #22
 800b0f6:	d402      	bmi.n	800b0fe <_puts_r+0x4e>
 800b0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0fa:	f7f7 fe2d 	bl	8002d58 <__retarget_lock_release_recursive>
 800b0fe:	4628      	mov	r0, r5
 800b100:	bd70      	pop	{r4, r5, r6, pc}
 800b102:	2b00      	cmp	r3, #0
 800b104:	da04      	bge.n	800b110 <_puts_r+0x60>
 800b106:	69a2      	ldr	r2, [r4, #24]
 800b108:	429a      	cmp	r2, r3
 800b10a:	dc17      	bgt.n	800b13c <_puts_r+0x8c>
 800b10c:	290a      	cmp	r1, #10
 800b10e:	d015      	beq.n	800b13c <_puts_r+0x8c>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	1c5a      	adds	r2, r3, #1
 800b114:	6022      	str	r2, [r4, #0]
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	68a3      	ldr	r3, [r4, #8]
 800b11a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b11e:	3b01      	subs	r3, #1
 800b120:	60a3      	str	r3, [r4, #8]
 800b122:	2900      	cmp	r1, #0
 800b124:	d1ed      	bne.n	800b102 <_puts_r+0x52>
 800b126:	2b00      	cmp	r3, #0
 800b128:	da11      	bge.n	800b14e <_puts_r+0x9e>
 800b12a:	4622      	mov	r2, r4
 800b12c:	210a      	movs	r1, #10
 800b12e:	4628      	mov	r0, r5
 800b130:	f000 f893 	bl	800b25a <__swbuf_r>
 800b134:	3001      	adds	r0, #1
 800b136:	d0d7      	beq.n	800b0e8 <_puts_r+0x38>
 800b138:	250a      	movs	r5, #10
 800b13a:	e7d7      	b.n	800b0ec <_puts_r+0x3c>
 800b13c:	4622      	mov	r2, r4
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 f88b 	bl	800b25a <__swbuf_r>
 800b144:	3001      	adds	r0, #1
 800b146:	d1e7      	bne.n	800b118 <_puts_r+0x68>
 800b148:	e7ce      	b.n	800b0e8 <_puts_r+0x38>
 800b14a:	3e01      	subs	r6, #1
 800b14c:	e7e4      	b.n	800b118 <_puts_r+0x68>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	6022      	str	r2, [r4, #0]
 800b154:	220a      	movs	r2, #10
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	e7ee      	b.n	800b138 <_puts_r+0x88>
	...

0800b15c <puts>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	@ (800b168 <puts+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f7ff bfa5 	b.w	800b0b0 <_puts_r>
 800b166:	bf00      	nop
 800b168:	20000024 	.word	0x20000024

0800b16c <sniprintf>:
 800b16c:	b40c      	push	{r2, r3}
 800b16e:	b530      	push	{r4, r5, lr}
 800b170:	4b17      	ldr	r3, [pc, #92]	@ (800b1d0 <sniprintf+0x64>)
 800b172:	1e0c      	subs	r4, r1, #0
 800b174:	681d      	ldr	r5, [r3, #0]
 800b176:	b09d      	sub	sp, #116	@ 0x74
 800b178:	da08      	bge.n	800b18c <sniprintf+0x20>
 800b17a:	238b      	movs	r3, #139	@ 0x8b
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	b01d      	add	sp, #116	@ 0x74
 800b184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b188:	b002      	add	sp, #8
 800b18a:	4770      	bx	lr
 800b18c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b190:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b194:	bf0c      	ite	eq
 800b196:	4623      	moveq	r3, r4
 800b198:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	9307      	str	r3, [sp, #28]
 800b1a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1a4:	9002      	str	r0, [sp, #8]
 800b1a6:	9006      	str	r0, [sp, #24]
 800b1a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	ab21      	add	r3, sp, #132	@ 0x84
 800b1b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b1b2:	a902      	add	r1, sp, #8
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	f001 feab 	bl	800cf10 <_svfiprintf_r>
 800b1ba:	1c43      	adds	r3, r0, #1
 800b1bc:	bfbc      	itt	lt
 800b1be:	238b      	movlt	r3, #139	@ 0x8b
 800b1c0:	602b      	strlt	r3, [r5, #0]
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	d0dd      	beq.n	800b182 <sniprintf+0x16>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	9b02      	ldr	r3, [sp, #8]
 800b1ca:	701a      	strb	r2, [r3, #0]
 800b1cc:	e7d9      	b.n	800b182 <sniprintf+0x16>
 800b1ce:	bf00      	nop
 800b1d0:	20000024 	.word	0x20000024

0800b1d4 <__sread>:
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1dc:	f000 fbf2 	bl	800b9c4 <_read_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	bfab      	itete	ge
 800b1e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1e8:	181b      	addge	r3, r3, r0
 800b1ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1ee:	bfac      	ite	ge
 800b1f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1f2:	81a3      	strhlt	r3, [r4, #12]
 800b1f4:	bd10      	pop	{r4, pc}

0800b1f6 <__swrite>:
 800b1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	461f      	mov	r7, r3
 800b1fc:	898b      	ldrh	r3, [r1, #12]
 800b1fe:	4605      	mov	r5, r0
 800b200:	05db      	lsls	r3, r3, #23
 800b202:	460c      	mov	r4, r1
 800b204:	4616      	mov	r6, r2
 800b206:	d505      	bpl.n	800b214 <__swrite+0x1e>
 800b208:	2302      	movs	r3, #2
 800b20a:	2200      	movs	r2, #0
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	f000 fbb4 	bl	800b97c <_lseek_r>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	4632      	mov	r2, r6
 800b218:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	4628      	mov	r0, r5
 800b220:	463b      	mov	r3, r7
 800b222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22a:	f000 bbed 	b.w	800ba08 <_write_r>

0800b22e <__sseek>:
 800b22e:	b510      	push	{r4, lr}
 800b230:	460c      	mov	r4, r1
 800b232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b236:	f000 fba1 	bl	800b97c <_lseek_r>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	bf15      	itete	ne
 800b240:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b24a:	81a3      	strheq	r3, [r4, #12]
 800b24c:	bf18      	it	ne
 800b24e:	81a3      	strhne	r3, [r4, #12]
 800b250:	bd10      	pop	{r4, pc}

0800b252 <__sclose>:
 800b252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b256:	f000 bb2b 	b.w	800b8b0 <_close_r>

0800b25a <__swbuf_r>:
 800b25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25c:	460e      	mov	r6, r1
 800b25e:	4614      	mov	r4, r2
 800b260:	4605      	mov	r5, r0
 800b262:	b118      	cbz	r0, 800b26c <__swbuf_r+0x12>
 800b264:	6a03      	ldr	r3, [r0, #32]
 800b266:	b90b      	cbnz	r3, 800b26c <__swbuf_r+0x12>
 800b268:	f7ff fe10 	bl	800ae8c <__sinit>
 800b26c:	69a3      	ldr	r3, [r4, #24]
 800b26e:	60a3      	str	r3, [r4, #8]
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	071a      	lsls	r2, r3, #28
 800b274:	d501      	bpl.n	800b27a <__swbuf_r+0x20>
 800b276:	6923      	ldr	r3, [r4, #16]
 800b278:	b943      	cbnz	r3, 800b28c <__swbuf_r+0x32>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4628      	mov	r0, r5
 800b27e:	f000 f82b 	bl	800b2d8 <__swsetup_r>
 800b282:	b118      	cbz	r0, 800b28c <__swbuf_r+0x32>
 800b284:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b288:	4638      	mov	r0, r7
 800b28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	6922      	ldr	r2, [r4, #16]
 800b290:	b2f6      	uxtb	r6, r6
 800b292:	1a98      	subs	r0, r3, r2
 800b294:	6963      	ldr	r3, [r4, #20]
 800b296:	4637      	mov	r7, r6
 800b298:	4283      	cmp	r3, r0
 800b29a:	dc05      	bgt.n	800b2a8 <__swbuf_r+0x4e>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f002 f8f2 	bl	800d488 <_fflush_r>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d1ed      	bne.n	800b284 <__swbuf_r+0x2a>
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	6022      	str	r2, [r4, #0]
 800b2b4:	701e      	strb	r6, [r3, #0]
 800b2b6:	6962      	ldr	r2, [r4, #20]
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d004      	beq.n	800b2c8 <__swbuf_r+0x6e>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	07db      	lsls	r3, r3, #31
 800b2c2:	d5e1      	bpl.n	800b288 <__swbuf_r+0x2e>
 800b2c4:	2e0a      	cmp	r6, #10
 800b2c6:	d1df      	bne.n	800b288 <__swbuf_r+0x2e>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f002 f8dc 	bl	800d488 <_fflush_r>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d0d9      	beq.n	800b288 <__swbuf_r+0x2e>
 800b2d4:	e7d6      	b.n	800b284 <__swbuf_r+0x2a>
	...

0800b2d8 <__swsetup_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4b29      	ldr	r3, [pc, #164]	@ (800b380 <__swsetup_r+0xa8>)
 800b2dc:	4605      	mov	r5, r0
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	b118      	cbz	r0, 800b2ec <__swsetup_r+0x14>
 800b2e4:	6a03      	ldr	r3, [r0, #32]
 800b2e6:	b90b      	cbnz	r3, 800b2ec <__swsetup_r+0x14>
 800b2e8:	f7ff fdd0 	bl	800ae8c <__sinit>
 800b2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f0:	0719      	lsls	r1, r3, #28
 800b2f2:	d422      	bmi.n	800b33a <__swsetup_r+0x62>
 800b2f4:	06da      	lsls	r2, r3, #27
 800b2f6:	d407      	bmi.n	800b308 <__swsetup_r+0x30>
 800b2f8:	2209      	movs	r2, #9
 800b2fa:	602a      	str	r2, [r5, #0]
 800b2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b300:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	e033      	b.n	800b370 <__swsetup_r+0x98>
 800b308:	0758      	lsls	r0, r3, #29
 800b30a:	d512      	bpl.n	800b332 <__swsetup_r+0x5a>
 800b30c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b30e:	b141      	cbz	r1, 800b322 <__swsetup_r+0x4a>
 800b310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b314:	4299      	cmp	r1, r3
 800b316:	d002      	beq.n	800b31e <__swsetup_r+0x46>
 800b318:	4628      	mov	r0, r5
 800b31a:	f7fe ff77 	bl	800a20c <_free_r>
 800b31e:	2300      	movs	r3, #0
 800b320:	6363      	str	r3, [r4, #52]	@ 0x34
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	2300      	movs	r3, #0
 800b32c:	6063      	str	r3, [r4, #4]
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f043 0308 	orr.w	r3, r3, #8
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	b94b      	cbnz	r3, 800b352 <__swsetup_r+0x7a>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b348:	d003      	beq.n	800b352 <__swsetup_r+0x7a>
 800b34a:	4621      	mov	r1, r4
 800b34c:	4628      	mov	r0, r5
 800b34e:	f002 f91e 	bl	800d58e <__smakebuf_r>
 800b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b356:	f013 0201 	ands.w	r2, r3, #1
 800b35a:	d00a      	beq.n	800b372 <__swsetup_r+0x9a>
 800b35c:	2200      	movs	r2, #0
 800b35e:	60a2      	str	r2, [r4, #8]
 800b360:	6962      	ldr	r2, [r4, #20]
 800b362:	4252      	negs	r2, r2
 800b364:	61a2      	str	r2, [r4, #24]
 800b366:	6922      	ldr	r2, [r4, #16]
 800b368:	b942      	cbnz	r2, 800b37c <__swsetup_r+0xa4>
 800b36a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b36e:	d1c5      	bne.n	800b2fc <__swsetup_r+0x24>
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	0799      	lsls	r1, r3, #30
 800b374:	bf58      	it	pl
 800b376:	6962      	ldrpl	r2, [r4, #20]
 800b378:	60a2      	str	r2, [r4, #8]
 800b37a:	e7f4      	b.n	800b366 <__swsetup_r+0x8e>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7f7      	b.n	800b370 <__swsetup_r+0x98>
 800b380:	20000024 	.word	0x20000024

0800b384 <_fseeko_r>:
 800b384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	4690      	mov	r8, r2
 800b38c:	461e      	mov	r6, r3
 800b38e:	4605      	mov	r5, r0
 800b390:	b118      	cbz	r0, 800b39a <_fseeko_r+0x16>
 800b392:	6a03      	ldr	r3, [r0, #32]
 800b394:	b90b      	cbnz	r3, 800b39a <_fseeko_r+0x16>
 800b396:	f7ff fd79 	bl	800ae8c <__sinit>
 800b39a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b39c:	07d9      	lsls	r1, r3, #31
 800b39e:	d405      	bmi.n	800b3ac <_fseeko_r+0x28>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	059a      	lsls	r2, r3, #22
 800b3a4:	d402      	bmi.n	800b3ac <_fseeko_r+0x28>
 800b3a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3a8:	f7f7 fcc1 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 800b3b2:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800b3b6:	d103      	bne.n	800b3c0 <_fseeko_r+0x3c>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f002 f864 	bl	800d488 <_fflush_r>
 800b3c0:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 800b3c4:	f1b9 0f00 	cmp.w	r9, #0
 800b3c8:	d102      	bne.n	800b3d0 <_fseeko_r+0x4c>
 800b3ca:	231d      	movs	r3, #29
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	e058      	b.n	800b482 <_fseeko_r+0xfe>
 800b3d0:	2e01      	cmp	r6, #1
 800b3d2:	d03a      	beq.n	800b44a <_fseeko_r+0xc6>
 800b3d4:	f036 0302 	bics.w	r3, r6, #2
 800b3d8:	d162      	bne.n	800b4a0 <_fseeko_r+0x11c>
 800b3da:	6923      	ldr	r3, [r4, #16]
 800b3dc:	b91b      	cbnz	r3, 800b3e6 <_fseeko_r+0x62>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f002 f8d4 	bl	800d58e <__smakebuf_r>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f002 f84d 	bl	800d488 <_fflush_r>
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d146      	bne.n	800b482 <_fseeko_r+0xfe>
 800b3f4:	4633      	mov	r3, r6
 800b3f6:	4642      	mov	r2, r8
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	6a21      	ldr	r1, [r4, #32]
 800b3fc:	47c8      	blx	r9
 800b3fe:	3001      	adds	r0, #1
 800b400:	d03f      	beq.n	800b482 <_fseeko_r+0xfe>
 800b402:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b404:	b141      	cbz	r1, 800b418 <_fseeko_r+0x94>
 800b406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d002      	beq.n	800b414 <_fseeko_r+0x90>
 800b40e:	4628      	mov	r0, r5
 800b410:	f7fe fefc 	bl	800a20c <_free_r>
 800b414:	2300      	movs	r3, #0
 800b416:	6363      	str	r3, [r4, #52]	@ 0x34
 800b418:	2100      	movs	r1, #0
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	2208      	movs	r2, #8
 800b41e:	6023      	str	r3, [r4, #0]
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	6061      	str	r1, [r4, #4]
 800b424:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800b42e:	f000 f840 	bl	800b4b2 <memset>
 800b432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b434:	07da      	lsls	r2, r3, #31
 800b436:	d405      	bmi.n	800b444 <_fseeko_r+0xc0>
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	059b      	lsls	r3, r3, #22
 800b43c:	d402      	bmi.n	800b444 <_fseeko_r+0xc0>
 800b43e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b440:	f7f7 fc8a 	bl	8002d58 <__retarget_lock_release_recursive>
 800b444:	4638      	mov	r0, r7
 800b446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f002 f81b 	bl	800d488 <_fflush_r>
 800b452:	89a2      	ldrh	r2, [r4, #12]
 800b454:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b458:	d00d      	beq.n	800b476 <_fseeko_r+0xf2>
 800b45a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800b45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b460:	075f      	lsls	r7, r3, #29
 800b462:	d514      	bpl.n	800b48e <_fseeko_r+0x10a>
 800b464:	6863      	ldr	r3, [r4, #4]
 800b466:	1ac0      	subs	r0, r0, r3
 800b468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b46a:	b10b      	cbz	r3, 800b470 <_fseeko_r+0xec>
 800b46c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b46e:	1ac0      	subs	r0, r0, r3
 800b470:	2600      	movs	r6, #0
 800b472:	4480      	add	r8, r0
 800b474:	e7b1      	b.n	800b3da <_fseeko_r+0x56>
 800b476:	4633      	mov	r3, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	6a21      	ldr	r1, [r4, #32]
 800b47c:	47c8      	blx	r9
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	d1ec      	bne.n	800b45c <_fseeko_r+0xd8>
 800b482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b484:	07d8      	lsls	r0, r3, #31
 800b486:	d50d      	bpl.n	800b4a4 <_fseeko_r+0x120>
 800b488:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b48c:	e7da      	b.n	800b444 <_fseeko_r+0xc0>
 800b48e:	071e      	lsls	r6, r3, #28
 800b490:	d5ee      	bpl.n	800b470 <_fseeko_r+0xec>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0eb      	beq.n	800b470 <_fseeko_r+0xec>
 800b498:	6922      	ldr	r2, [r4, #16]
 800b49a:	1a9b      	subs	r3, r3, r2
 800b49c:	4418      	add	r0, r3
 800b49e:	e7e7      	b.n	800b470 <_fseeko_r+0xec>
 800b4a0:	2316      	movs	r3, #22
 800b4a2:	e793      	b.n	800b3cc <_fseeko_r+0x48>
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	0599      	lsls	r1, r3, #22
 800b4a8:	d4ee      	bmi.n	800b488 <_fseeko_r+0x104>
 800b4aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4ac:	f7f7 fc54 	bl	8002d58 <__retarget_lock_release_recursive>
 800b4b0:	e7ea      	b.n	800b488 <_fseeko_r+0x104>

0800b4b2 <memset>:
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d100      	bne.n	800b4bc <memset+0xa>
 800b4ba:	4770      	bx	lr
 800b4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c0:	e7f9      	b.n	800b4b6 <memset+0x4>
	...

0800b4c4 <_strerror_r>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	288e      	cmp	r0, #142	@ 0x8e
 800b4d0:	f200 8130 	bhi.w	800b734 <_strerror_r+0x270>
 800b4d4:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b4d8:	0138008f 	.word	0x0138008f
 800b4dc:	00940092 	.word	0x00940092
 800b4e0:	00980096 	.word	0x00980096
 800b4e4:	009c009a 	.word	0x009c009a
 800b4e8:	00a2009e 	.word	0x00a2009e
 800b4ec:	00a800a4 	.word	0x00a800a4
 800b4f0:	00ac00aa 	.word	0x00ac00aa
 800b4f4:	012e00ae 	.word	0x012e00ae
 800b4f8:	00b200b0 	.word	0x00b200b0
 800b4fc:	00b600b4 	.word	0x00b600b4
 800b500:	00be00b8 	.word	0x00be00b8
 800b504:	00c600c0 	.word	0x00c600c0
 800b508:	00ca00c8 	.word	0x00ca00c8
 800b50c:	00ce00cc 	.word	0x00ce00cc
 800b510:	00d600d2 	.word	0x00d600d2
 800b514:	00da00d8 	.word	0x00da00d8
 800b518:	00de00dc 	.word	0x00de00dc
 800b51c:	00e200e0 	.word	0x00e200e0
 800b520:	012e00e4 	.word	0x012e00e4
 800b524:	012e012e 	.word	0x012e012e
 800b528:	012e012e 	.word	0x012e012e
 800b52c:	012e012e 	.word	0x012e012e
 800b530:	00e8012e 	.word	0x00e8012e
 800b534:	012e00ec 	.word	0x012e00ec
 800b538:	012e012e 	.word	0x012e012e
 800b53c:	012e012e 	.word	0x012e012e
 800b540:	012e012e 	.word	0x012e012e
 800b544:	012e012e 	.word	0x012e012e
 800b548:	012e012e 	.word	0x012e012e
 800b54c:	012e012e 	.word	0x012e012e
 800b550:	010800ee 	.word	0x010800ee
 800b554:	00f200f0 	.word	0x00f200f0
 800b558:	012e012e 	.word	0x012e012e
 800b55c:	00f4012e 	.word	0x00f4012e
 800b560:	012e012e 	.word	0x012e012e
 800b564:	00f6012e 	.word	0x00f6012e
 800b568:	012e012e 	.word	0x012e012e
 800b56c:	012e00fa 	.word	0x012e00fa
 800b570:	00fc012e 	.word	0x00fc012e
 800b574:	012e012e 	.word	0x012e012e
 800b578:	012e012e 	.word	0x012e012e
 800b57c:	012e012e 	.word	0x012e012e
 800b580:	012e012e 	.word	0x012e012e
 800b584:	012e012e 	.word	0x012e012e
 800b588:	012e00fe 	.word	0x012e00fe
 800b58c:	01020100 	.word	0x01020100
 800b590:	012e0104 	.word	0x012e0104
 800b594:	0126012e 	.word	0x0126012e
 800b598:	012e012e 	.word	0x012e012e
 800b59c:	012e012e 	.word	0x012e012e
 800b5a0:	012e012e 	.word	0x012e012e
 800b5a4:	012e012e 	.word	0x012e012e
 800b5a8:	01060114 	.word	0x01060114
 800b5ac:	010c010a 	.word	0x010c010a
 800b5b0:	0110010e 	.word	0x0110010e
 800b5b4:	0112012e 	.word	0x0112012e
 800b5b8:	011a0116 	.word	0x011a0116
 800b5bc:	00c200ea 	.word	0x00c200ea
 800b5c0:	00ba012c 	.word	0x00ba012c
 800b5c4:	00bc00d0 	.word	0x00bc00d0
 800b5c8:	00a600a0 	.word	0x00a600a0
 800b5cc:	00f8012a 	.word	0x00f8012a
 800b5d0:	0118012e 	.word	0x0118012e
 800b5d4:	011e00c4 	.word	0x011e00c4
 800b5d8:	012e011c 	.word	0x012e011c
 800b5dc:	012e012e 	.word	0x012e012e
 800b5e0:	012e012e 	.word	0x012e012e
 800b5e4:	012e00d4 	.word	0x012e00d4
 800b5e8:	012e012e 	.word	0x012e012e
 800b5ec:	012800e6 	.word	0x012800e6
 800b5f0:	01220120 	.word	0x01220120
 800b5f4:	0124      	.short	0x0124
 800b5f6:	4b55      	ldr	r3, [pc, #340]	@ (800b74c <_strerror_r+0x288>)
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	bd10      	pop	{r4, pc}
 800b5fc:	4b54      	ldr	r3, [pc, #336]	@ (800b750 <_strerror_r+0x28c>)
 800b5fe:	e7fb      	b.n	800b5f8 <_strerror_r+0x134>
 800b600:	4b54      	ldr	r3, [pc, #336]	@ (800b754 <_strerror_r+0x290>)
 800b602:	e7f9      	b.n	800b5f8 <_strerror_r+0x134>
 800b604:	4b54      	ldr	r3, [pc, #336]	@ (800b758 <_strerror_r+0x294>)
 800b606:	e7f7      	b.n	800b5f8 <_strerror_r+0x134>
 800b608:	4b54      	ldr	r3, [pc, #336]	@ (800b75c <_strerror_r+0x298>)
 800b60a:	e7f5      	b.n	800b5f8 <_strerror_r+0x134>
 800b60c:	4b54      	ldr	r3, [pc, #336]	@ (800b760 <_strerror_r+0x29c>)
 800b60e:	e7f3      	b.n	800b5f8 <_strerror_r+0x134>
 800b610:	4b54      	ldr	r3, [pc, #336]	@ (800b764 <_strerror_r+0x2a0>)
 800b612:	e7f1      	b.n	800b5f8 <_strerror_r+0x134>
 800b614:	4b54      	ldr	r3, [pc, #336]	@ (800b768 <_strerror_r+0x2a4>)
 800b616:	e7ef      	b.n	800b5f8 <_strerror_r+0x134>
 800b618:	4b54      	ldr	r3, [pc, #336]	@ (800b76c <_strerror_r+0x2a8>)
 800b61a:	e7ed      	b.n	800b5f8 <_strerror_r+0x134>
 800b61c:	4b54      	ldr	r3, [pc, #336]	@ (800b770 <_strerror_r+0x2ac>)
 800b61e:	e7eb      	b.n	800b5f8 <_strerror_r+0x134>
 800b620:	4b54      	ldr	r3, [pc, #336]	@ (800b774 <_strerror_r+0x2b0>)
 800b622:	e7e9      	b.n	800b5f8 <_strerror_r+0x134>
 800b624:	4b54      	ldr	r3, [pc, #336]	@ (800b778 <_strerror_r+0x2b4>)
 800b626:	e7e7      	b.n	800b5f8 <_strerror_r+0x134>
 800b628:	4b54      	ldr	r3, [pc, #336]	@ (800b77c <_strerror_r+0x2b8>)
 800b62a:	e7e5      	b.n	800b5f8 <_strerror_r+0x134>
 800b62c:	4b54      	ldr	r3, [pc, #336]	@ (800b780 <_strerror_r+0x2bc>)
 800b62e:	e7e3      	b.n	800b5f8 <_strerror_r+0x134>
 800b630:	4b54      	ldr	r3, [pc, #336]	@ (800b784 <_strerror_r+0x2c0>)
 800b632:	e7e1      	b.n	800b5f8 <_strerror_r+0x134>
 800b634:	4b54      	ldr	r3, [pc, #336]	@ (800b788 <_strerror_r+0x2c4>)
 800b636:	e7df      	b.n	800b5f8 <_strerror_r+0x134>
 800b638:	4b54      	ldr	r3, [pc, #336]	@ (800b78c <_strerror_r+0x2c8>)
 800b63a:	e7dd      	b.n	800b5f8 <_strerror_r+0x134>
 800b63c:	4b54      	ldr	r3, [pc, #336]	@ (800b790 <_strerror_r+0x2cc>)
 800b63e:	e7db      	b.n	800b5f8 <_strerror_r+0x134>
 800b640:	4b54      	ldr	r3, [pc, #336]	@ (800b794 <_strerror_r+0x2d0>)
 800b642:	e7d9      	b.n	800b5f8 <_strerror_r+0x134>
 800b644:	4b54      	ldr	r3, [pc, #336]	@ (800b798 <_strerror_r+0x2d4>)
 800b646:	e7d7      	b.n	800b5f8 <_strerror_r+0x134>
 800b648:	4b54      	ldr	r3, [pc, #336]	@ (800b79c <_strerror_r+0x2d8>)
 800b64a:	e7d5      	b.n	800b5f8 <_strerror_r+0x134>
 800b64c:	4b54      	ldr	r3, [pc, #336]	@ (800b7a0 <_strerror_r+0x2dc>)
 800b64e:	e7d3      	b.n	800b5f8 <_strerror_r+0x134>
 800b650:	4b54      	ldr	r3, [pc, #336]	@ (800b7a4 <_strerror_r+0x2e0>)
 800b652:	e7d1      	b.n	800b5f8 <_strerror_r+0x134>
 800b654:	4b54      	ldr	r3, [pc, #336]	@ (800b7a8 <_strerror_r+0x2e4>)
 800b656:	e7cf      	b.n	800b5f8 <_strerror_r+0x134>
 800b658:	4b54      	ldr	r3, [pc, #336]	@ (800b7ac <_strerror_r+0x2e8>)
 800b65a:	e7cd      	b.n	800b5f8 <_strerror_r+0x134>
 800b65c:	4b54      	ldr	r3, [pc, #336]	@ (800b7b0 <_strerror_r+0x2ec>)
 800b65e:	e7cb      	b.n	800b5f8 <_strerror_r+0x134>
 800b660:	4b54      	ldr	r3, [pc, #336]	@ (800b7b4 <_strerror_r+0x2f0>)
 800b662:	e7c9      	b.n	800b5f8 <_strerror_r+0x134>
 800b664:	4b54      	ldr	r3, [pc, #336]	@ (800b7b8 <_strerror_r+0x2f4>)
 800b666:	e7c7      	b.n	800b5f8 <_strerror_r+0x134>
 800b668:	4b54      	ldr	r3, [pc, #336]	@ (800b7bc <_strerror_r+0x2f8>)
 800b66a:	e7c5      	b.n	800b5f8 <_strerror_r+0x134>
 800b66c:	4b54      	ldr	r3, [pc, #336]	@ (800b7c0 <_strerror_r+0x2fc>)
 800b66e:	e7c3      	b.n	800b5f8 <_strerror_r+0x134>
 800b670:	4b54      	ldr	r3, [pc, #336]	@ (800b7c4 <_strerror_r+0x300>)
 800b672:	e7c1      	b.n	800b5f8 <_strerror_r+0x134>
 800b674:	4b54      	ldr	r3, [pc, #336]	@ (800b7c8 <_strerror_r+0x304>)
 800b676:	e7bf      	b.n	800b5f8 <_strerror_r+0x134>
 800b678:	4b54      	ldr	r3, [pc, #336]	@ (800b7cc <_strerror_r+0x308>)
 800b67a:	e7bd      	b.n	800b5f8 <_strerror_r+0x134>
 800b67c:	4b54      	ldr	r3, [pc, #336]	@ (800b7d0 <_strerror_r+0x30c>)
 800b67e:	e7bb      	b.n	800b5f8 <_strerror_r+0x134>
 800b680:	4b54      	ldr	r3, [pc, #336]	@ (800b7d4 <_strerror_r+0x310>)
 800b682:	e7b9      	b.n	800b5f8 <_strerror_r+0x134>
 800b684:	4b54      	ldr	r3, [pc, #336]	@ (800b7d8 <_strerror_r+0x314>)
 800b686:	e7b7      	b.n	800b5f8 <_strerror_r+0x134>
 800b688:	4b54      	ldr	r3, [pc, #336]	@ (800b7dc <_strerror_r+0x318>)
 800b68a:	e7b5      	b.n	800b5f8 <_strerror_r+0x134>
 800b68c:	4b54      	ldr	r3, [pc, #336]	@ (800b7e0 <_strerror_r+0x31c>)
 800b68e:	e7b3      	b.n	800b5f8 <_strerror_r+0x134>
 800b690:	4b54      	ldr	r3, [pc, #336]	@ (800b7e4 <_strerror_r+0x320>)
 800b692:	e7b1      	b.n	800b5f8 <_strerror_r+0x134>
 800b694:	4b54      	ldr	r3, [pc, #336]	@ (800b7e8 <_strerror_r+0x324>)
 800b696:	e7af      	b.n	800b5f8 <_strerror_r+0x134>
 800b698:	4b54      	ldr	r3, [pc, #336]	@ (800b7ec <_strerror_r+0x328>)
 800b69a:	e7ad      	b.n	800b5f8 <_strerror_r+0x134>
 800b69c:	4b54      	ldr	r3, [pc, #336]	@ (800b7f0 <_strerror_r+0x32c>)
 800b69e:	e7ab      	b.n	800b5f8 <_strerror_r+0x134>
 800b6a0:	4b54      	ldr	r3, [pc, #336]	@ (800b7f4 <_strerror_r+0x330>)
 800b6a2:	e7a9      	b.n	800b5f8 <_strerror_r+0x134>
 800b6a4:	4b54      	ldr	r3, [pc, #336]	@ (800b7f8 <_strerror_r+0x334>)
 800b6a6:	e7a7      	b.n	800b5f8 <_strerror_r+0x134>
 800b6a8:	4b54      	ldr	r3, [pc, #336]	@ (800b7fc <_strerror_r+0x338>)
 800b6aa:	e7a5      	b.n	800b5f8 <_strerror_r+0x134>
 800b6ac:	4b54      	ldr	r3, [pc, #336]	@ (800b800 <_strerror_r+0x33c>)
 800b6ae:	e7a3      	b.n	800b5f8 <_strerror_r+0x134>
 800b6b0:	4b54      	ldr	r3, [pc, #336]	@ (800b804 <_strerror_r+0x340>)
 800b6b2:	e7a1      	b.n	800b5f8 <_strerror_r+0x134>
 800b6b4:	4b54      	ldr	r3, [pc, #336]	@ (800b808 <_strerror_r+0x344>)
 800b6b6:	e79f      	b.n	800b5f8 <_strerror_r+0x134>
 800b6b8:	4b54      	ldr	r3, [pc, #336]	@ (800b80c <_strerror_r+0x348>)
 800b6ba:	e79d      	b.n	800b5f8 <_strerror_r+0x134>
 800b6bc:	4b54      	ldr	r3, [pc, #336]	@ (800b810 <_strerror_r+0x34c>)
 800b6be:	e79b      	b.n	800b5f8 <_strerror_r+0x134>
 800b6c0:	4b54      	ldr	r3, [pc, #336]	@ (800b814 <_strerror_r+0x350>)
 800b6c2:	e799      	b.n	800b5f8 <_strerror_r+0x134>
 800b6c4:	4b54      	ldr	r3, [pc, #336]	@ (800b818 <_strerror_r+0x354>)
 800b6c6:	e797      	b.n	800b5f8 <_strerror_r+0x134>
 800b6c8:	4b54      	ldr	r3, [pc, #336]	@ (800b81c <_strerror_r+0x358>)
 800b6ca:	e795      	b.n	800b5f8 <_strerror_r+0x134>
 800b6cc:	4b54      	ldr	r3, [pc, #336]	@ (800b820 <_strerror_r+0x35c>)
 800b6ce:	e793      	b.n	800b5f8 <_strerror_r+0x134>
 800b6d0:	4b54      	ldr	r3, [pc, #336]	@ (800b824 <_strerror_r+0x360>)
 800b6d2:	e791      	b.n	800b5f8 <_strerror_r+0x134>
 800b6d4:	4b54      	ldr	r3, [pc, #336]	@ (800b828 <_strerror_r+0x364>)
 800b6d6:	e78f      	b.n	800b5f8 <_strerror_r+0x134>
 800b6d8:	4b54      	ldr	r3, [pc, #336]	@ (800b82c <_strerror_r+0x368>)
 800b6da:	e78d      	b.n	800b5f8 <_strerror_r+0x134>
 800b6dc:	4b54      	ldr	r3, [pc, #336]	@ (800b830 <_strerror_r+0x36c>)
 800b6de:	e78b      	b.n	800b5f8 <_strerror_r+0x134>
 800b6e0:	4b54      	ldr	r3, [pc, #336]	@ (800b834 <_strerror_r+0x370>)
 800b6e2:	e789      	b.n	800b5f8 <_strerror_r+0x134>
 800b6e4:	4b54      	ldr	r3, [pc, #336]	@ (800b838 <_strerror_r+0x374>)
 800b6e6:	e787      	b.n	800b5f8 <_strerror_r+0x134>
 800b6e8:	4b54      	ldr	r3, [pc, #336]	@ (800b83c <_strerror_r+0x378>)
 800b6ea:	e785      	b.n	800b5f8 <_strerror_r+0x134>
 800b6ec:	4b54      	ldr	r3, [pc, #336]	@ (800b840 <_strerror_r+0x37c>)
 800b6ee:	e783      	b.n	800b5f8 <_strerror_r+0x134>
 800b6f0:	4b54      	ldr	r3, [pc, #336]	@ (800b844 <_strerror_r+0x380>)
 800b6f2:	e781      	b.n	800b5f8 <_strerror_r+0x134>
 800b6f4:	4b54      	ldr	r3, [pc, #336]	@ (800b848 <_strerror_r+0x384>)
 800b6f6:	e77f      	b.n	800b5f8 <_strerror_r+0x134>
 800b6f8:	4b54      	ldr	r3, [pc, #336]	@ (800b84c <_strerror_r+0x388>)
 800b6fa:	e77d      	b.n	800b5f8 <_strerror_r+0x134>
 800b6fc:	4b54      	ldr	r3, [pc, #336]	@ (800b850 <_strerror_r+0x38c>)
 800b6fe:	e77b      	b.n	800b5f8 <_strerror_r+0x134>
 800b700:	4b54      	ldr	r3, [pc, #336]	@ (800b854 <_strerror_r+0x390>)
 800b702:	e779      	b.n	800b5f8 <_strerror_r+0x134>
 800b704:	4b54      	ldr	r3, [pc, #336]	@ (800b858 <_strerror_r+0x394>)
 800b706:	e777      	b.n	800b5f8 <_strerror_r+0x134>
 800b708:	4b54      	ldr	r3, [pc, #336]	@ (800b85c <_strerror_r+0x398>)
 800b70a:	e775      	b.n	800b5f8 <_strerror_r+0x134>
 800b70c:	4b54      	ldr	r3, [pc, #336]	@ (800b860 <_strerror_r+0x39c>)
 800b70e:	e773      	b.n	800b5f8 <_strerror_r+0x134>
 800b710:	4b54      	ldr	r3, [pc, #336]	@ (800b864 <_strerror_r+0x3a0>)
 800b712:	e771      	b.n	800b5f8 <_strerror_r+0x134>
 800b714:	4b54      	ldr	r3, [pc, #336]	@ (800b868 <_strerror_r+0x3a4>)
 800b716:	e76f      	b.n	800b5f8 <_strerror_r+0x134>
 800b718:	4b54      	ldr	r3, [pc, #336]	@ (800b86c <_strerror_r+0x3a8>)
 800b71a:	e76d      	b.n	800b5f8 <_strerror_r+0x134>
 800b71c:	4b54      	ldr	r3, [pc, #336]	@ (800b870 <_strerror_r+0x3ac>)
 800b71e:	e76b      	b.n	800b5f8 <_strerror_r+0x134>
 800b720:	4b54      	ldr	r3, [pc, #336]	@ (800b874 <_strerror_r+0x3b0>)
 800b722:	e769      	b.n	800b5f8 <_strerror_r+0x134>
 800b724:	4b54      	ldr	r3, [pc, #336]	@ (800b878 <_strerror_r+0x3b4>)
 800b726:	e767      	b.n	800b5f8 <_strerror_r+0x134>
 800b728:	4b54      	ldr	r3, [pc, #336]	@ (800b87c <_strerror_r+0x3b8>)
 800b72a:	e765      	b.n	800b5f8 <_strerror_r+0x134>
 800b72c:	4b54      	ldr	r3, [pc, #336]	@ (800b880 <_strerror_r+0x3bc>)
 800b72e:	e763      	b.n	800b5f8 <_strerror_r+0x134>
 800b730:	4b54      	ldr	r3, [pc, #336]	@ (800b884 <_strerror_r+0x3c0>)
 800b732:	e761      	b.n	800b5f8 <_strerror_r+0x134>
 800b734:	2a00      	cmp	r2, #0
 800b736:	bf08      	it	eq
 800b738:	4622      	moveq	r2, r4
 800b73a:	f000 f8b3 	bl	800b8a4 <_user_strerror>
 800b73e:	4b52      	ldr	r3, [pc, #328]	@ (800b888 <_strerror_r+0x3c4>)
 800b740:	2800      	cmp	r0, #0
 800b742:	bf18      	it	ne
 800b744:	4603      	movne	r3, r0
 800b746:	e757      	b.n	800b5f8 <_strerror_r+0x134>
 800b748:	4b50      	ldr	r3, [pc, #320]	@ (800b88c <_strerror_r+0x3c8>)
 800b74a:	e755      	b.n	800b5f8 <_strerror_r+0x134>
 800b74c:	0800f220 	.word	0x0800f220
 800b750:	0800f232 	.word	0x0800f232
 800b754:	0800f24c 	.word	0x0800f24c
 800b758:	0800f25c 	.word	0x0800f25c
 800b75c:	0800f274 	.word	0x0800f274
 800b760:	0800f27e 	.word	0x0800f27e
 800b764:	0800f298 	.word	0x0800f298
 800b768:	0800f2aa 	.word	0x0800f2aa
 800b76c:	0800f2bc 	.word	0x0800f2bc
 800b770:	0800f2d5 	.word	0x0800f2d5
 800b774:	0800f2e5 	.word	0x0800f2e5
 800b778:	0800f2f1 	.word	0x0800f2f1
 800b77c:	0800f30e 	.word	0x0800f30e
 800b780:	0800f320 	.word	0x0800f320
 800b784:	0800f331 	.word	0x0800f331
 800b788:	0800f343 	.word	0x0800f343
 800b78c:	0800f34f 	.word	0x0800f34f
 800b790:	0800f367 	.word	0x0800f367
 800b794:	0800f373 	.word	0x0800f373
 800b798:	0800f385 	.word	0x0800f385
 800b79c:	0800f394 	.word	0x0800f394
 800b7a0:	0800f3a4 	.word	0x0800f3a4
 800b7a4:	0800f3b1 	.word	0x0800f3b1
 800b7a8:	0800f3d0 	.word	0x0800f3d0
 800b7ac:	0800f3df 	.word	0x0800f3df
 800b7b0:	0800f3f0 	.word	0x0800f3f0
 800b7b4:	0800f414 	.word	0x0800f414
 800b7b8:	0800f432 	.word	0x0800f432
 800b7bc:	0800f450 	.word	0x0800f450
 800b7c0:	0800f470 	.word	0x0800f470
 800b7c4:	0800f487 	.word	0x0800f487
 800b7c8:	0800f496 	.word	0x0800f496
 800b7cc:	0800f4a5 	.word	0x0800f4a5
 800b7d0:	0800f4b9 	.word	0x0800f4b9
 800b7d4:	0800f4d1 	.word	0x0800f4d1
 800b7d8:	0800f4df 	.word	0x0800f4df
 800b7dc:	0800f4ec 	.word	0x0800f4ec
 800b7e0:	0800f502 	.word	0x0800f502
 800b7e4:	0800f511 	.word	0x0800f511
 800b7e8:	0800f51d 	.word	0x0800f51d
 800b7ec:	0800f54c 	.word	0x0800f54c
 800b7f0:	0800f55d 	.word	0x0800f55d
 800b7f4:	0800f578 	.word	0x0800f578
 800b7f8:	0800f58b 	.word	0x0800f58b
 800b7fc:	0800f5a1 	.word	0x0800f5a1
 800b800:	0800f5aa 	.word	0x0800f5aa
 800b804:	0800f5c1 	.word	0x0800f5c1
 800b808:	0800f5c9 	.word	0x0800f5c9
 800b80c:	0800f5d6 	.word	0x0800f5d6
 800b810:	0800f5eb 	.word	0x0800f5eb
 800b814:	0800f5ff 	.word	0x0800f5ff
 800b818:	0800f617 	.word	0x0800f617
 800b81c:	0800f626 	.word	0x0800f626
 800b820:	0800f637 	.word	0x0800f637
 800b824:	0800f64a 	.word	0x0800f64a
 800b828:	0800f656 	.word	0x0800f656
 800b82c:	0800f66f 	.word	0x0800f66f
 800b830:	0800f683 	.word	0x0800f683
 800b834:	0800f69e 	.word	0x0800f69e
 800b838:	0800f6b6 	.word	0x0800f6b6
 800b83c:	0800f6d0 	.word	0x0800f6d0
 800b840:	0800f6d8 	.word	0x0800f6d8
 800b844:	0800f708 	.word	0x0800f708
 800b848:	0800f727 	.word	0x0800f727
 800b84c:	0800f746 	.word	0x0800f746
 800b850:	0800f75d 	.word	0x0800f75d
 800b854:	0800f770 	.word	0x0800f770
 800b858:	0800f789 	.word	0x0800f789
 800b85c:	0800f7a0 	.word	0x0800f7a0
 800b860:	0800f7b6 	.word	0x0800f7b6
 800b864:	0800f7d7 	.word	0x0800f7d7
 800b868:	0800f7ef 	.word	0x0800f7ef
 800b86c:	0800f80b 	.word	0x0800f80b
 800b870:	0800f81e 	.word	0x0800f81e
 800b874:	0800f834 	.word	0x0800f834
 800b878:	0800f848 	.word	0x0800f848
 800b87c:	0800f86a 	.word	0x0800f86a
 800b880:	0800f890 	.word	0x0800f890
 800b884:	0800f8a1 	.word	0x0800f8a1
 800b888:	0800faee 	.word	0x0800faee
 800b88c:	0800f228 	.word	0x0800f228

0800b890 <strerror>:
 800b890:	2300      	movs	r3, #0
 800b892:	4601      	mov	r1, r0
 800b894:	4802      	ldr	r0, [pc, #8]	@ (800b8a0 <strerror+0x10>)
 800b896:	461a      	mov	r2, r3
 800b898:	6800      	ldr	r0, [r0, #0]
 800b89a:	f7ff be13 	b.w	800b4c4 <_strerror_r>
 800b89e:	bf00      	nop
 800b8a0:	20000024 	.word	0x20000024

0800b8a4 <_user_strerror>:
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	4770      	bx	lr

0800b8a8 <_localeconv_r>:
 800b8a8:	4800      	ldr	r0, [pc, #0]	@ (800b8ac <_localeconv_r+0x4>)
 800b8aa:	4770      	bx	lr
 800b8ac:	20000164 	.word	0x20000164

0800b8b0 <_close_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4d05      	ldr	r5, [pc, #20]	@ (800b8cc <_close_r+0x1c>)
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	f7fe fad6 	bl	8009e6c <_close>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_close_r+0x1a>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_close_r+0x1a>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	20003fdc 	.word	0x20003fdc

0800b8d0 <_reclaim_reent>:
 800b8d0:	4b29      	ldr	r3, [pc, #164]	@ (800b978 <_reclaim_reent+0xa8>)
 800b8d2:	b570      	push	{r4, r5, r6, lr}
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4283      	cmp	r3, r0
 800b8da:	d04b      	beq.n	800b974 <_reclaim_reent+0xa4>
 800b8dc:	69c3      	ldr	r3, [r0, #28]
 800b8de:	b1ab      	cbz	r3, 800b90c <_reclaim_reent+0x3c>
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	b16b      	cbz	r3, 800b900 <_reclaim_reent+0x30>
 800b8e4:	2500      	movs	r5, #0
 800b8e6:	69e3      	ldr	r3, [r4, #28]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	5959      	ldr	r1, [r3, r5]
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d13b      	bne.n	800b968 <_reclaim_reent+0x98>
 800b8f0:	3504      	adds	r5, #4
 800b8f2:	2d80      	cmp	r5, #128	@ 0x80
 800b8f4:	d1f7      	bne.n	800b8e6 <_reclaim_reent+0x16>
 800b8f6:	69e3      	ldr	r3, [r4, #28]
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	68d9      	ldr	r1, [r3, #12]
 800b8fc:	f7fe fc86 	bl	800a20c <_free_r>
 800b900:	69e3      	ldr	r3, [r4, #28]
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	b111      	cbz	r1, 800b90c <_reclaim_reent+0x3c>
 800b906:	4620      	mov	r0, r4
 800b908:	f7fe fc80 	bl	800a20c <_free_r>
 800b90c:	6961      	ldr	r1, [r4, #20]
 800b90e:	b111      	cbz	r1, 800b916 <_reclaim_reent+0x46>
 800b910:	4620      	mov	r0, r4
 800b912:	f7fe fc7b 	bl	800a20c <_free_r>
 800b916:	69e1      	ldr	r1, [r4, #28]
 800b918:	b111      	cbz	r1, 800b920 <_reclaim_reent+0x50>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7fe fc76 	bl	800a20c <_free_r>
 800b920:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b922:	b111      	cbz	r1, 800b92a <_reclaim_reent+0x5a>
 800b924:	4620      	mov	r0, r4
 800b926:	f7fe fc71 	bl	800a20c <_free_r>
 800b92a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b92c:	b111      	cbz	r1, 800b934 <_reclaim_reent+0x64>
 800b92e:	4620      	mov	r0, r4
 800b930:	f7fe fc6c 	bl	800a20c <_free_r>
 800b934:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b936:	b111      	cbz	r1, 800b93e <_reclaim_reent+0x6e>
 800b938:	4620      	mov	r0, r4
 800b93a:	f7fe fc67 	bl	800a20c <_free_r>
 800b93e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b940:	b111      	cbz	r1, 800b948 <_reclaim_reent+0x78>
 800b942:	4620      	mov	r0, r4
 800b944:	f7fe fc62 	bl	800a20c <_free_r>
 800b948:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b94a:	b111      	cbz	r1, 800b952 <_reclaim_reent+0x82>
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7fe fc5d 	bl	800a20c <_free_r>
 800b952:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b954:	b111      	cbz	r1, 800b95c <_reclaim_reent+0x8c>
 800b956:	4620      	mov	r0, r4
 800b958:	f7fe fc58 	bl	800a20c <_free_r>
 800b95c:	6a23      	ldr	r3, [r4, #32]
 800b95e:	b14b      	cbz	r3, 800b974 <_reclaim_reent+0xa4>
 800b960:	4620      	mov	r0, r4
 800b962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b966:	4718      	bx	r3
 800b968:	680e      	ldr	r6, [r1, #0]
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7fe fc4e 	bl	800a20c <_free_r>
 800b970:	4631      	mov	r1, r6
 800b972:	e7bb      	b.n	800b8ec <_reclaim_reent+0x1c>
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	bf00      	nop
 800b978:	20000024 	.word	0x20000024

0800b97c <_lseek_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	4611      	mov	r1, r2
 800b984:	2200      	movs	r2, #0
 800b986:	4d05      	ldr	r5, [pc, #20]	@ (800b99c <_lseek_r+0x20>)
 800b988:	602a      	str	r2, [r5, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	f7fe fa2f 	bl	8009dee <_lseek>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_lseek_r+0x1e>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_lseek_r+0x1e>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20003fdc 	.word	0x20003fdc

0800b9a0 <_open_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4d05      	ldr	r5, [pc, #20]	@ (800b9c0 <_open_r+0x20>)
 800b9ac:	602a      	str	r2, [r5, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f7fe fb24 	bl	8009ffc <_open>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_open_r+0x1e>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_open_r+0x1e>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20003fdc 	.word	0x20003fdc

0800b9c4 <_read_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4d05      	ldr	r5, [pc, #20]	@ (800b9e4 <_read_r+0x20>)
 800b9d0:	602a      	str	r2, [r5, #0]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f7fe f9b5 	bl	8009d42 <_read>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_read_r+0x1e>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_read_r+0x1e>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20003fdc 	.word	0x20003fdc

0800b9e8 <_sbrk_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4d05      	ldr	r5, [pc, #20]	@ (800ba04 <_sbrk_r+0x1c>)
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	602b      	str	r3, [r5, #0]
 800b9f4:	f7f6 ffc4 	bl	8002980 <_sbrk>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_sbrk_r+0x1a>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_sbrk_r+0x1a>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20003fdc 	.word	0x20003fdc

0800ba08 <_write_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	2200      	movs	r2, #0
 800ba12:	4d05      	ldr	r5, [pc, #20]	@ (800ba28 <_write_r+0x20>)
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	f7fe f9fb 	bl	8009e12 <_write>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_write_r+0x1e>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_write_r+0x1e>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20003fdc 	.word	0x20003fdc

0800ba2c <__errno>:
 800ba2c:	4b01      	ldr	r3, [pc, #4]	@ (800ba34 <__errno+0x8>)
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20000024 	.word	0x20000024

0800ba38 <__libc_init_array>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	4d0c      	ldr	r5, [pc, #48]	@ (800ba70 <__libc_init_array+0x38>)
 800ba3e:	4c0d      	ldr	r4, [pc, #52]	@ (800ba74 <__libc_init_array+0x3c>)
 800ba40:	1b64      	subs	r4, r4, r5
 800ba42:	10a4      	asrs	r4, r4, #2
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	d109      	bne.n	800ba5c <__libc_init_array+0x24>
 800ba48:	f003 f88e 	bl	800eb68 <_init>
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	4d0a      	ldr	r5, [pc, #40]	@ (800ba78 <__libc_init_array+0x40>)
 800ba50:	4c0a      	ldr	r4, [pc, #40]	@ (800ba7c <__libc_init_array+0x44>)
 800ba52:	1b64      	subs	r4, r4, r5
 800ba54:	10a4      	asrs	r4, r4, #2
 800ba56:	42a6      	cmp	r6, r4
 800ba58:	d105      	bne.n	800ba66 <__libc_init_array+0x2e>
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba60:	4798      	blx	r3
 800ba62:	3601      	adds	r6, #1
 800ba64:	e7ee      	b.n	800ba44 <__libc_init_array+0xc>
 800ba66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba6a:	4798      	blx	r3
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	e7f2      	b.n	800ba56 <__libc_init_array+0x1e>
 800ba70:	0800fc98 	.word	0x0800fc98
 800ba74:	0800fc98 	.word	0x0800fc98
 800ba78:	0800fc98 	.word	0x0800fc98
 800ba7c:	0800fc9c 	.word	0x0800fc9c

0800ba80 <memchr>:
 800ba80:	4603      	mov	r3, r0
 800ba82:	b510      	push	{r4, lr}
 800ba84:	b2c9      	uxtb	r1, r1
 800ba86:	4402      	add	r2, r0
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	d101      	bne.n	800ba92 <memchr+0x12>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e003      	b.n	800ba9a <memchr+0x1a>
 800ba92:	7804      	ldrb	r4, [r0, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	428c      	cmp	r4, r1
 800ba98:	d1f6      	bne.n	800ba88 <memchr+0x8>
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <memcpy>:
 800ba9c:	440a      	add	r2, r1
 800ba9e:	4291      	cmp	r1, r2
 800baa0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800baa4:	d100      	bne.n	800baa8 <memcpy+0xc>
 800baa6:	4770      	bx	lr
 800baa8:	b510      	push	{r4, lr}
 800baaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baae:	4291      	cmp	r1, r2
 800bab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab4:	d1f9      	bne.n	800baaa <memcpy+0xe>
 800bab6:	bd10      	pop	{r4, pc}

0800bab8 <quorem>:
 800bab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	6903      	ldr	r3, [r0, #16]
 800babe:	690c      	ldr	r4, [r1, #16]
 800bac0:	4607      	mov	r7, r0
 800bac2:	42a3      	cmp	r3, r4
 800bac4:	db7e      	blt.n	800bbc4 <quorem+0x10c>
 800bac6:	3c01      	subs	r4, #1
 800bac8:	00a3      	lsls	r3, r4, #2
 800baca:	f100 0514 	add.w	r5, r0, #20
 800bace:	f101 0814 	add.w	r8, r1, #20
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bae2:	3301      	adds	r3, #1
 800bae4:	429a      	cmp	r2, r3
 800bae6:	fbb2 f6f3 	udiv	r6, r2, r3
 800baea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800baee:	d32e      	bcc.n	800bb4e <quorem+0x96>
 800baf0:	f04f 0a00 	mov.w	sl, #0
 800baf4:	46c4      	mov	ip, r8
 800baf6:	46ae      	mov	lr, r5
 800baf8:	46d3      	mov	fp, sl
 800bafa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bafe:	b298      	uxth	r0, r3
 800bb00:	fb06 a000 	mla	r0, r6, r0, sl
 800bb04:	0c1b      	lsrs	r3, r3, #16
 800bb06:	0c02      	lsrs	r2, r0, #16
 800bb08:	fb06 2303 	mla	r3, r6, r3, r2
 800bb0c:	f8de 2000 	ldr.w	r2, [lr]
 800bb10:	b280      	uxth	r0, r0
 800bb12:	b292      	uxth	r2, r2
 800bb14:	1a12      	subs	r2, r2, r0
 800bb16:	445a      	add	r2, fp
 800bb18:	f8de 0000 	ldr.w	r0, [lr]
 800bb1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb2a:	b292      	uxth	r2, r2
 800bb2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb30:	45e1      	cmp	r9, ip
 800bb32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb36:	f84e 2b04 	str.w	r2, [lr], #4
 800bb3a:	d2de      	bcs.n	800bafa <quorem+0x42>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	58eb      	ldr	r3, [r5, r3]
 800bb40:	b92b      	cbnz	r3, 800bb4e <quorem+0x96>
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	3b04      	subs	r3, #4
 800bb46:	429d      	cmp	r5, r3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	d32f      	bcc.n	800bbac <quorem+0xf4>
 800bb4c:	613c      	str	r4, [r7, #16]
 800bb4e:	4638      	mov	r0, r7
 800bb50:	f001 f87a 	bl	800cc48 <__mcmp>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	db25      	blt.n	800bba4 <quorem+0xec>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb60:	f8d1 c000 	ldr.w	ip, [r1]
 800bb64:	fa1f fe82 	uxth.w	lr, r2
 800bb68:	fa1f f38c 	uxth.w	r3, ip
 800bb6c:	eba3 030e 	sub.w	r3, r3, lr
 800bb70:	4403      	add	r3, r0
 800bb72:	0c12      	lsrs	r2, r2, #16
 800bb74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb82:	45c1      	cmp	r9, r8
 800bb84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bb88:	f841 3b04 	str.w	r3, [r1], #4
 800bb8c:	d2e6      	bcs.n	800bb5c <quorem+0xa4>
 800bb8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb96:	b922      	cbnz	r2, 800bba2 <quorem+0xea>
 800bb98:	3b04      	subs	r3, #4
 800bb9a:	429d      	cmp	r5, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	d30b      	bcc.n	800bbb8 <quorem+0x100>
 800bba0:	613c      	str	r4, [r7, #16]
 800bba2:	3601      	adds	r6, #1
 800bba4:	4630      	mov	r0, r6
 800bba6:	b003      	add	sp, #12
 800bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbac:	6812      	ldr	r2, [r2, #0]
 800bbae:	3b04      	subs	r3, #4
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	d1cb      	bne.n	800bb4c <quorem+0x94>
 800bbb4:	3c01      	subs	r4, #1
 800bbb6:	e7c6      	b.n	800bb46 <quorem+0x8e>
 800bbb8:	6812      	ldr	r2, [r2, #0]
 800bbba:	3b04      	subs	r3, #4
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	d1ef      	bne.n	800bba0 <quorem+0xe8>
 800bbc0:	3c01      	subs	r4, #1
 800bbc2:	e7ea      	b.n	800bb9a <quorem+0xe2>
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	e7ee      	b.n	800bba6 <quorem+0xee>

0800bbc8 <_dtoa_r>:
 800bbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbcc:	4614      	mov	r4, r2
 800bbce:	461d      	mov	r5, r3
 800bbd0:	69c7      	ldr	r7, [r0, #28]
 800bbd2:	b097      	sub	sp, #92	@ 0x5c
 800bbd4:	4683      	mov	fp, r0
 800bbd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bbda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bbdc:	b97f      	cbnz	r7, 800bbfe <_dtoa_r+0x36>
 800bbde:	2010      	movs	r0, #16
 800bbe0:	f7fe fb5c 	bl	800a29c <malloc>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	f8cb 001c 	str.w	r0, [fp, #28]
 800bbea:	b920      	cbnz	r0, 800bbf6 <_dtoa_r+0x2e>
 800bbec:	21ef      	movs	r1, #239	@ 0xef
 800bbee:	4ba8      	ldr	r3, [pc, #672]	@ (800be90 <_dtoa_r+0x2c8>)
 800bbf0:	48a8      	ldr	r0, [pc, #672]	@ (800be94 <_dtoa_r+0x2cc>)
 800bbf2:	f001 fd45 	bl	800d680 <__assert_func>
 800bbf6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bbfa:	6007      	str	r7, [r0, #0]
 800bbfc:	60c7      	str	r7, [r0, #12]
 800bbfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc02:	6819      	ldr	r1, [r3, #0]
 800bc04:	b159      	cbz	r1, 800bc1e <_dtoa_r+0x56>
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4093      	lsls	r3, r2
 800bc0c:	604a      	str	r2, [r1, #4]
 800bc0e:	608b      	str	r3, [r1, #8]
 800bc10:	4658      	mov	r0, fp
 800bc12:	f000 fde1 	bl	800c7d8 <_Bfree>
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	1e2b      	subs	r3, r5, #0
 800bc20:	bfaf      	iteee	ge
 800bc22:	2300      	movge	r3, #0
 800bc24:	2201      	movlt	r2, #1
 800bc26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc2a:	9303      	strlt	r3, [sp, #12]
 800bc2c:	bfa8      	it	ge
 800bc2e:	6033      	strge	r3, [r6, #0]
 800bc30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc34:	4b98      	ldr	r3, [pc, #608]	@ (800be98 <_dtoa_r+0x2d0>)
 800bc36:	bfb8      	it	lt
 800bc38:	6032      	strlt	r2, [r6, #0]
 800bc3a:	ea33 0308 	bics.w	r3, r3, r8
 800bc3e:	d112      	bne.n	800bc66 <_dtoa_r+0x9e>
 800bc40:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc4c:	4323      	orrs	r3, r4
 800bc4e:	f000 8550 	beq.w	800c6f2 <_dtoa_r+0xb2a>
 800bc52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bc54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800be9c <_dtoa_r+0x2d4>
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 8552 	beq.w	800c702 <_dtoa_r+0xb3a>
 800bc5e:	f10a 0303 	add.w	r3, sl, #3
 800bc62:	f000 bd4c 	b.w	800c6fe <_dtoa_r+0xb36>
 800bc66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc72:	2200      	movs	r2, #0
 800bc74:	2300      	movs	r3, #0
 800bc76:	f7f4 fe97 	bl	80009a8 <__aeabi_dcmpeq>
 800bc7a:	4607      	mov	r7, r0
 800bc7c:	b158      	cbz	r0, 800bc96 <_dtoa_r+0xce>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bc86:	b113      	cbz	r3, 800bc8e <_dtoa_r+0xc6>
 800bc88:	4b85      	ldr	r3, [pc, #532]	@ (800bea0 <_dtoa_r+0x2d8>)
 800bc8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bea4 <_dtoa_r+0x2dc>
 800bc92:	f000 bd36 	b.w	800c702 <_dtoa_r+0xb3a>
 800bc96:	ab14      	add	r3, sp, #80	@ 0x50
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	ab15      	add	r3, sp, #84	@ 0x54
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	4658      	mov	r0, fp
 800bca0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bca4:	f001 f880 	bl	800cda8 <__d2b>
 800bca8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bcac:	4681      	mov	r9, r0
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	d077      	beq.n	800bda2 <_dtoa_r+0x1da>
 800bcb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcc0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bcc4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bcc8:	9712      	str	r7, [sp, #72]	@ 0x48
 800bcca:	4619      	mov	r1, r3
 800bccc:	2200      	movs	r2, #0
 800bcce:	4b76      	ldr	r3, [pc, #472]	@ (800bea8 <_dtoa_r+0x2e0>)
 800bcd0:	f7f4 fa4a 	bl	8000168 <__aeabi_dsub>
 800bcd4:	a368      	add	r3, pc, #416	@ (adr r3, 800be78 <_dtoa_r+0x2b0>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 fbfd 	bl	80004d8 <__aeabi_dmul>
 800bcde:	a368      	add	r3, pc, #416	@ (adr r3, 800be80 <_dtoa_r+0x2b8>)
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f7f4 fa42 	bl	800016c <__adddf3>
 800bce8:	4604      	mov	r4, r0
 800bcea:	4630      	mov	r0, r6
 800bcec:	460d      	mov	r5, r1
 800bcee:	f7f4 fb89 	bl	8000404 <__aeabi_i2d>
 800bcf2:	a365      	add	r3, pc, #404	@ (adr r3, 800be88 <_dtoa_r+0x2c0>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f7f4 fbee 	bl	80004d8 <__aeabi_dmul>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4620      	mov	r0, r4
 800bd02:	4629      	mov	r1, r5
 800bd04:	f7f4 fa32 	bl	800016c <__adddf3>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	f7f4 fe94 	bl	8000a38 <__aeabi_d2iz>
 800bd10:	2200      	movs	r2, #0
 800bd12:	4607      	mov	r7, r0
 800bd14:	2300      	movs	r3, #0
 800bd16:	4620      	mov	r0, r4
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7f4 fe4f 	bl	80009bc <__aeabi_dcmplt>
 800bd1e:	b140      	cbz	r0, 800bd32 <_dtoa_r+0x16a>
 800bd20:	4638      	mov	r0, r7
 800bd22:	f7f4 fb6f 	bl	8000404 <__aeabi_i2d>
 800bd26:	4622      	mov	r2, r4
 800bd28:	462b      	mov	r3, r5
 800bd2a:	f7f4 fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 800bd2e:	b900      	cbnz	r0, 800bd32 <_dtoa_r+0x16a>
 800bd30:	3f01      	subs	r7, #1
 800bd32:	2f16      	cmp	r7, #22
 800bd34:	d853      	bhi.n	800bdde <_dtoa_r+0x216>
 800bd36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd3a:	4b5c      	ldr	r3, [pc, #368]	@ (800beac <_dtoa_r+0x2e4>)
 800bd3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd44:	f7f4 fe3a 	bl	80009bc <__aeabi_dcmplt>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d04a      	beq.n	800bde2 <_dtoa_r+0x21a>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	3f01      	subs	r7, #1
 800bd50:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd54:	1b9b      	subs	r3, r3, r6
 800bd56:	1e5a      	subs	r2, r3, #1
 800bd58:	bf46      	itte	mi
 800bd5a:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd5e:	2300      	movmi	r3, #0
 800bd60:	f04f 0800 	movpl.w	r8, #0
 800bd64:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd66:	bf48      	it	mi
 800bd68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bd6a:	2f00      	cmp	r7, #0
 800bd6c:	db3b      	blt.n	800bde6 <_dtoa_r+0x21e>
 800bd6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd70:	970e      	str	r7, [sp, #56]	@ 0x38
 800bd72:	443b      	add	r3, r7
 800bd74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd76:	2300      	movs	r3, #0
 800bd78:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	d866      	bhi.n	800be4e <_dtoa_r+0x286>
 800bd80:	2b05      	cmp	r3, #5
 800bd82:	bfc4      	itt	gt
 800bd84:	3b04      	subgt	r3, #4
 800bd86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bd88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd8a:	bfc8      	it	gt
 800bd8c:	2400      	movgt	r4, #0
 800bd8e:	f1a3 0302 	sub.w	r3, r3, #2
 800bd92:	bfd8      	it	le
 800bd94:	2401      	movle	r4, #1
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d864      	bhi.n	800be64 <_dtoa_r+0x29c>
 800bd9a:	e8df f003 	tbb	[pc, r3]
 800bd9e:	382b      	.short	0x382b
 800bda0:	5636      	.short	0x5636
 800bda2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bda6:	441e      	add	r6, r3
 800bda8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	bfc1      	itttt	gt
 800bdb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bdb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bdb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bdbc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bdc0:	bfd6      	itet	le
 800bdc2:	f1c3 0320 	rsble	r3, r3, #32
 800bdc6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bdca:	fa04 f003 	lslle.w	r0, r4, r3
 800bdce:	f7f4 fb09 	bl	80003e4 <__aeabi_ui2d>
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bdd8:	3e01      	subs	r6, #1
 800bdda:	9212      	str	r2, [sp, #72]	@ 0x48
 800bddc:	e775      	b.n	800bcca <_dtoa_r+0x102>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e7b6      	b.n	800bd50 <_dtoa_r+0x188>
 800bde2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bde4:	e7b5      	b.n	800bd52 <_dtoa_r+0x18a>
 800bde6:	427b      	negs	r3, r7
 800bde8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdea:	2300      	movs	r3, #0
 800bdec:	eba8 0807 	sub.w	r8, r8, r7
 800bdf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bdf2:	e7c2      	b.n	800bd7a <_dtoa_r+0x1b2>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dc35      	bgt.n	800be6a <_dtoa_r+0x2a2>
 800bdfe:	2301      	movs	r3, #1
 800be00:	461a      	mov	r2, r3
 800be02:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be06:	9221      	str	r2, [sp, #132]	@ 0x84
 800be08:	e00b      	b.n	800be22 <_dtoa_r+0x25a>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7f3      	b.n	800bdf6 <_dtoa_r+0x22e>
 800be0e:	2300      	movs	r3, #0
 800be10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	9308      	str	r3, [sp, #32]
 800be18:	3301      	adds	r3, #1
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	9307      	str	r3, [sp, #28]
 800be1e:	bfb8      	it	lt
 800be20:	2301      	movlt	r3, #1
 800be22:	2100      	movs	r1, #0
 800be24:	2204      	movs	r2, #4
 800be26:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be2a:	f102 0514 	add.w	r5, r2, #20
 800be2e:	429d      	cmp	r5, r3
 800be30:	d91f      	bls.n	800be72 <_dtoa_r+0x2aa>
 800be32:	6041      	str	r1, [r0, #4]
 800be34:	4658      	mov	r0, fp
 800be36:	f000 fc8f 	bl	800c758 <_Balloc>
 800be3a:	4682      	mov	sl, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d139      	bne.n	800beb4 <_dtoa_r+0x2ec>
 800be40:	4602      	mov	r2, r0
 800be42:	f240 11af 	movw	r1, #431	@ 0x1af
 800be46:	4b1a      	ldr	r3, [pc, #104]	@ (800beb0 <_dtoa_r+0x2e8>)
 800be48:	e6d2      	b.n	800bbf0 <_dtoa_r+0x28>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e7e0      	b.n	800be10 <_dtoa_r+0x248>
 800be4e:	2401      	movs	r4, #1
 800be50:	2300      	movs	r3, #0
 800be52:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be54:	9320      	str	r3, [sp, #128]	@ 0x80
 800be56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be5a:	2200      	movs	r2, #0
 800be5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be60:	2312      	movs	r3, #18
 800be62:	e7d0      	b.n	800be06 <_dtoa_r+0x23e>
 800be64:	2301      	movs	r3, #1
 800be66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be68:	e7f5      	b.n	800be56 <_dtoa_r+0x28e>
 800be6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be70:	e7d7      	b.n	800be22 <_dtoa_r+0x25a>
 800be72:	3101      	adds	r1, #1
 800be74:	0052      	lsls	r2, r2, #1
 800be76:	e7d8      	b.n	800be2a <_dtoa_r+0x262>
 800be78:	636f4361 	.word	0x636f4361
 800be7c:	3fd287a7 	.word	0x3fd287a7
 800be80:	8b60c8b3 	.word	0x8b60c8b3
 800be84:	3fc68a28 	.word	0x3fc68a28
 800be88:	509f79fb 	.word	0x509f79fb
 800be8c:	3fd34413 	.word	0x3fd34413
 800be90:	0800f8c3 	.word	0x0800f8c3
 800be94:	0800f8da 	.word	0x0800f8da
 800be98:	7ff00000 	.word	0x7ff00000
 800be9c:	0800f8bf 	.word	0x0800f8bf
 800bea0:	0800f1fd 	.word	0x0800f1fd
 800bea4:	0800f1fc 	.word	0x0800f1fc
 800bea8:	3ff80000 	.word	0x3ff80000
 800beac:	0800f9d0 	.word	0x0800f9d0
 800beb0:	0800f932 	.word	0x0800f932
 800beb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800beb8:	6018      	str	r0, [r3, #0]
 800beba:	9b07      	ldr	r3, [sp, #28]
 800bebc:	2b0e      	cmp	r3, #14
 800bebe:	f200 80a4 	bhi.w	800c00a <_dtoa_r+0x442>
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	f000 80a1 	beq.w	800c00a <_dtoa_r+0x442>
 800bec8:	2f00      	cmp	r7, #0
 800beca:	dd33      	ble.n	800bf34 <_dtoa_r+0x36c>
 800becc:	4b86      	ldr	r3, [pc, #536]	@ (800c0e8 <_dtoa_r+0x520>)
 800bece:	f007 020f 	and.w	r2, r7, #15
 800bed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bed6:	05f8      	lsls	r0, r7, #23
 800bed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bedc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bee0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bee4:	d516      	bpl.n	800bf14 <_dtoa_r+0x34c>
 800bee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beea:	4b80      	ldr	r3, [pc, #512]	@ (800c0ec <_dtoa_r+0x524>)
 800beec:	2603      	movs	r6, #3
 800beee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bef2:	f7f4 fc1b 	bl	800072c <__aeabi_ddiv>
 800bef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800befa:	f004 040f 	and.w	r4, r4, #15
 800befe:	4d7b      	ldr	r5, [pc, #492]	@ (800c0ec <_dtoa_r+0x524>)
 800bf00:	b954      	cbnz	r4, 800bf18 <_dtoa_r+0x350>
 800bf02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf0a:	f7f4 fc0f 	bl	800072c <__aeabi_ddiv>
 800bf0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf12:	e028      	b.n	800bf66 <_dtoa_r+0x39e>
 800bf14:	2602      	movs	r6, #2
 800bf16:	e7f2      	b.n	800befe <_dtoa_r+0x336>
 800bf18:	07e1      	lsls	r1, r4, #31
 800bf1a:	d508      	bpl.n	800bf2e <_dtoa_r+0x366>
 800bf1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	1064      	asrs	r4, r4, #1
 800bf30:	3508      	adds	r5, #8
 800bf32:	e7e5      	b.n	800bf00 <_dtoa_r+0x338>
 800bf34:	f000 80d2 	beq.w	800c0dc <_dtoa_r+0x514>
 800bf38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3c:	427c      	negs	r4, r7
 800bf3e:	4b6a      	ldr	r3, [pc, #424]	@ (800c0e8 <_dtoa_r+0x520>)
 800bf40:	f004 020f 	and.w	r2, r4, #15
 800bf44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	f7f4 fac4 	bl	80004d8 <__aeabi_dmul>
 800bf50:	2602      	movs	r6, #2
 800bf52:	2300      	movs	r3, #0
 800bf54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf58:	4d64      	ldr	r5, [pc, #400]	@ (800c0ec <_dtoa_r+0x524>)
 800bf5a:	1124      	asrs	r4, r4, #4
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	f040 80b2 	bne.w	800c0c6 <_dtoa_r+0x4fe>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1d3      	bne.n	800bf0e <_dtoa_r+0x346>
 800bf66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 80b7 	beq.w	800c0e0 <_dtoa_r+0x518>
 800bf72:	2200      	movs	r2, #0
 800bf74:	4620      	mov	r0, r4
 800bf76:	4629      	mov	r1, r5
 800bf78:	4b5d      	ldr	r3, [pc, #372]	@ (800c0f0 <_dtoa_r+0x528>)
 800bf7a:	f7f4 fd1f 	bl	80009bc <__aeabi_dcmplt>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f000 80ae 	beq.w	800c0e0 <_dtoa_r+0x518>
 800bf84:	9b07      	ldr	r3, [sp, #28]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 80aa 	beq.w	800c0e0 <_dtoa_r+0x518>
 800bf8c:	9b08      	ldr	r3, [sp, #32]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	dd37      	ble.n	800c002 <_dtoa_r+0x43a>
 800bf92:	1e7b      	subs	r3, r7, #1
 800bf94:	4620      	mov	r0, r4
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4b55      	ldr	r3, [pc, #340]	@ (800c0f4 <_dtoa_r+0x52c>)
 800bf9e:	f7f4 fa9b 	bl	80004d8 <__aeabi_dmul>
 800bfa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa6:	9c08      	ldr	r4, [sp, #32]
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f7f4 fa2a 	bl	8000404 <__aeabi_i2d>
 800bfb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfb4:	f7f4 fa90 	bl	80004d8 <__aeabi_dmul>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4b4f      	ldr	r3, [pc, #316]	@ (800c0f8 <_dtoa_r+0x530>)
 800bfbc:	f7f4 f8d6 	bl	800016c <__adddf3>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	f040 809a 	bne.w	800c100 <_dtoa_r+0x538>
 800bfcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4b4a      	ldr	r3, [pc, #296]	@ (800c0fc <_dtoa_r+0x534>)
 800bfd4:	f7f4 f8c8 	bl	8000168 <__aeabi_dsub>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4633      	mov	r3, r6
 800bfe4:	f7f4 fd08 	bl	80009f8 <__aeabi_dcmpgt>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f040 828e 	bne.w	800c50a <_dtoa_r+0x942>
 800bfee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff2:	462a      	mov	r2, r5
 800bff4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bff8:	f7f4 fce0 	bl	80009bc <__aeabi_dcmplt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f040 8127 	bne.w	800c250 <_dtoa_r+0x688>
 800c002:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c00a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f2c0 8163 	blt.w	800c2d8 <_dtoa_r+0x710>
 800c012:	2f0e      	cmp	r7, #14
 800c014:	f300 8160 	bgt.w	800c2d8 <_dtoa_r+0x710>
 800c018:	4b33      	ldr	r3, [pc, #204]	@ (800c0e8 <_dtoa_r+0x520>)
 800c01a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c01e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c022:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c028:	2b00      	cmp	r3, #0
 800c02a:	da03      	bge.n	800c034 <_dtoa_r+0x46c>
 800c02c:	9b07      	ldr	r3, [sp, #28]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f340 8100 	ble.w	800c234 <_dtoa_r+0x66c>
 800c034:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c038:	4656      	mov	r6, sl
 800c03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 fb73 	bl	800072c <__aeabi_ddiv>
 800c046:	f7f4 fcf7 	bl	8000a38 <__aeabi_d2iz>
 800c04a:	4680      	mov	r8, r0
 800c04c:	f7f4 f9da 	bl	8000404 <__aeabi_i2d>
 800c050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c054:	f7f4 fa40 	bl	80004d8 <__aeabi_dmul>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4620      	mov	r0, r4
 800c05e:	4629      	mov	r1, r5
 800c060:	f7f4 f882 	bl	8000168 <__aeabi_dsub>
 800c064:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c068:	9d07      	ldr	r5, [sp, #28]
 800c06a:	f806 4b01 	strb.w	r4, [r6], #1
 800c06e:	eba6 040a 	sub.w	r4, r6, sl
 800c072:	42a5      	cmp	r5, r4
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	f040 8116 	bne.w	800c2a8 <_dtoa_r+0x6e0>
 800c07c:	f7f4 f876 	bl	800016c <__adddf3>
 800c080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	f7f4 fcb6 	bl	80009f8 <__aeabi_dcmpgt>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f040 80f8 	bne.w	800c282 <_dtoa_r+0x6ba>
 800c092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	f7f4 fc85 	bl	80009a8 <__aeabi_dcmpeq>
 800c09e:	b118      	cbz	r0, 800c0a8 <_dtoa_r+0x4e0>
 800c0a0:	f018 0f01 	tst.w	r8, #1
 800c0a4:	f040 80ed 	bne.w	800c282 <_dtoa_r+0x6ba>
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	4658      	mov	r0, fp
 800c0ac:	f000 fb94 	bl	800c7d8 <_Bfree>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	7033      	strb	r3, [r6, #0]
 800c0b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c0b6:	3701      	adds	r7, #1
 800c0b8:	601f      	str	r7, [r3, #0]
 800c0ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8320 	beq.w	800c702 <_dtoa_r+0xb3a>
 800c0c2:	601e      	str	r6, [r3, #0]
 800c0c4:	e31d      	b.n	800c702 <_dtoa_r+0xb3a>
 800c0c6:	07e2      	lsls	r2, r4, #31
 800c0c8:	d505      	bpl.n	800c0d6 <_dtoa_r+0x50e>
 800c0ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0ce:	f7f4 fa03 	bl	80004d8 <__aeabi_dmul>
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	3601      	adds	r6, #1
 800c0d6:	1064      	asrs	r4, r4, #1
 800c0d8:	3508      	adds	r5, #8
 800c0da:	e73f      	b.n	800bf5c <_dtoa_r+0x394>
 800c0dc:	2602      	movs	r6, #2
 800c0de:	e742      	b.n	800bf66 <_dtoa_r+0x39e>
 800c0e0:	9c07      	ldr	r4, [sp, #28]
 800c0e2:	9704      	str	r7, [sp, #16]
 800c0e4:	e761      	b.n	800bfaa <_dtoa_r+0x3e2>
 800c0e6:	bf00      	nop
 800c0e8:	0800f9d0 	.word	0x0800f9d0
 800c0ec:	0800f9a8 	.word	0x0800f9a8
 800c0f0:	3ff00000 	.word	0x3ff00000
 800c0f4:	40240000 	.word	0x40240000
 800c0f8:	401c0000 	.word	0x401c0000
 800c0fc:	40140000 	.word	0x40140000
 800c100:	4b70      	ldr	r3, [pc, #448]	@ (800c2c4 <_dtoa_r+0x6fc>)
 800c102:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c104:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c10c:	4454      	add	r4, sl
 800c10e:	2900      	cmp	r1, #0
 800c110:	d045      	beq.n	800c19e <_dtoa_r+0x5d6>
 800c112:	2000      	movs	r0, #0
 800c114:	496c      	ldr	r1, [pc, #432]	@ (800c2c8 <_dtoa_r+0x700>)
 800c116:	f7f4 fb09 	bl	800072c <__aeabi_ddiv>
 800c11a:	4633      	mov	r3, r6
 800c11c:	462a      	mov	r2, r5
 800c11e:	f7f4 f823 	bl	8000168 <__aeabi_dsub>
 800c122:	4656      	mov	r6, sl
 800c124:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c12c:	f7f4 fc84 	bl	8000a38 <__aeabi_d2iz>
 800c130:	4605      	mov	r5, r0
 800c132:	f7f4 f967 	bl	8000404 <__aeabi_i2d>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13e:	f7f4 f813 	bl	8000168 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	3530      	adds	r5, #48	@ 0x30
 800c148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c150:	f806 5b01 	strb.w	r5, [r6], #1
 800c154:	f7f4 fc32 	bl	80009bc <__aeabi_dcmplt>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d163      	bne.n	800c224 <_dtoa_r+0x65c>
 800c15c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c160:	2000      	movs	r0, #0
 800c162:	495a      	ldr	r1, [pc, #360]	@ (800c2cc <_dtoa_r+0x704>)
 800c164:	f7f4 f800 	bl	8000168 <__aeabi_dsub>
 800c168:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c16c:	f7f4 fc26 	bl	80009bc <__aeabi_dcmplt>
 800c170:	2800      	cmp	r0, #0
 800c172:	f040 8087 	bne.w	800c284 <_dtoa_r+0x6bc>
 800c176:	42a6      	cmp	r6, r4
 800c178:	f43f af43 	beq.w	800c002 <_dtoa_r+0x43a>
 800c17c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c180:	2200      	movs	r2, #0
 800c182:	4b53      	ldr	r3, [pc, #332]	@ (800c2d0 <_dtoa_r+0x708>)
 800c184:	f7f4 f9a8 	bl	80004d8 <__aeabi_dmul>
 800c188:	2200      	movs	r2, #0
 800c18a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c192:	4b4f      	ldr	r3, [pc, #316]	@ (800c2d0 <_dtoa_r+0x708>)
 800c194:	f7f4 f9a0 	bl	80004d8 <__aeabi_dmul>
 800c198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c19c:	e7c4      	b.n	800c128 <_dtoa_r+0x560>
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f7f4 f999 	bl	80004d8 <__aeabi_dmul>
 800c1a6:	4656      	mov	r6, sl
 800c1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b2:	f7f4 fc41 	bl	8000a38 <__aeabi_d2iz>
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	f7f4 f924 	bl	8000404 <__aeabi_i2d>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	460b      	mov	r3, r1
 800c1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c4:	f7f3 ffd0 	bl	8000168 <__aeabi_dsub>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	3530      	adds	r5, #48	@ 0x30
 800c1ce:	f806 5b01 	strb.w	r5, [r6], #1
 800c1d2:	42a6      	cmp	r6, r4
 800c1d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1d8:	f04f 0200 	mov.w	r2, #0
 800c1dc:	d124      	bne.n	800c228 <_dtoa_r+0x660>
 800c1de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1e2:	4b39      	ldr	r3, [pc, #228]	@ (800c2c8 <_dtoa_r+0x700>)
 800c1e4:	f7f3 ffc2 	bl	800016c <__adddf3>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f0:	f7f4 fc02 	bl	80009f8 <__aeabi_dcmpgt>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d145      	bne.n	800c284 <_dtoa_r+0x6bc>
 800c1f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	4932      	ldr	r1, [pc, #200]	@ (800c2c8 <_dtoa_r+0x700>)
 800c200:	f7f3 ffb2 	bl	8000168 <__aeabi_dsub>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20c:	f7f4 fbd6 	bl	80009bc <__aeabi_dcmplt>
 800c210:	2800      	cmp	r0, #0
 800c212:	f43f aef6 	beq.w	800c002 <_dtoa_r+0x43a>
 800c216:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c218:	1e73      	subs	r3, r6, #1
 800c21a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c21c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c220:	2b30      	cmp	r3, #48	@ 0x30
 800c222:	d0f8      	beq.n	800c216 <_dtoa_r+0x64e>
 800c224:	9f04      	ldr	r7, [sp, #16]
 800c226:	e73f      	b.n	800c0a8 <_dtoa_r+0x4e0>
 800c228:	4b29      	ldr	r3, [pc, #164]	@ (800c2d0 <_dtoa_r+0x708>)
 800c22a:	f7f4 f955 	bl	80004d8 <__aeabi_dmul>
 800c22e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c232:	e7bc      	b.n	800c1ae <_dtoa_r+0x5e6>
 800c234:	d10c      	bne.n	800c250 <_dtoa_r+0x688>
 800c236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23a:	2200      	movs	r2, #0
 800c23c:	4b25      	ldr	r3, [pc, #148]	@ (800c2d4 <_dtoa_r+0x70c>)
 800c23e:	f7f4 f94b 	bl	80004d8 <__aeabi_dmul>
 800c242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c246:	f7f4 fbcd 	bl	80009e4 <__aeabi_dcmpge>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f000 815b 	beq.w	800c506 <_dtoa_r+0x93e>
 800c250:	2400      	movs	r4, #0
 800c252:	4625      	mov	r5, r4
 800c254:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c256:	4656      	mov	r6, sl
 800c258:	43db      	mvns	r3, r3
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	2700      	movs	r7, #0
 800c25e:	4621      	mov	r1, r4
 800c260:	4658      	mov	r0, fp
 800c262:	f000 fab9 	bl	800c7d8 <_Bfree>
 800c266:	2d00      	cmp	r5, #0
 800c268:	d0dc      	beq.n	800c224 <_dtoa_r+0x65c>
 800c26a:	b12f      	cbz	r7, 800c278 <_dtoa_r+0x6b0>
 800c26c:	42af      	cmp	r7, r5
 800c26e:	d003      	beq.n	800c278 <_dtoa_r+0x6b0>
 800c270:	4639      	mov	r1, r7
 800c272:	4658      	mov	r0, fp
 800c274:	f000 fab0 	bl	800c7d8 <_Bfree>
 800c278:	4629      	mov	r1, r5
 800c27a:	4658      	mov	r0, fp
 800c27c:	f000 faac 	bl	800c7d8 <_Bfree>
 800c280:	e7d0      	b.n	800c224 <_dtoa_r+0x65c>
 800c282:	9704      	str	r7, [sp, #16]
 800c284:	4633      	mov	r3, r6
 800c286:	461e      	mov	r6, r3
 800c288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c28c:	2a39      	cmp	r2, #57	@ 0x39
 800c28e:	d107      	bne.n	800c2a0 <_dtoa_r+0x6d8>
 800c290:	459a      	cmp	sl, r3
 800c292:	d1f8      	bne.n	800c286 <_dtoa_r+0x6be>
 800c294:	9a04      	ldr	r2, [sp, #16]
 800c296:	3201      	adds	r2, #1
 800c298:	9204      	str	r2, [sp, #16]
 800c29a:	2230      	movs	r2, #48	@ 0x30
 800c29c:	f88a 2000 	strb.w	r2, [sl]
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	3201      	adds	r2, #1
 800c2a4:	701a      	strb	r2, [r3, #0]
 800c2a6:	e7bd      	b.n	800c224 <_dtoa_r+0x65c>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4b09      	ldr	r3, [pc, #36]	@ (800c2d0 <_dtoa_r+0x708>)
 800c2ac:	f7f4 f914 	bl	80004d8 <__aeabi_dmul>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	f7f4 fb76 	bl	80009a8 <__aeabi_dcmpeq>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f43f aebc 	beq.w	800c03a <_dtoa_r+0x472>
 800c2c2:	e6f1      	b.n	800c0a8 <_dtoa_r+0x4e0>
 800c2c4:	0800f9d0 	.word	0x0800f9d0
 800c2c8:	3fe00000 	.word	0x3fe00000
 800c2cc:	3ff00000 	.word	0x3ff00000
 800c2d0:	40240000 	.word	0x40240000
 800c2d4:	40140000 	.word	0x40140000
 800c2d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	f000 80db 	beq.w	800c496 <_dtoa_r+0x8ce>
 800c2e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c2e2:	2a01      	cmp	r2, #1
 800c2e4:	f300 80bf 	bgt.w	800c466 <_dtoa_r+0x89e>
 800c2e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	f000 80b7 	beq.w	800c45e <_dtoa_r+0x896>
 800c2f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c2f4:	4646      	mov	r6, r8
 800c2f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c2f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	441a      	add	r2, r3
 800c2fe:	4658      	mov	r0, fp
 800c300:	4498      	add	r8, r3
 800c302:	9209      	str	r2, [sp, #36]	@ 0x24
 800c304:	f000 fb1c 	bl	800c940 <__i2b>
 800c308:	4605      	mov	r5, r0
 800c30a:	b15e      	cbz	r6, 800c324 <_dtoa_r+0x75c>
 800c30c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dd08      	ble.n	800c324 <_dtoa_r+0x75c>
 800c312:	42b3      	cmp	r3, r6
 800c314:	bfa8      	it	ge
 800c316:	4633      	movge	r3, r6
 800c318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c31a:	eba8 0803 	sub.w	r8, r8, r3
 800c31e:	1af6      	subs	r6, r6, r3
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	9309      	str	r3, [sp, #36]	@ 0x24
 800c324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c326:	b1f3      	cbz	r3, 800c366 <_dtoa_r+0x79e>
 800c328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 80b7 	beq.w	800c49e <_dtoa_r+0x8d6>
 800c330:	b18c      	cbz	r4, 800c356 <_dtoa_r+0x78e>
 800c332:	4629      	mov	r1, r5
 800c334:	4622      	mov	r2, r4
 800c336:	4658      	mov	r0, fp
 800c338:	f000 fbc0 	bl	800cabc <__pow5mult>
 800c33c:	464a      	mov	r2, r9
 800c33e:	4601      	mov	r1, r0
 800c340:	4605      	mov	r5, r0
 800c342:	4658      	mov	r0, fp
 800c344:	f000 fb12 	bl	800c96c <__multiply>
 800c348:	4649      	mov	r1, r9
 800c34a:	9004      	str	r0, [sp, #16]
 800c34c:	4658      	mov	r0, fp
 800c34e:	f000 fa43 	bl	800c7d8 <_Bfree>
 800c352:	9b04      	ldr	r3, [sp, #16]
 800c354:	4699      	mov	r9, r3
 800c356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c358:	1b1a      	subs	r2, r3, r4
 800c35a:	d004      	beq.n	800c366 <_dtoa_r+0x79e>
 800c35c:	4649      	mov	r1, r9
 800c35e:	4658      	mov	r0, fp
 800c360:	f000 fbac 	bl	800cabc <__pow5mult>
 800c364:	4681      	mov	r9, r0
 800c366:	2101      	movs	r1, #1
 800c368:	4658      	mov	r0, fp
 800c36a:	f000 fae9 	bl	800c940 <__i2b>
 800c36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c370:	4604      	mov	r4, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 81c9 	beq.w	800c70a <_dtoa_r+0xb42>
 800c378:	461a      	mov	r2, r3
 800c37a:	4601      	mov	r1, r0
 800c37c:	4658      	mov	r0, fp
 800c37e:	f000 fb9d 	bl	800cabc <__pow5mult>
 800c382:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c384:	4604      	mov	r4, r0
 800c386:	2b01      	cmp	r3, #1
 800c388:	f300 808f 	bgt.w	800c4aa <_dtoa_r+0x8e2>
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f040 8087 	bne.w	800c4a2 <_dtoa_r+0x8da>
 800c394:	9b03      	ldr	r3, [sp, #12]
 800c396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f040 8083 	bne.w	800c4a6 <_dtoa_r+0x8de>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3a6:	0d1b      	lsrs	r3, r3, #20
 800c3a8:	051b      	lsls	r3, r3, #20
 800c3aa:	b12b      	cbz	r3, 800c3b8 <_dtoa_r+0x7f0>
 800c3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ae:	f108 0801 	add.w	r8, r8, #1
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 81aa 	beq.w	800c716 <_dtoa_r+0xb4e>
 800c3c2:	6923      	ldr	r3, [r4, #16]
 800c3c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3c8:	6918      	ldr	r0, [r3, #16]
 800c3ca:	f000 fa6d 	bl	800c8a8 <__hi0bits>
 800c3ce:	f1c0 0020 	rsb	r0, r0, #32
 800c3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d4:	4418      	add	r0, r3
 800c3d6:	f010 001f 	ands.w	r0, r0, #31
 800c3da:	d071      	beq.n	800c4c0 <_dtoa_r+0x8f8>
 800c3dc:	f1c0 0320 	rsb	r3, r0, #32
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	dd65      	ble.n	800c4b0 <_dtoa_r+0x8e8>
 800c3e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e6:	f1c0 001c 	rsb	r0, r0, #28
 800c3ea:	4403      	add	r3, r0
 800c3ec:	4480      	add	r8, r0
 800c3ee:	4406      	add	r6, r0
 800c3f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f2:	f1b8 0f00 	cmp.w	r8, #0
 800c3f6:	dd05      	ble.n	800c404 <_dtoa_r+0x83c>
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	4642      	mov	r2, r8
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	f000 fbb7 	bl	800cb70 <__lshift>
 800c402:	4681      	mov	r9, r0
 800c404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c406:	2b00      	cmp	r3, #0
 800c408:	dd05      	ble.n	800c416 <_dtoa_r+0x84e>
 800c40a:	4621      	mov	r1, r4
 800c40c:	461a      	mov	r2, r3
 800c40e:	4658      	mov	r0, fp
 800c410:	f000 fbae 	bl	800cb70 <__lshift>
 800c414:	4604      	mov	r4, r0
 800c416:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d053      	beq.n	800c4c4 <_dtoa_r+0x8fc>
 800c41c:	4621      	mov	r1, r4
 800c41e:	4648      	mov	r0, r9
 800c420:	f000 fc12 	bl	800cc48 <__mcmp>
 800c424:	2800      	cmp	r0, #0
 800c426:	da4d      	bge.n	800c4c4 <_dtoa_r+0x8fc>
 800c428:	1e7b      	subs	r3, r7, #1
 800c42a:	4649      	mov	r1, r9
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	220a      	movs	r2, #10
 800c430:	2300      	movs	r3, #0
 800c432:	4658      	mov	r0, fp
 800c434:	f000 f9f2 	bl	800c81c <__multadd>
 800c438:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c43a:	4681      	mov	r9, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 816c 	beq.w	800c71a <_dtoa_r+0xb52>
 800c442:	2300      	movs	r3, #0
 800c444:	4629      	mov	r1, r5
 800c446:	220a      	movs	r2, #10
 800c448:	4658      	mov	r0, fp
 800c44a:	f000 f9e7 	bl	800c81c <__multadd>
 800c44e:	9b08      	ldr	r3, [sp, #32]
 800c450:	4605      	mov	r5, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	dc61      	bgt.n	800c51a <_dtoa_r+0x952>
 800c456:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c458:	2b02      	cmp	r3, #2
 800c45a:	dc3b      	bgt.n	800c4d4 <_dtoa_r+0x90c>
 800c45c:	e05d      	b.n	800c51a <_dtoa_r+0x952>
 800c45e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c460:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c464:	e746      	b.n	800c2f4 <_dtoa_r+0x72c>
 800c466:	9b07      	ldr	r3, [sp, #28]
 800c468:	1e5c      	subs	r4, r3, #1
 800c46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	bfbf      	itttt	lt
 800c470:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c472:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c474:	1ae3      	sublt	r3, r4, r3
 800c476:	18d2      	addlt	r2, r2, r3
 800c478:	bfa8      	it	ge
 800c47a:	1b1c      	subge	r4, r3, r4
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	bfbe      	ittt	lt
 800c480:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c482:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c484:	2400      	movlt	r4, #0
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfb5      	itete	lt
 800c48a:	eba8 0603 	sublt.w	r6, r8, r3
 800c48e:	4646      	movge	r6, r8
 800c490:	2300      	movlt	r3, #0
 800c492:	9b07      	ldrge	r3, [sp, #28]
 800c494:	e730      	b.n	800c2f8 <_dtoa_r+0x730>
 800c496:	4646      	mov	r6, r8
 800c498:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c49a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c49c:	e735      	b.n	800c30a <_dtoa_r+0x742>
 800c49e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4a0:	e75c      	b.n	800c35c <_dtoa_r+0x794>
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e788      	b.n	800c3b8 <_dtoa_r+0x7f0>
 800c4a6:	9b02      	ldr	r3, [sp, #8]
 800c4a8:	e786      	b.n	800c3b8 <_dtoa_r+0x7f0>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ae:	e788      	b.n	800c3c2 <_dtoa_r+0x7fa>
 800c4b0:	d09f      	beq.n	800c3f2 <_dtoa_r+0x82a>
 800c4b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4b4:	331c      	adds	r3, #28
 800c4b6:	441a      	add	r2, r3
 800c4b8:	4498      	add	r8, r3
 800c4ba:	441e      	add	r6, r3
 800c4bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4be:	e798      	b.n	800c3f2 <_dtoa_r+0x82a>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	e7f6      	b.n	800c4b2 <_dtoa_r+0x8ea>
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	9704      	str	r7, [sp, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	dc20      	bgt.n	800c50e <_dtoa_r+0x946>
 800c4cc:	9308      	str	r3, [sp, #32]
 800c4ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	dd1e      	ble.n	800c512 <_dtoa_r+0x94a>
 800c4d4:	9b08      	ldr	r3, [sp, #32]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f47f aebc 	bne.w	800c254 <_dtoa_r+0x68c>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	2205      	movs	r2, #5
 800c4e0:	4658      	mov	r0, fp
 800c4e2:	f000 f99b 	bl	800c81c <__multadd>
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	4648      	mov	r0, r9
 800c4ec:	f000 fbac 	bl	800cc48 <__mcmp>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	f77f aeaf 	ble.w	800c254 <_dtoa_r+0x68c>
 800c4f6:	2331      	movs	r3, #49	@ 0x31
 800c4f8:	4656      	mov	r6, sl
 800c4fa:	f806 3b01 	strb.w	r3, [r6], #1
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	3301      	adds	r3, #1
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	e6aa      	b.n	800c25c <_dtoa_r+0x694>
 800c506:	9c07      	ldr	r4, [sp, #28]
 800c508:	9704      	str	r7, [sp, #16]
 800c50a:	4625      	mov	r5, r4
 800c50c:	e7f3      	b.n	800c4f6 <_dtoa_r+0x92e>
 800c50e:	9b07      	ldr	r3, [sp, #28]
 800c510:	9308      	str	r3, [sp, #32]
 800c512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c514:	2b00      	cmp	r3, #0
 800c516:	f000 8104 	beq.w	800c722 <_dtoa_r+0xb5a>
 800c51a:	2e00      	cmp	r6, #0
 800c51c:	dd05      	ble.n	800c52a <_dtoa_r+0x962>
 800c51e:	4629      	mov	r1, r5
 800c520:	4632      	mov	r2, r6
 800c522:	4658      	mov	r0, fp
 800c524:	f000 fb24 	bl	800cb70 <__lshift>
 800c528:	4605      	mov	r5, r0
 800c52a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d05a      	beq.n	800c5e6 <_dtoa_r+0xa1e>
 800c530:	4658      	mov	r0, fp
 800c532:	6869      	ldr	r1, [r5, #4]
 800c534:	f000 f910 	bl	800c758 <_Balloc>
 800c538:	4606      	mov	r6, r0
 800c53a:	b928      	cbnz	r0, 800c548 <_dtoa_r+0x980>
 800c53c:	4602      	mov	r2, r0
 800c53e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c542:	4b83      	ldr	r3, [pc, #524]	@ (800c750 <_dtoa_r+0xb88>)
 800c544:	f7ff bb54 	b.w	800bbf0 <_dtoa_r+0x28>
 800c548:	692a      	ldr	r2, [r5, #16]
 800c54a:	f105 010c 	add.w	r1, r5, #12
 800c54e:	3202      	adds	r2, #2
 800c550:	0092      	lsls	r2, r2, #2
 800c552:	300c      	adds	r0, #12
 800c554:	f7ff faa2 	bl	800ba9c <memcpy>
 800c558:	2201      	movs	r2, #1
 800c55a:	4631      	mov	r1, r6
 800c55c:	4658      	mov	r0, fp
 800c55e:	f000 fb07 	bl	800cb70 <__lshift>
 800c562:	462f      	mov	r7, r5
 800c564:	4605      	mov	r5, r0
 800c566:	f10a 0301 	add.w	r3, sl, #1
 800c56a:	9307      	str	r3, [sp, #28]
 800c56c:	9b08      	ldr	r3, [sp, #32]
 800c56e:	4453      	add	r3, sl
 800c570:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c572:	9b02      	ldr	r3, [sp, #8]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	930a      	str	r3, [sp, #40]	@ 0x28
 800c57a:	9b07      	ldr	r3, [sp, #28]
 800c57c:	4621      	mov	r1, r4
 800c57e:	3b01      	subs	r3, #1
 800c580:	4648      	mov	r0, r9
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	f7ff fa98 	bl	800bab8 <quorem>
 800c588:	4639      	mov	r1, r7
 800c58a:	9008      	str	r0, [sp, #32]
 800c58c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c590:	4648      	mov	r0, r9
 800c592:	f000 fb59 	bl	800cc48 <__mcmp>
 800c596:	462a      	mov	r2, r5
 800c598:	9009      	str	r0, [sp, #36]	@ 0x24
 800c59a:	4621      	mov	r1, r4
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fb6f 	bl	800cc80 <__mdiff>
 800c5a2:	68c2      	ldr	r2, [r0, #12]
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	bb02      	cbnz	r2, 800c5ea <_dtoa_r+0xa22>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	4648      	mov	r0, r9
 800c5ac:	f000 fb4c 	bl	800cc48 <__mcmp>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	4658      	mov	r0, fp
 800c5b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5b8:	f000 f90e 	bl	800c7d8 <_Bfree>
 800c5bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c5c0:	9e07      	ldr	r6, [sp, #28]
 800c5c2:	ea43 0102 	orr.w	r1, r3, r2
 800c5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5c8:	4319      	orrs	r1, r3
 800c5ca:	d110      	bne.n	800c5ee <_dtoa_r+0xa26>
 800c5cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5d0:	d029      	beq.n	800c626 <_dtoa_r+0xa5e>
 800c5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dd02      	ble.n	800c5de <_dtoa_r+0xa16>
 800c5d8:	9b08      	ldr	r3, [sp, #32]
 800c5da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c5de:	9b02      	ldr	r3, [sp, #8]
 800c5e0:	f883 8000 	strb.w	r8, [r3]
 800c5e4:	e63b      	b.n	800c25e <_dtoa_r+0x696>
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	e7bb      	b.n	800c562 <_dtoa_r+0x99a>
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	e7e1      	b.n	800c5b2 <_dtoa_r+0x9ea>
 800c5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	db04      	blt.n	800c5fe <_dtoa_r+0xa36>
 800c5f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c5f6:	430b      	orrs	r3, r1
 800c5f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	d120      	bne.n	800c640 <_dtoa_r+0xa78>
 800c5fe:	2a00      	cmp	r2, #0
 800c600:	dded      	ble.n	800c5de <_dtoa_r+0xa16>
 800c602:	4649      	mov	r1, r9
 800c604:	2201      	movs	r2, #1
 800c606:	4658      	mov	r0, fp
 800c608:	f000 fab2 	bl	800cb70 <__lshift>
 800c60c:	4621      	mov	r1, r4
 800c60e:	4681      	mov	r9, r0
 800c610:	f000 fb1a 	bl	800cc48 <__mcmp>
 800c614:	2800      	cmp	r0, #0
 800c616:	dc03      	bgt.n	800c620 <_dtoa_r+0xa58>
 800c618:	d1e1      	bne.n	800c5de <_dtoa_r+0xa16>
 800c61a:	f018 0f01 	tst.w	r8, #1
 800c61e:	d0de      	beq.n	800c5de <_dtoa_r+0xa16>
 800c620:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c624:	d1d8      	bne.n	800c5d8 <_dtoa_r+0xa10>
 800c626:	2339      	movs	r3, #57	@ 0x39
 800c628:	9a02      	ldr	r2, [sp, #8]
 800c62a:	7013      	strb	r3, [r2, #0]
 800c62c:	4633      	mov	r3, r6
 800c62e:	461e      	mov	r6, r3
 800c630:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c634:	3b01      	subs	r3, #1
 800c636:	2a39      	cmp	r2, #57	@ 0x39
 800c638:	d052      	beq.n	800c6e0 <_dtoa_r+0xb18>
 800c63a:	3201      	adds	r2, #1
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	e60e      	b.n	800c25e <_dtoa_r+0x696>
 800c640:	2a00      	cmp	r2, #0
 800c642:	dd07      	ble.n	800c654 <_dtoa_r+0xa8c>
 800c644:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c648:	d0ed      	beq.n	800c626 <_dtoa_r+0xa5e>
 800c64a:	9a02      	ldr	r2, [sp, #8]
 800c64c:	f108 0301 	add.w	r3, r8, #1
 800c650:	7013      	strb	r3, [r2, #0]
 800c652:	e604      	b.n	800c25e <_dtoa_r+0x696>
 800c654:	9b07      	ldr	r3, [sp, #28]
 800c656:	9a07      	ldr	r2, [sp, #28]
 800c658:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c65c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c65e:	4293      	cmp	r3, r2
 800c660:	d028      	beq.n	800c6b4 <_dtoa_r+0xaec>
 800c662:	4649      	mov	r1, r9
 800c664:	2300      	movs	r3, #0
 800c666:	220a      	movs	r2, #10
 800c668:	4658      	mov	r0, fp
 800c66a:	f000 f8d7 	bl	800c81c <__multadd>
 800c66e:	42af      	cmp	r7, r5
 800c670:	4681      	mov	r9, r0
 800c672:	f04f 0300 	mov.w	r3, #0
 800c676:	f04f 020a 	mov.w	r2, #10
 800c67a:	4639      	mov	r1, r7
 800c67c:	4658      	mov	r0, fp
 800c67e:	d107      	bne.n	800c690 <_dtoa_r+0xac8>
 800c680:	f000 f8cc 	bl	800c81c <__multadd>
 800c684:	4607      	mov	r7, r0
 800c686:	4605      	mov	r5, r0
 800c688:	9b07      	ldr	r3, [sp, #28]
 800c68a:	3301      	adds	r3, #1
 800c68c:	9307      	str	r3, [sp, #28]
 800c68e:	e774      	b.n	800c57a <_dtoa_r+0x9b2>
 800c690:	f000 f8c4 	bl	800c81c <__multadd>
 800c694:	4629      	mov	r1, r5
 800c696:	4607      	mov	r7, r0
 800c698:	2300      	movs	r3, #0
 800c69a:	220a      	movs	r2, #10
 800c69c:	4658      	mov	r0, fp
 800c69e:	f000 f8bd 	bl	800c81c <__multadd>
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	e7f0      	b.n	800c688 <_dtoa_r+0xac0>
 800c6a6:	9b08      	ldr	r3, [sp, #32]
 800c6a8:	2700      	movs	r7, #0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfcc      	ite	gt
 800c6ae:	461e      	movgt	r6, r3
 800c6b0:	2601      	movle	r6, #1
 800c6b2:	4456      	add	r6, sl
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	4658      	mov	r0, fp
 800c6ba:	f000 fa59 	bl	800cb70 <__lshift>
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	f000 fac1 	bl	800cc48 <__mcmp>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	dcb0      	bgt.n	800c62c <_dtoa_r+0xa64>
 800c6ca:	d102      	bne.n	800c6d2 <_dtoa_r+0xb0a>
 800c6cc:	f018 0f01 	tst.w	r8, #1
 800c6d0:	d1ac      	bne.n	800c62c <_dtoa_r+0xa64>
 800c6d2:	4633      	mov	r3, r6
 800c6d4:	461e      	mov	r6, r3
 800c6d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6da:	2a30      	cmp	r2, #48	@ 0x30
 800c6dc:	d0fa      	beq.n	800c6d4 <_dtoa_r+0xb0c>
 800c6de:	e5be      	b.n	800c25e <_dtoa_r+0x696>
 800c6e0:	459a      	cmp	sl, r3
 800c6e2:	d1a4      	bne.n	800c62e <_dtoa_r+0xa66>
 800c6e4:	9b04      	ldr	r3, [sp, #16]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	2331      	movs	r3, #49	@ 0x31
 800c6ec:	f88a 3000 	strb.w	r3, [sl]
 800c6f0:	e5b5      	b.n	800c25e <_dtoa_r+0x696>
 800c6f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c6f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c754 <_dtoa_r+0xb8c>
 800c6f8:	b11b      	cbz	r3, 800c702 <_dtoa_r+0xb3a>
 800c6fa:	f10a 0308 	add.w	r3, sl, #8
 800c6fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	4650      	mov	r0, sl
 800c704:	b017      	add	sp, #92	@ 0x5c
 800c706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	f77f ae3d 	ble.w	800c38c <_dtoa_r+0x7c4>
 800c712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c714:	930a      	str	r3, [sp, #40]	@ 0x28
 800c716:	2001      	movs	r0, #1
 800c718:	e65b      	b.n	800c3d2 <_dtoa_r+0x80a>
 800c71a:	9b08      	ldr	r3, [sp, #32]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f77f aed6 	ble.w	800c4ce <_dtoa_r+0x906>
 800c722:	4656      	mov	r6, sl
 800c724:	4621      	mov	r1, r4
 800c726:	4648      	mov	r0, r9
 800c728:	f7ff f9c6 	bl	800bab8 <quorem>
 800c72c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c730:	9b08      	ldr	r3, [sp, #32]
 800c732:	f806 8b01 	strb.w	r8, [r6], #1
 800c736:	eba6 020a 	sub.w	r2, r6, sl
 800c73a:	4293      	cmp	r3, r2
 800c73c:	ddb3      	ble.n	800c6a6 <_dtoa_r+0xade>
 800c73e:	4649      	mov	r1, r9
 800c740:	2300      	movs	r3, #0
 800c742:	220a      	movs	r2, #10
 800c744:	4658      	mov	r0, fp
 800c746:	f000 f869 	bl	800c81c <__multadd>
 800c74a:	4681      	mov	r9, r0
 800c74c:	e7ea      	b.n	800c724 <_dtoa_r+0xb5c>
 800c74e:	bf00      	nop
 800c750:	0800f932 	.word	0x0800f932
 800c754:	0800f8b6 	.word	0x0800f8b6

0800c758 <_Balloc>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	69c6      	ldr	r6, [r0, #28]
 800c75c:	4604      	mov	r4, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	b976      	cbnz	r6, 800c780 <_Balloc+0x28>
 800c762:	2010      	movs	r0, #16
 800c764:	f7fd fd9a 	bl	800a29c <malloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	61e0      	str	r0, [r4, #28]
 800c76c:	b920      	cbnz	r0, 800c778 <_Balloc+0x20>
 800c76e:	216b      	movs	r1, #107	@ 0x6b
 800c770:	4b17      	ldr	r3, [pc, #92]	@ (800c7d0 <_Balloc+0x78>)
 800c772:	4818      	ldr	r0, [pc, #96]	@ (800c7d4 <_Balloc+0x7c>)
 800c774:	f000 ff84 	bl	800d680 <__assert_func>
 800c778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c77c:	6006      	str	r6, [r0, #0]
 800c77e:	60c6      	str	r6, [r0, #12]
 800c780:	69e6      	ldr	r6, [r4, #28]
 800c782:	68f3      	ldr	r3, [r6, #12]
 800c784:	b183      	cbz	r3, 800c7a8 <_Balloc+0x50>
 800c786:	69e3      	ldr	r3, [r4, #28]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c78e:	b9b8      	cbnz	r0, 800c7c0 <_Balloc+0x68>
 800c790:	2101      	movs	r1, #1
 800c792:	fa01 f605 	lsl.w	r6, r1, r5
 800c796:	1d72      	adds	r2, r6, #5
 800c798:	4620      	mov	r0, r4
 800c79a:	0092      	lsls	r2, r2, #2
 800c79c:	f000 ff8e 	bl	800d6bc <_calloc_r>
 800c7a0:	b160      	cbz	r0, 800c7bc <_Balloc+0x64>
 800c7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7a6:	e00e      	b.n	800c7c6 <_Balloc+0x6e>
 800c7a8:	2221      	movs	r2, #33	@ 0x21
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 ff85 	bl	800d6bc <_calloc_r>
 800c7b2:	69e3      	ldr	r3, [r4, #28]
 800c7b4:	60f0      	str	r0, [r6, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e4      	bne.n	800c786 <_Balloc+0x2e>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	6802      	ldr	r2, [r0, #0]
 800c7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7cc:	e7f7      	b.n	800c7be <_Balloc+0x66>
 800c7ce:	bf00      	nop
 800c7d0:	0800f8c3 	.word	0x0800f8c3
 800c7d4:	0800f943 	.word	0x0800f943

0800c7d8 <_Bfree>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	69c6      	ldr	r6, [r0, #28]
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b976      	cbnz	r6, 800c800 <_Bfree+0x28>
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	f7fd fd5a 	bl	800a29c <malloc>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	61e8      	str	r0, [r5, #28]
 800c7ec:	b920      	cbnz	r0, 800c7f8 <_Bfree+0x20>
 800c7ee:	218f      	movs	r1, #143	@ 0x8f
 800c7f0:	4b08      	ldr	r3, [pc, #32]	@ (800c814 <_Bfree+0x3c>)
 800c7f2:	4809      	ldr	r0, [pc, #36]	@ (800c818 <_Bfree+0x40>)
 800c7f4:	f000 ff44 	bl	800d680 <__assert_func>
 800c7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7fc:	6006      	str	r6, [r0, #0]
 800c7fe:	60c6      	str	r6, [r0, #12]
 800c800:	b13c      	cbz	r4, 800c812 <_Bfree+0x3a>
 800c802:	69eb      	ldr	r3, [r5, #28]
 800c804:	6862      	ldr	r2, [r4, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c80c:	6021      	str	r1, [r4, #0]
 800c80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	0800f8c3 	.word	0x0800f8c3
 800c818:	0800f943 	.word	0x0800f943

0800c81c <__multadd>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	4607      	mov	r7, r0
 800c822:	460c      	mov	r4, r1
 800c824:	461e      	mov	r6, r3
 800c826:	2000      	movs	r0, #0
 800c828:	690d      	ldr	r5, [r1, #16]
 800c82a:	f101 0c14 	add.w	ip, r1, #20
 800c82e:	f8dc 3000 	ldr.w	r3, [ip]
 800c832:	3001      	adds	r0, #1
 800c834:	b299      	uxth	r1, r3
 800c836:	fb02 6101 	mla	r1, r2, r1, r6
 800c83a:	0c1e      	lsrs	r6, r3, #16
 800c83c:	0c0b      	lsrs	r3, r1, #16
 800c83e:	fb02 3306 	mla	r3, r2, r6, r3
 800c842:	b289      	uxth	r1, r1
 800c844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c848:	4285      	cmp	r5, r0
 800c84a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c84e:	f84c 1b04 	str.w	r1, [ip], #4
 800c852:	dcec      	bgt.n	800c82e <__multadd+0x12>
 800c854:	b30e      	cbz	r6, 800c89a <__multadd+0x7e>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	42ab      	cmp	r3, r5
 800c85a:	dc19      	bgt.n	800c890 <__multadd+0x74>
 800c85c:	6861      	ldr	r1, [r4, #4]
 800c85e:	4638      	mov	r0, r7
 800c860:	3101      	adds	r1, #1
 800c862:	f7ff ff79 	bl	800c758 <_Balloc>
 800c866:	4680      	mov	r8, r0
 800c868:	b928      	cbnz	r0, 800c876 <__multadd+0x5a>
 800c86a:	4602      	mov	r2, r0
 800c86c:	21ba      	movs	r1, #186	@ 0xba
 800c86e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a0 <__multadd+0x84>)
 800c870:	480c      	ldr	r0, [pc, #48]	@ (800c8a4 <__multadd+0x88>)
 800c872:	f000 ff05 	bl	800d680 <__assert_func>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	f104 010c 	add.w	r1, r4, #12
 800c87c:	3202      	adds	r2, #2
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f7ff f90b 	bl	800ba9c <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ffa5 	bl	800c7d8 <_Bfree>
 800c88e:	4644      	mov	r4, r8
 800c890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c894:	3501      	adds	r5, #1
 800c896:	615e      	str	r6, [r3, #20]
 800c898:	6125      	str	r5, [r4, #16]
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	0800f932 	.word	0x0800f932
 800c8a4:	0800f943 	.word	0x0800f943

0800c8a8 <__hi0bits>:
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8ae:	bf3a      	itte	cc
 800c8b0:	0403      	lslcc	r3, r0, #16
 800c8b2:	2010      	movcc	r0, #16
 800c8b4:	2000      	movcs	r0, #0
 800c8b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8ba:	bf3c      	itt	cc
 800c8bc:	021b      	lslcc	r3, r3, #8
 800c8be:	3008      	addcc	r0, #8
 800c8c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8c4:	bf3c      	itt	cc
 800c8c6:	011b      	lslcc	r3, r3, #4
 800c8c8:	3004      	addcc	r0, #4
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ce:	bf3c      	itt	cc
 800c8d0:	009b      	lslcc	r3, r3, #2
 800c8d2:	3002      	addcc	r0, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	db05      	blt.n	800c8e4 <__hi0bits+0x3c>
 800c8d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8dc:	f100 0001 	add.w	r0, r0, #1
 800c8e0:	bf08      	it	eq
 800c8e2:	2020      	moveq	r0, #32
 800c8e4:	4770      	bx	lr

0800c8e6 <__lo0bits>:
 800c8e6:	6803      	ldr	r3, [r0, #0]
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f013 0007 	ands.w	r0, r3, #7
 800c8ee:	d00b      	beq.n	800c908 <__lo0bits+0x22>
 800c8f0:	07d9      	lsls	r1, r3, #31
 800c8f2:	d421      	bmi.n	800c938 <__lo0bits+0x52>
 800c8f4:	0798      	lsls	r0, r3, #30
 800c8f6:	bf49      	itett	mi
 800c8f8:	085b      	lsrmi	r3, r3, #1
 800c8fa:	089b      	lsrpl	r3, r3, #2
 800c8fc:	2001      	movmi	r0, #1
 800c8fe:	6013      	strmi	r3, [r2, #0]
 800c900:	bf5c      	itt	pl
 800c902:	2002      	movpl	r0, #2
 800c904:	6013      	strpl	r3, [r2, #0]
 800c906:	4770      	bx	lr
 800c908:	b299      	uxth	r1, r3
 800c90a:	b909      	cbnz	r1, 800c910 <__lo0bits+0x2a>
 800c90c:	2010      	movs	r0, #16
 800c90e:	0c1b      	lsrs	r3, r3, #16
 800c910:	b2d9      	uxtb	r1, r3
 800c912:	b909      	cbnz	r1, 800c918 <__lo0bits+0x32>
 800c914:	3008      	adds	r0, #8
 800c916:	0a1b      	lsrs	r3, r3, #8
 800c918:	0719      	lsls	r1, r3, #28
 800c91a:	bf04      	itt	eq
 800c91c:	091b      	lsreq	r3, r3, #4
 800c91e:	3004      	addeq	r0, #4
 800c920:	0799      	lsls	r1, r3, #30
 800c922:	bf04      	itt	eq
 800c924:	089b      	lsreq	r3, r3, #2
 800c926:	3002      	addeq	r0, #2
 800c928:	07d9      	lsls	r1, r3, #31
 800c92a:	d403      	bmi.n	800c934 <__lo0bits+0x4e>
 800c92c:	085b      	lsrs	r3, r3, #1
 800c92e:	f100 0001 	add.w	r0, r0, #1
 800c932:	d003      	beq.n	800c93c <__lo0bits+0x56>
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4770      	bx	lr
 800c938:	2000      	movs	r0, #0
 800c93a:	4770      	bx	lr
 800c93c:	2020      	movs	r0, #32
 800c93e:	4770      	bx	lr

0800c940 <__i2b>:
 800c940:	b510      	push	{r4, lr}
 800c942:	460c      	mov	r4, r1
 800c944:	2101      	movs	r1, #1
 800c946:	f7ff ff07 	bl	800c758 <_Balloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	b928      	cbnz	r0, 800c95a <__i2b+0x1a>
 800c94e:	f240 1145 	movw	r1, #325	@ 0x145
 800c952:	4b04      	ldr	r3, [pc, #16]	@ (800c964 <__i2b+0x24>)
 800c954:	4804      	ldr	r0, [pc, #16]	@ (800c968 <__i2b+0x28>)
 800c956:	f000 fe93 	bl	800d680 <__assert_func>
 800c95a:	2301      	movs	r3, #1
 800c95c:	6144      	str	r4, [r0, #20]
 800c95e:	6103      	str	r3, [r0, #16]
 800c960:	bd10      	pop	{r4, pc}
 800c962:	bf00      	nop
 800c964:	0800f932 	.word	0x0800f932
 800c968:	0800f943 	.word	0x0800f943

0800c96c <__multiply>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4614      	mov	r4, r2
 800c972:	690a      	ldr	r2, [r1, #16]
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	460f      	mov	r7, r1
 800c978:	429a      	cmp	r2, r3
 800c97a:	bfa2      	ittt	ge
 800c97c:	4623      	movge	r3, r4
 800c97e:	460c      	movge	r4, r1
 800c980:	461f      	movge	r7, r3
 800c982:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c986:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	6861      	ldr	r1, [r4, #4]
 800c98e:	eb0a 0609 	add.w	r6, sl, r9
 800c992:	42b3      	cmp	r3, r6
 800c994:	b085      	sub	sp, #20
 800c996:	bfb8      	it	lt
 800c998:	3101      	addlt	r1, #1
 800c99a:	f7ff fedd 	bl	800c758 <_Balloc>
 800c99e:	b930      	cbnz	r0, 800c9ae <__multiply+0x42>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9a6:	4b43      	ldr	r3, [pc, #268]	@ (800cab4 <__multiply+0x148>)
 800c9a8:	4843      	ldr	r0, [pc, #268]	@ (800cab8 <__multiply+0x14c>)
 800c9aa:	f000 fe69 	bl	800d680 <__assert_func>
 800c9ae:	f100 0514 	add.w	r5, r0, #20
 800c9b2:	462b      	mov	r3, r5
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9ba:	4543      	cmp	r3, r8
 800c9bc:	d321      	bcc.n	800ca02 <__multiply+0x96>
 800c9be:	f107 0114 	add.w	r1, r7, #20
 800c9c2:	f104 0214 	add.w	r2, r4, #20
 800c9c6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9ca:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9ce:	9302      	str	r3, [sp, #8]
 800c9d0:	1b13      	subs	r3, r2, r4
 800c9d2:	3b15      	subs	r3, #21
 800c9d4:	f023 0303 	bic.w	r3, r3, #3
 800c9d8:	3304      	adds	r3, #4
 800c9da:	f104 0715 	add.w	r7, r4, #21
 800c9de:	42ba      	cmp	r2, r7
 800c9e0:	bf38      	it	cc
 800c9e2:	2304      	movcc	r3, #4
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	9103      	str	r1, [sp, #12]
 800c9ea:	428b      	cmp	r3, r1
 800c9ec:	d80c      	bhi.n	800ca08 <__multiply+0x9c>
 800c9ee:	2e00      	cmp	r6, #0
 800c9f0:	dd03      	ble.n	800c9fa <__multiply+0x8e>
 800c9f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d05a      	beq.n	800cab0 <__multiply+0x144>
 800c9fa:	6106      	str	r6, [r0, #16]
 800c9fc:	b005      	add	sp, #20
 800c9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca02:	f843 2b04 	str.w	r2, [r3], #4
 800ca06:	e7d8      	b.n	800c9ba <__multiply+0x4e>
 800ca08:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca0c:	f1ba 0f00 	cmp.w	sl, #0
 800ca10:	d023      	beq.n	800ca5a <__multiply+0xee>
 800ca12:	46a9      	mov	r9, r5
 800ca14:	f04f 0c00 	mov.w	ip, #0
 800ca18:	f104 0e14 	add.w	lr, r4, #20
 800ca1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca20:	f8d9 3000 	ldr.w	r3, [r9]
 800ca24:	fa1f fb87 	uxth.w	fp, r7
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca2e:	4463      	add	r3, ip
 800ca30:	f8d9 c000 	ldr.w	ip, [r9]
 800ca34:	0c3f      	lsrs	r7, r7, #16
 800ca36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ca3a:	fb0a c707 	mla	r7, sl, r7, ip
 800ca3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca48:	4572      	cmp	r2, lr
 800ca4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca4e:	f849 3b04 	str.w	r3, [r9], #4
 800ca52:	d8e3      	bhi.n	800ca1c <__multiply+0xb0>
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	f845 c003 	str.w	ip, [r5, r3]
 800ca5a:	9b03      	ldr	r3, [sp, #12]
 800ca5c:	3104      	adds	r1, #4
 800ca5e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca62:	f1b9 0f00 	cmp.w	r9, #0
 800ca66:	d021      	beq.n	800caac <__multiply+0x140>
 800ca68:	46ae      	mov	lr, r5
 800ca6a:	f04f 0a00 	mov.w	sl, #0
 800ca6e:	682b      	ldr	r3, [r5, #0]
 800ca70:	f104 0c14 	add.w	ip, r4, #20
 800ca74:	f8bc b000 	ldrh.w	fp, [ip]
 800ca78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	fb09 770b 	mla	r7, r9, fp, r7
 800ca82:	4457      	add	r7, sl
 800ca84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca88:	f84e 3b04 	str.w	r3, [lr], #4
 800ca8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca94:	f8be 3000 	ldrh.w	r3, [lr]
 800ca98:	4562      	cmp	r2, ip
 800ca9a:	fb09 330a 	mla	r3, r9, sl, r3
 800ca9e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800caa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caa6:	d8e5      	bhi.n	800ca74 <__multiply+0x108>
 800caa8:	9f01      	ldr	r7, [sp, #4]
 800caaa:	51eb      	str	r3, [r5, r7]
 800caac:	3504      	adds	r5, #4
 800caae:	e79a      	b.n	800c9e6 <__multiply+0x7a>
 800cab0:	3e01      	subs	r6, #1
 800cab2:	e79c      	b.n	800c9ee <__multiply+0x82>
 800cab4:	0800f932 	.word	0x0800f932
 800cab8:	0800f943 	.word	0x0800f943

0800cabc <__pow5mult>:
 800cabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac0:	4615      	mov	r5, r2
 800cac2:	f012 0203 	ands.w	r2, r2, #3
 800cac6:	4607      	mov	r7, r0
 800cac8:	460e      	mov	r6, r1
 800caca:	d007      	beq.n	800cadc <__pow5mult+0x20>
 800cacc:	4c25      	ldr	r4, [pc, #148]	@ (800cb64 <__pow5mult+0xa8>)
 800cace:	3a01      	subs	r2, #1
 800cad0:	2300      	movs	r3, #0
 800cad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cad6:	f7ff fea1 	bl	800c81c <__multadd>
 800cada:	4606      	mov	r6, r0
 800cadc:	10ad      	asrs	r5, r5, #2
 800cade:	d03d      	beq.n	800cb5c <__pow5mult+0xa0>
 800cae0:	69fc      	ldr	r4, [r7, #28]
 800cae2:	b97c      	cbnz	r4, 800cb04 <__pow5mult+0x48>
 800cae4:	2010      	movs	r0, #16
 800cae6:	f7fd fbd9 	bl	800a29c <malloc>
 800caea:	4602      	mov	r2, r0
 800caec:	61f8      	str	r0, [r7, #28]
 800caee:	b928      	cbnz	r0, 800cafc <__pow5mult+0x40>
 800caf0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800caf4:	4b1c      	ldr	r3, [pc, #112]	@ (800cb68 <__pow5mult+0xac>)
 800caf6:	481d      	ldr	r0, [pc, #116]	@ (800cb6c <__pow5mult+0xb0>)
 800caf8:	f000 fdc2 	bl	800d680 <__assert_func>
 800cafc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb00:	6004      	str	r4, [r0, #0]
 800cb02:	60c4      	str	r4, [r0, #12]
 800cb04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb0c:	b94c      	cbnz	r4, 800cb22 <__pow5mult+0x66>
 800cb0e:	f240 2171 	movw	r1, #625	@ 0x271
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7ff ff14 	bl	800c940 <__i2b>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb20:	6003      	str	r3, [r0, #0]
 800cb22:	f04f 0900 	mov.w	r9, #0
 800cb26:	07eb      	lsls	r3, r5, #31
 800cb28:	d50a      	bpl.n	800cb40 <__pow5mult+0x84>
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4638      	mov	r0, r7
 800cb30:	f7ff ff1c 	bl	800c96c <__multiply>
 800cb34:	4680      	mov	r8, r0
 800cb36:	4631      	mov	r1, r6
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f7ff fe4d 	bl	800c7d8 <_Bfree>
 800cb3e:	4646      	mov	r6, r8
 800cb40:	106d      	asrs	r5, r5, #1
 800cb42:	d00b      	beq.n	800cb5c <__pow5mult+0xa0>
 800cb44:	6820      	ldr	r0, [r4, #0]
 800cb46:	b938      	cbnz	r0, 800cb58 <__pow5mult+0x9c>
 800cb48:	4622      	mov	r2, r4
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	f7ff ff0d 	bl	800c96c <__multiply>
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	f8c0 9000 	str.w	r9, [r0]
 800cb58:	4604      	mov	r4, r0
 800cb5a:	e7e4      	b.n	800cb26 <__pow5mult+0x6a>
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb62:	bf00      	nop
 800cb64:	0800f99c 	.word	0x0800f99c
 800cb68:	0800f8c3 	.word	0x0800f8c3
 800cb6c:	0800f943 	.word	0x0800f943

0800cb70 <__lshift>:
 800cb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb74:	460c      	mov	r4, r1
 800cb76:	4607      	mov	r7, r0
 800cb78:	4691      	mov	r9, r2
 800cb7a:	6923      	ldr	r3, [r4, #16]
 800cb7c:	6849      	ldr	r1, [r1, #4]
 800cb7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb88:	f108 0601 	add.w	r6, r8, #1
 800cb8c:	42b3      	cmp	r3, r6
 800cb8e:	db0b      	blt.n	800cba8 <__lshift+0x38>
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff fde1 	bl	800c758 <_Balloc>
 800cb96:	4605      	mov	r5, r0
 800cb98:	b948      	cbnz	r0, 800cbae <__lshift+0x3e>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cba0:	4b27      	ldr	r3, [pc, #156]	@ (800cc40 <__lshift+0xd0>)
 800cba2:	4828      	ldr	r0, [pc, #160]	@ (800cc44 <__lshift+0xd4>)
 800cba4:	f000 fd6c 	bl	800d680 <__assert_func>
 800cba8:	3101      	adds	r1, #1
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	e7ee      	b.n	800cb8c <__lshift+0x1c>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f100 0114 	add.w	r1, r0, #20
 800cbb4:	f100 0210 	add.w	r2, r0, #16
 800cbb8:	4618      	mov	r0, r3
 800cbba:	4553      	cmp	r3, sl
 800cbbc:	db33      	blt.n	800cc26 <__lshift+0xb6>
 800cbbe:	6920      	ldr	r0, [r4, #16]
 800cbc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbc4:	f104 0314 	add.w	r3, r4, #20
 800cbc8:	f019 091f 	ands.w	r9, r9, #31
 800cbcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbd4:	d02b      	beq.n	800cc2e <__lshift+0xbe>
 800cbd6:	468a      	mov	sl, r1
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f1c9 0e20 	rsb	lr, r9, #32
 800cbde:	6818      	ldr	r0, [r3, #0]
 800cbe0:	fa00 f009 	lsl.w	r0, r0, r9
 800cbe4:	4310      	orrs	r0, r2
 800cbe6:	f84a 0b04 	str.w	r0, [sl], #4
 800cbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbee:	459c      	cmp	ip, r3
 800cbf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbf4:	d8f3      	bhi.n	800cbde <__lshift+0x6e>
 800cbf6:	ebac 0304 	sub.w	r3, ip, r4
 800cbfa:	3b15      	subs	r3, #21
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	3304      	adds	r3, #4
 800cc02:	f104 0015 	add.w	r0, r4, #21
 800cc06:	4584      	cmp	ip, r0
 800cc08:	bf38      	it	cc
 800cc0a:	2304      	movcc	r3, #4
 800cc0c:	50ca      	str	r2, [r1, r3]
 800cc0e:	b10a      	cbz	r2, 800cc14 <__lshift+0xa4>
 800cc10:	f108 0602 	add.w	r6, r8, #2
 800cc14:	3e01      	subs	r6, #1
 800cc16:	4638      	mov	r0, r7
 800cc18:	4621      	mov	r1, r4
 800cc1a:	612e      	str	r6, [r5, #16]
 800cc1c:	f7ff fddc 	bl	800c7d8 <_Bfree>
 800cc20:	4628      	mov	r0, r5
 800cc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc26:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	e7c5      	b.n	800cbba <__lshift+0x4a>
 800cc2e:	3904      	subs	r1, #4
 800cc30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc34:	459c      	cmp	ip, r3
 800cc36:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc3a:	d8f9      	bhi.n	800cc30 <__lshift+0xc0>
 800cc3c:	e7ea      	b.n	800cc14 <__lshift+0xa4>
 800cc3e:	bf00      	nop
 800cc40:	0800f932 	.word	0x0800f932
 800cc44:	0800f943 	.word	0x0800f943

0800cc48 <__mcmp>:
 800cc48:	4603      	mov	r3, r0
 800cc4a:	690a      	ldr	r2, [r1, #16]
 800cc4c:	6900      	ldr	r0, [r0, #16]
 800cc4e:	b530      	push	{r4, r5, lr}
 800cc50:	1a80      	subs	r0, r0, r2
 800cc52:	d10e      	bne.n	800cc72 <__mcmp+0x2a>
 800cc54:	3314      	adds	r3, #20
 800cc56:	3114      	adds	r1, #20
 800cc58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc68:	4295      	cmp	r5, r2
 800cc6a:	d003      	beq.n	800cc74 <__mcmp+0x2c>
 800cc6c:	d205      	bcs.n	800cc7a <__mcmp+0x32>
 800cc6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc72:	bd30      	pop	{r4, r5, pc}
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	d3f3      	bcc.n	800cc60 <__mcmp+0x18>
 800cc78:	e7fb      	b.n	800cc72 <__mcmp+0x2a>
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	e7f9      	b.n	800cc72 <__mcmp+0x2a>
	...

0800cc80 <__mdiff>:
 800cc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc84:	4689      	mov	r9, r1
 800cc86:	4606      	mov	r6, r0
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4648      	mov	r0, r9
 800cc8c:	4614      	mov	r4, r2
 800cc8e:	f7ff ffdb 	bl	800cc48 <__mcmp>
 800cc92:	1e05      	subs	r5, r0, #0
 800cc94:	d112      	bne.n	800ccbc <__mdiff+0x3c>
 800cc96:	4629      	mov	r1, r5
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f7ff fd5d 	bl	800c758 <_Balloc>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	b928      	cbnz	r0, 800ccae <__mdiff+0x2e>
 800cca2:	f240 2137 	movw	r1, #567	@ 0x237
 800cca6:	4b3e      	ldr	r3, [pc, #248]	@ (800cda0 <__mdiff+0x120>)
 800cca8:	483e      	ldr	r0, [pc, #248]	@ (800cda4 <__mdiff+0x124>)
 800ccaa:	f000 fce9 	bl	800d680 <__assert_func>
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccb4:	4610      	mov	r0, r2
 800ccb6:	b003      	add	sp, #12
 800ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccbc:	bfbc      	itt	lt
 800ccbe:	464b      	movlt	r3, r9
 800ccc0:	46a1      	movlt	r9, r4
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ccc8:	bfba      	itte	lt
 800ccca:	461c      	movlt	r4, r3
 800cccc:	2501      	movlt	r5, #1
 800ccce:	2500      	movge	r5, #0
 800ccd0:	f7ff fd42 	bl	800c758 <_Balloc>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	b918      	cbnz	r0, 800cce0 <__mdiff+0x60>
 800ccd8:	f240 2145 	movw	r1, #581	@ 0x245
 800ccdc:	4b30      	ldr	r3, [pc, #192]	@ (800cda0 <__mdiff+0x120>)
 800ccde:	e7e3      	b.n	800cca8 <__mdiff+0x28>
 800cce0:	f100 0b14 	add.w	fp, r0, #20
 800cce4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cce8:	f109 0310 	add.w	r3, r9, #16
 800ccec:	60c5      	str	r5, [r0, #12]
 800ccee:	f04f 0c00 	mov.w	ip, #0
 800ccf2:	f109 0514 	add.w	r5, r9, #20
 800ccf6:	46d9      	mov	r9, fp
 800ccf8:	6926      	ldr	r6, [r4, #16]
 800ccfa:	f104 0e14 	add.w	lr, r4, #20
 800ccfe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd12:	b281      	uxth	r1, r0
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	fa1f f38a 	uxth.w	r3, sl
 800cd1a:	1a5b      	subs	r3, r3, r1
 800cd1c:	0c00      	lsrs	r0, r0, #16
 800cd1e:	4463      	add	r3, ip
 800cd20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd2e:	4576      	cmp	r6, lr
 800cd30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd34:	f849 3b04 	str.w	r3, [r9], #4
 800cd38:	d8e6      	bhi.n	800cd08 <__mdiff+0x88>
 800cd3a:	1b33      	subs	r3, r6, r4
 800cd3c:	3b15      	subs	r3, #21
 800cd3e:	f023 0303 	bic.w	r3, r3, #3
 800cd42:	3415      	adds	r4, #21
 800cd44:	3304      	adds	r3, #4
 800cd46:	42a6      	cmp	r6, r4
 800cd48:	bf38      	it	cc
 800cd4a:	2304      	movcc	r3, #4
 800cd4c:	441d      	add	r5, r3
 800cd4e:	445b      	add	r3, fp
 800cd50:	461e      	mov	r6, r3
 800cd52:	462c      	mov	r4, r5
 800cd54:	4544      	cmp	r4, r8
 800cd56:	d30e      	bcc.n	800cd76 <__mdiff+0xf6>
 800cd58:	f108 0103 	add.w	r1, r8, #3
 800cd5c:	1b49      	subs	r1, r1, r5
 800cd5e:	f021 0103 	bic.w	r1, r1, #3
 800cd62:	3d03      	subs	r5, #3
 800cd64:	45a8      	cmp	r8, r5
 800cd66:	bf38      	it	cc
 800cd68:	2100      	movcc	r1, #0
 800cd6a:	440b      	add	r3, r1
 800cd6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd70:	b199      	cbz	r1, 800cd9a <__mdiff+0x11a>
 800cd72:	6117      	str	r7, [r2, #16]
 800cd74:	e79e      	b.n	800ccb4 <__mdiff+0x34>
 800cd76:	46e6      	mov	lr, ip
 800cd78:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd7c:	fa1f fc81 	uxth.w	ip, r1
 800cd80:	44f4      	add	ip, lr
 800cd82:	0c08      	lsrs	r0, r1, #16
 800cd84:	4471      	add	r1, lr
 800cd86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd8a:	b289      	uxth	r1, r1
 800cd8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd94:	f846 1b04 	str.w	r1, [r6], #4
 800cd98:	e7dc      	b.n	800cd54 <__mdiff+0xd4>
 800cd9a:	3f01      	subs	r7, #1
 800cd9c:	e7e6      	b.n	800cd6c <__mdiff+0xec>
 800cd9e:	bf00      	nop
 800cda0:	0800f932 	.word	0x0800f932
 800cda4:	0800f943 	.word	0x0800f943

0800cda8 <__d2b>:
 800cda8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800cdac:	2101      	movs	r1, #1
 800cdae:	4690      	mov	r8, r2
 800cdb0:	4699      	mov	r9, r3
 800cdb2:	9e08      	ldr	r6, [sp, #32]
 800cdb4:	f7ff fcd0 	bl	800c758 <_Balloc>
 800cdb8:	4604      	mov	r4, r0
 800cdba:	b930      	cbnz	r0, 800cdca <__d2b+0x22>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	f240 310f 	movw	r1, #783	@ 0x30f
 800cdc2:	4b23      	ldr	r3, [pc, #140]	@ (800ce50 <__d2b+0xa8>)
 800cdc4:	4823      	ldr	r0, [pc, #140]	@ (800ce54 <__d2b+0xac>)
 800cdc6:	f000 fc5b 	bl	800d680 <__assert_func>
 800cdca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cdce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdd2:	b10d      	cbz	r5, 800cdd8 <__d2b+0x30>
 800cdd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	f1b8 0300 	subs.w	r3, r8, #0
 800cdde:	d024      	beq.n	800ce2a <__d2b+0x82>
 800cde0:	4668      	mov	r0, sp
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	f7ff fd7f 	bl	800c8e6 <__lo0bits>
 800cde8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdec:	b1d8      	cbz	r0, 800ce26 <__d2b+0x7e>
 800cdee:	f1c0 0320 	rsb	r3, r0, #32
 800cdf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	40c2      	lsrs	r2, r0
 800cdfa:	6163      	str	r3, [r4, #20]
 800cdfc:	9201      	str	r2, [sp, #4]
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	bf0c      	ite	eq
 800ce04:	2201      	moveq	r2, #1
 800ce06:	2202      	movne	r2, #2
 800ce08:	61a3      	str	r3, [r4, #24]
 800ce0a:	6122      	str	r2, [r4, #16]
 800ce0c:	b1ad      	cbz	r5, 800ce3a <__d2b+0x92>
 800ce0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ce12:	4405      	add	r5, r0
 800ce14:	6035      	str	r5, [r6, #0]
 800ce16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ce1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce1c:	6018      	str	r0, [r3, #0]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	b002      	add	sp, #8
 800ce22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ce26:	6161      	str	r1, [r4, #20]
 800ce28:	e7e9      	b.n	800cdfe <__d2b+0x56>
 800ce2a:	a801      	add	r0, sp, #4
 800ce2c:	f7ff fd5b 	bl	800c8e6 <__lo0bits>
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	6163      	str	r3, [r4, #20]
 800ce36:	3020      	adds	r0, #32
 800ce38:	e7e7      	b.n	800ce0a <__d2b+0x62>
 800ce3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce42:	6030      	str	r0, [r6, #0]
 800ce44:	6918      	ldr	r0, [r3, #16]
 800ce46:	f7ff fd2f 	bl	800c8a8 <__hi0bits>
 800ce4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce4e:	e7e4      	b.n	800ce1a <__d2b+0x72>
 800ce50:	0800f932 	.word	0x0800f932
 800ce54:	0800f943 	.word	0x0800f943

0800ce58 <__ssputs_r>:
 800ce58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce5c:	461f      	mov	r7, r3
 800ce5e:	688e      	ldr	r6, [r1, #8]
 800ce60:	4682      	mov	sl, r0
 800ce62:	42be      	cmp	r6, r7
 800ce64:	460c      	mov	r4, r1
 800ce66:	4690      	mov	r8, r2
 800ce68:	680b      	ldr	r3, [r1, #0]
 800ce6a:	d82d      	bhi.n	800cec8 <__ssputs_r+0x70>
 800ce6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce74:	d026      	beq.n	800cec4 <__ssputs_r+0x6c>
 800ce76:	6965      	ldr	r5, [r4, #20]
 800ce78:	6909      	ldr	r1, [r1, #16]
 800ce7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce7e:	eba3 0901 	sub.w	r9, r3, r1
 800ce82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce86:	1c7b      	adds	r3, r7, #1
 800ce88:	444b      	add	r3, r9
 800ce8a:	106d      	asrs	r5, r5, #1
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	bf38      	it	cc
 800ce90:	461d      	movcc	r5, r3
 800ce92:	0553      	lsls	r3, r2, #21
 800ce94:	d527      	bpl.n	800cee6 <__ssputs_r+0x8e>
 800ce96:	4629      	mov	r1, r5
 800ce98:	f7fd fa32 	bl	800a300 <_malloc_r>
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	b360      	cbz	r0, 800cefa <__ssputs_r+0xa2>
 800cea0:	464a      	mov	r2, r9
 800cea2:	6921      	ldr	r1, [r4, #16]
 800cea4:	f7fe fdfa 	bl	800ba9c <memcpy>
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ceae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	6126      	str	r6, [r4, #16]
 800ceb6:	444e      	add	r6, r9
 800ceb8:	6026      	str	r6, [r4, #0]
 800ceba:	463e      	mov	r6, r7
 800cebc:	6165      	str	r5, [r4, #20]
 800cebe:	eba5 0509 	sub.w	r5, r5, r9
 800cec2:	60a5      	str	r5, [r4, #8]
 800cec4:	42be      	cmp	r6, r7
 800cec6:	d900      	bls.n	800ceca <__ssputs_r+0x72>
 800cec8:	463e      	mov	r6, r7
 800ceca:	4632      	mov	r2, r6
 800cecc:	4641      	mov	r1, r8
 800cece:	6820      	ldr	r0, [r4, #0]
 800ced0:	f000 fb99 	bl	800d606 <memmove>
 800ced4:	2000      	movs	r0, #0
 800ced6:	68a3      	ldr	r3, [r4, #8]
 800ced8:	1b9b      	subs	r3, r3, r6
 800ceda:	60a3      	str	r3, [r4, #8]
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	4433      	add	r3, r6
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	462a      	mov	r2, r5
 800cee8:	f000 fc0e 	bl	800d708 <_realloc_r>
 800ceec:	4606      	mov	r6, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d1e0      	bne.n	800ceb4 <__ssputs_r+0x5c>
 800cef2:	4650      	mov	r0, sl
 800cef4:	6921      	ldr	r1, [r4, #16]
 800cef6:	f7fd f989 	bl	800a20c <_free_r>
 800cefa:	230c      	movs	r3, #12
 800cefc:	f8ca 3000 	str.w	r3, [sl]
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	e7e9      	b.n	800cee2 <__ssputs_r+0x8a>
	...

0800cf10 <_svfiprintf_r>:
 800cf10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	4698      	mov	r8, r3
 800cf16:	898b      	ldrh	r3, [r1, #12]
 800cf18:	4607      	mov	r7, r0
 800cf1a:	061b      	lsls	r3, r3, #24
 800cf1c:	460d      	mov	r5, r1
 800cf1e:	4614      	mov	r4, r2
 800cf20:	b09d      	sub	sp, #116	@ 0x74
 800cf22:	d510      	bpl.n	800cf46 <_svfiprintf_r+0x36>
 800cf24:	690b      	ldr	r3, [r1, #16]
 800cf26:	b973      	cbnz	r3, 800cf46 <_svfiprintf_r+0x36>
 800cf28:	2140      	movs	r1, #64	@ 0x40
 800cf2a:	f7fd f9e9 	bl	800a300 <_malloc_r>
 800cf2e:	6028      	str	r0, [r5, #0]
 800cf30:	6128      	str	r0, [r5, #16]
 800cf32:	b930      	cbnz	r0, 800cf42 <_svfiprintf_r+0x32>
 800cf34:	230c      	movs	r3, #12
 800cf36:	603b      	str	r3, [r7, #0]
 800cf38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf3c:	b01d      	add	sp, #116	@ 0x74
 800cf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf42:	2340      	movs	r3, #64	@ 0x40
 800cf44:	616b      	str	r3, [r5, #20]
 800cf46:	2300      	movs	r3, #0
 800cf48:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf4a:	2320      	movs	r3, #32
 800cf4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf50:	2330      	movs	r3, #48	@ 0x30
 800cf52:	f04f 0901 	mov.w	r9, #1
 800cf56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d0f4 <_svfiprintf_r+0x1e4>
 800cf5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf62:	4623      	mov	r3, r4
 800cf64:	469a      	mov	sl, r3
 800cf66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf6a:	b10a      	cbz	r2, 800cf70 <_svfiprintf_r+0x60>
 800cf6c:	2a25      	cmp	r2, #37	@ 0x25
 800cf6e:	d1f9      	bne.n	800cf64 <_svfiprintf_r+0x54>
 800cf70:	ebba 0b04 	subs.w	fp, sl, r4
 800cf74:	d00b      	beq.n	800cf8e <_svfiprintf_r+0x7e>
 800cf76:	465b      	mov	r3, fp
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	f7ff ff6b 	bl	800ce58 <__ssputs_r>
 800cf82:	3001      	adds	r0, #1
 800cf84:	f000 80a7 	beq.w	800d0d6 <_svfiprintf_r+0x1c6>
 800cf88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf8a:	445a      	add	r2, fp
 800cf8c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 809f 	beq.w	800d0d6 <_svfiprintf_r+0x1c6>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa2:	f10a 0a01 	add.w	sl, sl, #1
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	9307      	str	r3, [sp, #28]
 800cfaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cfae:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfb0:	4654      	mov	r4, sl
 800cfb2:	2205      	movs	r2, #5
 800cfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb8:	484e      	ldr	r0, [pc, #312]	@ (800d0f4 <_svfiprintf_r+0x1e4>)
 800cfba:	f7fe fd61 	bl	800ba80 <memchr>
 800cfbe:	9a04      	ldr	r2, [sp, #16]
 800cfc0:	b9d8      	cbnz	r0, 800cffa <_svfiprintf_r+0xea>
 800cfc2:	06d0      	lsls	r0, r2, #27
 800cfc4:	bf44      	itt	mi
 800cfc6:	2320      	movmi	r3, #32
 800cfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfcc:	0711      	lsls	r1, r2, #28
 800cfce:	bf44      	itt	mi
 800cfd0:	232b      	movmi	r3, #43	@ 0x2b
 800cfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfda:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfdc:	d015      	beq.n	800d00a <_svfiprintf_r+0xfa>
 800cfde:	4654      	mov	r4, sl
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	f04f 0c0a 	mov.w	ip, #10
 800cfe6:	9a07      	ldr	r2, [sp, #28]
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfee:	3b30      	subs	r3, #48	@ 0x30
 800cff0:	2b09      	cmp	r3, #9
 800cff2:	d94b      	bls.n	800d08c <_svfiprintf_r+0x17c>
 800cff4:	b1b0      	cbz	r0, 800d024 <_svfiprintf_r+0x114>
 800cff6:	9207      	str	r2, [sp, #28]
 800cff8:	e014      	b.n	800d024 <_svfiprintf_r+0x114>
 800cffa:	eba0 0308 	sub.w	r3, r0, r8
 800cffe:	fa09 f303 	lsl.w	r3, r9, r3
 800d002:	4313      	orrs	r3, r2
 800d004:	46a2      	mov	sl, r4
 800d006:	9304      	str	r3, [sp, #16]
 800d008:	e7d2      	b.n	800cfb0 <_svfiprintf_r+0xa0>
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	1d19      	adds	r1, r3, #4
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	9103      	str	r1, [sp, #12]
 800d012:	2b00      	cmp	r3, #0
 800d014:	bfbb      	ittet	lt
 800d016:	425b      	neglt	r3, r3
 800d018:	f042 0202 	orrlt.w	r2, r2, #2
 800d01c:	9307      	strge	r3, [sp, #28]
 800d01e:	9307      	strlt	r3, [sp, #28]
 800d020:	bfb8      	it	lt
 800d022:	9204      	strlt	r2, [sp, #16]
 800d024:	7823      	ldrb	r3, [r4, #0]
 800d026:	2b2e      	cmp	r3, #46	@ 0x2e
 800d028:	d10a      	bne.n	800d040 <_svfiprintf_r+0x130>
 800d02a:	7863      	ldrb	r3, [r4, #1]
 800d02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d02e:	d132      	bne.n	800d096 <_svfiprintf_r+0x186>
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	3402      	adds	r4, #2
 800d034:	1d1a      	adds	r2, r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	9203      	str	r2, [sp, #12]
 800d03a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d03e:	9305      	str	r3, [sp, #20]
 800d040:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d0f8 <_svfiprintf_r+0x1e8>
 800d044:	2203      	movs	r2, #3
 800d046:	4650      	mov	r0, sl
 800d048:	7821      	ldrb	r1, [r4, #0]
 800d04a:	f7fe fd19 	bl	800ba80 <memchr>
 800d04e:	b138      	cbz	r0, 800d060 <_svfiprintf_r+0x150>
 800d050:	2240      	movs	r2, #64	@ 0x40
 800d052:	9b04      	ldr	r3, [sp, #16]
 800d054:	eba0 000a 	sub.w	r0, r0, sl
 800d058:	4082      	lsls	r2, r0
 800d05a:	4313      	orrs	r3, r2
 800d05c:	3401      	adds	r4, #1
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d064:	2206      	movs	r2, #6
 800d066:	4825      	ldr	r0, [pc, #148]	@ (800d0fc <_svfiprintf_r+0x1ec>)
 800d068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d06c:	f7fe fd08 	bl	800ba80 <memchr>
 800d070:	2800      	cmp	r0, #0
 800d072:	d036      	beq.n	800d0e2 <_svfiprintf_r+0x1d2>
 800d074:	4b22      	ldr	r3, [pc, #136]	@ (800d100 <_svfiprintf_r+0x1f0>)
 800d076:	bb1b      	cbnz	r3, 800d0c0 <_svfiprintf_r+0x1b0>
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	3307      	adds	r3, #7
 800d07c:	f023 0307 	bic.w	r3, r3, #7
 800d080:	3308      	adds	r3, #8
 800d082:	9303      	str	r3, [sp, #12]
 800d084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d086:	4433      	add	r3, r6
 800d088:	9309      	str	r3, [sp, #36]	@ 0x24
 800d08a:	e76a      	b.n	800cf62 <_svfiprintf_r+0x52>
 800d08c:	460c      	mov	r4, r1
 800d08e:	2001      	movs	r0, #1
 800d090:	fb0c 3202 	mla	r2, ip, r2, r3
 800d094:	e7a8      	b.n	800cfe8 <_svfiprintf_r+0xd8>
 800d096:	2300      	movs	r3, #0
 800d098:	f04f 0c0a 	mov.w	ip, #10
 800d09c:	4619      	mov	r1, r3
 800d09e:	3401      	adds	r4, #1
 800d0a0:	9305      	str	r3, [sp, #20]
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a8:	3a30      	subs	r2, #48	@ 0x30
 800d0aa:	2a09      	cmp	r2, #9
 800d0ac:	d903      	bls.n	800d0b6 <_svfiprintf_r+0x1a6>
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0c6      	beq.n	800d040 <_svfiprintf_r+0x130>
 800d0b2:	9105      	str	r1, [sp, #20]
 800d0b4:	e7c4      	b.n	800d040 <_svfiprintf_r+0x130>
 800d0b6:	4604      	mov	r4, r0
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0be:	e7f0      	b.n	800d0a2 <_svfiprintf_r+0x192>
 800d0c0:	ab03      	add	r3, sp, #12
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d104 <_svfiprintf_r+0x1f4>)
 800d0ca:	a904      	add	r1, sp, #16
 800d0cc:	f7fd fa42 	bl	800a554 <_printf_float>
 800d0d0:	1c42      	adds	r2, r0, #1
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	d1d6      	bne.n	800d084 <_svfiprintf_r+0x174>
 800d0d6:	89ab      	ldrh	r3, [r5, #12]
 800d0d8:	065b      	lsls	r3, r3, #25
 800d0da:	f53f af2d 	bmi.w	800cf38 <_svfiprintf_r+0x28>
 800d0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0e0:	e72c      	b.n	800cf3c <_svfiprintf_r+0x2c>
 800d0e2:	ab03      	add	r3, sp, #12
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	462a      	mov	r2, r5
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	4b06      	ldr	r3, [pc, #24]	@ (800d104 <_svfiprintf_r+0x1f4>)
 800d0ec:	a904      	add	r1, sp, #16
 800d0ee:	f7fd fccf 	bl	800aa90 <_printf_i>
 800d0f2:	e7ed      	b.n	800d0d0 <_svfiprintf_r+0x1c0>
 800d0f4:	0800fa98 	.word	0x0800fa98
 800d0f8:	0800fa9e 	.word	0x0800fa9e
 800d0fc:	0800faa2 	.word	0x0800faa2
 800d100:	0800a555 	.word	0x0800a555
 800d104:	0800ce59 	.word	0x0800ce59

0800d108 <__sfputc_r>:
 800d108:	6893      	ldr	r3, [r2, #8]
 800d10a:	b410      	push	{r4}
 800d10c:	3b01      	subs	r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	6093      	str	r3, [r2, #8]
 800d112:	da07      	bge.n	800d124 <__sfputc_r+0x1c>
 800d114:	6994      	ldr	r4, [r2, #24]
 800d116:	42a3      	cmp	r3, r4
 800d118:	db01      	blt.n	800d11e <__sfputc_r+0x16>
 800d11a:	290a      	cmp	r1, #10
 800d11c:	d102      	bne.n	800d124 <__sfputc_r+0x1c>
 800d11e:	bc10      	pop	{r4}
 800d120:	f7fe b89b 	b.w	800b25a <__swbuf_r>
 800d124:	6813      	ldr	r3, [r2, #0]
 800d126:	1c58      	adds	r0, r3, #1
 800d128:	6010      	str	r0, [r2, #0]
 800d12a:	7019      	strb	r1, [r3, #0]
 800d12c:	4608      	mov	r0, r1
 800d12e:	bc10      	pop	{r4}
 800d130:	4770      	bx	lr

0800d132 <__sfputs_r>:
 800d132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d134:	4606      	mov	r6, r0
 800d136:	460f      	mov	r7, r1
 800d138:	4614      	mov	r4, r2
 800d13a:	18d5      	adds	r5, r2, r3
 800d13c:	42ac      	cmp	r4, r5
 800d13e:	d101      	bne.n	800d144 <__sfputs_r+0x12>
 800d140:	2000      	movs	r0, #0
 800d142:	e007      	b.n	800d154 <__sfputs_r+0x22>
 800d144:	463a      	mov	r2, r7
 800d146:	4630      	mov	r0, r6
 800d148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d14c:	f7ff ffdc 	bl	800d108 <__sfputc_r>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d1f3      	bne.n	800d13c <__sfputs_r+0xa>
 800d154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d158 <_vfiprintf_r>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	460d      	mov	r5, r1
 800d15e:	4614      	mov	r4, r2
 800d160:	4698      	mov	r8, r3
 800d162:	4606      	mov	r6, r0
 800d164:	b09d      	sub	sp, #116	@ 0x74
 800d166:	b118      	cbz	r0, 800d170 <_vfiprintf_r+0x18>
 800d168:	6a03      	ldr	r3, [r0, #32]
 800d16a:	b90b      	cbnz	r3, 800d170 <_vfiprintf_r+0x18>
 800d16c:	f7fd fe8e 	bl	800ae8c <__sinit>
 800d170:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d172:	07d9      	lsls	r1, r3, #31
 800d174:	d405      	bmi.n	800d182 <_vfiprintf_r+0x2a>
 800d176:	89ab      	ldrh	r3, [r5, #12]
 800d178:	059a      	lsls	r2, r3, #22
 800d17a:	d402      	bmi.n	800d182 <_vfiprintf_r+0x2a>
 800d17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d17e:	f7f5 fdd6 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800d182:	89ab      	ldrh	r3, [r5, #12]
 800d184:	071b      	lsls	r3, r3, #28
 800d186:	d501      	bpl.n	800d18c <_vfiprintf_r+0x34>
 800d188:	692b      	ldr	r3, [r5, #16]
 800d18a:	b99b      	cbnz	r3, 800d1b4 <_vfiprintf_r+0x5c>
 800d18c:	4629      	mov	r1, r5
 800d18e:	4630      	mov	r0, r6
 800d190:	f7fe f8a2 	bl	800b2d8 <__swsetup_r>
 800d194:	b170      	cbz	r0, 800d1b4 <_vfiprintf_r+0x5c>
 800d196:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d198:	07dc      	lsls	r4, r3, #31
 800d19a:	d504      	bpl.n	800d1a6 <_vfiprintf_r+0x4e>
 800d19c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1a0:	b01d      	add	sp, #116	@ 0x74
 800d1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	0598      	lsls	r0, r3, #22
 800d1aa:	d4f7      	bmi.n	800d19c <_vfiprintf_r+0x44>
 800d1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1ae:	f7f5 fdd3 	bl	8002d58 <__retarget_lock_release_recursive>
 800d1b2:	e7f3      	b.n	800d19c <_vfiprintf_r+0x44>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1b8:	2320      	movs	r3, #32
 800d1ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1be:	2330      	movs	r3, #48	@ 0x30
 800d1c0:	f04f 0901 	mov.w	r9, #1
 800d1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d374 <_vfiprintf_r+0x21c>
 800d1cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1d0:	4623      	mov	r3, r4
 800d1d2:	469a      	mov	sl, r3
 800d1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1d8:	b10a      	cbz	r2, 800d1de <_vfiprintf_r+0x86>
 800d1da:	2a25      	cmp	r2, #37	@ 0x25
 800d1dc:	d1f9      	bne.n	800d1d2 <_vfiprintf_r+0x7a>
 800d1de:	ebba 0b04 	subs.w	fp, sl, r4
 800d1e2:	d00b      	beq.n	800d1fc <_vfiprintf_r+0xa4>
 800d1e4:	465b      	mov	r3, fp
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	f7ff ffa1 	bl	800d132 <__sfputs_r>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	f000 80a7 	beq.w	800d344 <_vfiprintf_r+0x1ec>
 800d1f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1f8:	445a      	add	r2, fp
 800d1fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 809f 	beq.w	800d344 <_vfiprintf_r+0x1ec>
 800d206:	2300      	movs	r3, #0
 800d208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d20c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d210:	f10a 0a01 	add.w	sl, sl, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	9307      	str	r3, [sp, #28]
 800d218:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d21c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d21e:	4654      	mov	r4, sl
 800d220:	2205      	movs	r2, #5
 800d222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d226:	4853      	ldr	r0, [pc, #332]	@ (800d374 <_vfiprintf_r+0x21c>)
 800d228:	f7fe fc2a 	bl	800ba80 <memchr>
 800d22c:	9a04      	ldr	r2, [sp, #16]
 800d22e:	b9d8      	cbnz	r0, 800d268 <_vfiprintf_r+0x110>
 800d230:	06d1      	lsls	r1, r2, #27
 800d232:	bf44      	itt	mi
 800d234:	2320      	movmi	r3, #32
 800d236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d23a:	0713      	lsls	r3, r2, #28
 800d23c:	bf44      	itt	mi
 800d23e:	232b      	movmi	r3, #43	@ 0x2b
 800d240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d244:	f89a 3000 	ldrb.w	r3, [sl]
 800d248:	2b2a      	cmp	r3, #42	@ 0x2a
 800d24a:	d015      	beq.n	800d278 <_vfiprintf_r+0x120>
 800d24c:	4654      	mov	r4, sl
 800d24e:	2000      	movs	r0, #0
 800d250:	f04f 0c0a 	mov.w	ip, #10
 800d254:	9a07      	ldr	r2, [sp, #28]
 800d256:	4621      	mov	r1, r4
 800d258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d25c:	3b30      	subs	r3, #48	@ 0x30
 800d25e:	2b09      	cmp	r3, #9
 800d260:	d94b      	bls.n	800d2fa <_vfiprintf_r+0x1a2>
 800d262:	b1b0      	cbz	r0, 800d292 <_vfiprintf_r+0x13a>
 800d264:	9207      	str	r2, [sp, #28]
 800d266:	e014      	b.n	800d292 <_vfiprintf_r+0x13a>
 800d268:	eba0 0308 	sub.w	r3, r0, r8
 800d26c:	fa09 f303 	lsl.w	r3, r9, r3
 800d270:	4313      	orrs	r3, r2
 800d272:	46a2      	mov	sl, r4
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	e7d2      	b.n	800d21e <_vfiprintf_r+0xc6>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	1d19      	adds	r1, r3, #4
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	9103      	str	r1, [sp, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	bfbb      	ittet	lt
 800d284:	425b      	neglt	r3, r3
 800d286:	f042 0202 	orrlt.w	r2, r2, #2
 800d28a:	9307      	strge	r3, [sp, #28]
 800d28c:	9307      	strlt	r3, [sp, #28]
 800d28e:	bfb8      	it	lt
 800d290:	9204      	strlt	r2, [sp, #16]
 800d292:	7823      	ldrb	r3, [r4, #0]
 800d294:	2b2e      	cmp	r3, #46	@ 0x2e
 800d296:	d10a      	bne.n	800d2ae <_vfiprintf_r+0x156>
 800d298:	7863      	ldrb	r3, [r4, #1]
 800d29a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d29c:	d132      	bne.n	800d304 <_vfiprintf_r+0x1ac>
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	3402      	adds	r4, #2
 800d2a2:	1d1a      	adds	r2, r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	9203      	str	r2, [sp, #12]
 800d2a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d378 <_vfiprintf_r+0x220>
 800d2b2:	2203      	movs	r2, #3
 800d2b4:	4650      	mov	r0, sl
 800d2b6:	7821      	ldrb	r1, [r4, #0]
 800d2b8:	f7fe fbe2 	bl	800ba80 <memchr>
 800d2bc:	b138      	cbz	r0, 800d2ce <_vfiprintf_r+0x176>
 800d2be:	2240      	movs	r2, #64	@ 0x40
 800d2c0:	9b04      	ldr	r3, [sp, #16]
 800d2c2:	eba0 000a 	sub.w	r0, r0, sl
 800d2c6:	4082      	lsls	r2, r0
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	3401      	adds	r4, #1
 800d2cc:	9304      	str	r3, [sp, #16]
 800d2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2d2:	2206      	movs	r2, #6
 800d2d4:	4829      	ldr	r0, [pc, #164]	@ (800d37c <_vfiprintf_r+0x224>)
 800d2d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2da:	f7fe fbd1 	bl	800ba80 <memchr>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d03f      	beq.n	800d362 <_vfiprintf_r+0x20a>
 800d2e2:	4b27      	ldr	r3, [pc, #156]	@ (800d380 <_vfiprintf_r+0x228>)
 800d2e4:	bb1b      	cbnz	r3, 800d32e <_vfiprintf_r+0x1d6>
 800d2e6:	9b03      	ldr	r3, [sp, #12]
 800d2e8:	3307      	adds	r3, #7
 800d2ea:	f023 0307 	bic.w	r3, r3, #7
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	9303      	str	r3, [sp, #12]
 800d2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f4:	443b      	add	r3, r7
 800d2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2f8:	e76a      	b.n	800d1d0 <_vfiprintf_r+0x78>
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800d302:	e7a8      	b.n	800d256 <_vfiprintf_r+0xfe>
 800d304:	2300      	movs	r3, #0
 800d306:	f04f 0c0a 	mov.w	ip, #10
 800d30a:	4619      	mov	r1, r3
 800d30c:	3401      	adds	r4, #1
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	4620      	mov	r0, r4
 800d312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d316:	3a30      	subs	r2, #48	@ 0x30
 800d318:	2a09      	cmp	r2, #9
 800d31a:	d903      	bls.n	800d324 <_vfiprintf_r+0x1cc>
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0c6      	beq.n	800d2ae <_vfiprintf_r+0x156>
 800d320:	9105      	str	r1, [sp, #20]
 800d322:	e7c4      	b.n	800d2ae <_vfiprintf_r+0x156>
 800d324:	4604      	mov	r4, r0
 800d326:	2301      	movs	r3, #1
 800d328:	fb0c 2101 	mla	r1, ip, r1, r2
 800d32c:	e7f0      	b.n	800d310 <_vfiprintf_r+0x1b8>
 800d32e:	ab03      	add	r3, sp, #12
 800d330:	9300      	str	r3, [sp, #0]
 800d332:	462a      	mov	r2, r5
 800d334:	4630      	mov	r0, r6
 800d336:	4b13      	ldr	r3, [pc, #76]	@ (800d384 <_vfiprintf_r+0x22c>)
 800d338:	a904      	add	r1, sp, #16
 800d33a:	f7fd f90b 	bl	800a554 <_printf_float>
 800d33e:	4607      	mov	r7, r0
 800d340:	1c78      	adds	r0, r7, #1
 800d342:	d1d6      	bne.n	800d2f2 <_vfiprintf_r+0x19a>
 800d344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d346:	07d9      	lsls	r1, r3, #31
 800d348:	d405      	bmi.n	800d356 <_vfiprintf_r+0x1fe>
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	059a      	lsls	r2, r3, #22
 800d34e:	d402      	bmi.n	800d356 <_vfiprintf_r+0x1fe>
 800d350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d352:	f7f5 fd01 	bl	8002d58 <__retarget_lock_release_recursive>
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	065b      	lsls	r3, r3, #25
 800d35a:	f53f af1f 	bmi.w	800d19c <_vfiprintf_r+0x44>
 800d35e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d360:	e71e      	b.n	800d1a0 <_vfiprintf_r+0x48>
 800d362:	ab03      	add	r3, sp, #12
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	462a      	mov	r2, r5
 800d368:	4630      	mov	r0, r6
 800d36a:	4b06      	ldr	r3, [pc, #24]	@ (800d384 <_vfiprintf_r+0x22c>)
 800d36c:	a904      	add	r1, sp, #16
 800d36e:	f7fd fb8f 	bl	800aa90 <_printf_i>
 800d372:	e7e4      	b.n	800d33e <_vfiprintf_r+0x1e6>
 800d374:	0800fa98 	.word	0x0800fa98
 800d378:	0800fa9e 	.word	0x0800fa9e
 800d37c:	0800faa2 	.word	0x0800faa2
 800d380:	0800a555 	.word	0x0800a555
 800d384:	0800d133 	.word	0x0800d133

0800d388 <__sflush_r>:
 800d388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38e:	0716      	lsls	r6, r2, #28
 800d390:	4605      	mov	r5, r0
 800d392:	460c      	mov	r4, r1
 800d394:	d454      	bmi.n	800d440 <__sflush_r+0xb8>
 800d396:	684b      	ldr	r3, [r1, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dc02      	bgt.n	800d3a2 <__sflush_r+0x1a>
 800d39c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	dd48      	ble.n	800d434 <__sflush_r+0xac>
 800d3a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3a4:	2e00      	cmp	r6, #0
 800d3a6:	d045      	beq.n	800d434 <__sflush_r+0xac>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3ae:	682f      	ldr	r7, [r5, #0]
 800d3b0:	6a21      	ldr	r1, [r4, #32]
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	d030      	beq.n	800d418 <__sflush_r+0x90>
 800d3b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	0759      	lsls	r1, r3, #29
 800d3bc:	d505      	bpl.n	800d3ca <__sflush_r+0x42>
 800d3be:	6863      	ldr	r3, [r4, #4]
 800d3c0:	1ad2      	subs	r2, r2, r3
 800d3c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3c4:	b10b      	cbz	r3, 800d3ca <__sflush_r+0x42>
 800d3c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3c8:	1ad2      	subs	r2, r2, r3
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3d0:	6a21      	ldr	r1, [r4, #32]
 800d3d2:	47b0      	blx	r6
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	d106      	bne.n	800d3e8 <__sflush_r+0x60>
 800d3da:	6829      	ldr	r1, [r5, #0]
 800d3dc:	291d      	cmp	r1, #29
 800d3de:	d82b      	bhi.n	800d438 <__sflush_r+0xb0>
 800d3e0:	4a28      	ldr	r2, [pc, #160]	@ (800d484 <__sflush_r+0xfc>)
 800d3e2:	410a      	asrs	r2, r1
 800d3e4:	07d6      	lsls	r6, r2, #31
 800d3e6:	d427      	bmi.n	800d438 <__sflush_r+0xb0>
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	6062      	str	r2, [r4, #4]
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	04d9      	lsls	r1, r3, #19
 800d3f0:	6022      	str	r2, [r4, #0]
 800d3f2:	d504      	bpl.n	800d3fe <__sflush_r+0x76>
 800d3f4:	1c42      	adds	r2, r0, #1
 800d3f6:	d101      	bne.n	800d3fc <__sflush_r+0x74>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b903      	cbnz	r3, 800d3fe <__sflush_r+0x76>
 800d3fc:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d400:	602f      	str	r7, [r5, #0]
 800d402:	b1b9      	cbz	r1, 800d434 <__sflush_r+0xac>
 800d404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__sflush_r+0x8a>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7fc fefd 	bl	800a20c <_free_r>
 800d412:	2300      	movs	r3, #0
 800d414:	6363      	str	r3, [r4, #52]	@ 0x34
 800d416:	e00d      	b.n	800d434 <__sflush_r+0xac>
 800d418:	2301      	movs	r3, #1
 800d41a:	4628      	mov	r0, r5
 800d41c:	47b0      	blx	r6
 800d41e:	4602      	mov	r2, r0
 800d420:	1c50      	adds	r0, r2, #1
 800d422:	d1c9      	bne.n	800d3b8 <__sflush_r+0x30>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0c6      	beq.n	800d3b8 <__sflush_r+0x30>
 800d42a:	2b1d      	cmp	r3, #29
 800d42c:	d001      	beq.n	800d432 <__sflush_r+0xaa>
 800d42e:	2b16      	cmp	r3, #22
 800d430:	d11d      	bne.n	800d46e <__sflush_r+0xe6>
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	2000      	movs	r0, #0
 800d436:	e021      	b.n	800d47c <__sflush_r+0xf4>
 800d438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43c:	b21b      	sxth	r3, r3
 800d43e:	e01a      	b.n	800d476 <__sflush_r+0xee>
 800d440:	690f      	ldr	r7, [r1, #16]
 800d442:	2f00      	cmp	r7, #0
 800d444:	d0f6      	beq.n	800d434 <__sflush_r+0xac>
 800d446:	0793      	lsls	r3, r2, #30
 800d448:	bf18      	it	ne
 800d44a:	2300      	movne	r3, #0
 800d44c:	680e      	ldr	r6, [r1, #0]
 800d44e:	bf08      	it	eq
 800d450:	694b      	ldreq	r3, [r1, #20]
 800d452:	1bf6      	subs	r6, r6, r7
 800d454:	600f      	str	r7, [r1, #0]
 800d456:	608b      	str	r3, [r1, #8]
 800d458:	2e00      	cmp	r6, #0
 800d45a:	ddeb      	ble.n	800d434 <__sflush_r+0xac>
 800d45c:	4633      	mov	r3, r6
 800d45e:	463a      	mov	r2, r7
 800d460:	4628      	mov	r0, r5
 800d462:	6a21      	ldr	r1, [r4, #32]
 800d464:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d468:	47e0      	blx	ip
 800d46a:	2800      	cmp	r0, #0
 800d46c:	dc07      	bgt.n	800d47e <__sflush_r+0xf6>
 800d46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d47e:	4407      	add	r7, r0
 800d480:	1a36      	subs	r6, r6, r0
 800d482:	e7e9      	b.n	800d458 <__sflush_r+0xd0>
 800d484:	dfbffffe 	.word	0xdfbffffe

0800d488 <_fflush_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	690b      	ldr	r3, [r1, #16]
 800d48c:	4605      	mov	r5, r0
 800d48e:	460c      	mov	r4, r1
 800d490:	b913      	cbnz	r3, 800d498 <_fflush_r+0x10>
 800d492:	2500      	movs	r5, #0
 800d494:	4628      	mov	r0, r5
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	b118      	cbz	r0, 800d4a2 <_fflush_r+0x1a>
 800d49a:	6a03      	ldr	r3, [r0, #32]
 800d49c:	b90b      	cbnz	r3, 800d4a2 <_fflush_r+0x1a>
 800d49e:	f7fd fcf5 	bl	800ae8c <__sinit>
 800d4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d0f3      	beq.n	800d492 <_fflush_r+0xa>
 800d4aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4ac:	07d0      	lsls	r0, r2, #31
 800d4ae:	d404      	bmi.n	800d4ba <_fflush_r+0x32>
 800d4b0:	0599      	lsls	r1, r3, #22
 800d4b2:	d402      	bmi.n	800d4ba <_fflush_r+0x32>
 800d4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4b6:	f7f5 fc3a 	bl	8002d2e <__retarget_lock_acquire_recursive>
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	4621      	mov	r1, r4
 800d4be:	f7ff ff63 	bl	800d388 <__sflush_r>
 800d4c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	07da      	lsls	r2, r3, #31
 800d4c8:	d4e4      	bmi.n	800d494 <_fflush_r+0xc>
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	059b      	lsls	r3, r3, #22
 800d4ce:	d4e1      	bmi.n	800d494 <_fflush_r+0xc>
 800d4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4d2:	f7f5 fc41 	bl	8002d58 <__retarget_lock_release_recursive>
 800d4d6:	e7dd      	b.n	800d494 <_fflush_r+0xc>

0800d4d8 <__sflags>:
 800d4d8:	780b      	ldrb	r3, [r1, #0]
 800d4da:	b530      	push	{r4, r5, lr}
 800d4dc:	2b72      	cmp	r3, #114	@ 0x72
 800d4de:	d022      	beq.n	800d526 <__sflags+0x4e>
 800d4e0:	2b77      	cmp	r3, #119	@ 0x77
 800d4e2:	d024      	beq.n	800d52e <__sflags+0x56>
 800d4e4:	2b61      	cmp	r3, #97	@ 0x61
 800d4e6:	d027      	beq.n	800d538 <__sflags+0x60>
 800d4e8:	2316      	movs	r3, #22
 800d4ea:	6003      	str	r3, [r0, #0]
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	bd30      	pop	{r4, r5, pc}
 800d4f0:	2d62      	cmp	r5, #98	@ 0x62
 800d4f2:	d012      	beq.n	800d51a <__sflags+0x42>
 800d4f4:	2d78      	cmp	r5, #120	@ 0x78
 800d4f6:	d013      	beq.n	800d520 <__sflags+0x48>
 800d4f8:	2d2b      	cmp	r5, #43	@ 0x2b
 800d4fa:	d107      	bne.n	800d50c <__sflags+0x34>
 800d4fc:	f020 001c 	bic.w	r0, r0, #28
 800d500:	f023 0303 	bic.w	r3, r3, #3
 800d504:	f040 0010 	orr.w	r0, r0, #16
 800d508:	f043 0302 	orr.w	r3, r3, #2
 800d50c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d510:	2d00      	cmp	r5, #0
 800d512:	d1ed      	bne.n	800d4f0 <__sflags+0x18>
 800d514:	4323      	orrs	r3, r4
 800d516:	6013      	str	r3, [r2, #0]
 800d518:	e7e9      	b.n	800d4ee <__sflags+0x16>
 800d51a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d51e:	e7f5      	b.n	800d50c <__sflags+0x34>
 800d520:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d524:	e7f2      	b.n	800d50c <__sflags+0x34>
 800d526:	2400      	movs	r4, #0
 800d528:	2004      	movs	r0, #4
 800d52a:	4623      	mov	r3, r4
 800d52c:	e7ee      	b.n	800d50c <__sflags+0x34>
 800d52e:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800d532:	2301      	movs	r3, #1
 800d534:	2008      	movs	r0, #8
 800d536:	e7e9      	b.n	800d50c <__sflags+0x34>
 800d538:	f44f 7402 	mov.w	r4, #520	@ 0x208
 800d53c:	2301      	movs	r3, #1
 800d53e:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800d542:	e7e3      	b.n	800d50c <__sflags+0x34>

0800d544 <__swhatbuf_r>:
 800d544:	b570      	push	{r4, r5, r6, lr}
 800d546:	460c      	mov	r4, r1
 800d548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54c:	4615      	mov	r5, r2
 800d54e:	2900      	cmp	r1, #0
 800d550:	461e      	mov	r6, r3
 800d552:	b096      	sub	sp, #88	@ 0x58
 800d554:	da0c      	bge.n	800d570 <__swhatbuf_r+0x2c>
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	2100      	movs	r1, #0
 800d55a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d55e:	bf14      	ite	ne
 800d560:	2340      	movne	r3, #64	@ 0x40
 800d562:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d566:	2000      	movs	r0, #0
 800d568:	6031      	str	r1, [r6, #0]
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	b016      	add	sp, #88	@ 0x58
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	466a      	mov	r2, sp
 800d572:	f000 f863 	bl	800d63c <_fstat_r>
 800d576:	2800      	cmp	r0, #0
 800d578:	dbed      	blt.n	800d556 <__swhatbuf_r+0x12>
 800d57a:	9901      	ldr	r1, [sp, #4]
 800d57c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d580:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d584:	4259      	negs	r1, r3
 800d586:	4159      	adcs	r1, r3
 800d588:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d58c:	e7eb      	b.n	800d566 <__swhatbuf_r+0x22>

0800d58e <__smakebuf_r>:
 800d58e:	898b      	ldrh	r3, [r1, #12]
 800d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d592:	079d      	lsls	r5, r3, #30
 800d594:	4606      	mov	r6, r0
 800d596:	460c      	mov	r4, r1
 800d598:	d507      	bpl.n	800d5aa <__smakebuf_r+0x1c>
 800d59a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d59e:	6023      	str	r3, [r4, #0]
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	6163      	str	r3, [r4, #20]
 800d5a6:	b003      	add	sp, #12
 800d5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5aa:	466a      	mov	r2, sp
 800d5ac:	ab01      	add	r3, sp, #4
 800d5ae:	f7ff ffc9 	bl	800d544 <__swhatbuf_r>
 800d5b2:	9f00      	ldr	r7, [sp, #0]
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f7fc fea1 	bl	800a300 <_malloc_r>
 800d5be:	b948      	cbnz	r0, 800d5d4 <__smakebuf_r+0x46>
 800d5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5c4:	059a      	lsls	r2, r3, #22
 800d5c6:	d4ee      	bmi.n	800d5a6 <__smakebuf_r+0x18>
 800d5c8:	f023 0303 	bic.w	r3, r3, #3
 800d5cc:	f043 0302 	orr.w	r3, r3, #2
 800d5d0:	81a3      	strh	r3, [r4, #12]
 800d5d2:	e7e2      	b.n	800d59a <__smakebuf_r+0xc>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	9b01      	ldr	r3, [sp, #4]
 800d5e2:	6020      	str	r0, [r4, #0]
 800d5e4:	b15b      	cbz	r3, 800d5fe <__smakebuf_r+0x70>
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ec:	f000 f838 	bl	800d660 <_isatty_r>
 800d5f0:	b128      	cbz	r0, 800d5fe <__smakebuf_r+0x70>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	f043 0301 	orr.w	r3, r3, #1
 800d5fc:	81a3      	strh	r3, [r4, #12]
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	431d      	orrs	r5, r3
 800d602:	81a5      	strh	r5, [r4, #12]
 800d604:	e7cf      	b.n	800d5a6 <__smakebuf_r+0x18>

0800d606 <memmove>:
 800d606:	4288      	cmp	r0, r1
 800d608:	b510      	push	{r4, lr}
 800d60a:	eb01 0402 	add.w	r4, r1, r2
 800d60e:	d902      	bls.n	800d616 <memmove+0x10>
 800d610:	4284      	cmp	r4, r0
 800d612:	4623      	mov	r3, r4
 800d614:	d807      	bhi.n	800d626 <memmove+0x20>
 800d616:	1e43      	subs	r3, r0, #1
 800d618:	42a1      	cmp	r1, r4
 800d61a:	d008      	beq.n	800d62e <memmove+0x28>
 800d61c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d620:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d624:	e7f8      	b.n	800d618 <memmove+0x12>
 800d626:	4601      	mov	r1, r0
 800d628:	4402      	add	r2, r0
 800d62a:	428a      	cmp	r2, r1
 800d62c:	d100      	bne.n	800d630 <memmove+0x2a>
 800d62e:	bd10      	pop	{r4, pc}
 800d630:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d634:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d638:	e7f7      	b.n	800d62a <memmove+0x24>
	...

0800d63c <_fstat_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	2300      	movs	r3, #0
 800d640:	4d06      	ldr	r5, [pc, #24]	@ (800d65c <_fstat_r+0x20>)
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	4611      	mov	r1, r2
 800d648:	602b      	str	r3, [r5, #0]
 800d64a:	f7fc fc54 	bl	8009ef6 <_fstat>
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	d102      	bne.n	800d658 <_fstat_r+0x1c>
 800d652:	682b      	ldr	r3, [r5, #0]
 800d654:	b103      	cbz	r3, 800d658 <_fstat_r+0x1c>
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	bd38      	pop	{r3, r4, r5, pc}
 800d65a:	bf00      	nop
 800d65c:	20003fdc 	.word	0x20003fdc

0800d660 <_isatty_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	2300      	movs	r3, #0
 800d664:	4d05      	ldr	r5, [pc, #20]	@ (800d67c <_isatty_r+0x1c>)
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7fc fdb0 	bl	800a1d0 <_isatty>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_isatty_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_isatty_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	20003fdc 	.word	0x20003fdc

0800d680 <__assert_func>:
 800d680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d682:	4614      	mov	r4, r2
 800d684:	461a      	mov	r2, r3
 800d686:	4b09      	ldr	r3, [pc, #36]	@ (800d6ac <__assert_func+0x2c>)
 800d688:	4605      	mov	r5, r0
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68d8      	ldr	r0, [r3, #12]
 800d68e:	b954      	cbnz	r4, 800d6a6 <__assert_func+0x26>
 800d690:	4b07      	ldr	r3, [pc, #28]	@ (800d6b0 <__assert_func+0x30>)
 800d692:	461c      	mov	r4, r3
 800d694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d698:	9100      	str	r1, [sp, #0]
 800d69a:	462b      	mov	r3, r5
 800d69c:	4905      	ldr	r1, [pc, #20]	@ (800d6b4 <__assert_func+0x34>)
 800d69e:	f7fd fc69 	bl	800af74 <fiprintf>
 800d6a2:	f000 f86c 	bl	800d77e <abort>
 800d6a6:	4b04      	ldr	r3, [pc, #16]	@ (800d6b8 <__assert_func+0x38>)
 800d6a8:	e7f4      	b.n	800d694 <__assert_func+0x14>
 800d6aa:	bf00      	nop
 800d6ac:	20000024 	.word	0x20000024
 800d6b0:	0800faee 	.word	0x0800faee
 800d6b4:	0800fac0 	.word	0x0800fac0
 800d6b8:	0800fab3 	.word	0x0800fab3

0800d6bc <_calloc_r>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	fba1 5402 	umull	r5, r4, r1, r2
 800d6c2:	b93c      	cbnz	r4, 800d6d4 <_calloc_r+0x18>
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7fc fe1b 	bl	800a300 <_malloc_r>
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	b928      	cbnz	r0, 800d6da <_calloc_r+0x1e>
 800d6ce:	2600      	movs	r6, #0
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}
 800d6d4:	220c      	movs	r2, #12
 800d6d6:	6002      	str	r2, [r0, #0]
 800d6d8:	e7f9      	b.n	800d6ce <_calloc_r+0x12>
 800d6da:	462a      	mov	r2, r5
 800d6dc:	4621      	mov	r1, r4
 800d6de:	f7fd fee8 	bl	800b4b2 <memset>
 800d6e2:	e7f5      	b.n	800d6d0 <_calloc_r+0x14>

0800d6e4 <__ascii_mbtowc>:
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	b901      	cbnz	r1, 800d6ea <__ascii_mbtowc+0x6>
 800d6e8:	a901      	add	r1, sp, #4
 800d6ea:	b142      	cbz	r2, 800d6fe <__ascii_mbtowc+0x1a>
 800d6ec:	b14b      	cbz	r3, 800d702 <__ascii_mbtowc+0x1e>
 800d6ee:	7813      	ldrb	r3, [r2, #0]
 800d6f0:	600b      	str	r3, [r1, #0]
 800d6f2:	7812      	ldrb	r2, [r2, #0]
 800d6f4:	1e10      	subs	r0, r2, #0
 800d6f6:	bf18      	it	ne
 800d6f8:	2001      	movne	r0, #1
 800d6fa:	b002      	add	sp, #8
 800d6fc:	4770      	bx	lr
 800d6fe:	4610      	mov	r0, r2
 800d700:	e7fb      	b.n	800d6fa <__ascii_mbtowc+0x16>
 800d702:	f06f 0001 	mvn.w	r0, #1
 800d706:	e7f8      	b.n	800d6fa <__ascii_mbtowc+0x16>

0800d708 <_realloc_r>:
 800d708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d70c:	4680      	mov	r8, r0
 800d70e:	4615      	mov	r5, r2
 800d710:	460c      	mov	r4, r1
 800d712:	b921      	cbnz	r1, 800d71e <_realloc_r+0x16>
 800d714:	4611      	mov	r1, r2
 800d716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d71a:	f7fc bdf1 	b.w	800a300 <_malloc_r>
 800d71e:	b92a      	cbnz	r2, 800d72c <_realloc_r+0x24>
 800d720:	f7fc fd74 	bl	800a20c <_free_r>
 800d724:	2400      	movs	r4, #0
 800d726:	4620      	mov	r0, r4
 800d728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d72c:	f000 f82e 	bl	800d78c <_malloc_usable_size_r>
 800d730:	4285      	cmp	r5, r0
 800d732:	4606      	mov	r6, r0
 800d734:	d802      	bhi.n	800d73c <_realloc_r+0x34>
 800d736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d73a:	d8f4      	bhi.n	800d726 <_realloc_r+0x1e>
 800d73c:	4629      	mov	r1, r5
 800d73e:	4640      	mov	r0, r8
 800d740:	f7fc fdde 	bl	800a300 <_malloc_r>
 800d744:	4607      	mov	r7, r0
 800d746:	2800      	cmp	r0, #0
 800d748:	d0ec      	beq.n	800d724 <_realloc_r+0x1c>
 800d74a:	42b5      	cmp	r5, r6
 800d74c:	462a      	mov	r2, r5
 800d74e:	4621      	mov	r1, r4
 800d750:	bf28      	it	cs
 800d752:	4632      	movcs	r2, r6
 800d754:	f7fe f9a2 	bl	800ba9c <memcpy>
 800d758:	4621      	mov	r1, r4
 800d75a:	4640      	mov	r0, r8
 800d75c:	f7fc fd56 	bl	800a20c <_free_r>
 800d760:	463c      	mov	r4, r7
 800d762:	e7e0      	b.n	800d726 <_realloc_r+0x1e>

0800d764 <__ascii_wctomb>:
 800d764:	4603      	mov	r3, r0
 800d766:	4608      	mov	r0, r1
 800d768:	b141      	cbz	r1, 800d77c <__ascii_wctomb+0x18>
 800d76a:	2aff      	cmp	r2, #255	@ 0xff
 800d76c:	d904      	bls.n	800d778 <__ascii_wctomb+0x14>
 800d76e:	228a      	movs	r2, #138	@ 0x8a
 800d770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	4770      	bx	lr
 800d778:	2001      	movs	r0, #1
 800d77a:	700a      	strb	r2, [r1, #0]
 800d77c:	4770      	bx	lr

0800d77e <abort>:
 800d77e:	2006      	movs	r0, #6
 800d780:	b508      	push	{r3, lr}
 800d782:	f000 f833 	bl	800d7ec <raise>
 800d786:	2001      	movs	r0, #1
 800d788:	f001 f9ec 	bl	800eb64 <_exit>

0800d78c <_malloc_usable_size_r>:
 800d78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d790:	1f18      	subs	r0, r3, #4
 800d792:	2b00      	cmp	r3, #0
 800d794:	bfbc      	itt	lt
 800d796:	580b      	ldrlt	r3, [r1, r0]
 800d798:	18c0      	addlt	r0, r0, r3
 800d79a:	4770      	bx	lr

0800d79c <_raise_r>:
 800d79c:	291f      	cmp	r1, #31
 800d79e:	b538      	push	{r3, r4, r5, lr}
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	d904      	bls.n	800d7b0 <_raise_r+0x14>
 800d7a6:	2316      	movs	r3, #22
 800d7a8:	6003      	str	r3, [r0, #0]
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7b2:	b112      	cbz	r2, 800d7ba <_raise_r+0x1e>
 800d7b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7b8:	b94b      	cbnz	r3, 800d7ce <_raise_r+0x32>
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f000 f830 	bl	800d820 <_getpid_r>
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ca:	f000 b817 	b.w	800d7fc <_kill_r>
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d00a      	beq.n	800d7e8 <_raise_r+0x4c>
 800d7d2:	1c59      	adds	r1, r3, #1
 800d7d4:	d103      	bne.n	800d7de <_raise_r+0x42>
 800d7d6:	2316      	movs	r3, #22
 800d7d8:	6003      	str	r3, [r0, #0]
 800d7da:	2001      	movs	r0, #1
 800d7dc:	e7e7      	b.n	800d7ae <_raise_r+0x12>
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7e6:	4798      	blx	r3
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	e7e0      	b.n	800d7ae <_raise_r+0x12>

0800d7ec <raise>:
 800d7ec:	4b02      	ldr	r3, [pc, #8]	@ (800d7f8 <raise+0xc>)
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	f7ff bfd3 	b.w	800d79c <_raise_r>
 800d7f6:	bf00      	nop
 800d7f8:	20000024 	.word	0x20000024

0800d7fc <_kill_r>:
 800d7fc:	b538      	push	{r3, r4, r5, lr}
 800d7fe:	2300      	movs	r3, #0
 800d800:	4d06      	ldr	r5, [pc, #24]	@ (800d81c <_kill_r+0x20>)
 800d802:	4604      	mov	r4, r0
 800d804:	4608      	mov	r0, r1
 800d806:	4611      	mov	r1, r2
 800d808:	602b      	str	r3, [r5, #0]
 800d80a:	f001 f9a3 	bl	800eb54 <_kill>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	d102      	bne.n	800d818 <_kill_r+0x1c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	b103      	cbz	r3, 800d818 <_kill_r+0x1c>
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	bf00      	nop
 800d81c:	20003fdc 	.word	0x20003fdc

0800d820 <_getpid_r>:
 800d820:	f7fc bb46 	b.w	8009eb0 <_getpid>

0800d824 <atan2>:
 800d824:	f000 b968 	b.w	800daf8 <__ieee754_atan2>

0800d828 <pow>:
 800d828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d82c:	4614      	mov	r4, r2
 800d82e:	461d      	mov	r5, r3
 800d830:	4680      	mov	r8, r0
 800d832:	4689      	mov	r9, r1
 800d834:	f000 fa34 	bl	800dca0 <__ieee754_pow>
 800d838:	4622      	mov	r2, r4
 800d83a:	4606      	mov	r6, r0
 800d83c:	460f      	mov	r7, r1
 800d83e:	462b      	mov	r3, r5
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	f7f3 f8e2 	bl	8000a0c <__aeabi_dcmpun>
 800d848:	bbc8      	cbnz	r0, 800d8be <pow+0x96>
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	4640      	mov	r0, r8
 800d850:	4649      	mov	r1, r9
 800d852:	f7f3 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 800d856:	b1b8      	cbz	r0, 800d888 <pow+0x60>
 800d858:	2200      	movs	r2, #0
 800d85a:	2300      	movs	r3, #0
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f3 f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 800d864:	2800      	cmp	r0, #0
 800d866:	d141      	bne.n	800d8ec <pow+0xc4>
 800d868:	4620      	mov	r0, r4
 800d86a:	4629      	mov	r1, r5
 800d86c:	f000 f868 	bl	800d940 <finite>
 800d870:	b328      	cbz	r0, 800d8be <pow+0x96>
 800d872:	2200      	movs	r2, #0
 800d874:	2300      	movs	r3, #0
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f3 f89f 	bl	80009bc <__aeabi_dcmplt>
 800d87e:	b1f0      	cbz	r0, 800d8be <pow+0x96>
 800d880:	f7fe f8d4 	bl	800ba2c <__errno>
 800d884:	2322      	movs	r3, #34	@ 0x22
 800d886:	e019      	b.n	800d8bc <pow+0x94>
 800d888:	4630      	mov	r0, r6
 800d88a:	4639      	mov	r1, r7
 800d88c:	f000 f858 	bl	800d940 <finite>
 800d890:	b9c8      	cbnz	r0, 800d8c6 <pow+0x9e>
 800d892:	4640      	mov	r0, r8
 800d894:	4649      	mov	r1, r9
 800d896:	f000 f853 	bl	800d940 <finite>
 800d89a:	b1a0      	cbz	r0, 800d8c6 <pow+0x9e>
 800d89c:	4620      	mov	r0, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	f000 f84e 	bl	800d940 <finite>
 800d8a4:	b178      	cbz	r0, 800d8c6 <pow+0x9e>
 800d8a6:	4632      	mov	r2, r6
 800d8a8:	463b      	mov	r3, r7
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	f7f3 f8ad 	bl	8000a0c <__aeabi_dcmpun>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d0e4      	beq.n	800d880 <pow+0x58>
 800d8b6:	f7fe f8b9 	bl	800ba2c <__errno>
 800d8ba:	2321      	movs	r3, #33	@ 0x21
 800d8bc:	6003      	str	r3, [r0, #0]
 800d8be:	4630      	mov	r0, r6
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f3 f86b 	bl	80009a8 <__aeabi_dcmpeq>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d0f3      	beq.n	800d8be <pow+0x96>
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	f000 f831 	bl	800d940 <finite>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d0ed      	beq.n	800d8be <pow+0x96>
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	f000 f82b 	bl	800d940 <finite>
 800d8ea:	e7c8      	b.n	800d87e <pow+0x56>
 800d8ec:	2600      	movs	r6, #0
 800d8ee:	4f01      	ldr	r7, [pc, #4]	@ (800d8f4 <pow+0xcc>)
 800d8f0:	e7e5      	b.n	800d8be <pow+0x96>
 800d8f2:	bf00      	nop
 800d8f4:	3ff00000 	.word	0x3ff00000

0800d8f8 <sqrt>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	460f      	mov	r7, r1
 800d8fe:	f000 f825 	bl	800d94c <__ieee754_sqrt>
 800d902:	4632      	mov	r2, r6
 800d904:	4604      	mov	r4, r0
 800d906:	460d      	mov	r5, r1
 800d908:	463b      	mov	r3, r7
 800d90a:	4630      	mov	r0, r6
 800d90c:	4639      	mov	r1, r7
 800d90e:	f7f3 f87d 	bl	8000a0c <__aeabi_dcmpun>
 800d912:	b990      	cbnz	r0, 800d93a <sqrt+0x42>
 800d914:	2200      	movs	r2, #0
 800d916:	2300      	movs	r3, #0
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f3 f84e 	bl	80009bc <__aeabi_dcmplt>
 800d920:	b158      	cbz	r0, 800d93a <sqrt+0x42>
 800d922:	f7fe f883 	bl	800ba2c <__errno>
 800d926:	2321      	movs	r3, #33	@ 0x21
 800d928:	2200      	movs	r2, #0
 800d92a:	6003      	str	r3, [r0, #0]
 800d92c:	2300      	movs	r3, #0
 800d92e:	4610      	mov	r0, r2
 800d930:	4619      	mov	r1, r3
 800d932:	f7f2 fefb 	bl	800072c <__aeabi_ddiv>
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	4620      	mov	r0, r4
 800d93c:	4629      	mov	r1, r5
 800d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d940 <finite>:
 800d940:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800d944:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d948:	0fc0      	lsrs	r0, r0, #31
 800d94a:	4770      	bx	lr

0800d94c <__ieee754_sqrt>:
 800d94c:	4a67      	ldr	r2, [pc, #412]	@ (800daec <__ieee754_sqrt+0x1a0>)
 800d94e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d952:	438a      	bics	r2, r1
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	460b      	mov	r3, r1
 800d95a:	4604      	mov	r4, r0
 800d95c:	d10e      	bne.n	800d97c <__ieee754_sqrt+0x30>
 800d95e:	4602      	mov	r2, r0
 800d960:	f7f2 fdba 	bl	80004d8 <__aeabi_dmul>
 800d964:	4602      	mov	r2, r0
 800d966:	460b      	mov	r3, r1
 800d968:	4630      	mov	r0, r6
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f2 fbfe 	bl	800016c <__adddf3>
 800d970:	4606      	mov	r6, r0
 800d972:	460f      	mov	r7, r1
 800d974:	4630      	mov	r0, r6
 800d976:	4639      	mov	r1, r7
 800d978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97c:	2900      	cmp	r1, #0
 800d97e:	dc0c      	bgt.n	800d99a <__ieee754_sqrt+0x4e>
 800d980:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800d984:	4302      	orrs	r2, r0
 800d986:	d0f5      	beq.n	800d974 <__ieee754_sqrt+0x28>
 800d988:	b189      	cbz	r1, 800d9ae <__ieee754_sqrt+0x62>
 800d98a:	4602      	mov	r2, r0
 800d98c:	f7f2 fbec 	bl	8000168 <__aeabi_dsub>
 800d990:	4602      	mov	r2, r0
 800d992:	460b      	mov	r3, r1
 800d994:	f7f2 feca 	bl	800072c <__aeabi_ddiv>
 800d998:	e7ea      	b.n	800d970 <__ieee754_sqrt+0x24>
 800d99a:	150a      	asrs	r2, r1, #20
 800d99c:	d115      	bne.n	800d9ca <__ieee754_sqrt+0x7e>
 800d99e:	2100      	movs	r1, #0
 800d9a0:	e009      	b.n	800d9b6 <__ieee754_sqrt+0x6a>
 800d9a2:	0ae3      	lsrs	r3, r4, #11
 800d9a4:	3a15      	subs	r2, #21
 800d9a6:	0564      	lsls	r4, r4, #21
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d0fa      	beq.n	800d9a2 <__ieee754_sqrt+0x56>
 800d9ac:	e7f7      	b.n	800d99e <__ieee754_sqrt+0x52>
 800d9ae:	460a      	mov	r2, r1
 800d9b0:	e7fa      	b.n	800d9a8 <__ieee754_sqrt+0x5c>
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	02d8      	lsls	r0, r3, #11
 800d9b8:	d5fb      	bpl.n	800d9b2 <__ieee754_sqrt+0x66>
 800d9ba:	1e48      	subs	r0, r1, #1
 800d9bc:	1a12      	subs	r2, r2, r0
 800d9be:	f1c1 0020 	rsb	r0, r1, #32
 800d9c2:	fa24 f000 	lsr.w	r0, r4, r0
 800d9c6:	4303      	orrs	r3, r0
 800d9c8:	408c      	lsls	r4, r1
 800d9ca:	2600      	movs	r6, #0
 800d9cc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800d9d0:	2116      	movs	r1, #22
 800d9d2:	07d2      	lsls	r2, r2, #31
 800d9d4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800d9d8:	4632      	mov	r2, r6
 800d9da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9e2:	bf5c      	itt	pl
 800d9e4:	005b      	lslpl	r3, r3, #1
 800d9e6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800d9ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9ee:	bf58      	it	pl
 800d9f0:	0064      	lslpl	r4, r4, #1
 800d9f2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800d9f6:	107f      	asrs	r7, r7, #1
 800d9f8:	0064      	lsls	r4, r4, #1
 800d9fa:	1815      	adds	r5, r2, r0
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	bfde      	ittt	le
 800da00:	182a      	addle	r2, r5, r0
 800da02:	1b5b      	suble	r3, r3, r5
 800da04:	1836      	addle	r6, r6, r0
 800da06:	0fe5      	lsrs	r5, r4, #31
 800da08:	3901      	subs	r1, #1
 800da0a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800da0e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800da12:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800da16:	d1f0      	bne.n	800d9fa <__ieee754_sqrt+0xae>
 800da18:	460d      	mov	r5, r1
 800da1a:	f04f 0a20 	mov.w	sl, #32
 800da1e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800da22:	429a      	cmp	r2, r3
 800da24:	eb01 0c00 	add.w	ip, r1, r0
 800da28:	db02      	blt.n	800da30 <__ieee754_sqrt+0xe4>
 800da2a:	d113      	bne.n	800da54 <__ieee754_sqrt+0x108>
 800da2c:	45a4      	cmp	ip, r4
 800da2e:	d811      	bhi.n	800da54 <__ieee754_sqrt+0x108>
 800da30:	f1bc 0f00 	cmp.w	ip, #0
 800da34:	eb0c 0100 	add.w	r1, ip, r0
 800da38:	da42      	bge.n	800dac0 <__ieee754_sqrt+0x174>
 800da3a:	2900      	cmp	r1, #0
 800da3c:	db40      	blt.n	800dac0 <__ieee754_sqrt+0x174>
 800da3e:	f102 0e01 	add.w	lr, r2, #1
 800da42:	1a9b      	subs	r3, r3, r2
 800da44:	4672      	mov	r2, lr
 800da46:	45a4      	cmp	ip, r4
 800da48:	bf88      	it	hi
 800da4a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800da4e:	eba4 040c 	sub.w	r4, r4, ip
 800da52:	4405      	add	r5, r0
 800da54:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800da58:	f1ba 0a01 	subs.w	sl, sl, #1
 800da5c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800da60:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800da64:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800da68:	d1db      	bne.n	800da22 <__ieee754_sqrt+0xd6>
 800da6a:	431c      	orrs	r4, r3
 800da6c:	d01a      	beq.n	800daa4 <__ieee754_sqrt+0x158>
 800da6e:	4c20      	ldr	r4, [pc, #128]	@ (800daf0 <__ieee754_sqrt+0x1a4>)
 800da70:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800daf4 <__ieee754_sqrt+0x1a8>
 800da74:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da78:	e9db 2300 	ldrd	r2, r3, [fp]
 800da7c:	f7f2 fb74 	bl	8000168 <__aeabi_dsub>
 800da80:	e9d4 8900 	ldrd	r8, r9, [r4]
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	4640      	mov	r0, r8
 800da8a:	4649      	mov	r1, r9
 800da8c:	f7f2 ffa0 	bl	80009d0 <__aeabi_dcmple>
 800da90:	b140      	cbz	r0, 800daa4 <__ieee754_sqrt+0x158>
 800da92:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da96:	e9db 2300 	ldrd	r2, r3, [fp]
 800da9a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800da9e:	d111      	bne.n	800dac4 <__ieee754_sqrt+0x178>
 800daa0:	4655      	mov	r5, sl
 800daa2:	3601      	adds	r6, #1
 800daa4:	1072      	asrs	r2, r6, #1
 800daa6:	086b      	lsrs	r3, r5, #1
 800daa8:	07f1      	lsls	r1, r6, #31
 800daaa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800daae:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dab2:	bf48      	it	mi
 800dab4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dab8:	4618      	mov	r0, r3
 800daba:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800dabe:	e757      	b.n	800d970 <__ieee754_sqrt+0x24>
 800dac0:	4696      	mov	lr, r2
 800dac2:	e7be      	b.n	800da42 <__ieee754_sqrt+0xf6>
 800dac4:	f7f2 fb52 	bl	800016c <__adddf3>
 800dac8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	4640      	mov	r0, r8
 800dad2:	4649      	mov	r1, r9
 800dad4:	f7f2 ff72 	bl	80009bc <__aeabi_dcmplt>
 800dad8:	b120      	cbz	r0, 800dae4 <__ieee754_sqrt+0x198>
 800dada:	1ca8      	adds	r0, r5, #2
 800dadc:	bf08      	it	eq
 800dade:	3601      	addeq	r6, #1
 800dae0:	3502      	adds	r5, #2
 800dae2:	e7df      	b.n	800daa4 <__ieee754_sqrt+0x158>
 800dae4:	1c6b      	adds	r3, r5, #1
 800dae6:	f023 0501 	bic.w	r5, r3, #1
 800daea:	e7db      	b.n	800daa4 <__ieee754_sqrt+0x158>
 800daec:	7ff00000 	.word	0x7ff00000
 800daf0:	200001e8 	.word	0x200001e8
 800daf4:	200001e0 	.word	0x200001e0

0800daf8 <__ieee754_atan2>:
 800daf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	4617      	mov	r7, r2
 800dafe:	4690      	mov	r8, r2
 800db00:	4699      	mov	r9, r3
 800db02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800db06:	427b      	negs	r3, r7
 800db08:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800dc90 <__ieee754_atan2+0x198>
 800db0c:	433b      	orrs	r3, r7
 800db0e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db12:	4553      	cmp	r3, sl
 800db14:	4604      	mov	r4, r0
 800db16:	460d      	mov	r5, r1
 800db18:	d809      	bhi.n	800db2e <__ieee754_atan2+0x36>
 800db1a:	4246      	negs	r6, r0
 800db1c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db20:	4306      	orrs	r6, r0
 800db22:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800db26:	4556      	cmp	r6, sl
 800db28:	468e      	mov	lr, r1
 800db2a:	4683      	mov	fp, r0
 800db2c:	d908      	bls.n	800db40 <__ieee754_atan2+0x48>
 800db2e:	4642      	mov	r2, r8
 800db30:	464b      	mov	r3, r9
 800db32:	4620      	mov	r0, r4
 800db34:	4629      	mov	r1, r5
 800db36:	f7f2 fb19 	bl	800016c <__adddf3>
 800db3a:	4604      	mov	r4, r0
 800db3c:	460d      	mov	r5, r1
 800db3e:	e016      	b.n	800db6e <__ieee754_atan2+0x76>
 800db40:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800db44:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800db48:	433e      	orrs	r6, r7
 800db4a:	d103      	bne.n	800db54 <__ieee754_atan2+0x5c>
 800db4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	f000 bdce 	b.w	800e6f0 <atan>
 800db54:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800db58:	f006 0602 	and.w	r6, r6, #2
 800db5c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800db60:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800db64:	d107      	bne.n	800db76 <__ieee754_atan2+0x7e>
 800db66:	2e02      	cmp	r6, #2
 800db68:	d064      	beq.n	800dc34 <__ieee754_atan2+0x13c>
 800db6a:	2e03      	cmp	r6, #3
 800db6c:	d066      	beq.n	800dc3c <__ieee754_atan2+0x144>
 800db6e:	4620      	mov	r0, r4
 800db70:	4629      	mov	r1, r5
 800db72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db76:	4317      	orrs	r7, r2
 800db78:	d106      	bne.n	800db88 <__ieee754_atan2+0x90>
 800db7a:	f1be 0f00 	cmp.w	lr, #0
 800db7e:	da68      	bge.n	800dc52 <__ieee754_atan2+0x15a>
 800db80:	a537      	add	r5, pc, #220	@ (adr r5, 800dc60 <__ieee754_atan2+0x168>)
 800db82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db86:	e7f2      	b.n	800db6e <__ieee754_atan2+0x76>
 800db88:	4552      	cmp	r2, sl
 800db8a:	d10f      	bne.n	800dbac <__ieee754_atan2+0xb4>
 800db8c:	4293      	cmp	r3, r2
 800db8e:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800db92:	d107      	bne.n	800dba4 <__ieee754_atan2+0xac>
 800db94:	2e02      	cmp	r6, #2
 800db96:	d855      	bhi.n	800dc44 <__ieee754_atan2+0x14c>
 800db98:	4b3e      	ldr	r3, [pc, #248]	@ (800dc94 <__ieee754_atan2+0x19c>)
 800db9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dba2:	e7e4      	b.n	800db6e <__ieee754_atan2+0x76>
 800dba4:	2e02      	cmp	r6, #2
 800dba6:	d851      	bhi.n	800dc4c <__ieee754_atan2+0x154>
 800dba8:	4b3b      	ldr	r3, [pc, #236]	@ (800dc98 <__ieee754_atan2+0x1a0>)
 800dbaa:	e7f6      	b.n	800db9a <__ieee754_atan2+0xa2>
 800dbac:	4553      	cmp	r3, sl
 800dbae:	d0e4      	beq.n	800db7a <__ieee754_atan2+0x82>
 800dbb0:	1a9b      	subs	r3, r3, r2
 800dbb2:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dbb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dbba:	da21      	bge.n	800dc00 <__ieee754_atan2+0x108>
 800dbbc:	f1b9 0f00 	cmp.w	r9, #0
 800dbc0:	da01      	bge.n	800dbc6 <__ieee754_atan2+0xce>
 800dbc2:	323c      	adds	r2, #60	@ 0x3c
 800dbc4:	db20      	blt.n	800dc08 <__ieee754_atan2+0x110>
 800dbc6:	4642      	mov	r2, r8
 800dbc8:	464b      	mov	r3, r9
 800dbca:	4620      	mov	r0, r4
 800dbcc:	4629      	mov	r1, r5
 800dbce:	f7f2 fdad 	bl	800072c <__aeabi_ddiv>
 800dbd2:	f000 ff1d 	bl	800ea10 <fabs>
 800dbd6:	f000 fd8b 	bl	800e6f0 <atan>
 800dbda:	4604      	mov	r4, r0
 800dbdc:	460d      	mov	r5, r1
 800dbde:	2e01      	cmp	r6, #1
 800dbe0:	d015      	beq.n	800dc0e <__ieee754_atan2+0x116>
 800dbe2:	2e02      	cmp	r6, #2
 800dbe4:	d017      	beq.n	800dc16 <__ieee754_atan2+0x11e>
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	d0c1      	beq.n	800db6e <__ieee754_atan2+0x76>
 800dbea:	a31f      	add	r3, pc, #124	@ (adr r3, 800dc68 <__ieee754_atan2+0x170>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	4629      	mov	r1, r5
 800dbf4:	f7f2 fab8 	bl	8000168 <__aeabi_dsub>
 800dbf8:	a31d      	add	r3, pc, #116	@ (adr r3, 800dc70 <__ieee754_atan2+0x178>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	e016      	b.n	800dc2e <__ieee754_atan2+0x136>
 800dc00:	a51d      	add	r5, pc, #116	@ (adr r5, 800dc78 <__ieee754_atan2+0x180>)
 800dc02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc06:	e7ea      	b.n	800dbde <__ieee754_atan2+0xe6>
 800dc08:	2400      	movs	r4, #0
 800dc0a:	2500      	movs	r5, #0
 800dc0c:	e7e7      	b.n	800dbde <__ieee754_atan2+0xe6>
 800dc0e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800dc12:	461d      	mov	r5, r3
 800dc14:	e7ab      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc16:	a314      	add	r3, pc, #80	@ (adr r3, 800dc68 <__ieee754_atan2+0x170>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7f2 faa2 	bl	8000168 <__aeabi_dsub>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	a111      	add	r1, pc, #68	@ (adr r1, 800dc70 <__ieee754_atan2+0x178>)
 800dc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc2e:	f7f2 fa9b 	bl	8000168 <__aeabi_dsub>
 800dc32:	e782      	b.n	800db3a <__ieee754_atan2+0x42>
 800dc34:	a50e      	add	r5, pc, #56	@ (adr r5, 800dc70 <__ieee754_atan2+0x178>)
 800dc36:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc3a:	e798      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc3c:	a510      	add	r5, pc, #64	@ (adr r5, 800dc80 <__ieee754_atan2+0x188>)
 800dc3e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc42:	e794      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc44:	a510      	add	r5, pc, #64	@ (adr r5, 800dc88 <__ieee754_atan2+0x190>)
 800dc46:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc4a:	e790      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc4c:	2400      	movs	r4, #0
 800dc4e:	2500      	movs	r5, #0
 800dc50:	e78d      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc52:	a509      	add	r5, pc, #36	@ (adr r5, 800dc78 <__ieee754_atan2+0x180>)
 800dc54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc58:	e789      	b.n	800db6e <__ieee754_atan2+0x76>
 800dc5a:	bf00      	nop
 800dc5c:	f3af 8000 	nop.w
 800dc60:	54442d18 	.word	0x54442d18
 800dc64:	bff921fb 	.word	0xbff921fb
 800dc68:	33145c07 	.word	0x33145c07
 800dc6c:	3ca1a626 	.word	0x3ca1a626
 800dc70:	54442d18 	.word	0x54442d18
 800dc74:	400921fb 	.word	0x400921fb
 800dc78:	54442d18 	.word	0x54442d18
 800dc7c:	3ff921fb 	.word	0x3ff921fb
 800dc80:	54442d18 	.word	0x54442d18
 800dc84:	c00921fb 	.word	0xc00921fb
 800dc88:	54442d18 	.word	0x54442d18
 800dc8c:	3fe921fb 	.word	0x3fe921fb
 800dc90:	7ff00000 	.word	0x7ff00000
 800dc94:	0800fc08 	.word	0x0800fc08
 800dc98:	0800fbf0 	.word	0x0800fbf0
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <__ieee754_pow>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	b091      	sub	sp, #68	@ 0x44
 800dca6:	e9cd 2300 	strd	r2, r3, [sp]
 800dcaa:	468b      	mov	fp, r1
 800dcac:	e9dd 1800 	ldrd	r1, r8, [sp]
 800dcb0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800dcb4:	4682      	mov	sl, r0
 800dcb6:	ea57 0001 	orrs.w	r0, r7, r1
 800dcba:	d112      	bne.n	800dce2 <__ieee754_pow+0x42>
 800dcbc:	4653      	mov	r3, sl
 800dcbe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800dcc2:	18db      	adds	r3, r3, r3
 800dcc4:	4152      	adcs	r2, r2
 800dcc6:	4298      	cmp	r0, r3
 800dcc8:	4b91      	ldr	r3, [pc, #580]	@ (800df10 <__ieee754_pow+0x270>)
 800dcca:	4193      	sbcs	r3, r2
 800dccc:	f080 84ce 	bcs.w	800e66c <__ieee754_pow+0x9cc>
 800dcd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	4659      	mov	r1, fp
 800dcd8:	f7f2 fa48 	bl	800016c <__adddf3>
 800dcdc:	b011      	add	sp, #68	@ 0x44
 800dcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce2:	4b8c      	ldr	r3, [pc, #560]	@ (800df14 <__ieee754_pow+0x274>)
 800dce4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800dce8:	429e      	cmp	r6, r3
 800dcea:	465d      	mov	r5, fp
 800dcec:	46d1      	mov	r9, sl
 800dcee:	d807      	bhi.n	800dd00 <__ieee754_pow+0x60>
 800dcf0:	d102      	bne.n	800dcf8 <__ieee754_pow+0x58>
 800dcf2:	f1ba 0f00 	cmp.w	sl, #0
 800dcf6:	d1eb      	bne.n	800dcd0 <__ieee754_pow+0x30>
 800dcf8:	429f      	cmp	r7, r3
 800dcfa:	d801      	bhi.n	800dd00 <__ieee754_pow+0x60>
 800dcfc:	d10f      	bne.n	800dd1e <__ieee754_pow+0x7e>
 800dcfe:	b171      	cbz	r1, 800dd1e <__ieee754_pow+0x7e>
 800dd00:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800dd04:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800dd08:	ea55 0509 	orrs.w	r5, r5, r9
 800dd0c:	d1e0      	bne.n	800dcd0 <__ieee754_pow+0x30>
 800dd0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd12:	18db      	adds	r3, r3, r3
 800dd14:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dd18:	4152      	adcs	r2, r2
 800dd1a:	429d      	cmp	r5, r3
 800dd1c:	e7d4      	b.n	800dcc8 <__ieee754_pow+0x28>
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	4633      	mov	r3, r6
 800dd22:	da39      	bge.n	800dd98 <__ieee754_pow+0xf8>
 800dd24:	4a7c      	ldr	r2, [pc, #496]	@ (800df18 <__ieee754_pow+0x278>)
 800dd26:	4297      	cmp	r7, r2
 800dd28:	d84e      	bhi.n	800ddc8 <__ieee754_pow+0x128>
 800dd2a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800dd2e:	4297      	cmp	r7, r2
 800dd30:	f240 84ab 	bls.w	800e68a <__ieee754_pow+0x9ea>
 800dd34:	153a      	asrs	r2, r7, #20
 800dd36:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dd3a:	2a14      	cmp	r2, #20
 800dd3c:	dd0f      	ble.n	800dd5e <__ieee754_pow+0xbe>
 800dd3e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800dd42:	fa21 f402 	lsr.w	r4, r1, r2
 800dd46:	fa04 f202 	lsl.w	r2, r4, r2
 800dd4a:	428a      	cmp	r2, r1
 800dd4c:	f040 849d 	bne.w	800e68a <__ieee754_pow+0x9ea>
 800dd50:	f004 0401 	and.w	r4, r4, #1
 800dd54:	f1c4 0402 	rsb	r4, r4, #2
 800dd58:	2900      	cmp	r1, #0
 800dd5a:	d15a      	bne.n	800de12 <__ieee754_pow+0x172>
 800dd5c:	e00e      	b.n	800dd7c <__ieee754_pow+0xdc>
 800dd5e:	2900      	cmp	r1, #0
 800dd60:	d156      	bne.n	800de10 <__ieee754_pow+0x170>
 800dd62:	f1c2 0214 	rsb	r2, r2, #20
 800dd66:	fa47 f402 	asr.w	r4, r7, r2
 800dd6a:	fa04 f202 	lsl.w	r2, r4, r2
 800dd6e:	42ba      	cmp	r2, r7
 800dd70:	f040 8488 	bne.w	800e684 <__ieee754_pow+0x9e4>
 800dd74:	f004 0401 	and.w	r4, r4, #1
 800dd78:	f1c4 0402 	rsb	r4, r4, #2
 800dd7c:	4a67      	ldr	r2, [pc, #412]	@ (800df1c <__ieee754_pow+0x27c>)
 800dd7e:	4297      	cmp	r7, r2
 800dd80:	d130      	bne.n	800dde4 <__ieee754_pow+0x144>
 800dd82:	f1b8 0f00 	cmp.w	r8, #0
 800dd86:	f280 8479 	bge.w	800e67c <__ieee754_pow+0x9dc>
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	2000      	movs	r0, #0
 800dd90:	4962      	ldr	r1, [pc, #392]	@ (800df1c <__ieee754_pow+0x27c>)
 800dd92:	f7f2 fccb 	bl	800072c <__aeabi_ddiv>
 800dd96:	e7a1      	b.n	800dcdc <__ieee754_pow+0x3c>
 800dd98:	2400      	movs	r4, #0
 800dd9a:	2900      	cmp	r1, #0
 800dd9c:	d139      	bne.n	800de12 <__ieee754_pow+0x172>
 800dd9e:	4a5d      	ldr	r2, [pc, #372]	@ (800df14 <__ieee754_pow+0x274>)
 800dda0:	4297      	cmp	r7, r2
 800dda2:	d1eb      	bne.n	800dd7c <__ieee754_pow+0xdc>
 800dda4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800dda8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ddac:	ea53 0309 	orrs.w	r3, r3, r9
 800ddb0:	f000 845c 	beq.w	800e66c <__ieee754_pow+0x9cc>
 800ddb4:	4b5a      	ldr	r3, [pc, #360]	@ (800df20 <__ieee754_pow+0x280>)
 800ddb6:	429e      	cmp	r6, r3
 800ddb8:	d908      	bls.n	800ddcc <__ieee754_pow+0x12c>
 800ddba:	f1b8 0f00 	cmp.w	r8, #0
 800ddbe:	f2c0 8459 	blt.w	800e674 <__ieee754_pow+0x9d4>
 800ddc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddc6:	e789      	b.n	800dcdc <__ieee754_pow+0x3c>
 800ddc8:	2402      	movs	r4, #2
 800ddca:	e7e6      	b.n	800dd9a <__ieee754_pow+0xfa>
 800ddcc:	f1b8 0f00 	cmp.w	r8, #0
 800ddd0:	f04f 0000 	mov.w	r0, #0
 800ddd4:	f04f 0100 	mov.w	r1, #0
 800ddd8:	da80      	bge.n	800dcdc <__ieee754_pow+0x3c>
 800ddda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ddde:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dde2:	e77b      	b.n	800dcdc <__ieee754_pow+0x3c>
 800dde4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800dde8:	d106      	bne.n	800ddf8 <__ieee754_pow+0x158>
 800ddea:	4652      	mov	r2, sl
 800ddec:	465b      	mov	r3, fp
 800ddee:	4650      	mov	r0, sl
 800ddf0:	4659      	mov	r1, fp
 800ddf2:	f7f2 fb71 	bl	80004d8 <__aeabi_dmul>
 800ddf6:	e771      	b.n	800dcdc <__ieee754_pow+0x3c>
 800ddf8:	4a4a      	ldr	r2, [pc, #296]	@ (800df24 <__ieee754_pow+0x284>)
 800ddfa:	4590      	cmp	r8, r2
 800ddfc:	d109      	bne.n	800de12 <__ieee754_pow+0x172>
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	db07      	blt.n	800de12 <__ieee754_pow+0x172>
 800de02:	4650      	mov	r0, sl
 800de04:	4659      	mov	r1, fp
 800de06:	b011      	add	sp, #68	@ 0x44
 800de08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0c:	f7ff bd9e 	b.w	800d94c <__ieee754_sqrt>
 800de10:	2400      	movs	r4, #0
 800de12:	4650      	mov	r0, sl
 800de14:	4659      	mov	r1, fp
 800de16:	9302      	str	r3, [sp, #8]
 800de18:	f000 fdfa 	bl	800ea10 <fabs>
 800de1c:	9b02      	ldr	r3, [sp, #8]
 800de1e:	f1b9 0f00 	cmp.w	r9, #0
 800de22:	d127      	bne.n	800de74 <__ieee754_pow+0x1d4>
 800de24:	4a3d      	ldr	r2, [pc, #244]	@ (800df1c <__ieee754_pow+0x27c>)
 800de26:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800de2a:	4594      	cmp	ip, r2
 800de2c:	d000      	beq.n	800de30 <__ieee754_pow+0x190>
 800de2e:	bb0e      	cbnz	r6, 800de74 <__ieee754_pow+0x1d4>
 800de30:	f1b8 0f00 	cmp.w	r8, #0
 800de34:	da05      	bge.n	800de42 <__ieee754_pow+0x1a2>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	2000      	movs	r0, #0
 800de3c:	4937      	ldr	r1, [pc, #220]	@ (800df1c <__ieee754_pow+0x27c>)
 800de3e:	f7f2 fc75 	bl	800072c <__aeabi_ddiv>
 800de42:	2d00      	cmp	r5, #0
 800de44:	f6bf af4a 	bge.w	800dcdc <__ieee754_pow+0x3c>
 800de48:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800de4c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800de50:	4326      	orrs	r6, r4
 800de52:	d108      	bne.n	800de66 <__ieee754_pow+0x1c6>
 800de54:	4602      	mov	r2, r0
 800de56:	460b      	mov	r3, r1
 800de58:	4610      	mov	r0, r2
 800de5a:	4619      	mov	r1, r3
 800de5c:	f7f2 f984 	bl	8000168 <__aeabi_dsub>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	e795      	b.n	800dd92 <__ieee754_pow+0xf2>
 800de66:	2c01      	cmp	r4, #1
 800de68:	f47f af38 	bne.w	800dcdc <__ieee754_pow+0x3c>
 800de6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de70:	4619      	mov	r1, r3
 800de72:	e733      	b.n	800dcdc <__ieee754_pow+0x3c>
 800de74:	0fea      	lsrs	r2, r5, #31
 800de76:	3a01      	subs	r2, #1
 800de78:	ea52 0c04 	orrs.w	ip, r2, r4
 800de7c:	d102      	bne.n	800de84 <__ieee754_pow+0x1e4>
 800de7e:	4652      	mov	r2, sl
 800de80:	465b      	mov	r3, fp
 800de82:	e7e9      	b.n	800de58 <__ieee754_pow+0x1b8>
 800de84:	f04f 0900 	mov.w	r9, #0
 800de88:	3c01      	subs	r4, #1
 800de8a:	4314      	orrs	r4, r2
 800de8c:	bf14      	ite	ne
 800de8e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800df1c <__ieee754_pow+0x27c>
 800de92:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800df28 <__ieee754_pow+0x288>
 800de96:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800de9a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800de9e:	f240 8107 	bls.w	800e0b0 <__ieee754_pow+0x410>
 800dea2:	4b22      	ldr	r3, [pc, #136]	@ (800df2c <__ieee754_pow+0x28c>)
 800dea4:	429f      	cmp	r7, r3
 800dea6:	4b1e      	ldr	r3, [pc, #120]	@ (800df20 <__ieee754_pow+0x280>)
 800dea8:	d913      	bls.n	800ded2 <__ieee754_pow+0x232>
 800deaa:	429e      	cmp	r6, r3
 800deac:	d808      	bhi.n	800dec0 <__ieee754_pow+0x220>
 800deae:	f1b8 0f00 	cmp.w	r8, #0
 800deb2:	da08      	bge.n	800dec6 <__ieee754_pow+0x226>
 800deb4:	2000      	movs	r0, #0
 800deb6:	b011      	add	sp, #68	@ 0x44
 800deb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	f000 be44 	b.w	800eb48 <__math_oflow>
 800dec0:	f1b8 0f00 	cmp.w	r8, #0
 800dec4:	dcf6      	bgt.n	800deb4 <__ieee754_pow+0x214>
 800dec6:	2000      	movs	r0, #0
 800dec8:	b011      	add	sp, #68	@ 0x44
 800deca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dece:	f000 be36 	b.w	800eb3e <__math_uflow>
 800ded2:	429e      	cmp	r6, r3
 800ded4:	d20c      	bcs.n	800def0 <__ieee754_pow+0x250>
 800ded6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deda:	2200      	movs	r2, #0
 800dedc:	2300      	movs	r3, #0
 800dede:	f7f2 fd6d 	bl	80009bc <__aeabi_dcmplt>
 800dee2:	3800      	subs	r0, #0
 800dee4:	bf18      	it	ne
 800dee6:	2001      	movne	r0, #1
 800dee8:	f1b8 0f00 	cmp.w	r8, #0
 800deec:	daec      	bge.n	800dec8 <__ieee754_pow+0x228>
 800deee:	e7e2      	b.n	800deb6 <__ieee754_pow+0x216>
 800def0:	4b0a      	ldr	r3, [pc, #40]	@ (800df1c <__ieee754_pow+0x27c>)
 800def2:	2200      	movs	r2, #0
 800def4:	429e      	cmp	r6, r3
 800def6:	d91b      	bls.n	800df30 <__ieee754_pow+0x290>
 800def8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800defc:	2300      	movs	r3, #0
 800defe:	f7f2 fd5d 	bl	80009bc <__aeabi_dcmplt>
 800df02:	3800      	subs	r0, #0
 800df04:	bf18      	it	ne
 800df06:	2001      	movne	r0, #1
 800df08:	f1b8 0f00 	cmp.w	r8, #0
 800df0c:	dcd3      	bgt.n	800deb6 <__ieee754_pow+0x216>
 800df0e:	e7db      	b.n	800dec8 <__ieee754_pow+0x228>
 800df10:	fff00000 	.word	0xfff00000
 800df14:	7ff00000 	.word	0x7ff00000
 800df18:	433fffff 	.word	0x433fffff
 800df1c:	3ff00000 	.word	0x3ff00000
 800df20:	3fefffff 	.word	0x3fefffff
 800df24:	3fe00000 	.word	0x3fe00000
 800df28:	bff00000 	.word	0xbff00000
 800df2c:	43f00000 	.word	0x43f00000
 800df30:	4b5b      	ldr	r3, [pc, #364]	@ (800e0a0 <__ieee754_pow+0x400>)
 800df32:	f7f2 f919 	bl	8000168 <__aeabi_dsub>
 800df36:	a352      	add	r3, pc, #328	@ (adr r3, 800e080 <__ieee754_pow+0x3e0>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	4604      	mov	r4, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	f7f2 faca 	bl	80004d8 <__aeabi_dmul>
 800df44:	a350      	add	r3, pc, #320	@ (adr r3, 800e088 <__ieee754_pow+0x3e8>)
 800df46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4a:	4606      	mov	r6, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 fac1 	bl	80004d8 <__aeabi_dmul>
 800df56:	2200      	movs	r2, #0
 800df58:	4682      	mov	sl, r0
 800df5a:	468b      	mov	fp, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	4b50      	ldr	r3, [pc, #320]	@ (800e0a4 <__ieee754_pow+0x404>)
 800df62:	f7f2 fab9 	bl	80004d8 <__aeabi_dmul>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	a149      	add	r1, pc, #292	@ (adr r1, 800e090 <__ieee754_pow+0x3f0>)
 800df6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df70:	f7f2 f8fa 	bl	8000168 <__aeabi_dsub>
 800df74:	4622      	mov	r2, r4
 800df76:	462b      	mov	r3, r5
 800df78:	f7f2 faae 	bl	80004d8 <__aeabi_dmul>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	2000      	movs	r0, #0
 800df82:	4949      	ldr	r1, [pc, #292]	@ (800e0a8 <__ieee754_pow+0x408>)
 800df84:	f7f2 f8f0 	bl	8000168 <__aeabi_dsub>
 800df88:	4622      	mov	r2, r4
 800df8a:	4680      	mov	r8, r0
 800df8c:	4689      	mov	r9, r1
 800df8e:	462b      	mov	r3, r5
 800df90:	4620      	mov	r0, r4
 800df92:	4629      	mov	r1, r5
 800df94:	f7f2 faa0 	bl	80004d8 <__aeabi_dmul>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4640      	mov	r0, r8
 800df9e:	4649      	mov	r1, r9
 800dfa0:	f7f2 fa9a 	bl	80004d8 <__aeabi_dmul>
 800dfa4:	a33c      	add	r3, pc, #240	@ (adr r3, 800e098 <__ieee754_pow+0x3f8>)
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	f7f2 fa95 	bl	80004d8 <__aeabi_dmul>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	4659      	mov	r1, fp
 800dfb6:	f7f2 f8d7 	bl	8000168 <__aeabi_dsub>
 800dfba:	2400      	movs	r4, #0
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	4689      	mov	r9, r1
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	f7f2 f8d0 	bl	800016c <__adddf3>
 800dfcc:	4632      	mov	r2, r6
 800dfce:	463b      	mov	r3, r7
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	460d      	mov	r5, r1
 800dfd4:	f7f2 f8c8 	bl	8000168 <__aeabi_dsub>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4640      	mov	r0, r8
 800dfde:	4649      	mov	r1, r9
 800dfe0:	f7f2 f8c2 	bl	8000168 <__aeabi_dsub>
 800dfe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfec:	2300      	movs	r3, #0
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
 800dff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dffc:	4652      	mov	r2, sl
 800dffe:	465b      	mov	r3, fp
 800e000:	f7f2 f8b2 	bl	8000168 <__aeabi_dsub>
 800e004:	4622      	mov	r2, r4
 800e006:	462b      	mov	r3, r5
 800e008:	f7f2 fa66 	bl	80004d8 <__aeabi_dmul>
 800e00c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e010:	4680      	mov	r8, r0
 800e012:	4689      	mov	r9, r1
 800e014:	4630      	mov	r0, r6
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 fa5e 	bl	80004d8 <__aeabi_dmul>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4640      	mov	r0, r8
 800e022:	4649      	mov	r1, r9
 800e024:	f7f2 f8a2 	bl	800016c <__adddf3>
 800e028:	4652      	mov	r2, sl
 800e02a:	465b      	mov	r3, fp
 800e02c:	4606      	mov	r6, r0
 800e02e:	460f      	mov	r7, r1
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7f2 fa50 	bl	80004d8 <__aeabi_dmul>
 800e038:	460b      	mov	r3, r1
 800e03a:	4602      	mov	r2, r0
 800e03c:	4680      	mov	r8, r0
 800e03e:	4689      	mov	r9, r1
 800e040:	4630      	mov	r0, r6
 800e042:	4639      	mov	r1, r7
 800e044:	f7f2 f892 	bl	800016c <__adddf3>
 800e048:	4b18      	ldr	r3, [pc, #96]	@ (800e0ac <__ieee754_pow+0x40c>)
 800e04a:	4604      	mov	r4, r0
 800e04c:	4299      	cmp	r1, r3
 800e04e:	460d      	mov	r5, r1
 800e050:	468a      	mov	sl, r1
 800e052:	468b      	mov	fp, r1
 800e054:	f340 82e0 	ble.w	800e618 <__ieee754_pow+0x978>
 800e058:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e05c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e060:	4303      	orrs	r3, r0
 800e062:	f000 81df 	beq.w	800e424 <__ieee754_pow+0x784>
 800e066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e06a:	2200      	movs	r2, #0
 800e06c:	2300      	movs	r3, #0
 800e06e:	f7f2 fca5 	bl	80009bc <__aeabi_dcmplt>
 800e072:	3800      	subs	r0, #0
 800e074:	bf18      	it	ne
 800e076:	2001      	movne	r0, #1
 800e078:	e71d      	b.n	800deb6 <__ieee754_pow+0x216>
 800e07a:	bf00      	nop
 800e07c:	f3af 8000 	nop.w
 800e080:	60000000 	.word	0x60000000
 800e084:	3ff71547 	.word	0x3ff71547
 800e088:	f85ddf44 	.word	0xf85ddf44
 800e08c:	3e54ae0b 	.word	0x3e54ae0b
 800e090:	55555555 	.word	0x55555555
 800e094:	3fd55555 	.word	0x3fd55555
 800e098:	652b82fe 	.word	0x652b82fe
 800e09c:	3ff71547 	.word	0x3ff71547
 800e0a0:	3ff00000 	.word	0x3ff00000
 800e0a4:	3fd00000 	.word	0x3fd00000
 800e0a8:	3fe00000 	.word	0x3fe00000
 800e0ac:	408fffff 	.word	0x408fffff
 800e0b0:	4ad3      	ldr	r2, [pc, #844]	@ (800e400 <__ieee754_pow+0x760>)
 800e0b2:	402a      	ands	r2, r5
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	f040 817a 	bne.w	800e3ae <__ieee754_pow+0x70e>
 800e0ba:	4bd2      	ldr	r3, [pc, #840]	@ (800e404 <__ieee754_pow+0x764>)
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f7f2 fa0b 	bl	80004d8 <__aeabi_dmul>
 800e0c2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	151a      	asrs	r2, r3, #20
 800e0ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e0ce:	4422      	add	r2, r4
 800e0d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800e0d2:	4acd      	ldr	r2, [pc, #820]	@ (800e408 <__ieee754_pow+0x768>)
 800e0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e0e2:	dd08      	ble.n	800e0f6 <__ieee754_pow+0x456>
 800e0e4:	4ac9      	ldr	r2, [pc, #804]	@ (800e40c <__ieee754_pow+0x76c>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	f340 8163 	ble.w	800e3b2 <__ieee754_pow+0x712>
 800e0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0ee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0f6:	2600      	movs	r6, #0
 800e0f8:	00f3      	lsls	r3, r6, #3
 800e0fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0fc:	4bc4      	ldr	r3, [pc, #784]	@ (800e410 <__ieee754_pow+0x770>)
 800e0fe:	4629      	mov	r1, r5
 800e100:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e104:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e108:	461a      	mov	r2, r3
 800e10a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800e10e:	4623      	mov	r3, r4
 800e110:	4682      	mov	sl, r0
 800e112:	f7f2 f829 	bl	8000168 <__aeabi_dsub>
 800e116:	4652      	mov	r2, sl
 800e118:	462b      	mov	r3, r5
 800e11a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e11e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e122:	f7f2 f823 	bl	800016c <__adddf3>
 800e126:	4602      	mov	r2, r0
 800e128:	460b      	mov	r3, r1
 800e12a:	2000      	movs	r0, #0
 800e12c:	49b9      	ldr	r1, [pc, #740]	@ (800e414 <__ieee754_pow+0x774>)
 800e12e:	f7f2 fafd 	bl	800072c <__aeabi_ddiv>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e13a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e13e:	f7f2 f9cb 	bl	80004d8 <__aeabi_dmul>
 800e142:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e146:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e14a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e14e:	2300      	movs	r3, #0
 800e150:	2200      	movs	r2, #0
 800e152:	46ab      	mov	fp, r5
 800e154:	106d      	asrs	r5, r5, #1
 800e156:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e15a:	9304      	str	r3, [sp, #16]
 800e15c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e160:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e164:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800e168:	4640      	mov	r0, r8
 800e16a:	4649      	mov	r1, r9
 800e16c:	4614      	mov	r4, r2
 800e16e:	461d      	mov	r5, r3
 800e170:	f7f2 f9b2 	bl	80004d8 <__aeabi_dmul>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e17c:	f7f1 fff4 	bl	8000168 <__aeabi_dsub>
 800e180:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e184:	4606      	mov	r6, r0
 800e186:	460f      	mov	r7, r1
 800e188:	4620      	mov	r0, r4
 800e18a:	4629      	mov	r1, r5
 800e18c:	f7f1 ffec 	bl	8000168 <__aeabi_dsub>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4650      	mov	r0, sl
 800e196:	4659      	mov	r1, fp
 800e198:	f7f1 ffe6 	bl	8000168 <__aeabi_dsub>
 800e19c:	4642      	mov	r2, r8
 800e19e:	464b      	mov	r3, r9
 800e1a0:	f7f2 f99a 	bl	80004d8 <__aeabi_dmul>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	f7f1 ffdc 	bl	8000168 <__aeabi_dsub>
 800e1b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1b4:	f7f2 f990 	bl	80004d8 <__aeabi_dmul>
 800e1b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f7f2 f988 	bl	80004d8 <__aeabi_dmul>
 800e1c8:	a37b      	add	r3, pc, #492	@ (adr r3, 800e3b8 <__ieee754_pow+0x718>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	f7f2 f981 	bl	80004d8 <__aeabi_dmul>
 800e1d6:	a37a      	add	r3, pc, #488	@ (adr r3, 800e3c0 <__ieee754_pow+0x720>)
 800e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1dc:	f7f1 ffc6 	bl	800016c <__adddf3>
 800e1e0:	4622      	mov	r2, r4
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	f7f2 f978 	bl	80004d8 <__aeabi_dmul>
 800e1e8:	a377      	add	r3, pc, #476	@ (adr r3, 800e3c8 <__ieee754_pow+0x728>)
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f1 ffbd 	bl	800016c <__adddf3>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	f7f2 f96f 	bl	80004d8 <__aeabi_dmul>
 800e1fa:	a375      	add	r3, pc, #468	@ (adr r3, 800e3d0 <__ieee754_pow+0x730>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f1 ffb4 	bl	800016c <__adddf3>
 800e204:	4622      	mov	r2, r4
 800e206:	462b      	mov	r3, r5
 800e208:	f7f2 f966 	bl	80004d8 <__aeabi_dmul>
 800e20c:	a372      	add	r3, pc, #456	@ (adr r3, 800e3d8 <__ieee754_pow+0x738>)
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f7f1 ffab 	bl	800016c <__adddf3>
 800e216:	4622      	mov	r2, r4
 800e218:	462b      	mov	r3, r5
 800e21a:	f7f2 f95d 	bl	80004d8 <__aeabi_dmul>
 800e21e:	a370      	add	r3, pc, #448	@ (adr r3, 800e3e0 <__ieee754_pow+0x740>)
 800e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e224:	f7f1 ffa2 	bl	800016c <__adddf3>
 800e228:	4622      	mov	r2, r4
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	462b      	mov	r3, r5
 800e230:	4620      	mov	r0, r4
 800e232:	4629      	mov	r1, r5
 800e234:	f7f2 f950 	bl	80004d8 <__aeabi_dmul>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4630      	mov	r0, r6
 800e23e:	4639      	mov	r1, r7
 800e240:	f7f2 f94a 	bl	80004d8 <__aeabi_dmul>
 800e244:	4604      	mov	r4, r0
 800e246:	460d      	mov	r5, r1
 800e248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e24c:	4642      	mov	r2, r8
 800e24e:	464b      	mov	r3, r9
 800e250:	f7f1 ff8c 	bl	800016c <__adddf3>
 800e254:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e258:	f7f2 f93e 	bl	80004d8 <__aeabi_dmul>
 800e25c:	4622      	mov	r2, r4
 800e25e:	462b      	mov	r3, r5
 800e260:	f7f1 ff84 	bl	800016c <__adddf3>
 800e264:	4642      	mov	r2, r8
 800e266:	4682      	mov	sl, r0
 800e268:	468b      	mov	fp, r1
 800e26a:	464b      	mov	r3, r9
 800e26c:	4640      	mov	r0, r8
 800e26e:	4649      	mov	r1, r9
 800e270:	f7f2 f932 	bl	80004d8 <__aeabi_dmul>
 800e274:	2200      	movs	r2, #0
 800e276:	4b68      	ldr	r3, [pc, #416]	@ (800e418 <__ieee754_pow+0x778>)
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	f7f1 ff76 	bl	800016c <__adddf3>
 800e280:	4652      	mov	r2, sl
 800e282:	465b      	mov	r3, fp
 800e284:	f7f1 ff72 	bl	800016c <__adddf3>
 800e288:	2400      	movs	r4, #0
 800e28a:	460d      	mov	r5, r1
 800e28c:	4622      	mov	r2, r4
 800e28e:	460b      	mov	r3, r1
 800e290:	4640      	mov	r0, r8
 800e292:	4649      	mov	r1, r9
 800e294:	f7f2 f920 	bl	80004d8 <__aeabi_dmul>
 800e298:	2200      	movs	r2, #0
 800e29a:	4680      	mov	r8, r0
 800e29c:	4689      	mov	r9, r1
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4b5d      	ldr	r3, [pc, #372]	@ (800e418 <__ieee754_pow+0x778>)
 800e2a4:	f7f1 ff60 	bl	8000168 <__aeabi_dsub>
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	f7f1 ff5c 	bl	8000168 <__aeabi_dsub>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4650      	mov	r0, sl
 800e2b6:	4659      	mov	r1, fp
 800e2b8:	f7f1 ff56 	bl	8000168 <__aeabi_dsub>
 800e2bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2c0:	f7f2 f90a 	bl	80004d8 <__aeabi_dmul>
 800e2c4:	4622      	mov	r2, r4
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	460f      	mov	r7, r1
 800e2ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e2ce:	462b      	mov	r3, r5
 800e2d0:	f7f2 f902 	bl	80004d8 <__aeabi_dmul>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4630      	mov	r0, r6
 800e2da:	4639      	mov	r1, r7
 800e2dc:	f7f1 ff46 	bl	800016c <__adddf3>
 800e2e0:	2400      	movs	r4, #0
 800e2e2:	4606      	mov	r6, r0
 800e2e4:	460f      	mov	r7, r1
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	f7f1 ff3d 	bl	800016c <__adddf3>
 800e2f2:	a33d      	add	r3, pc, #244	@ (adr r3, 800e3e8 <__ieee754_pow+0x748>)
 800e2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	f7f2 f8ec 	bl	80004d8 <__aeabi_dmul>
 800e300:	4642      	mov	r2, r8
 800e302:	464b      	mov	r3, r9
 800e304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e308:	4620      	mov	r0, r4
 800e30a:	4629      	mov	r1, r5
 800e30c:	f7f1 ff2c 	bl	8000168 <__aeabi_dsub>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	4630      	mov	r0, r6
 800e316:	4639      	mov	r1, r7
 800e318:	f7f1 ff26 	bl	8000168 <__aeabi_dsub>
 800e31c:	a334      	add	r3, pc, #208	@ (adr r3, 800e3f0 <__ieee754_pow+0x750>)
 800e31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e322:	f7f2 f8d9 	bl	80004d8 <__aeabi_dmul>
 800e326:	a334      	add	r3, pc, #208	@ (adr r3, 800e3f8 <__ieee754_pow+0x758>)
 800e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32c:	4606      	mov	r6, r0
 800e32e:	460f      	mov	r7, r1
 800e330:	4620      	mov	r0, r4
 800e332:	4629      	mov	r1, r5
 800e334:	f7f2 f8d0 	bl	80004d8 <__aeabi_dmul>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	4630      	mov	r0, r6
 800e33e:	4639      	mov	r1, r7
 800e340:	f7f1 ff14 	bl	800016c <__adddf3>
 800e344:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e346:	4b35      	ldr	r3, [pc, #212]	@ (800e41c <__ieee754_pow+0x77c>)
 800e348:	2400      	movs	r4, #0
 800e34a:	4413      	add	r3, r2
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	f7f1 ff0c 	bl	800016c <__adddf3>
 800e354:	4682      	mov	sl, r0
 800e356:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e358:	468b      	mov	fp, r1
 800e35a:	f7f2 f853 	bl	8000404 <__aeabi_i2d>
 800e35e:	4606      	mov	r6, r0
 800e360:	460f      	mov	r7, r1
 800e362:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e364:	4b2e      	ldr	r3, [pc, #184]	@ (800e420 <__ieee754_pow+0x780>)
 800e366:	4413      	add	r3, r2
 800e368:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e36c:	4652      	mov	r2, sl
 800e36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e372:	465b      	mov	r3, fp
 800e374:	f7f1 fefa 	bl	800016c <__adddf3>
 800e378:	4642      	mov	r2, r8
 800e37a:	464b      	mov	r3, r9
 800e37c:	f7f1 fef6 	bl	800016c <__adddf3>
 800e380:	4632      	mov	r2, r6
 800e382:	463b      	mov	r3, r7
 800e384:	f7f1 fef2 	bl	800016c <__adddf3>
 800e388:	4632      	mov	r2, r6
 800e38a:	463b      	mov	r3, r7
 800e38c:	4620      	mov	r0, r4
 800e38e:	460d      	mov	r5, r1
 800e390:	f7f1 feea 	bl	8000168 <__aeabi_dsub>
 800e394:	4642      	mov	r2, r8
 800e396:	464b      	mov	r3, r9
 800e398:	f7f1 fee6 	bl	8000168 <__aeabi_dsub>
 800e39c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3a0:	f7f1 fee2 	bl	8000168 <__aeabi_dsub>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	4659      	mov	r1, fp
 800e3ac:	e618      	b.n	800dfe0 <__ieee754_pow+0x340>
 800e3ae:	2400      	movs	r4, #0
 800e3b0:	e68a      	b.n	800e0c8 <__ieee754_pow+0x428>
 800e3b2:	2601      	movs	r6, #1
 800e3b4:	e6a0      	b.n	800e0f8 <__ieee754_pow+0x458>
 800e3b6:	bf00      	nop
 800e3b8:	4a454eef 	.word	0x4a454eef
 800e3bc:	3fca7e28 	.word	0x3fca7e28
 800e3c0:	93c9db65 	.word	0x93c9db65
 800e3c4:	3fcd864a 	.word	0x3fcd864a
 800e3c8:	a91d4101 	.word	0xa91d4101
 800e3cc:	3fd17460 	.word	0x3fd17460
 800e3d0:	518f264d 	.word	0x518f264d
 800e3d4:	3fd55555 	.word	0x3fd55555
 800e3d8:	db6fabff 	.word	0xdb6fabff
 800e3dc:	3fdb6db6 	.word	0x3fdb6db6
 800e3e0:	33333303 	.word	0x33333303
 800e3e4:	3fe33333 	.word	0x3fe33333
 800e3e8:	e0000000 	.word	0xe0000000
 800e3ec:	3feec709 	.word	0x3feec709
 800e3f0:	dc3a03fd 	.word	0xdc3a03fd
 800e3f4:	3feec709 	.word	0x3feec709
 800e3f8:	145b01f5 	.word	0x145b01f5
 800e3fc:	be3e2fe0 	.word	0xbe3e2fe0
 800e400:	7ff00000 	.word	0x7ff00000
 800e404:	43400000 	.word	0x43400000
 800e408:	0003988e 	.word	0x0003988e
 800e40c:	000bb679 	.word	0x000bb679
 800e410:	0800fc40 	.word	0x0800fc40
 800e414:	3ff00000 	.word	0x3ff00000
 800e418:	40080000 	.word	0x40080000
 800e41c:	0800fc20 	.word	0x0800fc20
 800e420:	0800fc30 	.word	0x0800fc30
 800e424:	a39a      	add	r3, pc, #616	@ (adr r3, 800e690 <__ieee754_pow+0x9f0>)
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	4630      	mov	r0, r6
 800e42c:	4639      	mov	r1, r7
 800e42e:	f7f1 fe9d 	bl	800016c <__adddf3>
 800e432:	4642      	mov	r2, r8
 800e434:	e9cd 0100 	strd	r0, r1, [sp]
 800e438:	464b      	mov	r3, r9
 800e43a:	4620      	mov	r0, r4
 800e43c:	4629      	mov	r1, r5
 800e43e:	f7f1 fe93 	bl	8000168 <__aeabi_dsub>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e44a:	f7f2 fad5 	bl	80009f8 <__aeabi_dcmpgt>
 800e44e:	2800      	cmp	r0, #0
 800e450:	f47f ae09 	bne.w	800e066 <__ieee754_pow+0x3c6>
 800e454:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e458:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e45c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e460:	fa43 fa0a 	asr.w	sl, r3, sl
 800e464:	44da      	add	sl, fp
 800e466:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e46a:	489b      	ldr	r0, [pc, #620]	@ (800e6d8 <__ieee754_pow+0xa38>)
 800e46c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e470:	4108      	asrs	r0, r1
 800e472:	ea00 030a 	and.w	r3, r0, sl
 800e476:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e47a:	f1c1 0114 	rsb	r1, r1, #20
 800e47e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e482:	4640      	mov	r0, r8
 800e484:	fa4a fa01 	asr.w	sl, sl, r1
 800e488:	f1bb 0f00 	cmp.w	fp, #0
 800e48c:	4649      	mov	r1, r9
 800e48e:	f04f 0200 	mov.w	r2, #0
 800e492:	bfb8      	it	lt
 800e494:	f1ca 0a00 	rsblt	sl, sl, #0
 800e498:	f7f1 fe66 	bl	8000168 <__aeabi_dsub>
 800e49c:	4680      	mov	r8, r0
 800e49e:	4689      	mov	r9, r1
 800e4a0:	2400      	movs	r4, #0
 800e4a2:	4632      	mov	r2, r6
 800e4a4:	463b      	mov	r3, r7
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	f7f1 fe5f 	bl	800016c <__adddf3>
 800e4ae:	a37a      	add	r3, pc, #488	@ (adr r3, 800e698 <__ieee754_pow+0x9f8>)
 800e4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	460d      	mov	r5, r1
 800e4b8:	f7f2 f80e 	bl	80004d8 <__aeabi_dmul>
 800e4bc:	4642      	mov	r2, r8
 800e4be:	464b      	mov	r3, r9
 800e4c0:	e9cd 0100 	strd	r0, r1, [sp]
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	f7f1 fe4e 	bl	8000168 <__aeabi_dsub>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f1 fe48 	bl	8000168 <__aeabi_dsub>
 800e4d8:	a371      	add	r3, pc, #452	@ (adr r3, 800e6a0 <__ieee754_pow+0xa00>)
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	f7f1 fffb 	bl	80004d8 <__aeabi_dmul>
 800e4e2:	a371      	add	r3, pc, #452	@ (adr r3, 800e6a8 <__ieee754_pow+0xa08>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f7f1 fff2 	bl	80004d8 <__aeabi_dmul>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	f7f1 fe36 	bl	800016c <__adddf3>
 800e500:	4604      	mov	r4, r0
 800e502:	460d      	mov	r5, r1
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e50c:	f7f1 fe2e 	bl	800016c <__adddf3>
 800e510:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e514:	4680      	mov	r8, r0
 800e516:	4689      	mov	r9, r1
 800e518:	f7f1 fe26 	bl	8000168 <__aeabi_dsub>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	4620      	mov	r0, r4
 800e522:	4629      	mov	r1, r5
 800e524:	f7f1 fe20 	bl	8000168 <__aeabi_dsub>
 800e528:	4642      	mov	r2, r8
 800e52a:	4606      	mov	r6, r0
 800e52c:	460f      	mov	r7, r1
 800e52e:	464b      	mov	r3, r9
 800e530:	4640      	mov	r0, r8
 800e532:	4649      	mov	r1, r9
 800e534:	f7f1 ffd0 	bl	80004d8 <__aeabi_dmul>
 800e538:	a35d      	add	r3, pc, #372	@ (adr r3, 800e6b0 <__ieee754_pow+0xa10>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	f7f1 ffc9 	bl	80004d8 <__aeabi_dmul>
 800e546:	a35c      	add	r3, pc, #368	@ (adr r3, 800e6b8 <__ieee754_pow+0xa18>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	f7f1 fe0c 	bl	8000168 <__aeabi_dsub>
 800e550:	4622      	mov	r2, r4
 800e552:	462b      	mov	r3, r5
 800e554:	f7f1 ffc0 	bl	80004d8 <__aeabi_dmul>
 800e558:	a359      	add	r3, pc, #356	@ (adr r3, 800e6c0 <__ieee754_pow+0xa20>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 fe05 	bl	800016c <__adddf3>
 800e562:	4622      	mov	r2, r4
 800e564:	462b      	mov	r3, r5
 800e566:	f7f1 ffb7 	bl	80004d8 <__aeabi_dmul>
 800e56a:	a357      	add	r3, pc, #348	@ (adr r3, 800e6c8 <__ieee754_pow+0xa28>)
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 fdfa 	bl	8000168 <__aeabi_dsub>
 800e574:	4622      	mov	r2, r4
 800e576:	462b      	mov	r3, r5
 800e578:	f7f1 ffae 	bl	80004d8 <__aeabi_dmul>
 800e57c:	a354      	add	r3, pc, #336	@ (adr r3, 800e6d0 <__ieee754_pow+0xa30>)
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	f7f1 fdf3 	bl	800016c <__adddf3>
 800e586:	4622      	mov	r2, r4
 800e588:	462b      	mov	r3, r5
 800e58a:	f7f1 ffa5 	bl	80004d8 <__aeabi_dmul>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4640      	mov	r0, r8
 800e594:	4649      	mov	r1, r9
 800e596:	f7f1 fde7 	bl	8000168 <__aeabi_dsub>
 800e59a:	4604      	mov	r4, r0
 800e59c:	460d      	mov	r5, r1
 800e59e:	4602      	mov	r2, r0
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	4649      	mov	r1, r9
 800e5a6:	f7f1 ff97 	bl	80004d8 <__aeabi_dmul>
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	e9cd 0100 	strd	r0, r1, [sp]
 800e5b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	f7f1 fdd6 	bl	8000168 <__aeabi_dsub>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5c4:	f7f2 f8b2 	bl	800072c <__aeabi_ddiv>
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	460d      	mov	r5, r1
 800e5ce:	463b      	mov	r3, r7
 800e5d0:	4640      	mov	r0, r8
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	f7f1 ff80 	bl	80004d8 <__aeabi_dmul>
 800e5d8:	4632      	mov	r2, r6
 800e5da:	463b      	mov	r3, r7
 800e5dc:	f7f1 fdc6 	bl	800016c <__adddf3>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f1 fdbe 	bl	8000168 <__aeabi_dsub>
 800e5ec:	4642      	mov	r2, r8
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	f7f1 fdba 	bl	8000168 <__aeabi_dsub>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	4938      	ldr	r1, [pc, #224]	@ (800e6dc <__ieee754_pow+0xa3c>)
 800e5fc:	f7f1 fdb4 	bl	8000168 <__aeabi_dsub>
 800e600:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e604:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800e608:	da2e      	bge.n	800e668 <__ieee754_pow+0x9c8>
 800e60a:	4652      	mov	r2, sl
 800e60c:	f000 fa04 	bl	800ea18 <scalbn>
 800e610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e614:	f7ff bbed 	b.w	800ddf2 <__ieee754_pow+0x152>
 800e618:	4c31      	ldr	r4, [pc, #196]	@ (800e6e0 <__ieee754_pow+0xa40>)
 800e61a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e61e:	42a3      	cmp	r3, r4
 800e620:	d91a      	bls.n	800e658 <__ieee754_pow+0x9b8>
 800e622:	4b30      	ldr	r3, [pc, #192]	@ (800e6e4 <__ieee754_pow+0xa44>)
 800e624:	440b      	add	r3, r1
 800e626:	4303      	orrs	r3, r0
 800e628:	d009      	beq.n	800e63e <__ieee754_pow+0x99e>
 800e62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e62e:	2200      	movs	r2, #0
 800e630:	2300      	movs	r3, #0
 800e632:	f7f2 f9c3 	bl	80009bc <__aeabi_dcmplt>
 800e636:	3800      	subs	r0, #0
 800e638:	bf18      	it	ne
 800e63a:	2001      	movne	r0, #1
 800e63c:	e444      	b.n	800dec8 <__ieee754_pow+0x228>
 800e63e:	4642      	mov	r2, r8
 800e640:	464b      	mov	r3, r9
 800e642:	f7f1 fd91 	bl	8000168 <__aeabi_dsub>
 800e646:	4632      	mov	r2, r6
 800e648:	463b      	mov	r3, r7
 800e64a:	f7f2 f9cb 	bl	80009e4 <__aeabi_dcmpge>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d1eb      	bne.n	800e62a <__ieee754_pow+0x98a>
 800e652:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800e6e8 <__ieee754_pow+0xa48>
 800e656:	e6fd      	b.n	800e454 <__ieee754_pow+0x7b4>
 800e658:	469a      	mov	sl, r3
 800e65a:	4b24      	ldr	r3, [pc, #144]	@ (800e6ec <__ieee754_pow+0xa4c>)
 800e65c:	459a      	cmp	sl, r3
 800e65e:	f63f aef9 	bhi.w	800e454 <__ieee754_pow+0x7b4>
 800e662:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e666:	e71b      	b.n	800e4a0 <__ieee754_pow+0x800>
 800e668:	4621      	mov	r1, r4
 800e66a:	e7d1      	b.n	800e610 <__ieee754_pow+0x970>
 800e66c:	2000      	movs	r0, #0
 800e66e:	491b      	ldr	r1, [pc, #108]	@ (800e6dc <__ieee754_pow+0xa3c>)
 800e670:	f7ff bb34 	b.w	800dcdc <__ieee754_pow+0x3c>
 800e674:	2000      	movs	r0, #0
 800e676:	2100      	movs	r1, #0
 800e678:	f7ff bb30 	b.w	800dcdc <__ieee754_pow+0x3c>
 800e67c:	4650      	mov	r0, sl
 800e67e:	4659      	mov	r1, fp
 800e680:	f7ff bb2c 	b.w	800dcdc <__ieee754_pow+0x3c>
 800e684:	460c      	mov	r4, r1
 800e686:	f7ff bb79 	b.w	800dd7c <__ieee754_pow+0xdc>
 800e68a:	2400      	movs	r4, #0
 800e68c:	f7ff bb64 	b.w	800dd58 <__ieee754_pow+0xb8>
 800e690:	652b82fe 	.word	0x652b82fe
 800e694:	3c971547 	.word	0x3c971547
 800e698:	00000000 	.word	0x00000000
 800e69c:	3fe62e43 	.word	0x3fe62e43
 800e6a0:	fefa39ef 	.word	0xfefa39ef
 800e6a4:	3fe62e42 	.word	0x3fe62e42
 800e6a8:	0ca86c39 	.word	0x0ca86c39
 800e6ac:	be205c61 	.word	0xbe205c61
 800e6b0:	72bea4d0 	.word	0x72bea4d0
 800e6b4:	3e663769 	.word	0x3e663769
 800e6b8:	c5d26bf1 	.word	0xc5d26bf1
 800e6bc:	3ebbbd41 	.word	0x3ebbbd41
 800e6c0:	af25de2c 	.word	0xaf25de2c
 800e6c4:	3f11566a 	.word	0x3f11566a
 800e6c8:	16bebd93 	.word	0x16bebd93
 800e6cc:	3f66c16c 	.word	0x3f66c16c
 800e6d0:	5555553e 	.word	0x5555553e
 800e6d4:	3fc55555 	.word	0x3fc55555
 800e6d8:	fff00000 	.word	0xfff00000
 800e6dc:	3ff00000 	.word	0x3ff00000
 800e6e0:	4090cbff 	.word	0x4090cbff
 800e6e4:	3f6f3400 	.word	0x3f6f3400
 800e6e8:	4090cc00 	.word	0x4090cc00
 800e6ec:	3fe00000 	.word	0x3fe00000

0800e6f0 <atan>:
 800e6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4bbc      	ldr	r3, [pc, #752]	@ (800e9e8 <atan+0x2f8>)
 800e6f6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800e6fa:	429e      	cmp	r6, r3
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	460d      	mov	r5, r1
 800e700:	468b      	mov	fp, r1
 800e702:	d918      	bls.n	800e736 <atan+0x46>
 800e704:	4bb9      	ldr	r3, [pc, #740]	@ (800e9ec <atan+0x2fc>)
 800e706:	429e      	cmp	r6, r3
 800e708:	d801      	bhi.n	800e70e <atan+0x1e>
 800e70a:	d109      	bne.n	800e720 <atan+0x30>
 800e70c:	b140      	cbz	r0, 800e720 <atan+0x30>
 800e70e:	4622      	mov	r2, r4
 800e710:	462b      	mov	r3, r5
 800e712:	4620      	mov	r0, r4
 800e714:	4629      	mov	r1, r5
 800e716:	f7f1 fd29 	bl	800016c <__adddf3>
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	e006      	b.n	800e72e <atan+0x3e>
 800e720:	f1bb 0f00 	cmp.w	fp, #0
 800e724:	f340 8123 	ble.w	800e96e <atan+0x27e>
 800e728:	a593      	add	r5, pc, #588	@ (adr r5, 800e978 <atan+0x288>)
 800e72a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e72e:	4620      	mov	r0, r4
 800e730:	4629      	mov	r1, r5
 800e732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e736:	4bae      	ldr	r3, [pc, #696]	@ (800e9f0 <atan+0x300>)
 800e738:	429e      	cmp	r6, r3
 800e73a:	d811      	bhi.n	800e760 <atan+0x70>
 800e73c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e740:	429e      	cmp	r6, r3
 800e742:	d80a      	bhi.n	800e75a <atan+0x6a>
 800e744:	a38e      	add	r3, pc, #568	@ (adr r3, 800e980 <atan+0x290>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	f7f1 fd0f 	bl	800016c <__adddf3>
 800e74e:	2200      	movs	r2, #0
 800e750:	4ba8      	ldr	r3, [pc, #672]	@ (800e9f4 <atan+0x304>)
 800e752:	f7f2 f951 	bl	80009f8 <__aeabi_dcmpgt>
 800e756:	2800      	cmp	r0, #0
 800e758:	d1e9      	bne.n	800e72e <atan+0x3e>
 800e75a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e75e:	e027      	b.n	800e7b0 <atan+0xc0>
 800e760:	f000 f956 	bl	800ea10 <fabs>
 800e764:	4ba4      	ldr	r3, [pc, #656]	@ (800e9f8 <atan+0x308>)
 800e766:	4604      	mov	r4, r0
 800e768:	429e      	cmp	r6, r3
 800e76a:	460d      	mov	r5, r1
 800e76c:	f200 80b8 	bhi.w	800e8e0 <atan+0x1f0>
 800e770:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e774:	429e      	cmp	r6, r3
 800e776:	f200 809c 	bhi.w	800e8b2 <atan+0x1c2>
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	f7f1 fcf5 	bl	800016c <__adddf3>
 800e782:	2200      	movs	r2, #0
 800e784:	4b9b      	ldr	r3, [pc, #620]	@ (800e9f4 <atan+0x304>)
 800e786:	f7f1 fcef 	bl	8000168 <__aeabi_dsub>
 800e78a:	2200      	movs	r2, #0
 800e78c:	4606      	mov	r6, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e794:	4620      	mov	r0, r4
 800e796:	4629      	mov	r1, r5
 800e798:	f7f1 fce8 	bl	800016c <__adddf3>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f1 ffc2 	bl	800072c <__aeabi_ddiv>
 800e7a8:	f04f 0a00 	mov.w	sl, #0
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	460d      	mov	r5, r1
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f7f1 fe8e 	bl	80004d8 <__aeabi_dmul>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	4689      	mov	r9, r1
 800e7c4:	f7f1 fe88 	bl	80004d8 <__aeabi_dmul>
 800e7c8:	a36f      	add	r3, pc, #444	@ (adr r3, 800e988 <atan+0x298>)
 800e7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	f7f1 fe81 	bl	80004d8 <__aeabi_dmul>
 800e7d6:	a36e      	add	r3, pc, #440	@ (adr r3, 800e990 <atan+0x2a0>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	f7f1 fcc6 	bl	800016c <__adddf3>
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	463b      	mov	r3, r7
 800e7e4:	f7f1 fe78 	bl	80004d8 <__aeabi_dmul>
 800e7e8:	a36b      	add	r3, pc, #428	@ (adr r3, 800e998 <atan+0x2a8>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f1 fcbd 	bl	800016c <__adddf3>
 800e7f2:	4632      	mov	r2, r6
 800e7f4:	463b      	mov	r3, r7
 800e7f6:	f7f1 fe6f 	bl	80004d8 <__aeabi_dmul>
 800e7fa:	a369      	add	r3, pc, #420	@ (adr r3, 800e9a0 <atan+0x2b0>)
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	f7f1 fcb4 	bl	800016c <__adddf3>
 800e804:	4632      	mov	r2, r6
 800e806:	463b      	mov	r3, r7
 800e808:	f7f1 fe66 	bl	80004d8 <__aeabi_dmul>
 800e80c:	a366      	add	r3, pc, #408	@ (adr r3, 800e9a8 <atan+0x2b8>)
 800e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e812:	f7f1 fcab 	bl	800016c <__adddf3>
 800e816:	4632      	mov	r2, r6
 800e818:	463b      	mov	r3, r7
 800e81a:	f7f1 fe5d 	bl	80004d8 <__aeabi_dmul>
 800e81e:	a364      	add	r3, pc, #400	@ (adr r3, 800e9b0 <atan+0x2c0>)
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	f7f1 fca2 	bl	800016c <__adddf3>
 800e828:	4642      	mov	r2, r8
 800e82a:	464b      	mov	r3, r9
 800e82c:	f7f1 fe54 	bl	80004d8 <__aeabi_dmul>
 800e830:	a361      	add	r3, pc, #388	@ (adr r3, 800e9b8 <atan+0x2c8>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	4680      	mov	r8, r0
 800e838:	4689      	mov	r9, r1
 800e83a:	4630      	mov	r0, r6
 800e83c:	4639      	mov	r1, r7
 800e83e:	f7f1 fe4b 	bl	80004d8 <__aeabi_dmul>
 800e842:	a35f      	add	r3, pc, #380	@ (adr r3, 800e9c0 <atan+0x2d0>)
 800e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e848:	f7f1 fc8e 	bl	8000168 <__aeabi_dsub>
 800e84c:	4632      	mov	r2, r6
 800e84e:	463b      	mov	r3, r7
 800e850:	f7f1 fe42 	bl	80004d8 <__aeabi_dmul>
 800e854:	a35c      	add	r3, pc, #368	@ (adr r3, 800e9c8 <atan+0x2d8>)
 800e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85a:	f7f1 fc85 	bl	8000168 <__aeabi_dsub>
 800e85e:	4632      	mov	r2, r6
 800e860:	463b      	mov	r3, r7
 800e862:	f7f1 fe39 	bl	80004d8 <__aeabi_dmul>
 800e866:	a35a      	add	r3, pc, #360	@ (adr r3, 800e9d0 <atan+0x2e0>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f1 fc7c 	bl	8000168 <__aeabi_dsub>
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	f7f1 fe30 	bl	80004d8 <__aeabi_dmul>
 800e878:	a357      	add	r3, pc, #348	@ (adr r3, 800e9d8 <atan+0x2e8>)
 800e87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87e:	f7f1 fc73 	bl	8000168 <__aeabi_dsub>
 800e882:	4632      	mov	r2, r6
 800e884:	463b      	mov	r3, r7
 800e886:	f7f1 fe27 	bl	80004d8 <__aeabi_dmul>
 800e88a:	4602      	mov	r2, r0
 800e88c:	460b      	mov	r3, r1
 800e88e:	4640      	mov	r0, r8
 800e890:	4649      	mov	r1, r9
 800e892:	f7f1 fc6b 	bl	800016c <__adddf3>
 800e896:	4622      	mov	r2, r4
 800e898:	462b      	mov	r3, r5
 800e89a:	f7f1 fe1d 	bl	80004d8 <__aeabi_dmul>
 800e89e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	d144      	bne.n	800e932 <atan+0x242>
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	f7f1 fc5c 	bl	8000168 <__aeabi_dsub>
 800e8b0:	e733      	b.n	800e71a <atan+0x2a>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	4b4f      	ldr	r3, [pc, #316]	@ (800e9f4 <atan+0x304>)
 800e8b6:	f7f1 fc57 	bl	8000168 <__aeabi_dsub>
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	4606      	mov	r6, r0
 800e8be:	460f      	mov	r7, r1
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	4b4b      	ldr	r3, [pc, #300]	@ (800e9f4 <atan+0x304>)
 800e8c6:	f7f1 fc51 	bl	800016c <__adddf3>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	4639      	mov	r1, r7
 800e8d2:	f7f1 ff2b 	bl	800072c <__aeabi_ddiv>
 800e8d6:	f04f 0a01 	mov.w	sl, #1
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
 800e8de:	e767      	b.n	800e7b0 <atan+0xc0>
 800e8e0:	4b46      	ldr	r3, [pc, #280]	@ (800e9fc <atan+0x30c>)
 800e8e2:	429e      	cmp	r6, r3
 800e8e4:	d21a      	bcs.n	800e91c <atan+0x22c>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4b45      	ldr	r3, [pc, #276]	@ (800ea00 <atan+0x310>)
 800e8ea:	f7f1 fc3d 	bl	8000168 <__aeabi_dsub>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4606      	mov	r6, r0
 800e8f2:	460f      	mov	r7, r1
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4629      	mov	r1, r5
 800e8f8:	4b41      	ldr	r3, [pc, #260]	@ (800ea00 <atan+0x310>)
 800e8fa:	f7f1 fded 	bl	80004d8 <__aeabi_dmul>
 800e8fe:	2200      	movs	r2, #0
 800e900:	4b3c      	ldr	r3, [pc, #240]	@ (800e9f4 <atan+0x304>)
 800e902:	f7f1 fc33 	bl	800016c <__adddf3>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	4630      	mov	r0, r6
 800e90c:	4639      	mov	r1, r7
 800e90e:	f7f1 ff0d 	bl	800072c <__aeabi_ddiv>
 800e912:	f04f 0a02 	mov.w	sl, #2
 800e916:	4604      	mov	r4, r0
 800e918:	460d      	mov	r5, r1
 800e91a:	e749      	b.n	800e7b0 <atan+0xc0>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	2000      	movs	r0, #0
 800e922:	4938      	ldr	r1, [pc, #224]	@ (800ea04 <atan+0x314>)
 800e924:	f7f1 ff02 	bl	800072c <__aeabi_ddiv>
 800e928:	f04f 0a03 	mov.w	sl, #3
 800e92c:	4604      	mov	r4, r0
 800e92e:	460d      	mov	r5, r1
 800e930:	e73e      	b.n	800e7b0 <atan+0xc0>
 800e932:	4b35      	ldr	r3, [pc, #212]	@ (800ea08 <atan+0x318>)
 800e934:	4e35      	ldr	r6, [pc, #212]	@ (800ea0c <atan+0x31c>)
 800e936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	f7f1 fc13 	bl	8000168 <__aeabi_dsub>
 800e942:	4622      	mov	r2, r4
 800e944:	462b      	mov	r3, r5
 800e946:	f7f1 fc0f 	bl	8000168 <__aeabi_dsub>
 800e94a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e956:	f7f1 fc07 	bl	8000168 <__aeabi_dsub>
 800e95a:	f1bb 0f00 	cmp.w	fp, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	460d      	mov	r5, r1
 800e962:	f6bf aee4 	bge.w	800e72e <atan+0x3e>
 800e966:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e96a:	461d      	mov	r5, r3
 800e96c:	e6df      	b.n	800e72e <atan+0x3e>
 800e96e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e9e0 <atan+0x2f0>)
 800e970:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e974:	e6db      	b.n	800e72e <atan+0x3e>
 800e976:	bf00      	nop
 800e978:	54442d18 	.word	0x54442d18
 800e97c:	3ff921fb 	.word	0x3ff921fb
 800e980:	8800759c 	.word	0x8800759c
 800e984:	7e37e43c 	.word	0x7e37e43c
 800e988:	e322da11 	.word	0xe322da11
 800e98c:	3f90ad3a 	.word	0x3f90ad3a
 800e990:	24760deb 	.word	0x24760deb
 800e994:	3fa97b4b 	.word	0x3fa97b4b
 800e998:	a0d03d51 	.word	0xa0d03d51
 800e99c:	3fb10d66 	.word	0x3fb10d66
 800e9a0:	c54c206e 	.word	0xc54c206e
 800e9a4:	3fb745cd 	.word	0x3fb745cd
 800e9a8:	920083ff 	.word	0x920083ff
 800e9ac:	3fc24924 	.word	0x3fc24924
 800e9b0:	5555550d 	.word	0x5555550d
 800e9b4:	3fd55555 	.word	0x3fd55555
 800e9b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e9bc:	bfa2b444 	.word	0xbfa2b444
 800e9c0:	52defd9a 	.word	0x52defd9a
 800e9c4:	3fadde2d 	.word	0x3fadde2d
 800e9c8:	af749a6d 	.word	0xaf749a6d
 800e9cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800e9d0:	fe231671 	.word	0xfe231671
 800e9d4:	3fbc71c6 	.word	0x3fbc71c6
 800e9d8:	9998ebc4 	.word	0x9998ebc4
 800e9dc:	3fc99999 	.word	0x3fc99999
 800e9e0:	54442d18 	.word	0x54442d18
 800e9e4:	bff921fb 	.word	0xbff921fb
 800e9e8:	440fffff 	.word	0x440fffff
 800e9ec:	7ff00000 	.word	0x7ff00000
 800e9f0:	3fdbffff 	.word	0x3fdbffff
 800e9f4:	3ff00000 	.word	0x3ff00000
 800e9f8:	3ff2ffff 	.word	0x3ff2ffff
 800e9fc:	40038000 	.word	0x40038000
 800ea00:	3ff80000 	.word	0x3ff80000
 800ea04:	bff00000 	.word	0xbff00000
 800ea08:	0800fc50 	.word	0x0800fc50
 800ea0c:	0800fc70 	.word	0x0800fc70

0800ea10 <fabs>:
 800ea10:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea14:	4619      	mov	r1, r3
 800ea16:	4770      	bx	lr

0800ea18 <scalbn>:
 800ea18:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea22:	4683      	mov	fp, r0
 800ea24:	468c      	mov	ip, r1
 800ea26:	460b      	mov	r3, r1
 800ea28:	b982      	cbnz	r2, 800ea4c <scalbn+0x34>
 800ea2a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ea2e:	4303      	orrs	r3, r0
 800ea30:	d039      	beq.n	800eaa6 <scalbn+0x8e>
 800ea32:	4b2f      	ldr	r3, [pc, #188]	@ (800eaf0 <scalbn+0xd8>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	f7f1 fd4f 	bl	80004d8 <__aeabi_dmul>
 800ea3a:	4b2e      	ldr	r3, [pc, #184]	@ (800eaf4 <scalbn+0xdc>)
 800ea3c:	4683      	mov	fp, r0
 800ea3e:	429e      	cmp	r6, r3
 800ea40:	468c      	mov	ip, r1
 800ea42:	da0d      	bge.n	800ea60 <scalbn+0x48>
 800ea44:	a326      	add	r3, pc, #152	@ (adr r3, 800eae0 <scalbn+0xc8>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	e01b      	b.n	800ea84 <scalbn+0x6c>
 800ea4c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ea50:	42ba      	cmp	r2, r7
 800ea52:	d109      	bne.n	800ea68 <scalbn+0x50>
 800ea54:	4602      	mov	r2, r0
 800ea56:	f7f1 fb89 	bl	800016c <__adddf3>
 800ea5a:	4683      	mov	fp, r0
 800ea5c:	468c      	mov	ip, r1
 800ea5e:	e022      	b.n	800eaa6 <scalbn+0x8e>
 800ea60:	460b      	mov	r3, r1
 800ea62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea66:	3a36      	subs	r2, #54	@ 0x36
 800ea68:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea6c:	428e      	cmp	r6, r1
 800ea6e:	dd0c      	ble.n	800ea8a <scalbn+0x72>
 800ea70:	a31d      	add	r3, pc, #116	@ (adr r3, 800eae8 <scalbn+0xd0>)
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	461c      	mov	r4, r3
 800ea78:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800ea7c:	f361 74df 	bfi	r4, r1, #31, #1
 800ea80:	4621      	mov	r1, r4
 800ea82:	481d      	ldr	r0, [pc, #116]	@ (800eaf8 <scalbn+0xe0>)
 800ea84:	f7f1 fd28 	bl	80004d8 <__aeabi_dmul>
 800ea88:	e7e7      	b.n	800ea5a <scalbn+0x42>
 800ea8a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ea8e:	4432      	add	r2, r6
 800ea90:	428a      	cmp	r2, r1
 800ea92:	dced      	bgt.n	800ea70 <scalbn+0x58>
 800ea94:	2a00      	cmp	r2, #0
 800ea96:	dd0a      	ble.n	800eaae <scalbn+0x96>
 800ea98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea9c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800eaa0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eaa4:	46ac      	mov	ip, r5
 800eaa6:	4658      	mov	r0, fp
 800eaa8:	4661      	mov	r1, ip
 800eaaa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800eaae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800eab2:	da09      	bge.n	800eac8 <scalbn+0xb0>
 800eab4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800eab8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800eabc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800eac0:	480e      	ldr	r0, [pc, #56]	@ (800eafc <scalbn+0xe4>)
 800eac2:	f041 011f 	orr.w	r1, r1, #31
 800eac6:	e7bd      	b.n	800ea44 <scalbn+0x2c>
 800eac8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800eacc:	3236      	adds	r2, #54	@ 0x36
 800eace:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ead2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ead6:	4658      	mov	r0, fp
 800ead8:	4629      	mov	r1, r5
 800eada:	2200      	movs	r2, #0
 800eadc:	4b08      	ldr	r3, [pc, #32]	@ (800eb00 <scalbn+0xe8>)
 800eade:	e7d1      	b.n	800ea84 <scalbn+0x6c>
 800eae0:	c2f8f359 	.word	0xc2f8f359
 800eae4:	01a56e1f 	.word	0x01a56e1f
 800eae8:	8800759c 	.word	0x8800759c
 800eaec:	7e37e43c 	.word	0x7e37e43c
 800eaf0:	43500000 	.word	0x43500000
 800eaf4:	ffff3cb0 	.word	0xffff3cb0
 800eaf8:	8800759c 	.word	0x8800759c
 800eafc:	c2f8f359 	.word	0xc2f8f359
 800eb00:	3c900000 	.word	0x3c900000

0800eb04 <with_errno>:
 800eb04:	b570      	push	{r4, r5, r6, lr}
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	4616      	mov	r6, r2
 800eb0c:	f7fc ff8e 	bl	800ba2c <__errno>
 800eb10:	4629      	mov	r1, r5
 800eb12:	6006      	str	r6, [r0, #0]
 800eb14:	4620      	mov	r0, r4
 800eb16:	bd70      	pop	{r4, r5, r6, pc}

0800eb18 <xflow>:
 800eb18:	b513      	push	{r0, r1, r4, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4610      	mov	r0, r2
 800eb20:	b10c      	cbz	r4, 800eb26 <xflow+0xe>
 800eb22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eb26:	e9cd 2300 	strd	r2, r3, [sp]
 800eb2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb2e:	f7f1 fcd3 	bl	80004d8 <__aeabi_dmul>
 800eb32:	2222      	movs	r2, #34	@ 0x22
 800eb34:	b002      	add	sp, #8
 800eb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb3a:	f7ff bfe3 	b.w	800eb04 <with_errno>

0800eb3e <__math_uflow>:
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800eb44:	f7ff bfe8 	b.w	800eb18 <xflow>

0800eb48 <__math_oflow>:
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800eb4e:	f7ff bfe3 	b.w	800eb18 <xflow>
	...

0800eb54 <_kill>:
 800eb54:	2258      	movs	r2, #88	@ 0x58
 800eb56:	4b02      	ldr	r3, [pc, #8]	@ (800eb60 <_kill+0xc>)
 800eb58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	4770      	bx	lr
 800eb60:	20003fdc 	.word	0x20003fdc

0800eb64 <_exit>:
 800eb64:	e7fe      	b.n	800eb64 <_exit>
	...

0800eb68 <_init>:
 800eb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6a:	bf00      	nop
 800eb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb6e:	bc08      	pop	{r3}
 800eb70:	469e      	mov	lr, r3
 800eb72:	4770      	bx	lr

0800eb74 <_fini>:
 800eb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb76:	bf00      	nop
 800eb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7a:	bc08      	pop	{r3}
 800eb7c:	469e      	mov	lr, r3
 800eb7e:	4770      	bx	lr
