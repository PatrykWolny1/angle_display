
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c408  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800c518  0800c518  0000d518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbd8  0800cbd8  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbd8  0800cbd8  0000dbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe0  0800cbe0  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe0  0800cbe0  0000dbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbe4  0800cbe4  0000dbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cbe8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038e4  200001d8  0800cdc0  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003abc  0800cdc0  0000eabc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cca9  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f8  00000000  00000000  0002aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  0002f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a6  00000000  00000000  00030f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d052  00000000  00000000  000322a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f274  00000000  00000000  0004f2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac62  00000000  00000000  0006e56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001091ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab8  00000000  00000000  00109214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00110ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c500 	.word	0x0800c500

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c500 	.word	0x0800c500

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2010      	movs	r0, #16
 8000f68:	f001 f983 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f001 f99c 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2011      	movs	r0, #17
 8000f78:	f001 f97b 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f7c:	2011      	movs	r0, #17
 8000f7e:	f001 f994 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_FREERTOS_Init>:
  * @retval None
  */
osMessageQueueId_t dataQueue;
osMutexId_t uartMutex;
osSemaphoreId_t dmaTxCompleteSemaphore;
void MX_FREERTOS_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	@ 0x50
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
    osKernelInitialize();
 8000f96:	f004 fdf1 	bl	8005b7c <osKernelInitialize>

    // Create the data QUEUE
    dataQueue = osMessageQueueNew(20, sizeof(float), NULL); // Queue with 20 slots
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f005 f90e 	bl	80061c0 <osMessageQueueNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <MX_FREERTOS_Init+0xdc>)
 8000fa8:	6013      	str	r3, [r2, #0]
    if (dataQueue == NULL) {
 8000faa:	4b30      	ldr	r3, [pc, #192]	@ (800106c <MX_FREERTOS_Init+0xdc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d104      	bne.n	8000fbc <MX_FREERTOS_Init+0x2c>
		printf("No data in QUEUE!");
 8000fb2:	482f      	ldr	r0, [pc, #188]	@ (8001070 <MX_FREERTOS_Init+0xe0>)
 8000fb4:	f009 f994 	bl	800a2e0 <iprintf>
		while (1);
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <MX_FREERTOS_Init+0x28>
	}

    // Create the UART mutex
    uartMutex = osMutexNew(NULL);  // Create a mutex
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f004 fed2 	bl	8005d66 <osMutexNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001074 <MX_FREERTOS_Init+0xe4>)
 8000fc6:	6013      	str	r3, [r2, #0]
    if (uartMutex == NULL) {
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <MX_FREERTOS_Init+0xe4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <MX_FREERTOS_Init+0x4a>
        printf("Failed to create UART Mutex!");
 8000fd0:	4829      	ldr	r0, [pc, #164]	@ (8001078 <MX_FREERTOS_Init+0xe8>)
 8000fd2:	f009 f985 	bl	800a2e0 <iprintf>
        while (1);  // Handle error
 8000fd6:	bf00      	nop
 8000fd8:	e7fd      	b.n	8000fd6 <MX_FREERTOS_Init+0x46>
    }

    dmaTxCompleteSemaphore = osSemaphoreNew(1, 0, NULL);  // Initial count is 0
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f004 ffcf 	bl	8005f82 <osSemaphoreNew>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a25      	ldr	r2, [pc, #148]	@ (800107c <MX_FREERTOS_Init+0xec>)
 8000fe8:	6013      	str	r3, [r2, #0]
    if (dmaTxCompleteSemaphore == NULL) {
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <MX_FREERTOS_Init+0xec>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <MX_FREERTOS_Init+0x6c>
        printf("Failed to create DMA semaphore!");
 8000ff2:	4823      	ldr	r0, [pc, #140]	@ (8001080 <MX_FREERTOS_Init+0xf0>)
 8000ff4:	f009 f974 	bl	800a2e0 <iprintf>
        while (1);
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MX_FREERTOS_Init+0x68>
    }

    osThreadAttr_t taskReadData = {
 8000ffc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001000:	2224      	movs	r2, #36	@ 0x24
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f009 fae7 	bl	800a5d8 <memset>
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <MX_FREERTOS_Init+0xf4>)
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001014:	2320      	movs	r3, #32
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
        .name = "mpu6050_ReadData",
        .priority = osPriorityAboveNormal,
        .stack_size = 512 * 4
    };

    osThreadAttr_t taskProcessData = {
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2224      	movs	r2, #36	@ 0x24
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f009 fada 	bl	800a5d8 <memset>
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_FREERTOS_Init+0xf8>)
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	2318      	movs	r3, #24
 8001030:	61fb      	str	r3, [r7, #28]
        .name = "DataProcessing",
        .priority = osPriorityNormal,
        .stack_size = 512 * 4
    };

    osThreadNew(mpu6050_ReadData, NULL, &taskReadData);
 8001032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	4814      	ldr	r0, [pc, #80]	@ (800108c <MX_FREERTOS_Init+0xfc>)
 800103c:	f004 fde6 	bl	8005c0c <osThreadNew>
//    osThreadNew(DataProcessing, NULL, &taskProcessData);
    osThreadId_t processDataTaskHandle = osThreadNew(DataProcessing, NULL, &taskProcessData);
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	461a      	mov	r2, r3
 8001044:	2100      	movs	r1, #0
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <MX_FREERTOS_Init+0x100>)
 8001048:	f004 fde0 	bl	8005c0c <osThreadNew>
 800104c:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (processDataTaskHandle == NULL) {
 800104e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001050:	2b00      	cmp	r3, #0
 8001052:	d104      	bne.n	800105e <MX_FREERTOS_Init+0xce>
        printf("Failed to create DataProcessing task\r\n");
 8001054:	480f      	ldr	r0, [pc, #60]	@ (8001094 <MX_FREERTOS_Init+0x104>)
 8001056:	f009 f9ab 	bl	800a3b0 <puts>
        while (1);
 800105a:	bf00      	nop
 800105c:	e7fd      	b.n	800105a <MX_FREERTOS_Init+0xca>
    }
    vTaskStartScheduler();
 800105e:	f006 fd99 	bl	8007b94 <vTaskStartScheduler>

    osKernelStart();
 8001062:	f004 fdad 	bl	8005bc0 <osKernelStart>

    while (1) {
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <MX_FREERTOS_Init+0xd6>
 800106a:	bf00      	nop
 800106c:	200001f4 	.word	0x200001f4
 8001070:	0800c518 	.word	0x0800c518
 8001074:	200001f8 	.word	0x200001f8
 8001078:	0800c52c 	.word	0x0800c52c
 800107c:	200001fc 	.word	0x200001fc
 8001080:	0800c54c 	.word	0x0800c54c
 8001084:	0800c56c 	.word	0x0800c56c
 8001088:	0800c580 	.word	0x0800c580
 800108c:	08001715 	.word	0x08001715
 8001090:	08001889 	.word	0x08001889
 8001094:	0800c590 	.word	0x0800c590

08001098 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a26      	ldr	r2, [pc, #152]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0320 	and.w	r3, r3, #32
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001164 <MX_GPIO_Init+0xcc>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_GPIO_Init+0xcc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	4815      	ldr	r0, [pc, #84]	@ (8001168 <MX_GPIO_Init+0xd0>)
 8001112:	f001 fcff 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <MX_GPIO_Init+0xd4>)
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	@ (8001170 <MX_GPIO_Init+0xd8>)
 800112c:	f001 fb6e 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4808      	ldr	r0, [pc, #32]	@ (8001168 <MX_GPIO_Init+0xd0>)
 8001148:	f001 fb60 	bl	800280c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2105      	movs	r1, #5
 8001150:	2028      	movs	r0, #40	@ 0x28
 8001152:	f001 f88e 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	f001 f8a7 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800
 800116c:	10110000 	.word	0x10110000
 8001170:	40011000 	.word	0x40011000

08001174 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <MX_I2C1_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <MX_I2C1_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_I2C1_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <MX_I2C1_Init+0x50>)
 80011b2:	f001 fce9 	bl	8002b88 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 f8ac 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000200 	.word	0x20000200
 80011c8:	40005400 	.word	0x40005400
 80011cc:	00061a80 	.word	0x00061a80

080011d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	@ (8001240 <HAL_I2C_MspInit+0x70>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	@ 0xc0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <HAL_I2C_MspInit+0x78>)
 800121c:	f001 faf6 	bl	800280c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_I2C_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00

0800124c <main>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    HAL_Init();
 8001250:	f000 ff04 	bl	800205c <HAL_Init>
    SystemClock_Config();
 8001254:	f000 f80c 	bl	8001270 <SystemClock_Config>
    MX_GPIO_Init();
 8001258:	f7ff ff1e 	bl	8001098 <MX_GPIO_Init>
    MX_I2C1_Init();
 800125c:	f7ff ff8a 	bl	8001174 <MX_I2C1_Init>
    MX_DMA_Init();
 8001260:	f7ff fe70 	bl	8000f44 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001264:	f000 fd2a 	bl	8001cbc <MX_USART2_UART_Init>
    MX_FREERTOS_Init();
 8001268:	f7ff fe92 	bl	8000f90 <MX_FREERTOS_Init>

	while (1) {
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <main+0x20>

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	@ 0x40
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2228      	movs	r2, #40	@ 0x28
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f009 f9aa 	bl	800a5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001296:	2301      	movs	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129a:	2310      	movs	r3, #16
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129e:	2302      	movs	r3, #2
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012a6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fe4f 	bl	8003f54 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012bc:	f000 f82c 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c0:	230f      	movs	r3, #15
 80012c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c4:	2302      	movs	r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2102      	movs	r1, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 f8bc 	bl	8004458 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012e6:	f000 f817 	bl	8001318 <Error_Handler>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3740      	adds	r7, #64	@ 0x40
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001306:	f000 febf 	bl	8002088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <Error_Handler+0x8>

08001324 <MPU6050_Init>:
 */

#include "mpu6050.h"
#include "write_printf.h"

void MPU6050_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 800132a:	f000 f971 	bl	8001610 <MPU6050_SoftReset>

    HAL_Delay(2000);
 800132e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001332:	f000 fec5 	bl	80020c0 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 8001336:	236b      	movs	r3, #107	@ 0x6b
 8001338:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 800133a:	2300      	movs	r3, #0
 800133c:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2302      	movs	r3, #2
 800134a:	21d0      	movs	r1, #208	@ 0xd0
 800134c:	484c      	ldr	r0, [pc, #304]	@ (8001480 <MPU6050_Init+0x15c>)
 800134e:	f001 fd5f 	bl	8002e10 <HAL_I2C_Master_Transmit>
    }

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030b 	add.w	r3, r7, #11
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	221c      	movs	r2, #28
 800136a:	21d0      	movs	r1, #208	@ 0xd0
 800136c:	4844      	ldr	r0, [pc, #272]	@ (8001480 <MPU6050_Init+0x15c>)
 800136e:	f001 fe4d 	bl	800300c <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2301      	movs	r3, #1
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	f107 030b 	add.w	r3, r7, #11
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2301      	movs	r3, #1
 8001388:	221b      	movs	r2, #27
 800138a:	21d0      	movs	r1, #208	@ 0xd0
 800138c:	483c      	ldr	r0, [pc, #240]	@ (8001480 <MPU6050_Init+0x15c>)
 800138e:	f001 fe3d 	bl	800300c <HAL_I2C_Mem_Write>

    uint8_t config;

    // Set DLPF_CFG to 4 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x04;
 8001392:	2304      	movs	r3, #4
 8001394:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 030a 	add.w	r3, r7, #10
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	221a      	movs	r2, #26
 80013aa:	21d0      	movs	r1, #208	@ 0xd0
 80013ac:	4834      	ldr	r0, [pc, #208]	@ (8001480 <MPU6050_Init+0x15c>)
 80013ae:	f001 fe2d 	bl	800300c <HAL_I2C_Mem_Write>

    // Set sample rate to 100 Hz
    config = 9; // 1000 / (1 + 9) = 100 Hz
 80013b2:	2309      	movs	r3, #9
 80013b4:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2301      	movs	r3, #1
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f107 030a 	add.w	r3, r7, #10
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	2219      	movs	r2, #25
 80013ca:	21d0      	movs	r1, #208	@ 0xd0
 80013cc:	482c      	ldr	r0, [pc, #176]	@ (8001480 <MPU6050_Init+0x15c>)
 80013ce:	f001 fe1d 	bl	800300c <HAL_I2C_Mem_Write>

    uint8_t whoAmI = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, 1, HAL_MAX_DELAY);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2301      	movs	r3, #1
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	f107 0309 	add.w	r3, r7, #9
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	2275      	movs	r2, #117	@ 0x75
 80013ea:	21d0      	movs	r1, #208	@ 0xd0
 80013ec:	4824      	ldr	r0, [pc, #144]	@ (8001480 <MPU6050_Init+0x15c>)
 80013ee:	f001 ff07 	bl	8003200 <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 80013f2:	7a7b      	ldrb	r3, [r7, #9]
 80013f4:	2b68      	cmp	r3, #104	@ 0x68
 80013f6:	d005      	beq.n	8001404 <MPU6050_Init+0xe0>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 80013f8:	7a7b      	ldrb	r3, [r7, #9]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4821      	ldr	r0, [pc, #132]	@ (8001484 <MPU6050_Init+0x160>)
 80013fe:	f008 ff6f 	bl	800a2e0 <iprintf>
 8001402:	e004      	b.n	800140e <MPU6050_Init+0xea>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001404:	7a7b      	ldrb	r3, [r7, #9]
 8001406:	4619      	mov	r1, r3
 8001408:	481f      	ldr	r0, [pc, #124]	@ (8001488 <MPU6050_Init+0x164>)
 800140a:	f008 ff69 	bl	800a2e0 <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2223      	movs	r2, #35	@ 0x23
 8001422:	21d0      	movs	r1, #208	@ 0xd0
 8001424:	4816      	ldr	r0, [pc, #88]	@ (8001480 <MPU6050_Init+0x15c>)
 8001426:	f001 feeb 	bl	8003200 <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 800142a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2301      	movs	r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	226a      	movs	r2, #106	@ 0x6a
 800143c:	21d0      	movs	r1, #208	@ 0xd0
 800143e:	4810      	ldr	r0, [pc, #64]	@ (8001480 <MPU6050_Init+0x15c>)
 8001440:	f001 fede 	bl	8003200 <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 8001444:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2301      	movs	r3, #1
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	1dbb      	adds	r3, r7, #6
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	221c      	movs	r2, #28
 8001456:	21d0      	movs	r1, #208	@ 0xd0
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <MPU6050_Init+0x15c>)
 800145a:	f001 fed1 	bl	8003200 <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	1d7b      	adds	r3, r7, #5
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2301      	movs	r3, #1
 800146e:	221b      	movs	r2, #27
 8001470:	21d0      	movs	r1, #208	@ 0xd0
 8001472:	4803      	ldr	r0, [pc, #12]	@ (8001480 <MPU6050_Init+0x15c>)
 8001474:	f001 fec4 	bl	8003200 <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000200 	.word	0x20000200
 8001484:	0800c5b8 	.word	0x0800c5b8
 8001488:	0800c5e4 	.word	0x0800c5e4

0800148c <MPU6050_ReadAll>:

void MPU6050_ReadAll(float *accelX_g, float *accelY_g, float *accelZ_g,
                     float *gyroX_s, float *gyroY_s, float *gyroZ_s, float *temp_c) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b090      	sub	sp, #64	@ 0x40
 8001490:	af04      	add	r7, sp, #16
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
    int16_t accelX, accelY, accelZ;
    int16_t temp;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	230e      	movs	r3, #14
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	223b      	movs	r2, #59	@ 0x3b
 80014ae:	21d0      	movs	r1, #208	@ 0xd0
 80014b0:	4853      	ldr	r0, [pc, #332]	@ (8001600 <MPU6050_ReadAll+0x174>)
 80014b2:	f001 fea5 	bl	8003200 <HAL_I2C_Mem_Read>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d132      	bne.n	8001522 <MPU6050_ReadAll+0x96>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]);
 80014bc:	7d3b      	ldrb	r3, [r7, #20]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	7d7b      	ldrb	r3, [r7, #21]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]);
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]);
 80014d8:	7e3b      	ldrb	r3, [r7, #24]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	7e7b      	ldrb	r3, [r7, #25]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
        temp   = (int16_t)((buffer[6] << 8) | buffer[7]);
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	7efb      	ldrb	r3, [r7, #27]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	853b      	strh	r3, [r7, #40]	@ 0x28
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]);
 80014f4:	7f3b      	ldrb	r3, [r7, #28]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7f7b      	ldrb	r3, [r7, #29]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]);
 8001502:	7fbb      	ldrb	r3, [r7, #30]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]);
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	847b      	strh	r3, [r7, #34]	@ 0x22
    } else {
    	//Error handle
    }
    *accelX_g = accelX / 16384.0f;
 8001522:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb68 	bl	8000bfc <__aeabi_i2f>
 800152c:	4603      	mov	r3, r0
 800152e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc6a 	bl	8000e0c <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]
	*accelY_g = accelY / 16384.0f;
 8001540:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb59 	bl	8000bfc <__aeabi_i2f>
 800154a:	4603      	mov	r3, r0
 800154c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc5b 	bl	8000e0c <__aeabi_fdiv>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	601a      	str	r2, [r3, #0]
	*accelZ_g = accelZ / 16384.0f;
 800155e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb4a 	bl	8000bfc <__aeabi_i2f>
 8001568:	4603      	mov	r3, r0
 800156a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc4c 	bl	8000e0c <__aeabi_fdiv>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	601a      	str	r2, [r3, #0]

	*temp_c = (temp / 340.0f) + 36.53f;
 800157c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb3b 	bl	8000bfc <__aeabi_i2f>
 8001586:	4603      	mov	r3, r0
 8001588:	491e      	ldr	r1, [pc, #120]	@ (8001604 <MPU6050_ReadAll+0x178>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fc3e 	bl	8000e0c <__aeabi_fdiv>
 8001590:	4603      	mov	r3, r0
 8001592:	491d      	ldr	r1, [pc, #116]	@ (8001608 <MPU6050_ReadAll+0x17c>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fa7d 	bl	8000a94 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015a0:	601a      	str	r2, [r3, #0]

	*gyroX_s = gyroX / 131.0f;
 80015a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb28 	bl	8000bfc <__aeabi_i2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4917      	ldr	r1, [pc, #92]	@ (800160c <MPU6050_ReadAll+0x180>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc2b 	bl	8000e0c <__aeabi_fdiv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]
	*gyroY_s = gyroY / 131.0f;
 80015be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb1a 	bl	8000bfc <__aeabi_i2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4910      	ldr	r1, [pc, #64]	@ (800160c <MPU6050_ReadAll+0x180>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fc1d 	bl	8000e0c <__aeabi_fdiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015d8:	601a      	str	r2, [r3, #0]
	*gyroZ_s = gyroZ / 131.0f;
 80015da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb0c 	bl	8000bfc <__aeabi_i2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4909      	ldr	r1, [pc, #36]	@ (800160c <MPU6050_ReadAll+0x180>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc0f 	bl	8000e0c <__aeabi_fdiv>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	@ 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000200 	.word	0x20000200
 8001604:	43aa0000 	.word	0x43aa0000
 8001608:	42121eb8 	.word	0x42121eb8
 800160c:	43030000 	.word	0x43030000

08001610 <MPU6050_SoftReset>:
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
}

void MPU6050_SoftReset(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af04      	add	r7, sp, #16
    uint8_t data_rst = 0x80; // DEVICE_RESET bit
 8001616:	2380      	movs	r3, #128	@ 0x80
 8001618:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data_rst, 1, HAL_MAX_DELAY);
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2301      	movs	r3, #1
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	226b      	movs	r2, #107	@ 0x6b
 800162c:	21d0      	movs	r1, #208	@ 0xd0
 800162e:	482d      	ldr	r0, [pc, #180]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 8001630:	f001 fcec 	bl	800300c <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 8001634:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001638:	f000 fd42 	bl	80020c0 <HAL_Delay>
    uint8_t data[2] = {0x00, 0x00}; // Zero offset
 800163c:	2300      	movs	r3, #0
 800163e:	80bb      	strh	r3, [r7, #4]

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2302      	movs	r3, #2
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	2206      	movs	r2, #6
 8001652:	21d0      	movs	r1, #208	@ 0xd0
 8001654:	4823      	ldr	r0, [pc, #140]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 8001656:	f001 fcd9 	bl	800300c <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2302      	movs	r3, #2
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	2208      	movs	r2, #8
 800166c:	21d0      	movs	r1, #208	@ 0xd0
 800166e:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 8001670:	f001 fccc 	bl	800300c <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001678:	9302      	str	r3, [sp, #8]
 800167a:	2302      	movs	r3, #2
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	220a      	movs	r2, #10
 8001686:	21d0      	movs	r1, #208	@ 0xd0
 8001688:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 800168a:	f001 fcbf 	bl	800300c <HAL_I2C_Mem_Write>

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2302      	movs	r3, #2
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	2213      	movs	r2, #19
 80016a0:	21d0      	movs	r1, #208	@ 0xd0
 80016a2:	4810      	ldr	r0, [pc, #64]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 80016a4:	f001 fcb2 	bl	800300c <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	2302      	movs	r3, #2
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	2215      	movs	r2, #21
 80016ba:	21d0      	movs	r1, #208	@ 0xd0
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 80016be:	f001 fca5 	bl	800300c <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2302      	movs	r3, #2
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2301      	movs	r3, #1
 80016d2:	2217      	movs	r2, #23
 80016d4:	21d0      	movs	r1, #208	@ 0xd0
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MPU6050_SoftReset+0xd4>)
 80016d8:	f001 fc98 	bl	800300c <HAL_I2C_Mem_Write>

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000200 	.word	0x20000200

080016e8 <HAL_UART_TxCpltCallback>:

extern osMessageQueueId_t dataQueue;
extern osMutexId_t uartMutex;
extern osSemaphoreId_t dmaTxCompleteSemaphore;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_UART_TxCpltCallback+0x24>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d104      	bne.n	8001702 <HAL_UART_TxCpltCallback+0x1a>
        osSemaphoreRelease(dmaTxCompleteSemaphore);
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_UART_TxCpltCallback+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f004 fd1b 	bl	8006138 <osSemaphoreRelease>

    }
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002a0 	.word	0x200002a0
 8001710:	200001fc 	.word	0x200001fc

08001714 <mpu6050_ReadData>:

void mpu6050_ReadData(void *argument) {
 8001714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001718:	b0cc      	sub	sp, #304	@ 0x130
 800171a:	af0c      	add	r7, sp, #48	@ 0x30
 800171c:	6178      	str	r0, [r7, #20]
    float gyroX, gyroY, gyroZ;
    float temp;

    char buffer[200];

    MPU6050_Init();
 800171e:	f7ff fe01 	bl	8001324 <MPU6050_Init>
    printf("MPU6050 initialized\r\n");
 8001722:	484f      	ldr	r0, [pc, #316]	@ (8001860 <mpu6050_ReadData+0x14c>)
 8001724:	f008 fe44 	bl	800a3b0 <puts>

    while (1) {
        // Read sensor data
        MPU6050_ReadAll(&accelX, &accelY, &accelZ, &gyroX, &gyroY, &gyroZ, &temp);
 8001728:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 800172c:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8001730:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8001734:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8001738:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4623      	mov	r3, r4
 800174c:	f7ff fe9e 	bl	800148c <MPU6050_ReadAll>
        osDelay(100);
 8001750:	2064      	movs	r0, #100	@ 0x64
 8001752:	f004 faed 	bl	8005d30 <osDelay>

        // Format sensor data
        snprintf(buffer, sizeof(buffer),
 8001756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe64 	bl	8000428 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe5d 	bl	8000428 <__aeabi_f2d>
 800176e:	4680      	mov	r8, r0
 8001770:	4689      	mov	r9, r1
 8001772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe56 	bl	8000428 <__aeabi_f2d>
 800177c:	4682      	mov	sl, r0
 800177e:	468b      	mov	fp, r1
 8001780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe4f 	bl	8000428 <__aeabi_f2d>
 800178a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800178e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe48 	bl	8000428 <__aeabi_f2d>
 8001798:	e9c7 0100 	strd	r0, r1, [r7]
 800179c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe41 	bl	8000428 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	f107 001c 	add.w	r0, r7, #28
 80017ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80017b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017c2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017c6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ca:	e9cd 4500 	strd	r4, r5, [sp]
 80017ce:	4a25      	ldr	r2, [pc, #148]	@ (8001864 <mpu6050_ReadData+0x150>)
 80017d0:	21c8      	movs	r1, #200	@ 0xc8
 80017d2:	f008 fdf5 	bl	800a3c0 <sniprintf>
                 "Xa=%6.2f Xg=%6.2f Ya=%6.2f Yg=%6.2f Za=%6.2f Zg=%6.2f\r\n",
                 accelX, gyroX, accelY, gyroY, accelZ, gyroZ);

        // Transmit data over UART
        if (osMutexAcquire(uartMutex, 100) == osOK) {  // Use timeout to avoid deadlocks
 80017d6:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <mpu6050_ReadData+0x154>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2164      	movs	r1, #100	@ 0x64
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fb48 	bl	8005e72 <osMutexAcquire>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d125      	bne.n	8001834 <mpu6050_ReadData+0x120>
            if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcaf 	bl	8000150 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	481b      	ldr	r0, [pc, #108]	@ (800186c <mpu6050_ReadData+0x158>)
 80017fe:	f003 fb03 	bl	8004e08 <HAL_UART_Transmit_DMA>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10c      	bne.n	8001822 <mpu6050_ReadData+0x10e>
                if (osSemaphoreAcquire(dmaTxCompleteSemaphore, 100) != osOK) {
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <mpu6050_ReadData+0x15c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2164      	movs	r1, #100	@ 0x64
 800180e:	4618      	mov	r0, r3
 8001810:	f004 fc40 	bl	8006094 <osSemaphoreAcquire>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <mpu6050_ReadData+0x114>
                    printf("UART DMA timeout\r\n");
 800181a:	4816      	ldr	r0, [pc, #88]	@ (8001874 <mpu6050_ReadData+0x160>)
 800181c:	f008 fdc8 	bl	800a3b0 <puts>
 8001820:	e002      	b.n	8001828 <mpu6050_ReadData+0x114>
                }
            } else {
                printf("UART DMA transmission failed\r\n");
 8001822:	4815      	ldr	r0, [pc, #84]	@ (8001878 <mpu6050_ReadData+0x164>)
 8001824:	f008 fdc4 	bl	800a3b0 <puts>
            }
            osMutexRelease(uartMutex);  // Release mutex
 8001828:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <mpu6050_ReadData+0x154>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fb6b 	bl	8005f08 <osMutexRelease>
 8001832:	e002      	b.n	800183a <mpu6050_ReadData+0x126>
        } else {
            printf("UART mutex acquire failed\r\n");
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <mpu6050_ReadData+0x168>)
 8001836:	f008 fdbb 	bl	800a3b0 <puts>
        }

        // Send data to the queue
        if (osMessageQueuePut(dataQueue, &accelX, 0, 100) != osOK) {
 800183a:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <mpu6050_ReadData+0x16c>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001842:	2364      	movs	r3, #100	@ 0x64
 8001844:	2200      	movs	r2, #0
 8001846:	f004 fd2f 	bl	80062a8 <osMessageQueuePut>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <mpu6050_ReadData+0x142>
            printf("Queue is full\r\n");
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <mpu6050_ReadData+0x170>)
 8001852:	f008 fdad 	bl	800a3b0 <puts>
        }

        osDelay(50);  // Prevent rapid polling
 8001856:	2032      	movs	r0, #50	@ 0x32
 8001858:	f004 fa6a 	bl	8005d30 <osDelay>
        MPU6050_ReadAll(&accelX, &accelY, &accelZ, &gyroX, &gyroY, &gyroZ, &temp);
 800185c:	e764      	b.n	8001728 <mpu6050_ReadData+0x14>
 800185e:	bf00      	nop
 8001860:	0800c730 	.word	0x0800c730
 8001864:	0800c748 	.word	0x0800c748
 8001868:	200001f8 	.word	0x200001f8
 800186c:	200002a0 	.word	0x200002a0
 8001870:	200001fc 	.word	0x200001fc
 8001874:	0800c780 	.word	0x0800c780
 8001878:	0800c794 	.word	0x0800c794
 800187c:	0800c7b4 	.word	0x0800c7b4
 8001880:	200001f4 	.word	0x200001f4
 8001884:	0800c7d0 	.word	0x0800c7d0

08001888 <DataProcessing>:
    }
}


void DataProcessing(void *argument) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b0b8      	sub	sp, #224	@ 0xe0
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
    float receivedData;
    char buffer[200];

    printf("DataProcessing task started\r\n");
 8001890:	482f      	ldr	r0, [pc, #188]	@ (8001950 <DataProcessing+0xc8>)
 8001892:	f008 fd8d 	bl	800a3b0 <puts>

    while (1) {
        // Get data from queue
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 100) == osOK) {
 8001896:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <DataProcessing+0xcc>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 800189e:	2364      	movs	r3, #100	@ 0x64
 80018a0:	2200      	movs	r2, #0
 80018a2:	f004 fd61 	bl	8006368 <osMessageQueueGet>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d14a      	bne.n	8001942 <DataProcessing+0xba>
            receivedData += 10;
 80018ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018b0:	4929      	ldr	r1, [pc, #164]	@ (8001958 <DataProcessing+0xd0>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f8ee 	bl	8000a94 <__addsf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

            // Format processed data
            snprintf(buffer, sizeof(buffer), "Processed: %6.2f\r\n", receivedData);
 80018be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fdb0 	bl	8000428 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	f107 000c 	add.w	r0, r7, #12
 80018d0:	e9cd 2300 	strd	r2, r3, [sp]
 80018d4:	4a21      	ldr	r2, [pc, #132]	@ (800195c <DataProcessing+0xd4>)
 80018d6:	21c8      	movs	r1, #200	@ 0xc8
 80018d8:	f008 fd72 	bl	800a3c0 <sniprintf>

            // Transmit processed data over UART
            if (osMutexAcquire(uartMutex, 100) == osOK) {  // Use timeout to avoid deadlocks
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <DataProcessing+0xd8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2164      	movs	r1, #100	@ 0x64
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fac5 	bl	8005e72 <osMutexAcquire>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d125      	bne.n	800193a <DataProcessing+0xb2>
                if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fc2c 	bl	8000150 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4818      	ldr	r0, [pc, #96]	@ (8001964 <DataProcessing+0xdc>)
 8001904:	f003 fa80 	bl	8004e08 <HAL_UART_Transmit_DMA>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <DataProcessing+0xa0>
                    if (osSemaphoreAcquire(dmaTxCompleteSemaphore, 100) != osOK) {
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <DataProcessing+0xe0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2164      	movs	r1, #100	@ 0x64
 8001914:	4618      	mov	r0, r3
 8001916:	f004 fbbd 	bl	8006094 <osSemaphoreAcquire>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <DataProcessing+0xa6>
                        printf("UART DMA timeout\r\n");
 8001920:	4812      	ldr	r0, [pc, #72]	@ (800196c <DataProcessing+0xe4>)
 8001922:	f008 fd45 	bl	800a3b0 <puts>
 8001926:	e002      	b.n	800192e <DataProcessing+0xa6>
                    }
                } else {
                    printf("UART DMA transmission failed\r\n");
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <DataProcessing+0xe8>)
 800192a:	f008 fd41 	bl	800a3b0 <puts>
                }
                osMutexRelease(uartMutex);  // Release mutex
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <DataProcessing+0xd8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f004 fae8 	bl	8005f08 <osMutexRelease>
 8001938:	e006      	b.n	8001948 <DataProcessing+0xc0>
            } else {
                printf("UART mutex acquire failed\r\n");
 800193a:	480e      	ldr	r0, [pc, #56]	@ (8001974 <DataProcessing+0xec>)
 800193c:	f008 fd38 	bl	800a3b0 <puts>
 8001940:	e002      	b.n	8001948 <DataProcessing+0xc0>
            }
        } else {
            printf("Queue is empty\r\n");
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <DataProcessing+0xf0>)
 8001944:	f008 fd34 	bl	800a3b0 <puts>
        }

        osDelay(20);  // Prevent rapid polling
 8001948:	2014      	movs	r0, #20
 800194a:	f004 f9f1 	bl	8005d30 <osDelay>
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 100) == osOK) {
 800194e:	e7a2      	b.n	8001896 <DataProcessing+0xe>
 8001950:	0800c7e0 	.word	0x0800c7e0
 8001954:	200001f4 	.word	0x200001f4
 8001958:	41200000 	.word	0x41200000
 800195c:	0800c800 	.word	0x0800c800
 8001960:	200001f8 	.word	0x200001f8
 8001964:	200002a0 	.word	0x200002a0
 8001968:	200001fc 	.word	0x200001fc
 800196c:	0800c780 	.word	0x0800c780
 8001970:	0800c794 	.word	0x0800c794
 8001974:	0800c7b4 	.word	0x0800c7b4
 8001978:	0800c814 	.word	0x0800c814

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_MspInit+0x68>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a17      	ldr	r2, [pc, #92]	@ (80019e4 <HAL_MspInit+0x68>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_MspInit+0x68>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_MspInit+0x68>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <HAL_MspInit+0x68>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <HAL_MspInit+0x68>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	210f      	movs	r1, #15
 80019b6:	f06f 0001 	mvn.w	r0, #1
 80019ba:	f000 fc5a 	bl	8002272 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_MspInit+0x6c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_MspInit+0x6c>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a02:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <HAL_InitTick+0xd0>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a2d      	ldr	r2, [pc, #180]	@ (8001abc <HAL_InitTick+0xd0>)
 8001a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_InitTick+0xd0>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1a:	f107 020c 	add.w	r2, r7, #12
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fe87 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a2a:	f002 fe71 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8001a2e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a32:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_InitTick+0xd4>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	0c9b      	lsrs	r3, r3, #18
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a40:	4a21      	ldr	r2, [pc, #132]	@ (8001ac8 <HAL_InitTick+0xdc>)
 8001a42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a4a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a64:	4817      	ldr	r0, [pc, #92]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a66:	f002 feb5 	bl	80047d4 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11b      	bne.n	8001ab0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a78:	4812      	ldr	r0, [pc, #72]	@ (8001ac4 <HAL_InitTick+0xd8>)
 8001a7a:	f002 ff03 	bl	8004884 <HAL_TIM_Base_Start_IT>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d111      	bne.n	8001ab0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a8c:	2019      	movs	r0, #25
 8001a8e:	f000 fc0c 	bl	80022aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d808      	bhi.n	8001aaa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	2019      	movs	r0, #25
 8001a9e:	f000 fbe8 	bl	8002272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_InitTick+0xe0>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e002      	b.n	8001ab0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3730      	adds	r7, #48	@ 0x30
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	20000254 	.word	0x20000254
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	20000004 	.word	0x20000004

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <DMA1_Channel6_IRQHandler+0x10>)
 8001b0a:	f000 fd4b 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200002e8 	.word	0x200002e8

08001b18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <DMA1_Channel7_IRQHandler+0x10>)
 8001b1e:	f000 fd41 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000032c 	.word	0x2000032c

08001b2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM1_UP_IRQHandler+0x10>)
 8001b32:	f002 fef9 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000254 	.word	0x20000254

08001b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <USART2_IRQHandler+0x10>)
 8001b46:	f003 f9cf 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002a0 	.word	0x200002a0

08001b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b5c:	f000 fff2 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <_kill>:

int _kill(int pid, int sig)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7c:	f008 fde4 	bl	800a748 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2216      	movs	r2, #22
 8001b84:	601a      	str	r2, [r3, #0]
  return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_exit>:

void _exit (int status)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b9a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffe7 	bl	8001b72 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <_exit+0x12>

08001ba8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
  }

  return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c08:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <_isatty>:

int _isatty(int file)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b085      	sub	sp, #20
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	@ (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	@ (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f008 fd68 	bl	800a748 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20005000 	.word	0x20005000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	2000029c 	.word	0x2000029c
 8001cac:	20003ac0 	.word	0x20003ac0

08001cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <MX_USART2_UART_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f002 ffac 	bl	8004c50 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cfe:	f7ff fb0b 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002a0 	.word	0x200002a0
 8001d0c:	40004400 	.word	0x40004400

08001d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e28 <HAL_UART_MspInit+0x118>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d177      	bne.n	8001e20 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d30:	4b3e      	ldr	r3, [pc, #248]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	4a3d      	ldr	r2, [pc, #244]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3a:	61d3      	str	r3, [r2, #28]
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d48:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a37      	ldr	r2, [pc, #220]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b35      	ldr	r3, [pc, #212]	@ (8001e2c <HAL_UART_MspInit+0x11c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d60:	230c      	movs	r3, #12
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	482f      	ldr	r0, [pc, #188]	@ (8001e30 <HAL_UART_MspInit+0x120>)
 8001d74:	f000 fd4a 	bl	800280c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e38 <HAL_UART_MspInit+0x128>)
 8001d7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d8c:	2280      	movs	r2, #128	@ 0x80
 8001d8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d96:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001d9e:	2220      	movs	r2, #32
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001da8:	4822      	ldr	r0, [pc, #136]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001daa:	f000 fa8d 	bl	80022c8 <HAL_DMA_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001db4:	f7ff fab0 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <HAL_UART_MspInit+0x124>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_UART_MspInit+0x130>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dcc:	2210      	movs	r2, #16
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001df4:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001df6:	f000 fa67 	bl	80022c8 <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001e00:	f7ff fa8a 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001e08:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <HAL_UART_MspInit+0x12c>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2026      	movs	r0, #38	@ 0x26
 8001e16:	f000 fa2c 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e1a:	2026      	movs	r0, #38	@ 0x26
 8001e1c:	f000 fa45 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	200002e8 	.word	0x200002e8
 8001e38:	4002006c 	.word	0x4002006c
 8001e3c:	2000032c 	.word	0x2000032c
 8001e40:	40020080 	.word	0x40020080

08001e44 <_write>:
 */

#include "write_printf.h"
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <_write+0x28>)
 8001e5c:	f002 ff48 	bl	8004cf0 <HAL_UART_Transmit>
    return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200002a0 	.word	0x200002a0

08001e70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e70:	f7ff ff1e 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480b      	ldr	r0, [pc, #44]	@ (8001ea4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e76:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e78:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e8c:	4c09      	ldr	r4, [pc, #36]	@ (8001eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f008 fc5b 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9e:	f7ff f9d5 	bl	800124c <main>
  bx lr
 8001ea2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001eac:	0800cbe8 	.word	0x0800cbe8
  ldr r2, =_sbss
 8001eb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001eb4:	20003abc 	.word	0x20003abc

08001eb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC1_2_IRQHandler>

08001eba <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
 8001ecc:	f7ff fa24 	bl	8001318 <Error_Handler>
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e007      	b.n	8001eea <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d9f4      	bls.n	8001eda <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	721a      	strb	r2, [r3, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
 8001f10:	f7ff fa02 	bl	8001318 <Error_Handler>
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7a1b      	ldrb	r3, [r3, #8]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d905      	bls.n	8001f2c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
 8001f24:	f7ff f9f8 	bl	8001318 <Error_Handler>
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7a1b      	ldrb	r3, [r3, #8]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	b2d1      	uxtb	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	7211      	strb	r1, [r2, #8]
 8001f38:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8001f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	60fa      	str	r2, [r7, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop
 8001f74:	f7ff f9d0 	bl	8001318 <Error_Handler>
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7a1b      	ldrb	r3, [r3, #8]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7a1b      	ldrb	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d905      	bls.n	8001f9c <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
 8001f94:	f7ff f9c0 	bl	8001318 <Error_Handler>
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7a1b      	ldrb	r3, [r3, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fb0:	bf00      	nop
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001fc8:	f008 fbbe 	bl	800a748 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2216      	movs	r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
    return;
 8001fd2:	e016      	b.n	8002002 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001fd4:	200c      	movs	r0, #12
 8001fd6:	f007 fbaf 	bl	8009738 <malloc>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff63 	bl	8001eba <stm32_lock_init>
    return;
 8001ff4:	e005      	b.n	8002002 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001ffa:	f7ff f98d 	bl	8001318 <Error_Handler>
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <__retarget_lock_init_recursive+0x44>
}
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002016:	b672      	cpsid	i
}
 8002018:	bf00      	nop
 800201a:	f7ff f97d 	bl	8001318 <Error_Handler>
 800201e:	bf00      	nop
 8002020:	e7fd      	b.n	800201e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff6a 	bl	8001efe <stm32_lock_acquire>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
 8002044:	f7ff f968 	bl	8001318 <Error_Handler>
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff87 	bl	8001f62 <stm32_lock_release>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_Init+0x28>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_Init+0x28>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f8f5 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	200f      	movs	r0, #15
 8002074:	f7ff fcba 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fc80 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <HAL_IncTick+0x1c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_IncTick+0x20>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a03      	ldr	r2, [pc, #12]	@ (80020a8 <HAL_IncTick+0x20>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000388 	.word	0x20000388

080020ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <HAL_GetTick+0x10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000388 	.word	0x20000388

080020c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fff0 	bl	80020ac <HAL_GetTick>
 80020cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020d8:	d005      	beq.n	80020e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_Delay+0x44>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020e6:	bf00      	nop
 80020e8:	f7ff ffe0 	bl	80020ac <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d8f7      	bhi.n	80020e8 <HAL_Delay+0x28>
  {
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000008 	.word	0x20000008

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4906      	ldr	r1, [pc, #24]	@ (80021a0 <__NVIC_EnableIRQ+0x34>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	@ (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	@ (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff4f 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff64 	bl	8002150 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ffb2 	bl	80021f8 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff81 	bl	80021a4 <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff57 	bl	800216c <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e043      	b.n	8002366 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_DMA_Init+0xa8>)
 80022e6:	4413      	add	r3, r2
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_DMA_Init+0xac>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_DMA_Init+0xb0>)
 80022fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002312:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	bffdfff8 	.word	0xbffdfff8
 8002374:	cccccccd 	.word	0xcccccccd
 8002378:	40020000 	.word	0x40020000

0800237c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_DMA_Start_IT+0x20>
 8002398:	2302      	movs	r3, #2
 800239a:	e04b      	b.n	8002434 <HAL_DMA_Start_IT+0xb8>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d13a      	bne.n	8002426 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f9eb 	bl	80027b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 020e 	orr.w	r2, r2, #14
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e00f      	b.n	8002414 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 020a 	orr.w	r2, r2, #10
 8002412:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e005      	b.n	8002432 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002432:	7dfb      	ldrb	r3, [r7, #23]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2204      	movs	r2, #4
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e020      	b.n	80024a8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 020e 	bic.w	r2, r2, #14
 8002474:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	2101      	movs	r1, #1
 8002490:	fa01 f202 	lsl.w	r2, r1, r2
 8002494:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d005      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e051      	b.n	800257c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 020e 	bic.w	r2, r2, #14
 80024e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a22      	ldr	r2, [pc, #136]	@ (8002588 <HAL_DMA_Abort_IT+0xd4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d029      	beq.n	8002556 <HAL_DMA_Abort_IT+0xa2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <HAL_DMA_Abort_IT+0xd8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <HAL_DMA_Abort_IT+0x9e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_DMA_Abort_IT+0xdc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01a      	beq.n	800254c <HAL_DMA_Abort_IT+0x98>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1e      	ldr	r2, [pc, #120]	@ (8002594 <HAL_DMA_Abort_IT+0xe0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d012      	beq.n	8002546 <HAL_DMA_Abort_IT+0x92>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_DMA_Abort_IT+0xe4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00a      	beq.n	8002540 <HAL_DMA_Abort_IT+0x8c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <HAL_DMA_Abort_IT+0xe8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d102      	bne.n	800253a <HAL_DMA_Abort_IT+0x86>
 8002534:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002538:	e00e      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 800253a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800253e:	e00b      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 8002540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002544:	e008      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 8002546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800254a:	e005      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 800254c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002550:	e002      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 8002552:	2310      	movs	r3, #16
 8002554:	e000      	b.n	8002558 <HAL_DMA_Abort_IT+0xa4>
 8002556:	2301      	movs	r3, #1
 8002558:	4a11      	ldr	r2, [pc, #68]	@ (80025a0 <HAL_DMA_Abort_IT+0xec>)
 800255a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
    } 
  }
  return status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020008 	.word	0x40020008
 800258c:	4002001c 	.word	0x4002001c
 8002590:	40020030 	.word	0x40020030
 8002594:	40020044 	.word	0x40020044
 8002598:	40020058 	.word	0x40020058
 800259c:	4002006c 	.word	0x4002006c
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2204      	movs	r2, #4
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d04f      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d04a      	beq.n	800266c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d029      	beq.n	8002652 <HAL_DMA_IRQHandler+0xae>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d022      	beq.n	800264e <HAL_DMA_IRQHandler+0xaa>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a63      	ldr	r2, [pc, #396]	@ (800279c <HAL_DMA_IRQHandler+0x1f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01a      	beq.n	8002648 <HAL_DMA_IRQHandler+0xa4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a62      	ldr	r2, [pc, #392]	@ (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0x9e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a60      	ldr	r2, [pc, #384]	@ (80027a4 <HAL_DMA_IRQHandler+0x200>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_DMA_IRQHandler+0x98>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_DMA_IRQHandler+0x204>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d102      	bne.n	8002636 <HAL_DMA_IRQHandler+0x92>
 8002630:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002634:	e00e      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002636:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800263a:	e00b      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800263c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002640:	e008      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002642:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002646:	e005      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800264c:	e002      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 800264e:	2340      	movs	r3, #64	@ 0x40
 8002650:	e000      	b.n	8002654 <HAL_DMA_IRQHandler+0xb0>
 8002652:	2304      	movs	r3, #4
 8002654:	4a55      	ldr	r2, [pc, #340]	@ (80027ac <HAL_DMA_IRQHandler+0x208>)
 8002656:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8094 	beq.w	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800266a:	e08e      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	2202      	movs	r2, #2
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d056      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d051      	beq.n	800272a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020a 	bic.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a38      	ldr	r2, [pc, #224]	@ (8002794 <HAL_DMA_IRQHandler+0x1f0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d029      	beq.n	800270a <HAL_DMA_IRQHandler+0x166>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a37      	ldr	r2, [pc, #220]	@ (8002798 <HAL_DMA_IRQHandler+0x1f4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_IRQHandler+0x162>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a35      	ldr	r2, [pc, #212]	@ (800279c <HAL_DMA_IRQHandler+0x1f8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01a      	beq.n	8002700 <HAL_DMA_IRQHandler+0x15c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a34      	ldr	r2, [pc, #208]	@ (80027a0 <HAL_DMA_IRQHandler+0x1fc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d012      	beq.n	80026fa <HAL_DMA_IRQHandler+0x156>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a32      	ldr	r2, [pc, #200]	@ (80027a4 <HAL_DMA_IRQHandler+0x200>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x150>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a31      	ldr	r2, [pc, #196]	@ (80027a8 <HAL_DMA_IRQHandler+0x204>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d102      	bne.n	80026ee <HAL_DMA_IRQHandler+0x14a>
 80026e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026ec:	e00e      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f2:	e00b      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f8:	e008      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 80026fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026fe:	e005      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002704:	e002      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 8002706:	2320      	movs	r3, #32
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0x168>
 800270a:	2302      	movs	r3, #2
 800270c:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_DMA_IRQHandler+0x208>)
 800270e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d034      	beq.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002728:	e02f      	b.n	800278a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2208      	movs	r2, #8
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d023      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 020e 	bic.w	r2, r2, #14
 8002752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
    }
  }
  return;
 800278a:	bf00      	nop
 800278c:	bf00      	nop
}
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40020008 	.word	0x40020008
 8002798:	4002001c 	.word	0x4002001c
 800279c:	40020030 	.word	0x40020030
 80027a0:	40020044 	.word	0x40020044
 80027a4:	40020058 	.word	0x40020058
 80027a8:	4002006c 	.word	0x4002006c
 80027ac:	40020000 	.word	0x40020000

080027b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d108      	bne.n	80027f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ee:	e007      	b.n	8002800 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
	...

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b08b      	sub	sp, #44	@ 0x2c
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	e169      	b.n	8002af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002820:	2201      	movs	r2, #1
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8158 	bne.w	8002aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a9a      	ldr	r2, [pc, #616]	@ (8002aac <HAL_GPIO_Init+0x2a0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d05e      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002848:	4a98      	ldr	r2, [pc, #608]	@ (8002aac <HAL_GPIO_Init+0x2a0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d875      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800284e:	4a98      	ldr	r2, [pc, #608]	@ (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d058      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002854:	4a96      	ldr	r2, [pc, #600]	@ (8002ab0 <HAL_GPIO_Init+0x2a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d86f      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800285a:	4a96      	ldr	r2, [pc, #600]	@ (8002ab4 <HAL_GPIO_Init+0x2a8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d052      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002860:	4a94      	ldr	r2, [pc, #592]	@ (8002ab4 <HAL_GPIO_Init+0x2a8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d869      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002866:	4a94      	ldr	r2, [pc, #592]	@ (8002ab8 <HAL_GPIO_Init+0x2ac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d04c      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 800286c:	4a92      	ldr	r2, [pc, #584]	@ (8002ab8 <HAL_GPIO_Init+0x2ac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d863      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002872:	4a92      	ldr	r2, [pc, #584]	@ (8002abc <HAL_GPIO_Init+0x2b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d046      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
 8002878:	4a90      	ldr	r2, [pc, #576]	@ (8002abc <HAL_GPIO_Init+0x2b0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d85d      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 800287e:	2b12      	cmp	r3, #18
 8002880:	d82a      	bhi.n	80028d8 <HAL_GPIO_Init+0xcc>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d859      	bhi.n	800293a <HAL_GPIO_Init+0x12e>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_GPIO_Init+0x80>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	08002907 	.word	0x08002907
 8002890:	080028e1 	.word	0x080028e1
 8002894:	080028f3 	.word	0x080028f3
 8002898:	08002935 	.word	0x08002935
 800289c:	0800293b 	.word	0x0800293b
 80028a0:	0800293b 	.word	0x0800293b
 80028a4:	0800293b 	.word	0x0800293b
 80028a8:	0800293b 	.word	0x0800293b
 80028ac:	0800293b 	.word	0x0800293b
 80028b0:	0800293b 	.word	0x0800293b
 80028b4:	0800293b 	.word	0x0800293b
 80028b8:	0800293b 	.word	0x0800293b
 80028bc:	0800293b 	.word	0x0800293b
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	0800293b 	.word	0x0800293b
 80028c8:	0800293b 	.word	0x0800293b
 80028cc:	0800293b 	.word	0x0800293b
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028fd 	.word	0x080028fd
 80028d8:	4a79      	ldr	r2, [pc, #484]	@ (8002ac0 <HAL_GPIO_Init+0x2b4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028de:	e02c      	b.n	800293a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e029      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e024      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	3308      	adds	r3, #8
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e01f      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	330c      	adds	r3, #12
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e01a      	b.n	800293c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290e:	2304      	movs	r3, #4
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e013      	b.n	800293c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800291c:	2308      	movs	r3, #8
 800291e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	611a      	str	r2, [r3, #16]
          break;
 8002926:	e009      	b.n	800293c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002928:	2308      	movs	r3, #8
 800292a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	615a      	str	r2, [r3, #20]
          break;
 8002932:	e003      	b.n	800293c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x130>
          break;
 800293a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	2bff      	cmp	r3, #255	@ 0xff
 8002940:	d801      	bhi.n	8002946 <HAL_GPIO_Init+0x13a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	e001      	b.n	800294a <HAL_GPIO_Init+0x13e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2bff      	cmp	r3, #255	@ 0xff
 8002950:	d802      	bhi.n	8002958 <HAL_GPIO_Init+0x14c>
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x152>
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	3b08      	subs	r3, #8
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	210f      	movs	r1, #15
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	6a39      	ldr	r1, [r7, #32]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b1 	beq.w	8002aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800298c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac4 <HAL_GPIO_Init+0x2b8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac4 <HAL_GPIO_Init+0x2b8>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a4:	4a48      	ldr	r2, [pc, #288]	@ (8002ac8 <HAL_GPIO_Init+0x2bc>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a40      	ldr	r2, [pc, #256]	@ (8002acc <HAL_GPIO_Init+0x2c0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d013      	beq.n	80029f8 <HAL_GPIO_Init+0x1ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ad0 <HAL_GPIO_Init+0x2c4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00d      	beq.n	80029f4 <HAL_GPIO_Init+0x1e8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3e      	ldr	r2, [pc, #248]	@ (8002ad4 <HAL_GPIO_Init+0x2c8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <HAL_GPIO_Init+0x1e4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ad8 <HAL_GPIO_Init+0x2cc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_GPIO_Init+0x1e0>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029ec:	2304      	movs	r3, #4
 80029ee:	e004      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e002      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f4:	2301      	movs	r3, #1
 80029f6:	e000      	b.n	80029fa <HAL_GPIO_Init+0x1ee>
 80029f8:	2300      	movs	r3, #0
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	f002 0203 	and.w	r2, r2, #3
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	4093      	lsls	r3, r2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a0a:	492f      	ldr	r1, [pc, #188]	@ (8002ac8 <HAL_GPIO_Init+0x2bc>)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a24:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	492c      	ldr	r1, [pc, #176]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a32:	4b2a      	ldr	r3, [pc, #168]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4928      	ldr	r1, [pc, #160]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a4c:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4922      	ldr	r1, [pc, #136]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a5a:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	491e      	ldr	r1, [pc, #120]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4918      	ldr	r1, [pc, #96]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a82:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4914      	ldr	r1, [pc, #80]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d021      	beq.n	8002ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	490e      	ldr	r1, [pc, #56]	@ (8002adc <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
 8002aa8:	e021      	b.n	8002aee <HAL_GPIO_Init+0x2e2>
 8002aaa:	bf00      	nop
 8002aac:	10320000 	.word	0x10320000
 8002ab0:	10310000 	.word	0x10310000
 8002ab4:	10220000 	.word	0x10220000
 8002ab8:	10210000 	.word	0x10210000
 8002abc:	10120000 	.word	0x10120000
 8002ac0:	10110000 	.word	0x10110000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40010800 	.word	0x40010800
 8002ad0:	40010c00 	.word	0x40010c00
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40011400 	.word	0x40011400
 8002adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4909      	ldr	r1, [pc, #36]	@ (8002b10 <HAL_GPIO_Init+0x304>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	fa22 f303 	lsr.w	r3, r2, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f ae8e 	bne.w	8002820 <HAL_GPIO_Init+0x14>
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	372c      	adds	r7, #44	@ 0x2c
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b30:	e003      	b.n	8002b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	041a      	lsls	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f806 	bl	8002b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e12b      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fb0e 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bec:	f001 fd7c 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a81      	ldr	r2, [pc, #516]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d807      	bhi.n	8002c0c <HAL_I2C_Init+0x84>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a80      	ldr	r2, [pc, #512]	@ (8002e00 <HAL_I2C_Init+0x278>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e006      	b.n	8002c1a <HAL_I2C_Init+0x92>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e04 <HAL_I2C_Init+0x27c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0e7      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a78      	ldr	r2, [pc, #480]	@ (8002e08 <HAL_I2C_Init+0x280>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a6a      	ldr	r2, [pc, #424]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <HAL_I2C_Init+0xd4>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_I2C_Init+0xe8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a69      	ldr	r2, [pc, #420]	@ (8002e0c <HAL_I2C_Init+0x284>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	3301      	adds	r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	495c      	ldr	r1, [pc, #368]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d819      	bhi.n	8002cc4 <HAL_I2C_Init+0x13c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e59      	subs	r1, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_I2C_Init+0x138>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e59      	subs	r1, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	e051      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e04f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_I2C_Init+0x168>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e012      	b.n	8002d16 <HAL_I2C_Init+0x18e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x196>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_Init+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e58      	subs	r0, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6809      	ldr	r1, [r1, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6911      	ldr	r1, [r2, #16]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	000186a0 	.word	0x000186a0
 8002e00:	001e847f 	.word	0x001e847f
 8002e04:	003d08ff 	.word	0x003d08ff
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff f942 	bl	80020ac <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 80e0 	bne.w	8002ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4970      	ldr	r1, [pc, #448]	@ (8003004 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fe50 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0d3      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0cc      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	@ 0x21
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	@ (8003008 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fc0a 	bl	80036e8 <I2C_MasterRequestWrite>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e08d      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ef4:	e066      	b.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 ff0e 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06b      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d11b      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 ff05 	bl	8003dac <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01a      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d194      	bne.n	8002ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	00100002 	.word	0x00100002
 8003008:	ffff0000 	.word	0xffff0000

0800300c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	4608      	mov	r0, r1
 8003016:	4611      	mov	r1, r2
 8003018:	461a      	mov	r2, r3
 800301a:	4603      	mov	r3, r0
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	460b      	mov	r3, r1
 8003020:	813b      	strh	r3, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003026:	f7ff f841 	bl	80020ac <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	f040 80d9 	bne.w	80031ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	2201      	movs	r2, #1
 8003042:	496d      	ldr	r1, [pc, #436]	@ (80031f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fd4f 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
 8003052:	e0cc      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Mem_Write+0x56>
 800305e:	2302      	movs	r3, #2
 8003060:	e0c5      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d007      	beq.n	8003088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2221      	movs	r2, #33	@ 0x21
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	@ 0x40
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a4d      	ldr	r2, [pc, #308]	@ (80031fc <HAL_I2C_Mem_Write+0x1f0>)
 80030c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ca:	88f8      	ldrh	r0, [r7, #6]
 80030cc:	893a      	ldrh	r2, [r7, #8]
 80030ce:	8979      	ldrh	r1, [r7, #10]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4603      	mov	r3, r0
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fb86 	bl	80037ec <I2C_RequestMemoryWrite>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d052      	beq.n	800318c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e081      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fe14 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_I2C_Mem_Write+0x180>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1aa      	bne.n	80030ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fe07 	bl	8003dac <I2C_WaitOnBTFFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e016      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	@ 0x30
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	460b      	mov	r3, r1
 8003214:	813b      	strh	r3, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7fe ff45 	bl	80020ac <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	f040 8250 	bne.w	80036d2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2319      	movs	r3, #25
 8003238:	2201      	movs	r2, #1
 800323a:	4982      	ldr	r1, [pc, #520]	@ (8003444 <HAL_I2C_Mem_Read+0x244>)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fc53 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	e243      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_I2C_Mem_Read+0x5a>
 8003256:	2302      	movs	r3, #2
 8003258:	e23c      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d007      	beq.n	8003280 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2222      	movs	r2, #34	@ 0x22
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2240      	movs	r2, #64	@ 0x40
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a62      	ldr	r2, [pc, #392]	@ (8003448 <HAL_I2C_Mem_Read+0x248>)
 80032c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c2:	88f8      	ldrh	r0, [r7, #6]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fb20 	bl	8003918 <I2C_RequestMemoryRead>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e1f8      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e1cc      	b.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	2b01      	cmp	r3, #1
 8003318:	d11e      	bne.n	8003358 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003328:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800332a:	b672      	cpsid	i
}
 800332c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	61bb      	str	r3, [r7, #24]
 8003342:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003352:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003354:	b662      	cpsie	i
}
 8003356:	e035      	b.n	80033c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	2b02      	cmp	r3, #2
 800335e:	d11e      	bne.n	800339e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800339a:	b662      	cpsie	i
}
 800339c:	e012      	b.n	80033c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033c4:	e172      	b.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	f200 811f 	bhi.w	800360e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d123      	bne.n	8003420 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fd2d 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e173      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800341e:	e145      	b.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	2b02      	cmp	r3, #2
 8003426:	d152      	bne.n	80034ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	2200      	movs	r2, #0
 8003430:	4906      	ldr	r1, [pc, #24]	@ (800344c <HAL_I2C_Mem_Read+0x24c>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fb58 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e148      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
 8003442:	bf00      	nop
 8003444:	00100002 	.word	0x00100002
 8003448:	ffff0000 	.word	0xffff0000
 800344c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003496:	b662      	cpsie	i
}
 8003498:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034cc:	e0ee      	b.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2200      	movs	r2, #0
 80034d6:	4981      	ldr	r1, [pc, #516]	@ (80036dc <HAL_I2C_Mem_Read+0x4dc>)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb05 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0f5      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800352e:	4b6c      	ldr	r3, [pc, #432]	@ (80036e0 <HAL_I2C_Mem_Read+0x4e0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	4a6b      	ldr	r2, [pc, #428]	@ (80036e4 <HAL_I2C_Mem_Read+0x4e4>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a1a      	lsrs	r2, r3, #8
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00da      	lsls	r2, r3, #3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	3b01      	subs	r3, #1
 800354c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d118      	bne.n	8003586 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003576:	b662      	cpsie	i
}
 8003578:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0a6      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d1d9      	bne.n	8003548 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035d6:	b662      	cpsie	i
}
 80035d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800360c:	e04e      	b.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003610:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fc12 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e058      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b04      	cmp	r3, #4
 8003660:	d124      	bne.n	80036ac <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003666:	2b03      	cmp	r3, #3
 8003668:	d107      	bne.n	800367a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003678:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f47f ae88 	bne.w	80033c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	00010004 	.word	0x00010004
 80036e0:	20000000 	.word	0x20000000
 80036e4:	14f8b589 	.word	0x14f8b589

080036e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d006      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <I2C_MasterRequestWrite+0x2a>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003710:	d108      	bne.n	8003724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00b      	b.n	800373c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	2b12      	cmp	r3, #18
 800372a:	d107      	bne.n	800373c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800373a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f9cd 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003762:	d103      	bne.n	800376c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e035      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003778:	d108      	bne.n	800378c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e01b      	b.n	80037c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	11db      	asrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f063 030f 	orn	r3, r3, #15
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	490e      	ldr	r1, [pc, #56]	@ (80037e4 <I2C_MasterRequestWrite+0xfc>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa16 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e010      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4907      	ldr	r1, [pc, #28]	@ (80037e8 <I2C_MasterRequestWrite+0x100>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fa06 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010008 	.word	0x00010008
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2200      	movs	r2, #0
 800381e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f960 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383c:	d103      	bne.n	8003846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e05f      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	492d      	ldr	r1, [pc, #180]	@ (8003914 <I2C_RequestMemoryWrite+0x128>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f9bb 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04c      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa46 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02b      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e021      	b.n	8003908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa20 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e005      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2200      	movs	r2, #0
 800395a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8c2 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003978:	d103      	bne.n	8003982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0aa      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	4952      	ldr	r1, [pc, #328]	@ (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f91d 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e097      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f9a8 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e076      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	e021      	b.n	8003a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f982 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e050      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f967 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e035      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f82b 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e013      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f886 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010002 	.word	0x00010002

08003ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af8:	e048      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b00:	d044      	beq.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fad3 	bl	80020ac <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d139      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	e00c      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d116      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e023      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10d      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	e00c      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d093      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bea:	e071      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d123      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f043 0204 	orr.w	r2, r3, #4
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e067      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c4a:	d041      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe fa2e 	bl	80020ac <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d136      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e00b      	b.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e021      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10c      	bne.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e00b      	b.n	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af6d 	bne.w	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f8e3 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e034      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d40:	d028      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe f9b3 	bl	80020ac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11d      	bne.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b80      	cmp	r3, #128	@ 0x80
 8003d64:	d016      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b80      	cmp	r3, #128	@ 0x80
 8003da0:	d1c3      	bne.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	e034      	b.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f89b 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e034      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd0:	d028      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe f96b 	bl	80020ac <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11d      	bne.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d016      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e007      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d1c3      	bne.n	8003dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e48:	e049      	b.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d119      	bne.n	8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0210 	mvn.w	r2, #16
 8003e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e030      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe f90e 	bl	80020ac <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d016      	beq.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d1ae      	bne.n	8003e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0c:	d11b      	bne.n	8003f46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e272      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8087 	beq.w	8004082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f74:	4b92      	ldr	r3, [pc, #584]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d00c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f80:	4b8f      	ldr	r3, [pc, #572]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d112      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x5e>
 8003f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9a:	4b89      	ldr	r3, [pc, #548]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06c      	beq.n	8004080 <HAL_RCC_OscConfig+0x12c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d168      	bne.n	8004080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e24c      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x76>
 8003fbc:	4b80      	ldr	r3, [pc, #512]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e02e      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b78      	ldr	r3, [pc, #480]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a77      	ldr	r2, [pc, #476]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0xbc>
 8003ff6:	4b72      	ldr	r3, [pc, #456]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a71      	ldr	r2, [pc, #452]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6f      	ldr	r3, [pc, #444]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6e      	ldr	r2, [pc, #440]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xd4>
 8004010:	4b6b      	ldr	r3, [pc, #428]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6a      	ldr	r2, [pc, #424]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b68      	ldr	r3, [pc, #416]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a67      	ldr	r2, [pc, #412]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe f83c 	bl	80020ac <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe f838 	bl	80020ac <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	@ 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e200      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b5d      	ldr	r3, [pc, #372]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0xe4>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe f828 	bl	80020ac <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe f824 	bl	80020ac <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	@ 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1ec      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	4b53      	ldr	r3, [pc, #332]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x10c>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d063      	beq.n	8004156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800408e:	4b4c      	ldr	r3, [pc, #304]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800409a:	4b49      	ldr	r3, [pc, #292]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d11c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x18c>
 80040a6:	4b46      	ldr	r3, [pc, #280]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d116      	bne.n	80040e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	4b43      	ldr	r3, [pc, #268]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x176>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e1c0      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b3d      	ldr	r3, [pc, #244]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4939      	ldr	r1, [pc, #228]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040de:	e03a      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e8:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <HAL_RCC_OscConfig+0x270>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fd ffdd 	bl	80020ac <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fd ffd9 	bl	80020ac <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1a1      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	4b2d      	ldr	r3, [pc, #180]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4927      	ldr	r1, [pc, #156]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	e015      	b.n	8004156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b26      	ldr	r3, [pc, #152]	@ (80041c4 <HAL_RCC_OscConfig+0x270>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd ffbc 	bl	80020ac <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fd ffb8 	bl	80020ac <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e180      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d03a      	beq.n	80041d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <HAL_RCC_OscConfig+0x274>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004170:	f7fd ff9c 	bl	80020ac <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004178:	f7fd ff98 	bl	80020ac <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e160      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <HAL_RCC_OscConfig+0x26c>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004196:	2001      	movs	r0, #1
 8004198:	f000 fafe 	bl	8004798 <RCC_Delay>
 800419c:	e01c      	b.n	80041d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419e:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <HAL_RCC_OscConfig+0x274>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fd ff82 	bl	80020ac <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041aa:	e00f      	b.n	80041cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ac:	f7fd ff7e 	bl	80020ac <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d908      	bls.n	80041cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e146      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	42420000 	.word	0x42420000
 80041c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b92      	ldr	r3, [pc, #584]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e9      	bne.n	80041ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a6 	beq.w	8004332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4a87      	ldr	r2, [pc, #540]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004200:	61d3      	str	r3, [r2, #28]
 8004202:	4b85      	ldr	r3, [pc, #532]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004212:	4b82      	ldr	r3, [pc, #520]	@ (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d118      	bne.n	8004250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421e:	4b7f      	ldr	r3, [pc, #508]	@ (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7e      	ldr	r2, [pc, #504]	@ (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422a:	f7fd ff3f 	bl	80020ac <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004232:	f7fd ff3b 	bl	80020ac <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b64      	cmp	r3, #100	@ 0x64
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e103      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b75      	ldr	r3, [pc, #468]	@ (800441c <HAL_RCC_OscConfig+0x4c8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x312>
 8004258:	4b6f      	ldr	r3, [pc, #444]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4a6e      	ldr	r2, [pc, #440]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	6213      	str	r3, [r2, #32]
 8004264:	e02d      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x334>
 800426e:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a69      	ldr	r2, [pc, #420]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6213      	str	r3, [r2, #32]
 800427a:	4b67      	ldr	r3, [pc, #412]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a66      	ldr	r2, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6213      	str	r3, [r2, #32]
 8004286:	e01c      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b05      	cmp	r3, #5
 800428e:	d10c      	bne.n	80042aa <HAL_RCC_OscConfig+0x356>
 8004290:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a60      	ldr	r2, [pc, #384]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6213      	str	r3, [r2, #32]
 800429c:	4b5e      	ldr	r3, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	e00b      	b.n	80042c2 <HAL_RCC_OscConfig+0x36e>
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	4b58      	ldr	r3, [pc, #352]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a57      	ldr	r2, [pc, #348]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d015      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd feef 	bl	80020ac <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd feeb 	bl	80020ac <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0b1      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCC_OscConfig+0x37e>
 80042f4:	e014      	b.n	8004320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fed9 	bl	80020ac <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fed5 	bl	80020ac <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e09b      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004314:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ee      	bne.n	80042fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d105      	bne.n	8004332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b3c      	ldr	r3, [pc, #240]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4a3b      	ldr	r2, [pc, #236]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8087 	beq.w	800444a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800433c:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b08      	cmp	r3, #8
 8004346:	d061      	beq.n	800440c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d146      	bne.n	80043de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b33      	ldr	r3, [pc, #204]	@ (8004420 <HAL_RCC_OscConfig+0x4cc>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fd fea9 	bl	80020ac <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435e:	f7fd fea5 	bl	80020ac <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e06d      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004370:	4b29      	ldr	r3, [pc, #164]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004384:	d108      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004386:	4b24      	ldr	r3, [pc, #144]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4921      	ldr	r1, [pc, #132]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004398:	4b1f      	ldr	r3, [pc, #124]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a19      	ldr	r1, [r3, #32]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	430b      	orrs	r3, r1
 80043aa:	491b      	ldr	r1, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x4cc>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fd fe79 	bl	80020ac <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043be:	f7fd fe75 	bl	80020ac <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e03d      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x46a>
 80043dc:	e035      	b.n	800444a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_RCC_OscConfig+0x4cc>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fe62 	bl	80020ac <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd fe5e 	bl	80020ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e026      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x498>
 800440a:	e01e      	b.n	800444a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e019      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
 8004418:	40021000 	.word	0x40021000
 800441c:	40007000 	.word	0x40007000
 8004420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <HAL_RCC_OscConfig+0x500>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	429a      	cmp	r2, r3
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000

08004458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0d0      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b6a      	ldr	r3, [pc, #424]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d910      	bls.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b67      	ldr	r3, [pc, #412]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4965      	ldr	r1, [pc, #404]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a58      	ldr	r2, [pc, #352]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80044d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d040      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d115      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b41      	ldr	r3, [pc, #260]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e073      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06b      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b39      	ldr	r3, [pc, #228]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4936      	ldr	r1, [pc, #216]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fd fdb0 	bl	80020ac <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fd fdac 	bl	80020ac <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e053      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2d      	ldr	r3, [pc, #180]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b27      	ldr	r3, [pc, #156]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d210      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b24      	ldr	r3, [pc, #144]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0207 	bic.w	r2, r3, #7
 800458e:	4922      	ldr	r1, [pc, #136]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045d2:	4b12      	ldr	r3, [pc, #72]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f821 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	490a      	ldr	r1, [pc, #40]	@ (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	5ccb      	ldrb	r3, [r1, r3]
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	@ (8004624 <HAL_RCC_ClockConfig+0x1cc>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_RCC_ClockConfig+0x1d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd f9f0 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40022000 	.word	0x40022000
 800461c:	40021000 	.word	0x40021000
 8004620:	0800c83c 	.word	0x0800c83c
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004646:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d002      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x30>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d003      	beq.n	8004662 <HAL_RCC_GetSysClockFreq+0x36>
 800465a:	e027      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800465e:	613b      	str	r3, [r7, #16]
      break;
 8004660:	e027      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0c9b      	lsrs	r3, r3, #18
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800466c:	5cd3      	ldrb	r3, [r2, r3]
 800466e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d010      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467a:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	0c5b      	lsrs	r3, r3, #17
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	4a11      	ldr	r2, [pc, #68]	@ (80046cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a0d      	ldr	r2, [pc, #52]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800468e:	fb03 f202 	mul.w	r2, r3, r2
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e004      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	613b      	str	r3, [r7, #16]
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ae:	613b      	str	r3, [r7, #16]
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	693b      	ldr	r3, [r7, #16]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000
 80046c4:	007a1200 	.word	0x007a1200
 80046c8:	0800c854 	.word	0x0800c854
 80046cc:	0800c864 	.word	0x0800c864
 80046d0:	003d0900 	.word	0x003d0900

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b02      	ldr	r3, [pc, #8]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff2 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	0800c84c 	.word	0x0800c84c

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffde 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0adb      	lsrs	r3, r3, #11
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800c84c 	.word	0x0800c84c

08004738 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <HAL_RCC_GetClockConfig+0x58>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <HAL_RCC_GetClockConfig+0x58>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_GetClockConfig+0x58>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800476c:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <HAL_RCC_GetClockConfig+0x58>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	40022000 	.word	0x40022000

08004798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <RCC_Delay+0x34>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <RCC_Delay+0x38>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a5b      	lsrs	r3, r3, #9
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b4:	bf00      	nop
  }
  while (Delay --);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f9      	bne.n	80047b4 <RCC_Delay+0x1c>
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	20000000 	.word	0x20000000
 80047d0:	10624dd3 	.word	0x10624dd3

080047d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e041      	b.n	800486a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f839 	bl	8004872 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 f99c 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e03a      	b.n	8004912 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_Base_Start_IT+0x98>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x58>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x58>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a14      	ldr	r2, [pc, #80]	@ (8004920 <HAL_TIM_Base_Start_IT+0x9c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x58>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a13      	ldr	r2, [pc, #76]	@ (8004924 <HAL_TIM_Base_Start_IT+0xa0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d111      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d010      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e007      	b.n	8004910 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0202 	mvn.w	r2, #2
 800495c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8d1 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8c4 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8d3 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0204 	mvn.w	r2, #4
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8ab 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f89e 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8ad 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f885 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f878 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f887 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f85f 	bl	8004b1a <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f852 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f861 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0201 	mvn.w	r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc fc30 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8c3 	bl	8004c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f831 	bl	8004b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00c      	beq.n	8004b00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0220 	mvn.w	r2, #32
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f896 	bl	8004c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc80      	pop	{r7}
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	@ (8004c20 <TIM_Base_SetConfig+0xd0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2c      	ldr	r2, [pc, #176]	@ (8004c24 <TIM_Base_SetConfig+0xd4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x30>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c28 <TIM_Base_SetConfig+0xd8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <TIM_Base_SetConfig+0xd0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d007      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <TIM_Base_SetConfig+0xd4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_Base_SetConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1e      	ldr	r2, [pc, #120]	@ (8004c28 <TIM_Base_SetConfig+0xd8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0d      	ldr	r2, [pc, #52]	@ (8004c20 <TIM_Base_SetConfig+0xd0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	611a      	str	r2, [r3, #16]
  }
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	40012c00 	.word	0x40012c00
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800

08004c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e042      	b.n	8004ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fd f84a 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2224      	movs	r2, #36	@ 0x24
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fe9f 	bl	80059d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	@ 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d175      	bne.n	8004dfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Transmit+0x2c>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e06e      	b.n	8004dfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2221      	movs	r2, #33	@ 0x21
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2e:	f7fd f9bd 	bl	80020ac <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	88fa      	ldrh	r2, [r7, #6]
 8004d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d48:	d108      	bne.n	8004d5c <HAL_UART_Transmit+0x6c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	e003      	b.n	8004d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d64:	e02e      	b.n	8004dc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	@ 0x80
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fc16 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e03a      	b.n	8004dfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10b      	bne.n	8004da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3302      	adds	r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]
 8004da4:	e007      	b.n	8004db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1cb      	bne.n	8004d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2140      	movs	r1, #64	@ 0x40
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fbe2 	bl	80055a2 <UART_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e006      	b.n	8004dfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	@ 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d156      	bne.n	8004ed0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_UART_Transmit_DMA+0x26>
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e04f      	b.n	8004ed2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	88fa      	ldrh	r2, [r7, #6]
 8004e42:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2221      	movs	r2, #33	@ 0x21
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e56:	4a21      	ldr	r2, [pc, #132]	@ (8004edc <HAL_UART_Transmit_DMA+0xd4>)
 8004e58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	4a20      	ldr	r2, [pc, #128]	@ (8004ee0 <HAL_UART_Transmit_DMA+0xd8>)
 8004e60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee4 <HAL_UART_Transmit_DMA+0xdc>)
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	2200      	movs	r2, #0
 8004e70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3304      	adds	r3, #4
 8004e86:	461a      	mov	r2, r3
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	f7fd fa77 	bl	800237c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eba:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3730      	adds	r7, #48	@ 0x30
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	08005459 	.word	0x08005459
 8004ee0:	080054f3 	.word	0x080054f3
 8004ee4:	0800550f 	.word	0x0800550f

08004ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0ba      	sub	sp, #232	@ 0xe8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_UART_IRQHandler+0x66>
 8004f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fc88 	bl	800585c <UART_Receive_IT>
      return;
 8004f4c:	e25b      	b.n	8005406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80de 	beq.w	8005114 <HAL_UART_IRQHandler+0x22c>
 8004f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80d1 	beq.w	8005114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_UART_IRQHandler+0xae>
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8e:	f043 0201 	orr.w	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_UART_IRQHandler+0xd2>
 8004fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f043 0202 	orr.w	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
 8004fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f043 0204 	orr.w	r2, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <HAL_UART_IRQHandler+0x126>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f043 0208 	orr.w	r2, r3, #8
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 81f2 	beq.w	80053fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_UART_IRQHandler+0x14e>
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fc13 	bl	800585c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_UART_IRQHandler+0x17a>
 800505a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d04f      	beq.n	8005102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fb1d 	bl	80056a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d041      	beq.n	80050fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800508c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1d9      	bne.n	8005076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d013      	beq.n	80050f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	4a7e      	ldr	r2, [pc, #504]	@ (80052c8 <HAL_UART_IRQHandler+0x3e0>)
 80050d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd f9ec 	bl	80024b4 <HAL_DMA_Abort_IT>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f0:	e00e      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f99c 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e00a      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f998 	bl	8005430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e006      	b.n	8005110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f994 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800510e:	e175      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	bf00      	nop
    return;
 8005112:	e173      	b.n	80053fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 814f 	bne.w	80053bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800511e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8148 	beq.w	80053bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8141 	beq.w	80053bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80b6 	beq.w	80052cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800516c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8145 	beq.w	8005400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800517a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800517e:	429a      	cmp	r2, r3
 8005180:	f080 813e 	bcs.w	8005400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800518a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2b20      	cmp	r3, #32
 8005194:	f000 8088 	beq.w	80052a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	330c      	adds	r3, #12
 80051c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1d9      	bne.n	8005198 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005208:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800520c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005210:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800521a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e1      	bne.n	80051e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005244:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005246:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800524a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800524c:	e841 2300 	strex	r3, r2, [r1]
 8005250:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005252:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e3      	bne.n	8005220 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005278:	f023 0310 	bic.w	r3, r3, #16
 800527c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800528a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800528c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005292:	e841 2300 	strex	r3, r2, [r1]
 8005296:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e3      	bne.n	8005266 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd f8ca 	bl	800243c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8bf 	bl	8005442 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c4:	e09c      	b.n	8005400 <HAL_UART_IRQHandler+0x518>
 80052c6:	bf00      	nop
 80052c8:	08005767 	.word	0x08005767
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 808e 	beq.w	8005404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8089 	beq.w	8005404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005304:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005308:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005316:	647a      	str	r2, [r7, #68]	@ 0x44
 8005318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e3      	bne.n	80052f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	623b      	str	r3, [r7, #32]
   return(result);
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800534e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005394:	61fa      	str	r2, [r7, #28]
 8005396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	617b      	str	r3, [r7, #20]
   return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f844 	bl	8005442 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ba:	e023      	b.n	8005404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <HAL_UART_IRQHandler+0x4f4>
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f9da 	bl	800578e <UART_Transmit_IT>
    return;
 80053da:	e014      	b.n	8005406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <HAL_UART_IRQHandler+0x51e>
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa19 	bl	800582c <UART_EndTransmit_IT>
    return;
 80053fa:	e004      	b.n	8005406 <HAL_UART_IRQHandler+0x51e>
    return;
 80053fc:	bf00      	nop
 80053fe:	e002      	b.n	8005406 <HAL_UART_IRQHandler+0x51e>
      return;
 8005400:	bf00      	nop
 8005402:	e000      	b.n	8005406 <HAL_UART_IRQHandler+0x51e>
      return;
 8005404:	bf00      	nop
  }
}
 8005406:	37e8      	adds	r7, #232	@ 0xe8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	460b      	mov	r3, r1
 800544c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b090      	sub	sp, #64	@ 0x40
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d137      	bne.n	80054e4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	2200      	movs	r2, #0
 8005478:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800547a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3314      	adds	r3, #20
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	623b      	str	r3, [r7, #32]
   return(result);
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005490:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800549a:	633a      	str	r2, [r7, #48]	@ 0x30
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e5      	bne.n	800547a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ce:	61fa      	str	r2, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69b9      	ldr	r1, [r7, #24]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	617b      	str	r3, [r7, #20]
   return(result);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054e2:	e002      	b.n	80054ea <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80054e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80054e6:	f7fc f8ff 	bl	80016e8 <HAL_UART_TxCpltCallback>
}
 80054ea:	bf00      	nop
 80054ec:	3740      	adds	r7, #64	@ 0x40
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff ff83 	bl	800540c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf14      	ite	ne
 800552e:	2301      	movne	r3, #1
 8005530:	2300      	moveq	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b21      	cmp	r3, #33	@ 0x21
 8005540:	d108      	bne.n	8005554 <UART_DMAError+0x46>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800554e:	68b8      	ldr	r0, [r7, #8]
 8005550:	f000 f880 	bl	8005654 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b22      	cmp	r3, #34	@ 0x22
 8005574:	d108      	bne.n	8005588 <UART_DMAError+0x7a>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005582:	68b8      	ldr	r0, [r7, #8]
 8005584:	f000 f88d 	bl	80056a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	f043 0210 	orr.w	r2, r3, #16
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005594:	68b8      	ldr	r0, [r7, #8]
 8005596:	f7ff ff4b 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b086      	sub	sp, #24
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b2:	e03b      	b.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ba:	d037      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055bc:	f7fc fd76 	bl	80020ac <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	6a3a      	ldr	r2, [r7, #32]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d302      	bcc.n	80055d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e03a      	b.n	800564c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d023      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d020      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d01d      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d116      	bne.n	800562c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f844 	bl	80056a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2208      	movs	r2, #8
 800561e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e00f      	b.n	800564c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4013      	ands	r3, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	429a      	cmp	r2, r3
 8005648:	d0b4      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	@ 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	60bb      	str	r3, [r7, #8]
   return(result);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	61ba      	str	r2, [r7, #24]
 800567e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6979      	ldr	r1, [r7, #20]
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	613b      	str	r3, [r7, #16]
   return(result);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005698:	bf00      	nop
 800569a:	3724      	adds	r7, #36	@ 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b095      	sub	sp, #84	@ 0x54
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e5      	bne.n	80056de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	2b01      	cmp	r3, #1
 8005718:	d119      	bne.n	800574e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	60bb      	str	r3, [r7, #8]
   return(result);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	647b      	str	r3, [r7, #68]	@ 0x44
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800573a:	61ba      	str	r2, [r7, #24]
 800573c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6979      	ldr	r1, [r7, #20]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	613b      	str	r3, [r7, #16]
   return(result);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800575c:	bf00      	nop
 800575e:	3754      	adds	r7, #84	@ 0x54
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fe55 	bl	8005430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b21      	cmp	r3, #33	@ 0x21
 80057a0:	d13e      	bne.n	8005820 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d114      	bne.n	80057d6 <UART_Transmit_IT+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d110      	bne.n	80057d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	1c9a      	adds	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	621a      	str	r2, [r3, #32]
 80057d4:	e008      	b.n	80057e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6211      	str	r1, [r2, #32]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4619      	mov	r1, r3
 80057f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800580a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800581a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005842:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fb ff4b 	bl	80016e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	@ 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b22      	cmp	r3, #34	@ 0x22
 800586e:	f040 80ae 	bne.w	80059ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	d117      	bne.n	80058ac <UART_Receive_IT+0x50>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d113      	bne.n	80058ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589a:	b29a      	uxth	r2, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	1c9a      	adds	r2, r3, #2
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80058aa:	e026      	b.n	80058fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058be:	d007      	beq.n	80058d0 <UART_Receive_IT+0x74>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <UART_Receive_IT+0x82>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e008      	b.n	80058f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4619      	mov	r1, r3
 8005908:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800590a:	2b00      	cmp	r3, #0
 800590c:	d15d      	bne.n	80059ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0220 	bic.w	r2, r2, #32
 800591c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800592c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	2b01      	cmp	r3, #1
 8005952:	d135      	bne.n	80059c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	330c      	adds	r3, #12
 8005960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	613b      	str	r3, [r7, #16]
   return(result);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	623a      	str	r2, [r7, #32]
 800597c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	69f9      	ldr	r1, [r7, #28]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	61bb      	str	r3, [r7, #24]
   return(result);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e5      	bne.n	800595a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b10      	cmp	r3, #16
 800599a:	d10a      	bne.n	80059b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fd42 	bl	8005442 <HAL_UARTEx_RxEventCallback>
 80059be:	e002      	b.n	80059c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff fd2c 	bl	800541e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e002      	b.n	80059d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e000      	b.n	80059d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059ce:	2302      	movs	r3, #2
  }
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3730      	adds	r7, #48	@ 0x30
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a12:	f023 030c 	bic.w	r3, r3, #12
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <UART_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d103      	bne.n	8005a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a40:	f7fe fe66 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	e002      	b.n	8005a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe fe4e 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009a      	lsls	r2, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <UART_SetConfig+0x118>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	0119      	lsls	r1, r3, #4
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009a      	lsls	r2, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a84:	4b1a      	ldr	r3, [pc, #104]	@ (8005af0 <UART_SetConfig+0x118>)
 8005a86:	fba3 0302 	umull	r0, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2064      	movs	r0, #100	@ 0x64
 8005a8e:	fb00 f303 	mul.w	r3, r0, r3
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	3332      	adds	r3, #50	@ 0x32
 8005a98:	4a15      	ldr	r2, [pc, #84]	@ (8005af0 <UART_SetConfig+0x118>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005aa4:	4419      	add	r1, r3
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009a      	lsls	r2, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abc:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <UART_SetConfig+0x118>)
 8005abe:	fba3 0302 	umull	r0, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2064      	movs	r0, #100	@ 0x64
 8005ac6:	fb00 f303 	mul.w	r3, r0, r3
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	3332      	adds	r3, #50	@ 0x32
 8005ad0:	4a07      	ldr	r2, [pc, #28]	@ (8005af0 <UART_SetConfig+0x118>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f003 020f 	and.w	r2, r3, #15
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40013800 	.word	0x40013800
 8005af0:	51eb851f 	.word	0x51eb851f

08005af4 <__NVIC_SetPriority>:
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	6039      	str	r1, [r7, #0]
 8005afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	db0a      	blt.n	8005b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	490c      	ldr	r1, [pc, #48]	@ (8005b40 <__NVIC_SetPriority+0x4c>)
 8005b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b12:	0112      	lsls	r2, r2, #4
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	440b      	add	r3, r1
 8005b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b1c:	e00a      	b.n	8005b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	4908      	ldr	r1, [pc, #32]	@ (8005b44 <__NVIC_SetPriority+0x50>)
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	3b04      	subs	r3, #4
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	440b      	add	r3, r1
 8005b32:	761a      	strb	r2, [r3, #24]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e100 	.word	0xe000e100
 8005b44:	e000ed00 	.word	0xe000ed00

08005b48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b4c:	4b05      	ldr	r3, [pc, #20]	@ (8005b64 <SysTick_Handler+0x1c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b50:	f002 fc8e 	bl	8008470 <xTaskGetSchedulerState>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b5a:	f003 fb35 	bl	80091c8 <xPortSysTickHandler>
  }
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000e010 	.word	0xe000e010

08005b68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f06f 0004 	mvn.w	r0, #4
 8005b72:	f7ff ffbf 	bl	8005af4 <__NVIC_SetPriority>
#endif
}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b82:	f3ef 8305 	mrs	r3, IPSR
 8005b86:	603b      	str	r3, [r7, #0]
  return(result);
 8005b88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b8e:	f06f 0305 	mvn.w	r3, #5
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	e00c      	b.n	8005bb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <osKernelInitialize+0x40>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b9e:	4b07      	ldr	r3, [pc, #28]	@ (8005bbc <osKernelInitialize+0x40>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	607b      	str	r3, [r7, #4]
 8005ba8:	e002      	b.n	8005bb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bb0:	687b      	ldr	r3, [r7, #4]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	2000038c 	.word	0x2000038c

08005bc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc6:	f3ef 8305 	mrs	r3, IPSR
 8005bca:	603b      	str	r3, [r7, #0]
  return(result);
 8005bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bd2:	f06f 0305 	mvn.w	r3, #5
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	e010      	b.n	8005bfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <osKernelStart+0x48>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d109      	bne.n	8005bf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005be2:	f7ff ffc1 	bl	8005b68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005be6:	4b08      	ldr	r3, [pc, #32]	@ (8005c08 <osKernelStart+0x48>)
 8005be8:	2202      	movs	r2, #2
 8005bea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005bec:	f001 ffd2 	bl	8007b94 <vTaskStartScheduler>
      stat = osOK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e002      	b.n	8005bfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bfc:	687b      	ldr	r3, [r7, #4]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	2000038c 	.word	0x2000038c

08005c0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	@ 0x38
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1c:	f3ef 8305 	mrs	r3, IPSR
 8005c20:	617b      	str	r3, [r7, #20]
  return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d17e      	bne.n	8005d26 <osThreadNew+0x11a>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d07b      	beq.n	8005d26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c32:	2318      	movs	r3, #24
 8005c34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d045      	beq.n	8005cd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <osThreadNew+0x48>
        name = attr->name;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <osThreadNew+0x6e>
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b38      	cmp	r3, #56	@ 0x38
 8005c6c:	d805      	bhi.n	8005c7a <osThreadNew+0x6e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <osThreadNew+0x72>
        return (NULL);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e054      	b.n	8005d28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	089b      	lsrs	r3, r3, #2
 8005c8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <osThreadNew+0xa8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005c9c:	d90a      	bls.n	8005cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <osThreadNew+0xa8>
        mem = 1;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e010      	b.n	8005cd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10c      	bne.n	8005cd6 <osThreadNew+0xca>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <osThreadNew+0xca>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <osThreadNew+0xca>
          mem = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e001      	b.n	8005cd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d110      	bne.n	8005cfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ce4:	9202      	str	r2, [sp, #8]
 8005ce6:	9301      	str	r3, [sp, #4]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a3a      	ldr	r2, [r7, #32]
 8005cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f001 fd5a 	bl	80077ac <xTaskCreateStatic>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e013      	b.n	8005d26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d110      	bne.n	8005d26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f107 0310 	add.w	r3, r7, #16
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f001 fda8 	bl	800786c <xTaskCreate>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d001      	beq.n	8005d26 <osThreadNew+0x11a>
            hTask = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d26:	693b      	ldr	r3, [r7, #16]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3728      	adds	r7, #40	@ 0x28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d38:	f3ef 8305 	mrs	r3, IPSR
 8005d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <osDelay+0x1c>
    stat = osErrorISR;
 8005d44:	f06f 0305 	mvn.w	r3, #5
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e007      	b.n	8005d5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fee6 	bl	8007b28 <vTaskDelay>
    }
  }

  return (stat);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b088      	sub	sp, #32
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d72:	f3ef 8305 	mrs	r3, IPSR
 8005d76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d78:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d174      	bne.n	8005e68 <osMutexNew+0x102>
    if (attr != NULL) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	e001      	b.n	8005d90 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <osMutexNew+0x3a>
      rmtx = 1U;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e001      	b.n	8005da4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d15c      	bne.n	8005e68 <osMutexNew+0x102>
      mem = -1;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005db2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d015      	beq.n	8005de6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <osMutexNew+0x6a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b4f      	cmp	r3, #79	@ 0x4f
 8005dc8:	d902      	bls.n	8005dd0 <osMutexNew+0x6a>
          mem = 1;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	e00c      	b.n	8005dea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <osMutexNew+0x84>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <osMutexNew+0x84>
            mem = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e001      	b.n	8005dea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d112      	bne.n	8005e16 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	2004      	movs	r0, #4
 8005dfe:	f000 fd6a 	bl	80068d6 <xQueueCreateMutexStatic>
 8005e02:	61f8      	str	r0, [r7, #28]
 8005e04:	e016      	b.n	8005e34 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f000 fd62 	bl	80068d6 <xQueueCreateMutexStatic>
 8005e12:	61f8      	str	r0, [r7, #28]
 8005e14:	e00e      	b.n	8005e34 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005e22:	2004      	movs	r0, #4
 8005e24:	f000 fd3f 	bl	80068a6 <xQueueCreateMutex>
 8005e28:	61f8      	str	r0, [r7, #28]
 8005e2a:	e003      	b.n	8005e34 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005e2c:	2001      	movs	r0, #1
 8005e2e:	f000 fd3a 	bl	80068a6 <xQueueCreateMutex>
 8005e32:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <osMutexNew+0xee>
        if (attr != NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <osMutexNew+0xe2>
          name = attr->name;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e001      	b.n	8005e4c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005e4c:	68f9      	ldr	r1, [r7, #12]
 8005e4e:	69f8      	ldr	r0, [r7, #28]
 8005e50:	f001 fc26 	bl	80076a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <osMutexNew+0x102>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005e68:	69fb      	ldr	r3, [r7, #28]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b086      	sub	sp, #24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e90:	f3ef 8305 	mrs	r3, IPSR
 8005e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e96:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005e9c:	f06f 0305 	mvn.w	r3, #5
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e02c      	b.n	8005efe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005eaa:	f06f 0303 	mvn.w	r3, #3
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e025      	b.n	8005efe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d011      	beq.n	8005edc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f000 fd5b 	bl	8006976 <xQueueTakeMutexRecursive>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d01b      	beq.n	8005efe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005ecc:	f06f 0301 	mvn.w	r3, #1
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e014      	b.n	8005efe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ed4:	f06f 0302 	mvn.w	r3, #2
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e010      	b.n	8005efe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6938      	ldr	r0, [r7, #16]
 8005ee0:	f001 f900 	bl	80070e4 <xQueueSemaphoreTake>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d009      	beq.n	8005efe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005ef0:	f06f 0301 	mvn.w	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e002      	b.n	8005efe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005ef8:	f06f 0302 	mvn.w	r3, #2
 8005efc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f24:	f3ef 8305 	mrs	r3, IPSR
 8005f28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f2a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005f30:	f06f 0305 	mvn.w	r3, #5
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e01f      	b.n	8005f78 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005f3e:	f06f 0303 	mvn.w	r3, #3
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e018      	b.n	8005f78 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005f4c:	6938      	ldr	r0, [r7, #16]
 8005f4e:	f000 fcdd 	bl	800690c <xQueueGiveMutexRecursive>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d00f      	beq.n	8005f78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005f58:	f06f 0302 	mvn.w	r3, #2
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e00b      	b.n	8005f78 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005f60:	2300      	movs	r3, #0
 8005f62:	2200      	movs	r2, #0
 8005f64:	2100      	movs	r1, #0
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f000 fdaa 	bl	8006ac0 <xQueueGenericSend>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d002      	beq.n	8005f78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005f72:	f06f 0302 	mvn.w	r3, #2
 8005f76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f78:	697b      	ldr	r3, [r7, #20]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b08a      	sub	sp, #40	@ 0x28
 8005f86:	af02      	add	r7, sp, #8
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f92:	f3ef 8305 	mrs	r3, IPSR
 8005f96:	613b      	str	r3, [r7, #16]
  return(result);
 8005f98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d175      	bne.n	800608a <osSemaphoreNew+0x108>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d072      	beq.n	800608a <osSemaphoreNew+0x108>
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d86e      	bhi.n	800608a <osSemaphoreNew+0x108>
    mem = -1;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005fb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d015      	beq.n	8005fe4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <osSemaphoreNew+0x4c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005fc6:	d902      	bls.n	8005fce <osSemaphoreNew+0x4c>
        mem = 1;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e00c      	b.n	8005fe8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d108      	bne.n	8005fe8 <osSemaphoreNew+0x66>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <osSemaphoreNew+0x66>
          mem = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e001      	b.n	8005fe8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fee:	d04c      	beq.n	800608a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d128      	bne.n	8006048 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d10a      	bne.n	8006012 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2203      	movs	r2, #3
 8006002:	9200      	str	r2, [sp, #0]
 8006004:	2200      	movs	r2, #0
 8006006:	2100      	movs	r1, #0
 8006008:	2001      	movs	r0, #1
 800600a:	f000 fb57 	bl	80066bc <xQueueGenericCreateStatic>
 800600e:	61f8      	str	r0, [r7, #28]
 8006010:	e005      	b.n	800601e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006012:	2203      	movs	r2, #3
 8006014:	2100      	movs	r1, #0
 8006016:	2001      	movs	r0, #1
 8006018:	f000 fbcd 	bl	80067b6 <xQueueGenericCreate>
 800601c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d022      	beq.n	800606a <osSemaphoreNew+0xe8>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01f      	beq.n	800606a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800602a:	2300      	movs	r3, #0
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	69f8      	ldr	r0, [r7, #28]
 8006032:	f000 fd45 	bl	8006ac0 <xQueueGenericSend>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d016      	beq.n	800606a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800603c:	69f8      	ldr	r0, [r7, #28]
 800603e:	f001 f9e3 	bl	8007408 <vQueueDelete>
            hSemaphore = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	e010      	b.n	800606a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d108      	bne.n	8006060 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	461a      	mov	r2, r3
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fcc4 	bl	80069e4 <xQueueCreateCountingSemaphoreStatic>
 800605c:	61f8      	str	r0, [r7, #28]
 800605e:	e004      	b.n	800606a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fcf7 	bl	8006a56 <xQueueCreateCountingSemaphore>
 8006068:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <osSemaphoreNew+0xfc>
          name = attr->name;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e001      	b.n	8006082 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69f8      	ldr	r0, [r7, #28]
 8006086:	f001 fb0b 	bl	80076a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800608a:	69fb      	ldr	r3, [r7, #28]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80060ac:	f06f 0303 	mvn.w	r3, #3
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e039      	b.n	8006128 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b4:	f3ef 8305 	mrs	r3, IPSR
 80060b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80060ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d022      	beq.n	8006106 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80060c6:	f06f 0303 	mvn.w	r3, #3
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e02c      	b.n	8006128 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	461a      	mov	r2, r3
 80060d8:	2100      	movs	r1, #0
 80060da:	6938      	ldr	r0, [r7, #16]
 80060dc:	f001 f912 	bl	8007304 <xQueueReceiveFromISR>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d003      	beq.n	80060ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80060e6:	f06f 0302 	mvn.w	r3, #2
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e01c      	b.n	8006128 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <osSemaphoreAcquire+0x94>
 80060f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006134 <osSemaphoreAcquire+0xa0>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	e010      	b.n	8006128 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6938      	ldr	r0, [r7, #16]
 800610a:	f000 ffeb 	bl	80070e4 <xQueueSemaphoreTake>
 800610e:	4603      	mov	r3, r0
 8006110:	2b01      	cmp	r3, #1
 8006112:	d009      	beq.n	8006128 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800611a:	f06f 0301 	mvn.w	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e002      	b.n	8006128 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006122:	f06f 0302 	mvn.w	r3, #2
 8006126:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006128:	697b      	ldr	r3, [r7, #20]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800614e:	f06f 0303 	mvn.w	r3, #3
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e02c      	b.n	80061b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006156:	f3ef 8305 	mrs	r3, IPSR
 800615a:	60fb      	str	r3, [r7, #12]
  return(result);
 800615c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01a      	beq.n	8006198 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4619      	mov	r1, r3
 800616c:	6938      	ldr	r0, [r7, #16]
 800616e:	f000 fe47 	bl	8006e00 <xQueueGiveFromISR>
 8006172:	4603      	mov	r3, r0
 8006174:	2b01      	cmp	r3, #1
 8006176:	d003      	beq.n	8006180 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006178:	f06f 0302 	mvn.w	r3, #2
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e017      	b.n	80061b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d014      	beq.n	80061b0 <osSemaphoreRelease+0x78>
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <osSemaphoreRelease+0x84>)
 8006188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	e00b      	b.n	80061b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f000 fc8e 	bl	8006ac0 <xQueueGenericSend>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80061aa:	f06f 0302 	mvn.w	r3, #2
 80061ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80061b0:	697b      	ldr	r3, [r7, #20]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	@ 0x28
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061d0:	f3ef 8305 	mrs	r3, IPSR
 80061d4:	613b      	str	r3, [r7, #16]
  return(result);
 80061d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d15f      	bne.n	800629c <osMessageQueueNew+0xdc>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05c      	beq.n	800629c <osMessageQueueNew+0xdc>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d059      	beq.n	800629c <osMessageQueueNew+0xdc>
    mem = -1;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d029      	beq.n	8006248 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d012      	beq.n	8006222 <osMessageQueueNew+0x62>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b4f      	cmp	r3, #79	@ 0x4f
 8006202:	d90e      	bls.n	8006222 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695a      	ldr	r2, [r3, #20]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <osMessageQueueNew+0x62>
        mem = 1;
 800621c:	2301      	movs	r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e014      	b.n	800624c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d110      	bne.n	800624c <osMessageQueueNew+0x8c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d104      	bne.n	800624c <osMessageQueueNew+0x8c>
          mem = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	e001      	b.n	800624c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10b      	bne.n	800626a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2100      	movs	r1, #0
 800625c:	9100      	str	r1, [sp, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fa2b 	bl	80066bc <xQueueGenericCreateStatic>
 8006266:	61f8      	str	r0, [r7, #28]
 8006268:	e008      	b.n	800627c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006270:	2200      	movs	r2, #0
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fa9e 	bl	80067b6 <xQueueGenericCreate>
 800627a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00c      	beq.n	800629c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e001      	b.n	8006294 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006294:	6979      	ldr	r1, [r7, #20]
 8006296:	69f8      	ldr	r0, [r7, #28]
 8006298:	f001 fa02 	bl	80076a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062bc:	2300      	movs	r3, #0
 80062be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c0:	f3ef 8305 	mrs	r3, IPSR
 80062c4:	617b      	str	r3, [r7, #20]
  return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d028      	beq.n	800631e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <osMessageQueuePut+0x36>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <osMessageQueuePut+0x36>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80062de:	f06f 0303 	mvn.w	r3, #3
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	e038      	b.n	8006358 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80062ea:	f107 0210 	add.w	r2, r7, #16
 80062ee:	2300      	movs	r3, #0
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	69b8      	ldr	r0, [r7, #24]
 80062f4:	f000 fce6 	bl	8006cc4 <xQueueGenericSendFromISR>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d003      	beq.n	8006306 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80062fe:	f06f 0302 	mvn.w	r3, #2
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	e028      	b.n	8006358 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d025      	beq.n	8006358 <osMessageQueuePut+0xb0>
 800630c:	4b15      	ldr	r3, [pc, #84]	@ (8006364 <osMessageQueuePut+0xbc>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	e01c      	b.n	8006358 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <osMessageQueuePut+0x82>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800632a:	f06f 0303 	mvn.w	r3, #3
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e012      	b.n	8006358 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006332:	2300      	movs	r3, #0
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	69b8      	ldr	r0, [r7, #24]
 800633a:	f000 fbc1 	bl	8006ac0 <xQueueGenericSend>
 800633e:	4603      	mov	r3, r0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d009      	beq.n	8006358 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800634a:	f06f 0301 	mvn.w	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e002      	b.n	8006358 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006352:	f06f 0302 	mvn.w	r3, #2
 8006356:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006358:	69fb      	ldr	r3, [r7, #28]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637e:	f3ef 8305 	mrs	r3, IPSR
 8006382:	617b      	str	r3, [r7, #20]
  return(result);
 8006384:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006386:	2b00      	cmp	r3, #0
 8006388:	d028      	beq.n	80063dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <osMessageQueueGet+0x34>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <osMessageQueueGet+0x34>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800639c:	f06f 0303 	mvn.w	r3, #3
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	e037      	b.n	8006414 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063a8:	f107 0310 	add.w	r3, r7, #16
 80063ac:	461a      	mov	r2, r3
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	69b8      	ldr	r0, [r7, #24]
 80063b2:	f000 ffa7 	bl	8007304 <xQueueReceiveFromISR>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d003      	beq.n	80063c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80063bc:	f06f 0302 	mvn.w	r3, #2
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	e027      	b.n	8006414 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d024      	beq.n	8006414 <osMessageQueueGet+0xac>
 80063ca:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <osMessageQueueGet+0xb8>)
 80063cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	e01b      	b.n	8006414 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <osMessageQueueGet+0x80>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80063e8:	f06f 0303 	mvn.w	r3, #3
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	e011      	b.n	8006414 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	69b8      	ldr	r0, [r7, #24]
 80063f6:	f000 fd93 	bl	8006f20 <xQueueReceive>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d009      	beq.n	8006414 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006406:	f06f 0301 	mvn.w	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e002      	b.n	8006414 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800640e:	f06f 0302 	mvn.w	r3, #2
 8006412:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006414:	69fb      	ldr	r3, [r7, #28]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a06      	ldr	r2, [pc, #24]	@ (800644c <vApplicationGetIdleTaskMemory+0x28>)
 8006434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	4a05      	ldr	r2, [pc, #20]	@ (8006450 <vApplicationGetIdleTaskMemory+0x2c>)
 800643a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2280      	movs	r2, #128	@ 0x80
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000390 	.word	0x20000390
 8006450:	20000438 	.word	0x20000438

08006454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a07      	ldr	r2, [pc, #28]	@ (8006480 <vApplicationGetTimerTaskMemory+0x2c>)
 8006464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a06      	ldr	r2, [pc, #24]	@ (8006484 <vApplicationGetTimerTaskMemory+0x30>)
 800646a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000638 	.word	0x20000638
 8006484:	200006e0 	.word	0x200006e0

08006488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f103 0208 	add.w	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f103 0208 	add.w	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f103 0208 	add.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
}
 800651a:	bf00      	nop
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800653a:	d103      	bne.n	8006544 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e00c      	b.n	800655e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3308      	adds	r3, #8
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e002      	b.n	8006552 <vListInsert+0x2e>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	429a      	cmp	r2, r3
 800655c:	d2f6      	bcs.n	800654c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6892      	ldr	r2, [r2, #8]
 80065aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6852      	ldr	r2, [r2, #4]
 80065b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d103      	bne.n	80065c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1e5a      	subs	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
	...

080065e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <xQueueGenericReset+0x2c>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	60bb      	str	r3, [r7, #8]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006614:	f002 fd5a 	bl	80090cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	3b01      	subs	r3, #1
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	441a      	add	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	22ff      	movs	r2, #255	@ 0xff
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	22ff      	movs	r2, #255	@ 0xff
 8006660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d114      	bne.n	8006694 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01a      	beq.n	80066a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3310      	adds	r3, #16
 8006676:	4618      	mov	r0, r3
 8006678:	f001 fd26 	bl	80080c8 <xTaskRemoveFromEventList>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d012      	beq.n	80066a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <xQueueGenericReset+0xd0>)
 8006684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	e009      	b.n	80066a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3310      	adds	r3, #16
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff fef5 	bl	8006488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3324      	adds	r3, #36	@ 0x24
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fef0 	bl	8006488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066a8:	f002 fd40 	bl	800912c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066ac:	2301      	movs	r3, #1
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	e000ed04 	.word	0xe000ed04

080066bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	@ 0x38
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <xQueueGenericCreateStatic+0x56>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <xQueueGenericCreateStatic+0x5a>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <xQueueGenericCreateStatic+0x5c>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	623b      	str	r3, [r7, #32]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xQueueGenericCreateStatic+0x84>
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <xQueueGenericCreateStatic+0x88>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <xQueueGenericCreateStatic+0x8a>
 8006744:	2300      	movs	r3, #0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	61fb      	str	r3, [r7, #28]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006762:	2350      	movs	r3, #80	@ 0x50
 8006764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b50      	cmp	r3, #80	@ 0x50
 800676a:	d00b      	beq.n	8006784 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	61bb      	str	r3, [r7, #24]
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	e7fd      	b.n	8006780 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006784:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006798:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f840 	bl	800682c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3730      	adds	r7, #48	@ 0x30
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b08a      	sub	sp, #40	@ 0x28
 80067ba:	af02      	add	r7, sp, #8
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	4613      	mov	r3, r2
 80067c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	613b      	str	r3, [r7, #16]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	fb02 f303 	mul.w	r3, r2, r3
 80067ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	3350      	adds	r3, #80	@ 0x50
 80067f0:	4618      	mov	r0, r3
 80067f2:	f002 fd6d 	bl	80092d0 <pvPortMalloc>
 80067f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d011      	beq.n	8006822 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3350      	adds	r3, #80	@ 0x50
 8006806:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006810:	79fa      	ldrb	r2, [r7, #7]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4613      	mov	r3, r2
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f805 	bl	800682c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006822:	69bb      	ldr	r3, [r7, #24]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e002      	b.n	800684e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800685a:	2101      	movs	r1, #1
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f7ff fec3 	bl	80065e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	2100      	movs	r1, #0
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f911 	bl	8006ac0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6939      	ldr	r1, [r7, #16]
 80068be:	6978      	ldr	r0, [r7, #20]
 80068c0:	f7ff ff79 	bl	80067b6 <xQueueGenericCreate>
 80068c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ffd3 	bl	8006872 <prvInitialiseMutex>

		return xNewQueue;
 80068cc:	68fb      	ldr	r3, [r7, #12]
	}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b088      	sub	sp, #32
 80068da:	af02      	add	r7, sp, #8
 80068dc:	4603      	mov	r3, r0
 80068de:	6039      	str	r1, [r7, #0]
 80068e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80068e2:	2301      	movs	r3, #1
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2200      	movs	r2, #0
 80068f2:	6939      	ldr	r1, [r7, #16]
 80068f4:	6978      	ldr	r0, [r7, #20]
 80068f6:	f7ff fee1 	bl	80066bc <xQueueGenericCreateStatic>
 80068fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ffb8 	bl	8006872 <prvInitialiseMutex>

		return xNewQueue;
 8006902:	68fb      	ldr	r3, [r7, #12]
	}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	60fb      	str	r3, [r7, #12]
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	689c      	ldr	r4, [r3, #8]
 800693a:	f001 fd8b 	bl	8008454 <xTaskGetCurrentTaskHandle>
 800693e:	4603      	mov	r3, r0
 8006940:	429c      	cmp	r4, r3
 8006942:	d111      	bne.n	8006968 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006956:	2300      	movs	r3, #0
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	6938      	ldr	r0, [r7, #16]
 800695e:	f000 f8af 	bl	8006ac0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006962:	2301      	movs	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e001      	b.n	800696c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800696c:	697b      	ldr	r3, [r7, #20]
	}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd90      	pop	{r4, r7, pc}

08006976 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006976:	b590      	push	{r4, r7, lr}
 8006978:	b087      	sub	sp, #28
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	689c      	ldr	r4, [r3, #8]
 80069a6:	f001 fd55 	bl	8008454 <xTaskGetCurrentTaskHandle>
 80069aa:	4603      	mov	r3, r0
 80069ac:	429c      	cmp	r4, r3
 80069ae:	d107      	bne.n	80069c0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80069ba:	2301      	movs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e00c      	b.n	80069da <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6938      	ldr	r0, [r7, #16]
 80069c4:	f000 fb8e 	bl	80070e4 <xQueueSemaphoreTake>
 80069c8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80069da:	697b      	ldr	r3, [r7, #20]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}

080069e4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	@ 0x28
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	61bb      	str	r3, [r7, #24]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90b      	bls.n	8006a2e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a2e:	2302      	movs	r3, #2
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2100      	movs	r1, #0
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff fe3f 	bl	80066bc <xQueueGenericCreateStatic>
 8006a3e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
	}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3720      	adds	r7, #32
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10b      	bne.n	8006a7e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	613b      	str	r3, [r7, #16]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d90b      	bls.n	8006a9e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60fb      	str	r3, [r7, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	e7fd      	b.n	8006a9a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fe87 	bl	80067b6 <xQueueGenericCreate>
 8006aa8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ab6:	697b      	ldr	r3, [r7, #20]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	@ 0x38
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSend+0x34>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <xQueueGenericSend+0x42>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueGenericSend+0x46>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueGenericSend+0x48>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xQueueGenericSend+0x64>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x72>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSend+0x76>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSend+0x78>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSend+0x94>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b54:	f001 fc8c 	bl	8008470 <xTaskGetSchedulerState>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d102      	bne.n	8006b64 <xQueueGenericSend+0xa4>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <xQueueGenericSend+0xa8>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <xQueueGenericSend+0xaa>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <xQueueGenericSend+0xc6>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	61fb      	str	r3, [r7, #28]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b86:	f002 faa1 	bl	80090cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <xQueueGenericSend+0xdc>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d129      	bne.n	8006bf0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ba2:	f000 fc6c 	bl	800747e <prvCopyDataToQueue>
 8006ba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb2:	3324      	adds	r3, #36	@ 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fa87 	bl	80080c8 <xTaskRemoveFromEventList>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d013      	beq.n	8006be8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cc0 <xQueueGenericSend+0x200>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	e00a      	b.n	8006be8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bd8:	4b39      	ldr	r3, [pc, #228]	@ (8006cc0 <xQueueGenericSend+0x200>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006be8:	f002 faa0 	bl	800912c <vPortExitCritical>
				return pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e063      	b.n	8006cb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bf6:	f002 fa99 	bl	800912c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e05c      	b.n	8006cb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 fac1 	bl	8008190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c12:	f002 fa8b 	bl	800912c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c16:	f001 f82d 	bl	8007c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c1a:	f002 fa57 	bl	80090cc <vPortEnterCritical>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c24:	b25b      	sxtb	r3, r3
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c2a:	d103      	bne.n	8006c34 <xQueueGenericSend+0x174>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c3a:	b25b      	sxtb	r3, r3
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c40:	d103      	bne.n	8006c4a <xQueueGenericSend+0x18a>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c4a:	f002 fa6f 	bl	800912c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4e:	1d3a      	adds	r2, r7, #4
 8006c50:	f107 0314 	add.w	r3, r7, #20
 8006c54:	4611      	mov	r1, r2
 8006c56:	4618      	mov	r0, r3
 8006c58:	f001 fab0 	bl	80081bc <xTaskCheckForTimeOut>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d124      	bne.n	8006cac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c64:	f000 fd03 	bl	800766e <prvIsQueueFull>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d018      	beq.n	8006ca0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	3310      	adds	r3, #16
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 f9d4 	bl	8008024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c7e:	f000 fc8e 	bl	800759e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c82:	f001 f805 	bl	8007c90 <xTaskResumeAll>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f47f af7c 	bne.w	8006b86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc0 <xQueueGenericSend+0x200>)
 8006c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	e772      	b.n	8006b86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ca2:	f000 fc7c 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca6:	f000 fff3 	bl	8007c90 <xTaskResumeAll>
 8006caa:	e76c      	b.n	8006b86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cae:	f000 fc76 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cb2:	f000 ffed 	bl	8007c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3738      	adds	r7, #56	@ 0x38
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b090      	sub	sp, #64	@ 0x40
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <xQueueGenericSendFromISR+0x3e>
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <xQueueGenericSendFromISR+0x42>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <xQueueGenericSendFromISR+0x44>
 8006d06:	2300      	movs	r3, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10b      	bne.n	8006d24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	e7fd      	b.n	8006d20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d103      	bne.n	8006d32 <xQueueGenericSendFromISR+0x6e>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <xQueueGenericSendFromISR+0x72>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <xQueueGenericSendFromISR+0x74>
 8006d36:	2300      	movs	r3, #0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	bf00      	nop
 8006d52:	e7fd      	b.n	8006d50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d54:	f002 fa7c 	bl	8009250 <vPortValidateInterruptPriority>
	__asm volatile
 8006d58:	f3ef 8211 	mrs	r2, BASEPRI
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61fa      	str	r2, [r7, #28]
 8006d6e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006d70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d302      	bcc.n	8006d86 <xQueueGenericSendFromISR+0xc2>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d12f      	bne.n	8006de6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d9c:	f000 fb6f 	bl	800747e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006da0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006da8:	d112      	bne.n	8006dd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db4:	3324      	adds	r3, #36	@ 0x24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f986 	bl	80080c8 <xTaskRemoveFromEventList>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e007      	b.n	8006de0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	b25a      	sxtb	r2, r3
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006de0:	2301      	movs	r3, #1
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006de4:	e001      	b.n	8006dea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f383 8811 	msr	BASEPRI, r3
}
 8006df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3740      	adds	r7, #64	@ 0x40
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	@ 0x38
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	623b      	str	r3, [r7, #32]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	61fb      	str	r3, [r7, #28]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <xQueueGiveFromISR+0x5c>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <xQueueGiveFromISR+0x60>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <xQueueGiveFromISR+0x62>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10b      	bne.n	8006e7e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61bb      	str	r3, [r7, #24]
}
 8006e78:	bf00      	nop
 8006e7a:	bf00      	nop
 8006e7c:	e7fd      	b.n	8006e7a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e7e:	f002 f9e7 	bl	8009250 <vPortValidateInterruptPriority>
	__asm volatile
 8006e82:	f3ef 8211 	mrs	r2, BASEPRI
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	617a      	str	r2, [r7, #20]
 8006e98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d22b      	bcs.n	8006f06 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ec8:	d112      	bne.n	8006ef0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	3324      	adds	r3, #36	@ 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f8f6 	bl	80080c8 <xTaskRemoveFromEventList>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e007      	b.n	8006f00 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	b25a      	sxtb	r2, r3
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f04:	e001      	b.n	8006f0a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3738      	adds	r7, #56	@ 0x38
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	@ 0x30
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <xQueueReceive+0x32>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	623b      	str	r3, [r7, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d103      	bne.n	8006f60 <xQueueReceive+0x40>
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <xQueueReceive+0x44>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <xQueueReceive+0x46>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10b      	bne.n	8006f82 <xQueueReceive+0x62>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	61fb      	str	r3, [r7, #28]
}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	e7fd      	b.n	8006f7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f82:	f001 fa75 	bl	8008470 <xTaskGetSchedulerState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <xQueueReceive+0x72>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <xQueueReceive+0x76>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <xQueueReceive+0x78>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <xQueueReceive+0x94>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61bb      	str	r3, [r7, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fb4:	f002 f88a 	bl	80090cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01f      	beq.n	8007004 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fc4:	68b9      	ldr	r1, [r7, #8]
 8006fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fc8:	f000 fac3 	bl	8007552 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00f      	beq.n	8006ffc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	3310      	adds	r3, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f871 	bl	80080c8 <xTaskRemoveFromEventList>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fec:	4b3c      	ldr	r3, [pc, #240]	@ (80070e0 <xQueueReceive+0x1c0>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ffc:	f002 f896 	bl	800912c <vPortExitCritical>
				return pdPASS;
 8007000:	2301      	movs	r3, #1
 8007002:	e069      	b.n	80070d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800700a:	f002 f88f 	bl	800912c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800700e:	2300      	movs	r3, #0
 8007010:	e062      	b.n	80070d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007018:	f107 0310 	add.w	r3, r7, #16
 800701c:	4618      	mov	r0, r3
 800701e:	f001 f8b7 	bl	8008190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007026:	f002 f881 	bl	800912c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800702a:	f000 fe23 	bl	8007c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800702e:	f002 f84d 	bl	80090cc <vPortEnterCritical>
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007038:	b25b      	sxtb	r3, r3
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800703e:	d103      	bne.n	8007048 <xQueueReceive+0x128>
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800704e:	b25b      	sxtb	r3, r3
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007054:	d103      	bne.n	800705e <xQueueReceive+0x13e>
 8007056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800705e:	f002 f865 	bl	800912c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007062:	1d3a      	adds	r2, r7, #4
 8007064:	f107 0310 	add.w	r3, r7, #16
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f001 f8a6 	bl	80081bc <xTaskCheckForTimeOut>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d123      	bne.n	80070be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007078:	f000 fae3 	bl	8007642 <prvIsQueueEmpty>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	3324      	adds	r3, #36	@ 0x24
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	4611      	mov	r1, r2
 800708a:	4618      	mov	r0, r3
 800708c:	f000 ffca 	bl	8008024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007092:	f000 fa84 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007096:	f000 fdfb 	bl	8007c90 <xTaskResumeAll>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d189      	bne.n	8006fb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80070a0:	4b0f      	ldr	r3, [pc, #60]	@ (80070e0 <xQueueReceive+0x1c0>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e780      	b.n	8006fb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b4:	f000 fa73 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b8:	f000 fdea 	bl	8007c90 <xTaskResumeAll>
 80070bc:	e77a      	b.n	8006fb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c0:	f000 fa6d 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070c4:	f000 fde4 	bl	8007c90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070ca:	f000 faba 	bl	8007642 <prvIsQueueEmpty>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f43f af6f 	beq.w	8006fb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3730      	adds	r7, #48	@ 0x30
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08e      	sub	sp, #56	@ 0x38
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	623b      	str	r3, [r7, #32]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61fb      	str	r3, [r7, #28]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007138:	f001 f99a 	bl	8008470 <xTaskGetSchedulerState>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <xQueueSemaphoreTake+0x64>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <xQueueSemaphoreTake+0x68>
 8007148:	2301      	movs	r3, #1
 800714a:	e000      	b.n	800714e <xQueueSemaphoreTake+0x6a>
 800714c:	2300      	movs	r3, #0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10b      	bne.n	800716a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	61bb      	str	r3, [r7, #24]
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop
 8007168:	e7fd      	b.n	8007166 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800716a:	f001 ffaf 	bl	80090cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800716e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d024      	beq.n	80071c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800718a:	f001 faeb 	bl	8008764 <pvTaskIncrementMutexHeldCount>
 800718e:	4602      	mov	r2, r0
 8007190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007192:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00f      	beq.n	80071bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	3310      	adds	r3, #16
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 ff91 	bl	80080c8 <xTaskRemoveFromEventList>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071ac:	4b54      	ldr	r3, [pc, #336]	@ (8007300 <xQueueSemaphoreTake+0x21c>)
 80071ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071bc:	f001 ffb6 	bl	800912c <vPortExitCritical>
				return pdPASS;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e098      	b.n	80072f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d112      	bne.n	80071f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	617b      	str	r3, [r7, #20]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071e8:	f001 ffa0 	bl	800912c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e082      	b.n	80072f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ffc8 	bl	8008190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007200:	2301      	movs	r3, #1
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007204:	f001 ff92 	bl	800912c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007208:	f000 fd34 	bl	8007c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800720c:	f001 ff5e 	bl	80090cc <vPortEnterCritical>
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007216:	b25b      	sxtb	r3, r3
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800721c:	d103      	bne.n	8007226 <xQueueSemaphoreTake+0x142>
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800722c:	b25b      	sxtb	r3, r3
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007232:	d103      	bne.n	800723c <xQueueSemaphoreTake+0x158>
 8007234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800723c:	f001 ff76 	bl	800912c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007240:	463a      	mov	r2, r7
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f000 ffb7 	bl	80081bc <xTaskCheckForTimeOut>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d132      	bne.n	80072ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007254:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007256:	f000 f9f4 	bl	8007642 <prvIsQueueEmpty>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d026      	beq.n	80072ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007268:	f001 ff30 	bl	80090cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f91b 	bl	80084ac <xTaskPriorityInherit>
 8007276:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007278:	f001 ff58 	bl	800912c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	3324      	adds	r3, #36	@ 0x24
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fecd 	bl	8008024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800728a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800728c:	f000 f987 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007290:	f000 fcfe 	bl	8007c90 <xTaskResumeAll>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f47f af67 	bne.w	800716a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800729c:	4b18      	ldr	r3, [pc, #96]	@ (8007300 <xQueueSemaphoreTake+0x21c>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	e75d      	b.n	800716a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072b0:	f000 f975 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b4:	f000 fcec 	bl	8007c90 <xTaskResumeAll>
 80072b8:	e757      	b.n	800716a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072bc:	f000 f96f 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c0:	f000 fce6 	bl	8007c90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072c6:	f000 f9bc 	bl	8007642 <prvIsQueueEmpty>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f43f af4c 	beq.w	800716a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80072d8:	f001 fef8 	bl	80090cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072de:	f000 f8b7 	bl	8007450 <prvGetDisinheritPriorityAfterTimeout>
 80072e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 f9b6 	bl	800865c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072f0:	f001 ff1c 	bl	800912c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3738      	adds	r7, #56	@ 0x38
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08e      	sub	sp, #56	@ 0x38
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10b      	bne.n	8007332 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	623b      	str	r3, [r7, #32]
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	e7fd      	b.n	800732e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d103      	bne.n	8007340 <xQueueReceiveFromISR+0x3c>
 8007338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <xQueueReceiveFromISR+0x40>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <xQueueReceiveFromISR+0x42>
 8007344:	2300      	movs	r3, #0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61fb      	str	r3, [r7, #28]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007362:	f001 ff75 	bl	8009250 <vPortValidateInterruptPriority>
	__asm volatile
 8007366:	f3ef 8211 	mrs	r2, BASEPRI
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	61ba      	str	r2, [r7, #24]
 800737c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800737e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007380:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007386:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02f      	beq.n	80073ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800739c:	f000 f8d9 	bl	8007552 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80073a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073b0:	d112      	bne.n	80073d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d016      	beq.n	80073e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	3310      	adds	r3, #16
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fe82 	bl	80080c8 <xTaskRemoveFromEventList>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e007      	b.n	80073e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073dc:	3301      	adds	r3, #1
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	b25a      	sxtb	r2, r3
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80073e8:	2301      	movs	r3, #1
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ec:	e001      	b.n	80073f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f383 8811 	msr	BASEPRI, r3
}
 80073fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007400:	4618      	mov	r0, r3
 8007402:	3738      	adds	r7, #56	@ 0x38
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <vQueueDelete+0x2a>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	60bb      	str	r3, [r7, #8]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f95c 	bl	80076f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800743e:	2b00      	cmp	r3, #0
 8007440:	d102      	bne.n	8007448 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f002 f812 	bl	800946c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e001      	b.n	8007472 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007472:	68fb      	ldr	r3, [r7, #12]
	}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b086      	sub	sp, #24
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10d      	bne.n	80074b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d14d      	bne.n	8007540 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f867 	bl	800857c <xTaskPriorityDisinherit>
 80074ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	e043      	b.n	8007540 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d119      	bne.n	80074f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6858      	ldr	r0, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	461a      	mov	r2, r3
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	f003 f975 	bl	800a7b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	441a      	add	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d32b      	bcc.n	8007540 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	605a      	str	r2, [r3, #4]
 80074f0:	e026      	b.n	8007540 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68d8      	ldr	r0, [r3, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	461a      	mov	r2, r3
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	f003 f95b 	bl	800a7b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	425b      	negs	r3, r3
 800750c:	441a      	add	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d207      	bcs.n	800752e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	425b      	negs	r3, r3
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d105      	bne.n	8007540 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	3b01      	subs	r3, #1
 800753e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d018      	beq.n	8007596 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756c:	441a      	add	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	d303      	bcc.n	8007586 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68d9      	ldr	r1, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758e:	461a      	mov	r2, r3
 8007590:	6838      	ldr	r0, [r7, #0]
 8007592:	f003 f911 	bl	800a7b8 <memcpy>
	}
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075a6:	f001 fd91 	bl	80090cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b2:	e011      	b.n	80075d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d012      	beq.n	80075e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3324      	adds	r3, #36	@ 0x24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fd81 	bl	80080c8 <xTaskRemoveFromEventList>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075cc:	f000 fe5a 	bl	8008284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	dce9      	bgt.n	80075b4 <prvUnlockQueue+0x16>
 80075e0:	e000      	b.n	80075e4 <prvUnlockQueue+0x46>
					break;
 80075e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	22ff      	movs	r2, #255	@ 0xff
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80075ec:	f001 fd9e 	bl	800912c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075f0:	f001 fd6c 	bl	80090cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075fc:	e011      	b.n	8007622 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d012      	beq.n	800762c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3310      	adds	r3, #16
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd5c 	bl	80080c8 <xTaskRemoveFromEventList>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007616:	f000 fe35 	bl	8008284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	3b01      	subs	r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007622:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	dce9      	bgt.n	80075fe <prvUnlockQueue+0x60>
 800762a:	e000      	b.n	800762e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800762c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	22ff      	movs	r2, #255	@ 0xff
 8007632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007636:	f001 fd79 	bl	800912c <vPortExitCritical>
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800764a:	f001 fd3f 	bl	80090cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007656:	2301      	movs	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e001      	b.n	8007660 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007660:	f001 fd64 	bl	800912c <vPortExitCritical>

	return xReturn;
 8007664:	68fb      	ldr	r3, [r7, #12]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007676:	f001 fd29 	bl	80090cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	d102      	bne.n	800768c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e001      	b.n	8007690 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007690:	f001 fd4c 	bl	800912c <vPortExitCritical>

	return xReturn;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076aa:	2300      	movs	r3, #0
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	e014      	b.n	80076da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076b0:	4a0e      	ldr	r2, [pc, #56]	@ (80076ec <vQueueAddToRegistry+0x4c>)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076bc:	490b      	ldr	r1, [pc, #44]	@ (80076ec <vQueueAddToRegistry+0x4c>)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076c6:	4a09      	ldr	r2, [pc, #36]	@ (80076ec <vQueueAddToRegistry+0x4c>)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076d2:	e006      	b.n	80076e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	d9e7      	bls.n	80076b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076e0:	bf00      	nop
 80076e2:	bf00      	nop
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	20000ae0 	.word	0x20000ae0

080076f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076f8:	2300      	movs	r3, #0
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e016      	b.n	800772c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80076fe:	4a10      	ldr	r2, [pc, #64]	@ (8007740 <vQueueUnregisterQueue+0x50>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d10b      	bne.n	8007726 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800770e:	4a0c      	ldr	r2, [pc, #48]	@ (8007740 <vQueueUnregisterQueue+0x50>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2100      	movs	r1, #0
 8007714:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007718:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <vQueueUnregisterQueue+0x50>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	4413      	add	r3, r2
 8007720:	2200      	movs	r2, #0
 8007722:	605a      	str	r2, [r3, #4]
				break;
 8007724:	e006      	b.n	8007734 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b07      	cmp	r3, #7
 8007730:	d9e5      	bls.n	80076fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000ae0 	.word	0x20000ae0

08007744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007754:	f001 fcba 	bl	80090cc <vPortEnterCritical>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800775e:	b25b      	sxtb	r3, r3
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007764:	d103      	bne.n	800776e <vQueueWaitForMessageRestricted+0x2a>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007774:	b25b      	sxtb	r3, r3
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800777a:	d103      	bne.n	8007784 <vQueueWaitForMessageRestricted+0x40>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007784:	f001 fcd2 	bl	800912c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3324      	adds	r3, #36	@ 0x24
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fc69 	bl	8008070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800779e:	6978      	ldr	r0, [r7, #20]
 80077a0:	f7ff fefd 	bl	800759e <prvUnlockQueue>
	}
 80077a4:	bf00      	nop
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	@ 0x38
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10b      	bne.n	80077d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	623b      	str	r3, [r7, #32]
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	61fb      	str	r3, [r7, #28]
}
 80077f0:	bf00      	nop
 80077f2:	bf00      	nop
 80077f4:	e7fd      	b.n	80077f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077f6:	23a8      	movs	r3, #168	@ 0xa8
 80077f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2ba8      	cmp	r3, #168	@ 0xa8
 80077fe:	d00b      	beq.n	8007818 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	61bb      	str	r3, [r7, #24]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007818:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800781a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01e      	beq.n	800785e <xTaskCreateStatic+0xb2>
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01b      	beq.n	800785e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800782e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	2202      	movs	r2, #2
 8007834:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007838:	2300      	movs	r3, #0
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	9302      	str	r3, [sp, #8]
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f851 	bl	80078f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007858:	f000 f8f6 	bl	8007a48 <prvAddNewTaskToReadyList>
 800785c:	e001      	b.n	8007862 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007862:	697b      	ldr	r3, [r7, #20]
	}
 8007864:	4618      	mov	r0, r3
 8007866:	3728      	adds	r7, #40	@ 0x28
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	@ 0x30
 8007870:	af04      	add	r7, sp, #16
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fd25 	bl	80092d0 <pvPortMalloc>
 8007886:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00e      	beq.n	80078ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800788e:	20a8      	movs	r0, #168	@ 0xa8
 8007890:	f001 fd1e 	bl	80092d0 <pvPortMalloc>
 8007894:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80078a2:	e005      	b.n	80078b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078a4:	6978      	ldr	r0, [r7, #20]
 80078a6:	f001 fde1 	bl	800946c <vPortFree>
 80078aa:	e001      	b.n	80078b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d017      	beq.n	80078e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078be:	88fa      	ldrh	r2, [r7, #6]
 80078c0:	2300      	movs	r3, #0
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f80f 	bl	80078f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078da:	69f8      	ldr	r0, [r7, #28]
 80078dc:	f000 f8b4 	bl	8007a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e002      	b.n	80078ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078ec:	69bb      	ldr	r3, [r7, #24]
	}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	461a      	mov	r2, r3
 8007910:	21a5      	movs	r1, #165	@ 0xa5
 8007912:	f002 fe61 	bl	800a5d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007920:	3b01      	subs	r3, #1
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f023 0307 	bic.w	r3, r3, #7
 800792e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00b      	beq.n	8007952 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	617b      	str	r3, [r7, #20]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01f      	beq.n	8007998 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	e012      	b.n	8007984 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	4413      	add	r3, r2
 8007964:	7819      	ldrb	r1, [r3, #0]
 8007966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	3334      	adds	r3, #52	@ 0x34
 800796e:	460a      	mov	r2, r1
 8007970:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	3301      	adds	r3, #1
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b0f      	cmp	r3, #15
 8007988:	d9e9      	bls.n	800795e <prvInitialiseNewTask+0x66>
 800798a:	e000      	b.n	800798e <prvInitialiseNewTask+0x96>
			{
				break;
 800798c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007996:	e003      	b.n	80079a0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a2:	2b37      	cmp	r3, #55	@ 0x37
 80079a4:	d901      	bls.n	80079aa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079a6:	2337      	movs	r3, #55	@ 0x37
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	2200      	movs	r2, #0
 80079ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	3304      	adds	r3, #4
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fd80 	bl	80064c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	3318      	adds	r3, #24
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fd7b 	bl	80064c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	3354      	adds	r3, #84	@ 0x54
 80079fa:	224c      	movs	r2, #76	@ 0x4c
 80079fc:	2100      	movs	r1, #0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 fdea 	bl	800a5d8 <memset>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	4a0d      	ldr	r2, [pc, #52]	@ (8007a3c <prvInitialiseNewTask+0x144>)
 8007a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8007a40 <prvInitialiseNewTask+0x148>)
 8007a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <prvInitialiseNewTask+0x14c>)
 8007a14:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	68f9      	ldr	r1, [r7, #12]
 8007a1a:	69b8      	ldr	r0, [r7, #24]
 8007a1c:	f001 fa62 	bl	8008ee4 <pxPortInitialiseStack>
 8007a20:	4602      	mov	r2, r0
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a32:	bf00      	nop
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	2000397c 	.word	0x2000397c
 8007a40:	200039e4 	.word	0x200039e4
 8007a44:	20003a4c 	.word	0x20003a4c

08007a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a50:	f001 fb3c 	bl	80090cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a54:	4b2d      	ldr	r3, [pc, #180]	@ (8007b0c <prvAddNewTaskToReadyList+0xc4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8007b0c <prvAddNewTaskToReadyList+0xc4>)
 8007a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b10 <prvAddNewTaskToReadyList+0xc8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a66:	4a2a      	ldr	r2, [pc, #168]	@ (8007b10 <prvAddNewTaskToReadyList+0xc8>)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a6c:	4b27      	ldr	r3, [pc, #156]	@ (8007b0c <prvAddNewTaskToReadyList+0xc4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d110      	bne.n	8007a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a74:	f000 fc2a 	bl	80082cc <prvInitialiseTaskLists>
 8007a78:	e00d      	b.n	8007a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a7a:	4b26      	ldr	r3, [pc, #152]	@ (8007b14 <prvAddNewTaskToReadyList+0xcc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a82:	4b23      	ldr	r3, [pc, #140]	@ (8007b10 <prvAddNewTaskToReadyList+0xc8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d802      	bhi.n	8007a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a90:	4a1f      	ldr	r2, [pc, #124]	@ (8007b10 <prvAddNewTaskToReadyList+0xc8>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a96:	4b20      	ldr	r3, [pc, #128]	@ (8007b18 <prvAddNewTaskToReadyList+0xd0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b18 <prvAddNewTaskToReadyList+0xd0>)
 8007a9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <prvAddNewTaskToReadyList+0xd0>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aac:	4b1b      	ldr	r3, [pc, #108]	@ (8007b1c <prvAddNewTaskToReadyList+0xd4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d903      	bls.n	8007abc <prvAddNewTaskToReadyList+0x74>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <prvAddNewTaskToReadyList+0xd4>)
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4a15      	ldr	r2, [pc, #84]	@ (8007b20 <prvAddNewTaskToReadyList+0xd8>)
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f7fe fd03 	bl	80064de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ad8:	f001 fb28 	bl	800912c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007adc:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <prvAddNewTaskToReadyList+0xcc>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00e      	beq.n	8007b02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <prvAddNewTaskToReadyList+0xc8>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d207      	bcs.n	8007b02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007af2:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <prvAddNewTaskToReadyList+0xdc>)
 8007af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000ff4 	.word	0x20000ff4
 8007b10:	20000b20 	.word	0x20000b20
 8007b14:	20001000 	.word	0x20001000
 8007b18:	20001010 	.word	0x20001010
 8007b1c:	20000ffc 	.word	0x20000ffc
 8007b20:	20000b24 	.word	0x20000b24
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d018      	beq.n	8007b6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b3a:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <vTaskDelay+0x64>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <vTaskDelay+0x32>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60bb      	str	r3, [r7, #8]
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b5a:	f000 f88b 	bl	8007c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b5e:	2100      	movs	r1, #0
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fe13 	bl	800878c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b66:	f000 f893 	bl	8007c90 <xTaskResumeAll>
 8007b6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d107      	bne.n	8007b82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b72:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <vTaskDelay+0x68>)
 8007b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000101c 	.word	0x2000101c
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	@ 0x28
 8007b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ba2:	463a      	mov	r2, r7
 8007ba4:	1d39      	adds	r1, r7, #4
 8007ba6:	f107 0308 	add.w	r3, r7, #8
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fc3a 	bl	8006424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	9202      	str	r2, [sp, #8]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	4924      	ldr	r1, [pc, #144]	@ (8007c54 <vTaskStartScheduler+0xc0>)
 8007bc4:	4824      	ldr	r0, [pc, #144]	@ (8007c58 <vTaskStartScheduler+0xc4>)
 8007bc6:	f7ff fdf1 	bl	80077ac <xTaskCreateStatic>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	4a23      	ldr	r2, [pc, #140]	@ (8007c5c <vTaskStartScheduler+0xc8>)
 8007bce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bd0:	4b22      	ldr	r3, [pc, #136]	@ (8007c5c <vTaskStartScheduler+0xc8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e001      	b.n	8007be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d102      	bne.n	8007bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007be8:	f000 fe24 	bl	8008834 <xTimerCreateTimerTask>
 8007bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d11b      	bne.n	8007c2c <vTaskStartScheduler+0x98>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	613b      	str	r3, [r7, #16]
}
 8007c06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c08:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <vTaskStartScheduler+0xcc>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3354      	adds	r3, #84	@ 0x54
 8007c0e:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <vTaskStartScheduler+0xd0>)
 8007c10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c12:	4b15      	ldr	r3, [pc, #84]	@ (8007c68 <vTaskStartScheduler+0xd4>)
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c1a:	4b14      	ldr	r3, [pc, #80]	@ (8007c6c <vTaskStartScheduler+0xd8>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c20:	4b13      	ldr	r3, [pc, #76]	@ (8007c70 <vTaskStartScheduler+0xdc>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c26:	f001 f9df 	bl	8008fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c2a:	e00f      	b.n	8007c4c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c32:	d10b      	bne.n	8007c4c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	e7fd      	b.n	8007c48 <vTaskStartScheduler+0xb4>
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	0800c824 	.word	0x0800c824
 8007c58:	0800829d 	.word	0x0800829d
 8007c5c:	20001018 	.word	0x20001018
 8007c60:	20000b20 	.word	0x20000b20
 8007c64:	2000001c 	.word	0x2000001c
 8007c68:	20001014 	.word	0x20001014
 8007c6c:	20001000 	.word	0x20001000
 8007c70:	20000ff8 	.word	0x20000ff8

08007c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <vTaskSuspendAll+0x18>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	4a03      	ldr	r2, [pc, #12]	@ (8007c8c <vTaskSuspendAll+0x18>)
 8007c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c82:	bf00      	nop
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	2000101c 	.word	0x2000101c

08007c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c9e:	4b42      	ldr	r3, [pc, #264]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <xTaskResumeAll+0x2e>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	603b      	str	r3, [r7, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cbe:	f001 fa05 	bl	80090cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cc2:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a37      	ldr	r2, [pc, #220]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ccc:	4b36      	ldr	r3, [pc, #216]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d162      	bne.n	8007d9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <xTaskResumeAll+0x11c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05e      	beq.n	8007d9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cdc:	e02f      	b.n	8007d3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cde:	4b34      	ldr	r3, [pc, #208]	@ (8007db0 <xTaskResumeAll+0x120>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3318      	adds	r3, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fc52 	bl	8006594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fc4d 	bl	8006594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007db4 <xTaskResumeAll+0x124>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d903      	bls.n	8007d0e <xTaskResumeAll+0x7e>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007db4 <xTaskResumeAll+0x124>)
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4a27      	ldr	r2, [pc, #156]	@ (8007db8 <xTaskResumeAll+0x128>)
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe fbda 	bl	80064de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2e:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <xTaskResumeAll+0x12c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d302      	bcc.n	8007d3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d38:	4b21      	ldr	r3, [pc, #132]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007db0 <xTaskResumeAll+0x120>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1cb      	bne.n	8007cde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d4c:	f000 fb62 	bl	8008414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d50:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc4 <xTaskResumeAll+0x134>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d010      	beq.n	8007d7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d5c:	f000 f844 	bl	8007de8 <xTaskIncrementTick>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007d66:	4b16      	ldr	r3, [pc, #88]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f1      	bne.n	8007d5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007d78:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <xTaskResumeAll+0x134>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d7e:	4b10      	ldr	r3, [pc, #64]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d009      	beq.n	8007d9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <xTaskResumeAll+0x138>)
 8007d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d9a:	f001 f9c7 	bl	800912c <vPortExitCritical>

	return xAlreadyYielded;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2000101c 	.word	0x2000101c
 8007dac:	20000ff4 	.word	0x20000ff4
 8007db0:	20000fb4 	.word	0x20000fb4
 8007db4:	20000ffc 	.word	0x20000ffc
 8007db8:	20000b24 	.word	0x20000b24
 8007dbc:	20000b20 	.word	0x20000b20
 8007dc0:	20001008 	.word	0x20001008
 8007dc4:	20001004 	.word	0x20001004
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dd2:	4b04      	ldr	r3, [pc, #16]	@ (8007de4 <xTaskGetTickCount+0x18>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dd8:	687b      	ldr	r3, [r7, #4]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	20000ff8 	.word	0x20000ff8

08007de8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df2:	4b4f      	ldr	r3, [pc, #316]	@ (8007f30 <xTaskIncrementTick+0x148>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 8090 	bne.w	8007f1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8007f34 <xTaskIncrementTick+0x14c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e04:	4a4b      	ldr	r2, [pc, #300]	@ (8007f34 <xTaskIncrementTick+0x14c>)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d121      	bne.n	8007e54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e10:	4b49      	ldr	r3, [pc, #292]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	603b      	str	r3, [r7, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	e7fd      	b.n	8007e2e <xTaskIncrementTick+0x46>
 8007e32:	4b41      	ldr	r3, [pc, #260]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	4b40      	ldr	r3, [pc, #256]	@ (8007f3c <xTaskIncrementTick+0x154>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	4a3e      	ldr	r2, [pc, #248]	@ (8007f3c <xTaskIncrementTick+0x154>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	4b3e      	ldr	r3, [pc, #248]	@ (8007f40 <xTaskIncrementTick+0x158>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f40 <xTaskIncrementTick+0x158>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	f000 fae0 	bl	8008414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e54:	4b3b      	ldr	r3, [pc, #236]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d349      	bcc.n	8007ef2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5e:	4b36      	ldr	r3, [pc, #216]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d104      	bne.n	8007e72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e68:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e6e:	601a      	str	r2, [r3, #0]
					break;
 8007e70:	e03f      	b.n	8007ef2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e72:	4b31      	ldr	r3, [pc, #196]	@ (8007f38 <xTaskIncrementTick+0x150>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d203      	bcs.n	8007e92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f44 <xTaskIncrementTick+0x15c>)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e90:	e02f      	b.n	8007ef2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe fb7c 	bl	8006594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	3318      	adds	r3, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fb73 	bl	8006594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb2:	4b25      	ldr	r3, [pc, #148]	@ (8007f48 <xTaskIncrementTick+0x160>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d903      	bls.n	8007ec2 <xTaskIncrementTick+0xda>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <xTaskIncrementTick+0x160>)
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <xTaskIncrementTick+0x164>)
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7fe fb00 	bl	80064de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <xTaskIncrementTick+0x168>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d3b8      	bcc.n	8007e5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef0:	e7b5      	b.n	8007e5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ef2:	4b17      	ldr	r3, [pc, #92]	@ (8007f50 <xTaskIncrementTick+0x168>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef8:	4914      	ldr	r1, [pc, #80]	@ (8007f4c <xTaskIncrementTick+0x164>)
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d901      	bls.n	8007f0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f0e:	4b11      	ldr	r3, [pc, #68]	@ (8007f54 <xTaskIncrementTick+0x16c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f16:	2301      	movs	r3, #1
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e004      	b.n	8007f26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <xTaskIncrementTick+0x170>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4a0d      	ldr	r2, [pc, #52]	@ (8007f58 <xTaskIncrementTick+0x170>)
 8007f24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f26:	697b      	ldr	r3, [r7, #20]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	2000101c 	.word	0x2000101c
 8007f34:	20000ff8 	.word	0x20000ff8
 8007f38:	20000fac 	.word	0x20000fac
 8007f3c:	20000fb0 	.word	0x20000fb0
 8007f40:	2000100c 	.word	0x2000100c
 8007f44:	20001014 	.word	0x20001014
 8007f48:	20000ffc 	.word	0x20000ffc
 8007f4c:	20000b24 	.word	0x20000b24
 8007f50:	20000b20 	.word	0x20000b20
 8007f54:	20001008 	.word	0x20001008
 8007f58:	20001004 	.word	0x20001004

08007f5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f62:	4b2a      	ldr	r3, [pc, #168]	@ (800800c <vTaskSwitchContext+0xb0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f6a:	4b29      	ldr	r3, [pc, #164]	@ (8008010 <vTaskSwitchContext+0xb4>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f70:	e047      	b.n	8008002 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007f72:	4b27      	ldr	r3, [pc, #156]	@ (8008010 <vTaskSwitchContext+0xb4>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	4b26      	ldr	r3, [pc, #152]	@ (8008014 <vTaskSwitchContext+0xb8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]
 8007f7e:	e011      	b.n	8007fa4 <vTaskSwitchContext+0x48>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vTaskSwitchContext+0x42>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	607b      	str	r3, [r7, #4]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskSwitchContext+0x3e>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	491c      	ldr	r1, [pc, #112]	@ (8008018 <vTaskSwitchContext+0xbc>)
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0e3      	beq.n	8007f80 <vTaskSwitchContext+0x24>
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <vTaskSwitchContext+0xbc>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	60bb      	str	r3, [r7, #8]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	605a      	str	r2, [r3, #4]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d104      	bne.n	8007fe8 <vTaskSwitchContext+0x8c>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	605a      	str	r2, [r3, #4]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	4a0b      	ldr	r2, [pc, #44]	@ (800801c <vTaskSwitchContext+0xc0>)
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4a08      	ldr	r2, [pc, #32]	@ (8008014 <vTaskSwitchContext+0xb8>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ff8:	4b08      	ldr	r3, [pc, #32]	@ (800801c <vTaskSwitchContext+0xc0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3354      	adds	r3, #84	@ 0x54
 8007ffe:	4a08      	ldr	r2, [pc, #32]	@ (8008020 <vTaskSwitchContext+0xc4>)
 8008000:	6013      	str	r3, [r2, #0]
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr
 800800c:	2000101c 	.word	0x2000101c
 8008010:	20001008 	.word	0x20001008
 8008014:	20000ffc 	.word	0x20000ffc
 8008018:	20000b24 	.word	0x20000b24
 800801c:	20000b20 	.word	0x20000b20
 8008020:	2000001c 	.word	0x2000001c

08008024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800804c:	4b07      	ldr	r3, [pc, #28]	@ (800806c <vTaskPlaceOnEventList+0x48>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3318      	adds	r3, #24
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe fa65 	bl	8006524 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800805a:	2101      	movs	r1, #1
 800805c:	6838      	ldr	r0, [r7, #0]
 800805e:	f000 fb95 	bl	800878c <prvAddCurrentTaskToDelayedList>
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000b20 	.word	0x20000b20

08008070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	617b      	str	r3, [r7, #20]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800809a:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3318      	adds	r3, #24
 80080a0:	4619      	mov	r1, r3
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7fe fa1b 	bl	80064de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	f000 fb68 	bl	800878c <prvAddCurrentTaskToDelayedList>
	}
 80080bc:	bf00      	nop
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000b20 	.word	0x20000b20

080080c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10b      	bne.n	80080f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60fb      	str	r3, [r7, #12]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3318      	adds	r3, #24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fa4a 	bl	8006594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008100:	4b1d      	ldr	r3, [pc, #116]	@ (8008178 <xTaskRemoveFromEventList+0xb0>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d11d      	bne.n	8008144 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	3304      	adds	r3, #4
 800810c:	4618      	mov	r0, r3
 800810e:	f7fe fa41 	bl	8006594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008116:	4b19      	ldr	r3, [pc, #100]	@ (800817c <xTaskRemoveFromEventList+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d903      	bls.n	8008126 <xTaskRemoveFromEventList+0x5e>
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	4a16      	ldr	r2, [pc, #88]	@ (800817c <xTaskRemoveFromEventList+0xb4>)
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4a13      	ldr	r2, [pc, #76]	@ (8008180 <xTaskRemoveFromEventList+0xb8>)
 8008134:	441a      	add	r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3304      	adds	r3, #4
 800813a:	4619      	mov	r1, r3
 800813c:	4610      	mov	r0, r2
 800813e:	f7fe f9ce 	bl	80064de <vListInsertEnd>
 8008142:	e005      	b.n	8008150 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3318      	adds	r3, #24
 8008148:	4619      	mov	r1, r3
 800814a:	480e      	ldr	r0, [pc, #56]	@ (8008184 <xTaskRemoveFromEventList+0xbc>)
 800814c:	f7fe f9c7 	bl	80064de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008154:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <xTaskRemoveFromEventList+0xc0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	429a      	cmp	r2, r3
 800815c:	d905      	bls.n	800816a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800815e:	2301      	movs	r3, #1
 8008160:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <xTaskRemoveFromEventList+0xc4>)
 8008164:	2201      	movs	r2, #1
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	e001      	b.n	800816e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800816e:	697b      	ldr	r3, [r7, #20]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	2000101c 	.word	0x2000101c
 800817c:	20000ffc 	.word	0x20000ffc
 8008180:	20000b24 	.word	0x20000b24
 8008184:	20000fb4 	.word	0x20000fb4
 8008188:	20000b20 	.word	0x20000b20
 800818c:	20001008 	.word	0x20001008

08008190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008198:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <vTaskInternalSetTimeOutState+0x24>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081a0:	4b05      	ldr	r3, [pc, #20]	@ (80081b8 <vTaskInternalSetTimeOutState+0x28>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000100c 	.word	0x2000100c
 80081b8:	20000ff8 	.word	0x20000ff8

080081bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	613b      	str	r3, [r7, #16]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10b      	bne.n	8008202 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	e7fd      	b.n	80081fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008202:	f000 ff63 	bl	80090cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008206:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <xTaskCheckForTimeOut+0xc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800821e:	d102      	bne.n	8008226 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
 8008224:	e023      	b.n	800826e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b15      	ldr	r3, [pc, #84]	@ (8008280 <xTaskCheckForTimeOut+0xc4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d007      	beq.n	8008242 <xTaskCheckForTimeOut+0x86>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	429a      	cmp	r2, r3
 800823a:	d302      	bcc.n	8008242 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e015      	b.n	800826e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	429a      	cmp	r2, r3
 800824a:	d20b      	bcs.n	8008264 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	1ad2      	subs	r2, r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ff99 	bl	8008190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800825e:	2300      	movs	r3, #0
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	e004      	b.n	800826e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800826a:	2301      	movs	r3, #1
 800826c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800826e:	f000 ff5d 	bl	800912c <vPortExitCritical>

	return xReturn;
 8008272:	69fb      	ldr	r3, [r7, #28]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3720      	adds	r7, #32
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000ff8 	.word	0x20000ff8
 8008280:	2000100c 	.word	0x2000100c

08008284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008288:	4b03      	ldr	r3, [pc, #12]	@ (8008298 <vTaskMissedYield+0x14>)
 800828a:	2201      	movs	r2, #1
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20001008 	.word	0x20001008

0800829c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082a4:	f000 f852 	bl	800834c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <prvIdleTask+0x28>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d9f9      	bls.n	80082a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082b0:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <prvIdleTask+0x2c>)
 80082b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082c0:	e7f0      	b.n	80082a4 <prvIdleTask+0x8>
 80082c2:	bf00      	nop
 80082c4:	20000b24 	.word	0x20000b24
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
 80082d6:	e00c      	b.n	80082f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a12      	ldr	r2, [pc, #72]	@ (800832c <prvInitialiseTaskLists+0x60>)
 80082e4:	4413      	add	r3, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe f8ce 	bl	8006488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b37      	cmp	r3, #55	@ 0x37
 80082f6:	d9ef      	bls.n	80082d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082f8:	480d      	ldr	r0, [pc, #52]	@ (8008330 <prvInitialiseTaskLists+0x64>)
 80082fa:	f7fe f8c5 	bl	8006488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082fe:	480d      	ldr	r0, [pc, #52]	@ (8008334 <prvInitialiseTaskLists+0x68>)
 8008300:	f7fe f8c2 	bl	8006488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008304:	480c      	ldr	r0, [pc, #48]	@ (8008338 <prvInitialiseTaskLists+0x6c>)
 8008306:	f7fe f8bf 	bl	8006488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800830a:	480c      	ldr	r0, [pc, #48]	@ (800833c <prvInitialiseTaskLists+0x70>)
 800830c:	f7fe f8bc 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008310:	480b      	ldr	r0, [pc, #44]	@ (8008340 <prvInitialiseTaskLists+0x74>)
 8008312:	f7fe f8b9 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <prvInitialiseTaskLists+0x78>)
 8008318:	4a05      	ldr	r2, [pc, #20]	@ (8008330 <prvInitialiseTaskLists+0x64>)
 800831a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <prvInitialiseTaskLists+0x7c>)
 800831e:	4a05      	ldr	r2, [pc, #20]	@ (8008334 <prvInitialiseTaskLists+0x68>)
 8008320:	601a      	str	r2, [r3, #0]
}
 8008322:	bf00      	nop
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000b24 	.word	0x20000b24
 8008330:	20000f84 	.word	0x20000f84
 8008334:	20000f98 	.word	0x20000f98
 8008338:	20000fb4 	.word	0x20000fb4
 800833c:	20000fc8 	.word	0x20000fc8
 8008340:	20000fe0 	.word	0x20000fe0
 8008344:	20000fac 	.word	0x20000fac
 8008348:	20000fb0 	.word	0x20000fb0

0800834c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008352:	e019      	b.n	8008388 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008354:	f000 feba 	bl	80090cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008358:	4b10      	ldr	r3, [pc, #64]	@ (800839c <prvCheckTasksWaitingTermination+0x50>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe f915 	bl	8006594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <prvCheckTasksWaitingTermination+0x54>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3b01      	subs	r3, #1
 8008370:	4a0b      	ldr	r2, [pc, #44]	@ (80083a0 <prvCheckTasksWaitingTermination+0x54>)
 8008372:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008374:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <prvCheckTasksWaitingTermination+0x58>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <prvCheckTasksWaitingTermination+0x58>)
 800837c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800837e:	f000 fed5 	bl	800912c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f810 	bl	80083a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008388:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <prvCheckTasksWaitingTermination+0x58>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e1      	bne.n	8008354 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000fc8 	.word	0x20000fc8
 80083a0:	20000ff4 	.word	0x20000ff4
 80083a4:	20000fdc 	.word	0x20000fdc

080083a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3354      	adds	r3, #84	@ 0x54
 80083b4:	4618      	mov	r0, r3
 80083b6:	f002 f92b 	bl	800a610 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 f84f 	bl	800946c <vPortFree>
				vPortFree( pxTCB );
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 f84c 	bl	800946c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083d4:	e019      	b.n	800840a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d103      	bne.n	80083e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f843 	bl	800946c <vPortFree>
	}
 80083e6:	e010      	b.n	800840a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d00b      	beq.n	800840a <prvDeleteTCB+0x62>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	60fb      	str	r3, [r7, #12]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <prvDeleteTCB+0x5e>
	}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841a:	4b0c      	ldr	r3, [pc, #48]	@ (800844c <prvResetNextTaskUnblockTime+0x38>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008424:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <prvResetNextTaskUnblockTime+0x3c>)
 8008426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800842a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800842c:	e008      	b.n	8008440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b07      	ldr	r3, [pc, #28]	@ (800844c <prvResetNextTaskUnblockTime+0x38>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4a04      	ldr	r2, [pc, #16]	@ (8008450 <prvResetNextTaskUnblockTime+0x3c>)
 800843e:	6013      	str	r3, [r2, #0]
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000fac 	.word	0x20000fac
 8008450:	20001014 	.word	0x20001014

08008454 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800845a:	4b04      	ldr	r3, [pc, #16]	@ (800846c <xTaskGetCurrentTaskHandle+0x18>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008460:	687b      	ldr	r3, [r7, #4]
	}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	20000b20 	.word	0x20000b20

08008470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008476:	4b0b      	ldr	r3, [pc, #44]	@ (80084a4 <xTaskGetSchedulerState+0x34>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800847e:	2301      	movs	r3, #1
 8008480:	607b      	str	r3, [r7, #4]
 8008482:	e008      	b.n	8008496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008484:	4b08      	ldr	r3, [pc, #32]	@ (80084a8 <xTaskGetSchedulerState+0x38>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800848c:	2302      	movs	r3, #2
 800848e:	607b      	str	r3, [r7, #4]
 8008490:	e001      	b.n	8008496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008496:	687b      	ldr	r3, [r7, #4]
	}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	bc80      	pop	{r7}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20001000 	.word	0x20001000
 80084a8:	2000101c 	.word	0x2000101c

080084ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d051      	beq.n	8008566 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008570 <xTaskPriorityInherit+0xc4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d241      	bcs.n	8008554 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	db06      	blt.n	80084e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	4b25      	ldr	r3, [pc, #148]	@ (8008570 <xTaskPriorityInherit+0xc4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6959      	ldr	r1, [r3, #20]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008574 <xTaskPriorityInherit+0xc8>)
 80084f8:	4413      	add	r3, r2
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d122      	bne.n	8008544 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	3304      	adds	r3, #4
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe f846 	bl	8006594 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008508:	4b19      	ldr	r3, [pc, #100]	@ (8008570 <xTaskPriorityInherit+0xc4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	4b18      	ldr	r3, [pc, #96]	@ (8008578 <xTaskPriorityInherit+0xcc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d903      	bls.n	8008526 <xTaskPriorityInherit+0x7a>
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008522:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <xTaskPriorityInherit+0xcc>)
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a10      	ldr	r2, [pc, #64]	@ (8008574 <xTaskPriorityInherit+0xc8>)
 8008534:	441a      	add	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fd ffce 	bl	80064de <vListInsertEnd>
 8008542:	e004      	b.n	800854e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008544:	4b0a      	ldr	r3, [pc, #40]	@ (8008570 <xTaskPriorityInherit+0xc4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800854e:	2301      	movs	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e008      	b.n	8008566 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008558:	4b05      	ldr	r3, [pc, #20]	@ (8008570 <xTaskPriorityInherit+0xc4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	429a      	cmp	r2, r3
 8008560:	d201      	bcs.n	8008566 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008566:	68fb      	ldr	r3, [r7, #12]
	}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000b20 	.word	0x20000b20
 8008574:	20000b24 	.word	0x20000b24
 8008578:	20000ffc 	.word	0x20000ffc

0800857c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d058      	beq.n	8008644 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008592:	4b2f      	ldr	r3, [pc, #188]	@ (8008650 <xTaskPriorityDisinherit+0xd4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	429a      	cmp	r2, r3
 800859a:	d00b      	beq.n	80085b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	60fb      	str	r3, [r7, #12]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10b      	bne.n	80085d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	bf00      	nop
 80085d2:	e7fd      	b.n	80085d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d8:	1e5a      	subs	r2, r3, #1
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d02c      	beq.n	8008644 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d128      	bne.n	8008644 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fd ffcc 	bl	8006594 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008614:	4b0f      	ldr	r3, [pc, #60]	@ (8008654 <xTaskPriorityDisinherit+0xd8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	d903      	bls.n	8008624 <xTaskPriorityDisinherit+0xa8>
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008620:	4a0c      	ldr	r2, [pc, #48]	@ (8008654 <xTaskPriorityDisinherit+0xd8>)
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4a09      	ldr	r2, [pc, #36]	@ (8008658 <xTaskPriorityDisinherit+0xdc>)
 8008632:	441a      	add	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fd ff4f 	bl	80064de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008644:	697b      	ldr	r3, [r7, #20]
	}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000b20 	.word	0x20000b20
 8008654:	20000ffc 	.word	0x20000ffc
 8008658:	20000b24 	.word	0x20000b24

0800865c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d06c      	beq.n	800874e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	e7fd      	b.n	8008690 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d902      	bls.n	80086a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	e002      	b.n	80086aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d04c      	beq.n	800874e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d147      	bne.n	800874e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086be:	4b26      	ldr	r3, [pc, #152]	@ (8008758 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d10b      	bne.n	80086e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60bb      	str	r3, [r7, #8]
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	69fa      	ldr	r2, [r7, #28]
 80086ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	db04      	blt.n	80086fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	6959      	ldr	r1, [r3, #20]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a13      	ldr	r2, [pc, #76]	@ (800875c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800870e:	4413      	add	r3, r2
 8008710:	4299      	cmp	r1, r3
 8008712:	d11c      	bne.n	800874e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	3304      	adds	r3, #4
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd ff3b 	bl	8006594 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008722:	4b0f      	ldr	r3, [pc, #60]	@ (8008760 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	4a0c      	ldr	r2, [pc, #48]	@ (8008760 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4a07      	ldr	r2, [pc, #28]	@ (800875c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008740:	441a      	add	r2, r3
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fd fec8 	bl	80064de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800874e:	bf00      	nop
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000b20 	.word	0x20000b20
 800875c:	20000b24 	.word	0x20000b24
 8008760:	20000ffc 	.word	0x20000ffc

08008764 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008768:	4b07      	ldr	r3, [pc, #28]	@ (8008788 <pvTaskIncrementMutexHeldCount+0x24>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008770:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <pvTaskIncrementMutexHeldCount+0x24>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008776:	3201      	adds	r2, #1
 8008778:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800877a:	4b03      	ldr	r3, [pc, #12]	@ (8008788 <pvTaskIncrementMutexHeldCount+0x24>)
 800877c:	681b      	ldr	r3, [r3, #0]
	}
 800877e:	4618      	mov	r0, r3
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20000b20 	.word	0x20000b20

0800878c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008796:	4b21      	ldr	r3, [pc, #132]	@ (800881c <prvAddCurrentTaskToDelayedList+0x90>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879c:	4b20      	ldr	r3, [pc, #128]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x94>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fd fef6 	bl	8006594 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087ae:	d10a      	bne.n	80087c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4819      	ldr	r0, [pc, #100]	@ (8008824 <prvAddCurrentTaskToDelayedList+0x98>)
 80087c0:	f7fd fe8d 	bl	80064de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087c4:	e026      	b.n	8008814 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4413      	add	r3, r2
 80087cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087ce:	4b14      	ldr	r3, [pc, #80]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x94>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d209      	bcs.n	80087f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087de:	4b12      	ldr	r3, [pc, #72]	@ (8008828 <prvAddCurrentTaskToDelayedList+0x9c>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f7fd fe9a 	bl	8006524 <vListInsert>
}
 80087f0:	e010      	b.n	8008814 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f2:	4b0e      	ldr	r3, [pc, #56]	@ (800882c <prvAddCurrentTaskToDelayedList+0xa0>)
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008820 <prvAddCurrentTaskToDelayedList+0x94>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fd fe90 	bl	8006524 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008804:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	429a      	cmp	r2, r3
 800880c:	d202      	bcs.n	8008814 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800880e:	4a08      	ldr	r2, [pc, #32]	@ (8008830 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	6013      	str	r3, [r2, #0]
}
 8008814:	bf00      	nop
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000ff8 	.word	0x20000ff8
 8008820:	20000b20 	.word	0x20000b20
 8008824:	20000fe0 	.word	0x20000fe0
 8008828:	20000fb0 	.word	0x20000fb0
 800882c:	20000fac 	.word	0x20000fac
 8008830:	20001014 	.word	0x20001014

08008834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	@ 0x28
 8008838:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800883a:	2300      	movs	r3, #0
 800883c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800883e:	f000 fb11 	bl	8008e64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008842:	4b1d      	ldr	r3, [pc, #116]	@ (80088b8 <xTimerCreateTimerTask+0x84>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d021      	beq.n	800888e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008852:	1d3a      	adds	r2, r7, #4
 8008854:	f107 0108 	add.w	r1, r7, #8
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fdf9 	bl	8006454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	9202      	str	r2, [sp, #8]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	2302      	movs	r3, #2
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	460a      	mov	r2, r1
 8008874:	4911      	ldr	r1, [pc, #68]	@ (80088bc <xTimerCreateTimerTask+0x88>)
 8008876:	4812      	ldr	r0, [pc, #72]	@ (80088c0 <xTimerCreateTimerTask+0x8c>)
 8008878:	f7fe ff98 	bl	80077ac <xTaskCreateStatic>
 800887c:	4603      	mov	r3, r0
 800887e:	4a11      	ldr	r2, [pc, #68]	@ (80088c4 <xTimerCreateTimerTask+0x90>)
 8008880:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008882:	4b10      	ldr	r3, [pc, #64]	@ (80088c4 <xTimerCreateTimerTask+0x90>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800888a:	2301      	movs	r3, #1
 800888c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	613b      	str	r3, [r7, #16]
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088ac:	697b      	ldr	r3, [r7, #20]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20001050 	.word	0x20001050
 80088bc:	0800c82c 	.word	0x0800c82c
 80088c0:	08008a01 	.word	0x08008a01
 80088c4:	20001054 	.word	0x20001054

080088c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	@ 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	623b      	str	r3, [r7, #32]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088f8:	4b19      	ldr	r3, [pc, #100]	@ (8008960 <xTimerGenericCommand+0x98>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02a      	beq.n	8008956 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	2b05      	cmp	r3, #5
 8008910:	dc18      	bgt.n	8008944 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008912:	f7ff fdad 	bl	8008470 <xTaskGetSchedulerState>
 8008916:	4603      	mov	r3, r0
 8008918:	2b02      	cmp	r3, #2
 800891a:	d109      	bne.n	8008930 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800891c:	4b10      	ldr	r3, [pc, #64]	@ (8008960 <xTimerGenericCommand+0x98>)
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	f107 0110 	add.w	r1, r7, #16
 8008924:	2300      	movs	r3, #0
 8008926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008928:	f7fe f8ca 	bl	8006ac0 <xQueueGenericSend>
 800892c:	6278      	str	r0, [r7, #36]	@ 0x24
 800892e:	e012      	b.n	8008956 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008930:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <xTimerGenericCommand+0x98>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	f107 0110 	add.w	r1, r7, #16
 8008938:	2300      	movs	r3, #0
 800893a:	2200      	movs	r2, #0
 800893c:	f7fe f8c0 	bl	8006ac0 <xQueueGenericSend>
 8008940:	6278      	str	r0, [r7, #36]	@ 0x24
 8008942:	e008      	b.n	8008956 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008944:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <xTimerGenericCommand+0x98>)
 8008946:	6818      	ldr	r0, [r3, #0]
 8008948:	f107 0110 	add.w	r1, r7, #16
 800894c:	2300      	movs	r3, #0
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	f7fe f9b8 	bl	8006cc4 <xQueueGenericSendFromISR>
 8008954:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008958:	4618      	mov	r0, r3
 800895a:	3728      	adds	r7, #40	@ 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20001050 	.word	0x20001050

08008964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af02      	add	r7, sp, #8
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896e:	4b23      	ldr	r3, [pc, #140]	@ (80089fc <prvProcessExpiredTimer+0x98>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fd fe09 	bl	8006594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008988:	f003 0304 	and.w	r3, r3, #4
 800898c:	2b00      	cmp	r3, #0
 800898e:	d023      	beq.n	80089d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	699a      	ldr	r2, [r3, #24]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	18d1      	adds	r1, r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	6978      	ldr	r0, [r7, #20]
 800899e:	f000 f8d3 	bl	8008b48 <prvInsertTimerInActiveList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d020      	beq.n	80089ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089a8:	2300      	movs	r3, #0
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2300      	movs	r3, #0
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	6978      	ldr	r0, [r7, #20]
 80089b4:	f7ff ff88 	bl	80088c8 <xTimerGenericCommand>
 80089b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	6978      	ldr	r0, [r7, #20]
 80089f0:	4798      	blx	r3
}
 80089f2:	bf00      	nop
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20001048 	.word	0x20001048

08008a00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 f859 	bl	8008ac4 <prvGetNextExpireTime>
 8008a12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4619      	mov	r1, r3
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f805 	bl	8008a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a1e:	f000 f8d5 	bl	8008bcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a22:	bf00      	nop
 8008a24:	e7f0      	b.n	8008a08 <prvTimerTask+0x8>
	...

08008a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a32:	f7ff f91f 	bl	8007c74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a36:	f107 0308 	add.w	r3, r7, #8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f864 	bl	8008b08 <prvSampleTimeNow>
 8008a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d130      	bne.n	8008aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <prvProcessTimerOrBlockTask+0x3c>
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d806      	bhi.n	8008a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a56:	f7ff f91b 	bl	8007c90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ff81 	bl	8008964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a62:	e024      	b.n	8008aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d008      	beq.n	8008a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a6a:	4b13      	ldr	r3, [pc, #76]	@ (8008ab8 <prvProcessTimerOrBlockTask+0x90>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <prvProcessTimerOrBlockTask+0x50>
 8008a74:	2301      	movs	r3, #1
 8008a76:	e000      	b.n	8008a7a <prvProcessTimerOrBlockTask+0x52>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008abc <prvProcessTimerOrBlockTask+0x94>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7fe fe5b 	bl	8007744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a8e:	f7ff f8ff 	bl	8007c90 <xTaskResumeAll>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a98:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <prvProcessTimerOrBlockTask+0x98>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
}
 8008aa8:	e001      	b.n	8008aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008aaa:	f7ff f8f1 	bl	8007c90 <xTaskResumeAll>
}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	2000104c 	.word	0x2000104c
 8008abc:	20001050 	.word	0x20001050
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008acc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <prvGetNextExpireTime+0x40>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <prvGetNextExpireTime+0x16>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	e000      	b.n	8008adc <prvGetNextExpireTime+0x18>
 8008ada:	2200      	movs	r2, #0
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d105      	bne.n	8008af4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <prvGetNextExpireTime+0x40>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	e001      	b.n	8008af8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr
 8008b04:	20001048 	.word	0x20001048

08008b08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b10:	f7ff f95c 	bl	8007dcc <xTaskGetTickCount>
 8008b14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b16:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <prvSampleTimeNow+0x3c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d205      	bcs.n	8008b2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b20:	f000 f93a 	bl	8008d98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e002      	b.n	8008b32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b32:	4a04      	ldr	r2, [pc, #16]	@ (8008b44 <prvSampleTimeNow+0x3c>)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b38:	68fb      	ldr	r3, [r7, #12]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20001058 	.word	0x20001058

08008b48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d812      	bhi.n	8008b94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d302      	bcc.n	8008b82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	e01b      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b82:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <prvInsertTimerInActiveList+0x7c>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7fd fcc9 	bl	8006524 <vListInsert>
 8008b92:	e012      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d206      	bcs.n	8008baa <prvInsertTimerInActiveList+0x62>
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d302      	bcc.n	8008baa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e007      	b.n	8008bba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <prvInsertTimerInActiveList+0x80>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f7fd fcb5 	bl	8006524 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bba:	697b      	ldr	r3, [r7, #20]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	2000104c 	.word	0x2000104c
 8008bc8:	20001048 	.word	0x20001048

08008bcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	@ 0x38
 8008bd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bd2:	e0ce      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da19      	bge.n	8008c0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	3304      	adds	r3, #4
 8008bde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c04:	6850      	ldr	r0, [r2, #4]
 8008c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c08:	6892      	ldr	r2, [r2, #8]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f2c0 80ae 	blt.w	8008d72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	3304      	adds	r3, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fd fcb4 	bl	8006594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff ff6a 	bl	8008b08 <prvSampleTimeNow>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	f200 8097 	bhi.w	8008d6c <prvProcessReceivedCommands+0x1a0>
 8008c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <prvProcessReceivedCommands+0x78>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c6d 	.word	0x08008c6d
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008ce3 	.word	0x08008ce3
 8008c54:	08008cf7 	.word	0x08008cf7
 8008c58:	08008d43 	.word	0x08008d43
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c6d 	.word	0x08008c6d
 8008c64:	08008ce3 	.word	0x08008ce3
 8008c68:	08008cf7 	.word	0x08008cf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c72:	f043 0301 	orr.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	18d1      	adds	r1, r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c8c:	f7ff ff5c 	bl	8008b48 <prvInsertTimerInActiveList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d06c      	beq.n	8008d70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d061      	beq.n	8008d70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	441a      	add	r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cbe:	f7ff fe03 	bl	80088c8 <xTimerGenericCommand>
 8008cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d152      	bne.n	8008d70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61bb      	str	r3, [r7, #24]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ce8:	f023 0301 	bic.w	r3, r3, #1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008cf4:	e03d      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	617b      	str	r3, [r7, #20]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	18d1      	adds	r1, r2, r3
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d3c:	f7ff ff04 	bl	8008b48 <prvInsertTimerInActiveList>
					break;
 8008d40:	e017      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d103      	bne.n	8008d58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d52:	f000 fb8b 	bl	800946c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d56:	e00c      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d6a:	e002      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008d6c:	bf00      	nop
 8008d6e:	e000      	b.n	8008d72 <prvProcessReceivedCommands+0x1a6>
					break;
 8008d70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d72:	4b08      	ldr	r3, [pc, #32]	@ (8008d94 <prvProcessReceivedCommands+0x1c8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	1d39      	adds	r1, r7, #4
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe f8d0 	bl	8006f20 <xQueueReceive>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f47f af26 	bne.w	8008bd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	3730      	adds	r7, #48	@ 0x30
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20001050 	.word	0x20001050

08008d98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d9e:	e049      	b.n	8008e34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008da0:	4b2e      	ldr	r3, [pc, #184]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008daa:	4b2c      	ldr	r3, [pc, #176]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd fbeb 	bl	8006594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d02f      	beq.n	8008e34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d90e      	bls.n	8008e04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008df2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7fd fb91 	bl	8006524 <vListInsert>
 8008e02:	e017      	b.n	8008e34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e04:	2300      	movs	r3, #0
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff fd5a 	bl	80088c8 <xTimerGenericCommand>
 8008e14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	603b      	str	r3, [r7, #0]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1b0      	bne.n	8008da0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e3e:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e44:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <prvSwitchTimerLists+0xc8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a04      	ldr	r2, [pc, #16]	@ (8008e5c <prvSwitchTimerLists+0xc4>)
 8008e4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e4c:	4a04      	ldr	r2, [pc, #16]	@ (8008e60 <prvSwitchTimerLists+0xc8>)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6013      	str	r3, [r2, #0]
}
 8008e52:	bf00      	nop
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20001048 	.word	0x20001048
 8008e60:	2000104c 	.word	0x2000104c

08008e64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e6a:	f000 f92f 	bl	80090cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d120      	bne.n	8008eb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e76:	4814      	ldr	r0, [pc, #80]	@ (8008ec8 <prvCheckForValidListAndQueue+0x64>)
 8008e78:	f7fd fb06 	bl	8006488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e7c:	4813      	ldr	r0, [pc, #76]	@ (8008ecc <prvCheckForValidListAndQueue+0x68>)
 8008e7e:	f7fd fb03 	bl	8006488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <prvCheckForValidListAndQueue+0x6c>)
 8008e84:	4a10      	ldr	r2, [pc, #64]	@ (8008ec8 <prvCheckForValidListAndQueue+0x64>)
 8008e86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e88:	4b12      	ldr	r3, [pc, #72]	@ (8008ed4 <prvCheckForValidListAndQueue+0x70>)
 8008e8a:	4a10      	ldr	r2, [pc, #64]	@ (8008ecc <prvCheckForValidListAndQueue+0x68>)
 8008e8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4b11      	ldr	r3, [pc, #68]	@ (8008ed8 <prvCheckForValidListAndQueue+0x74>)
 8008e94:	4a11      	ldr	r2, [pc, #68]	@ (8008edc <prvCheckForValidListAndQueue+0x78>)
 8008e96:	2110      	movs	r1, #16
 8008e98:	200a      	movs	r0, #10
 8008e9a:	f7fd fc0f 	bl	80066bc <xQueueGenericCreateStatic>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4a08      	ldr	r2, [pc, #32]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008ea2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ea4:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008eac:	4b05      	ldr	r3, [pc, #20]	@ (8008ec4 <prvCheckForValidListAndQueue+0x60>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	490b      	ldr	r1, [pc, #44]	@ (8008ee0 <prvCheckForValidListAndQueue+0x7c>)
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fbf4 	bl	80076a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008eb8:	f000 f938 	bl	800912c <vPortExitCritical>
}
 8008ebc:	bf00      	nop
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20001050 	.word	0x20001050
 8008ec8:	20001020 	.word	0x20001020
 8008ecc:	20001034 	.word	0x20001034
 8008ed0:	20001048 	.word	0x20001048
 8008ed4:	2000104c 	.word	0x2000104c
 8008ed8:	200010fc 	.word	0x200010fc
 8008edc:	2000105c 	.word	0x2000105c
 8008ee0:	0800c834 	.word	0x0800c834

08008ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3b04      	subs	r3, #4
 8008ef4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	3b04      	subs	r3, #4
 8008f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f023 0201 	bic.w	r2, r3, #1
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3b04      	subs	r3, #4
 8008f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f14:	4a08      	ldr	r2, [pc, #32]	@ (8008f38 <pxPortInitialiseStack+0x54>)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3b14      	subs	r3, #20
 8008f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b20      	subs	r3, #32
 8008f2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr
 8008f38:	08008f3d 	.word	0x08008f3d

08008f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <prvTaskExitError+0x54>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f4e:	d00b      	beq.n	8008f68 <prvTaskExitError+0x2c>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	60fb      	str	r3, [r7, #12]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <prvTaskExitError+0x28>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	60bb      	str	r3, [r7, #8]
}
 8008f7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f7c:	bf00      	nop
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0fc      	beq.n	8008f7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr
 8008f90:	2000000c 	.word	0x2000000c
	...

08008fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fa0:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <pxCurrentTCBConst2>)
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	6808      	ldr	r0, [r1, #0]
 8008fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008faa:	f380 8809 	msr	PSP, r0
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8008fbe:	4770      	bx	lr

08008fc0 <pxCurrentTCBConst2>:
 8008fc0:	20000b20 	.word	0x20000b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008fc8:	4806      	ldr	r0, [pc, #24]	@ (8008fe4 <prvPortStartFirstTask+0x1c>)
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f380 8808 	msr	MSP, r0
 8008fd2:	b662      	cpsie	i
 8008fd4:	b661      	cpsie	f
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	df00      	svc	0
 8008fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fe2:	bf00      	nop
 8008fe4:	e000ed08 	.word	0xe000ed08

08008fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fee:	4b32      	ldr	r3, [pc, #200]	@ (80090b8 <xPortStartScheduler+0xd0>)
 8008ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	22ff      	movs	r2, #255	@ 0xff
 8008ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4b2a      	ldr	r3, [pc, #168]	@ (80090bc <xPortStartScheduler+0xd4>)
 8009014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009016:	4b2a      	ldr	r3, [pc, #168]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009018:	2207      	movs	r2, #7
 800901a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800901c:	e009      	b.n	8009032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800901e:	4b28      	ldr	r3, [pc, #160]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	4a26      	ldr	r2, [pc, #152]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903a:	2b80      	cmp	r3, #128	@ 0x80
 800903c:	d0ef      	beq.n	800901e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800903e:	4b20      	ldr	r3, [pc, #128]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f1c3 0307 	rsb	r3, r3, #7
 8009046:	2b04      	cmp	r3, #4
 8009048:	d00b      	beq.n	8009062 <xPortStartScheduler+0x7a>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60bb      	str	r3, [r7, #8]
}
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	e7fd      	b.n	800905e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009062:	4b17      	ldr	r3, [pc, #92]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	4a15      	ldr	r2, [pc, #84]	@ (80090c0 <xPortStartScheduler+0xd8>)
 800906a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800906c:	4b14      	ldr	r3, [pc, #80]	@ (80090c0 <xPortStartScheduler+0xd8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009074:	4a12      	ldr	r2, [pc, #72]	@ (80090c0 <xPortStartScheduler+0xd8>)
 8009076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009080:	4b10      	ldr	r3, [pc, #64]	@ (80090c4 <xPortStartScheduler+0xdc>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a0f      	ldr	r2, [pc, #60]	@ (80090c4 <xPortStartScheduler+0xdc>)
 8009086:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800908a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800908c:	4b0d      	ldr	r3, [pc, #52]	@ (80090c4 <xPortStartScheduler+0xdc>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a0c      	ldr	r2, [pc, #48]	@ (80090c4 <xPortStartScheduler+0xdc>)
 8009092:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009098:	f000 f8b8 	bl	800920c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <xPortStartScheduler+0xe0>)
 800909e:	2200      	movs	r2, #0
 80090a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090a2:	f7ff ff91 	bl	8008fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090a6:	f7fe ff59 	bl	8007f5c <vTaskSwitchContext>
	prvTaskExitError();
 80090aa:	f7ff ff47 	bl	8008f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	e000e400 	.word	0xe000e400
 80090bc:	2000114c 	.word	0x2000114c
 80090c0:	20001150 	.word	0x20001150
 80090c4:	e000ed20 	.word	0xe000ed20
 80090c8:	2000000c 	.word	0x2000000c

080090cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	607b      	str	r3, [r7, #4]
}
 80090e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <vPortEnterCritical+0x58>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3301      	adds	r3, #1
 80090ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <vPortEnterCritical+0x58>)
 80090ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <vPortEnterCritical+0x58>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d110      	bne.n	800911a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009128 <vPortEnterCritical+0x5c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <vPortEnterCritical+0x4e>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	603b      	str	r3, [r7, #0]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <vPortEnterCritical+0x4a>
	}
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr
 8009124:	2000000c 	.word	0x2000000c
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009132:	4b12      	ldr	r3, [pc, #72]	@ (800917c <vPortExitCritical+0x50>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10b      	bne.n	8009152 <vPortExitCritical+0x26>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	607b      	str	r3, [r7, #4]
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	e7fd      	b.n	800914e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009152:	4b0a      	ldr	r3, [pc, #40]	@ (800917c <vPortExitCritical+0x50>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3b01      	subs	r3, #1
 8009158:	4a08      	ldr	r2, [pc, #32]	@ (800917c <vPortExitCritical+0x50>)
 800915a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800915c:	4b07      	ldr	r3, [pc, #28]	@ (800917c <vPortExitCritical+0x50>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d105      	bne.n	8009170 <vPortExitCritical+0x44>
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f383 8811 	msr	BASEPRI, r3
}
 800916e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	2000000c 	.word	0x2000000c

08009180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009180:	f3ef 8009 	mrs	r0, PSP
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	4b0d      	ldr	r3, [pc, #52]	@ (80091c0 <pxCurrentTCBConst>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009190:	6010      	str	r0, [r2, #0]
 8009192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009196:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800919a:	f380 8811 	msr	BASEPRI, r0
 800919e:	f7fe fedd 	bl	8007f5c <vTaskSwitchContext>
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8811 	msr	BASEPRI, r0
 80091aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80091ae:	6819      	ldr	r1, [r3, #0]
 80091b0:	6808      	ldr	r0, [r1, #0]
 80091b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091b6:	f380 8809 	msr	PSP, r0
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	4770      	bx	lr

080091c0 <pxCurrentTCBConst>:
 80091c0:	20000b20 	.word	0x20000b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	607b      	str	r3, [r7, #4]
}
 80091e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091e2:	f7fe fe01 	bl	8007de8 <xTaskIncrementTick>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d003      	beq.n	80091f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091ec:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <xPortSysTickHandler+0x40>)
 80091ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f383 8811 	msr	BASEPRI, r3
}
 80091fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed04 	.word	0xe000ed04

0800920c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009210:	4b0a      	ldr	r3, [pc, #40]	@ (800923c <vPortSetupTimerInterrupt+0x30>)
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009216:	4b0a      	ldr	r3, [pc, #40]	@ (8009240 <vPortSetupTimerInterrupt+0x34>)
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800921c:	4b09      	ldr	r3, [pc, #36]	@ (8009244 <vPortSetupTimerInterrupt+0x38>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a09      	ldr	r2, [pc, #36]	@ (8009248 <vPortSetupTimerInterrupt+0x3c>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	099b      	lsrs	r3, r3, #6
 8009228:	4a08      	ldr	r2, [pc, #32]	@ (800924c <vPortSetupTimerInterrupt+0x40>)
 800922a:	3b01      	subs	r3, #1
 800922c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800922e:	4b03      	ldr	r3, [pc, #12]	@ (800923c <vPortSetupTimerInterrupt+0x30>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	46bd      	mov	sp, r7
 8009238:	bc80      	pop	{r7}
 800923a:	4770      	bx	lr
 800923c:	e000e010 	.word	0xe000e010
 8009240:	e000e018 	.word	0xe000e018
 8009244:	20000000 	.word	0x20000000
 8009248:	10624dd3 	.word	0x10624dd3
 800924c:	e000e014 	.word	0xe000e014

08009250 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009256:	f3ef 8305 	mrs	r3, IPSR
 800925a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b0f      	cmp	r3, #15
 8009260:	d915      	bls.n	800928e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009262:	4a17      	ldr	r2, [pc, #92]	@ (80092c0 <vPortValidateInterruptPriority+0x70>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800926c:	4b15      	ldr	r3, [pc, #84]	@ (80092c4 <vPortValidateInterruptPriority+0x74>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	7afa      	ldrb	r2, [r7, #11]
 8009272:	429a      	cmp	r2, r3
 8009274:	d20b      	bcs.n	800928e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	607b      	str	r3, [r7, #4]
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800928e:	4b0e      	ldr	r3, [pc, #56]	@ (80092c8 <vPortValidateInterruptPriority+0x78>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009296:	4b0d      	ldr	r3, [pc, #52]	@ (80092cc <vPortValidateInterruptPriority+0x7c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d90b      	bls.n	80092b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	603b      	str	r3, [r7, #0]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <vPortValidateInterruptPriority+0x62>
	}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr
 80092c0:	e000e3f0 	.word	0xe000e3f0
 80092c4:	2000114c 	.word	0x2000114c
 80092c8:	e000ed0c 	.word	0xe000ed0c
 80092cc:	20001150 	.word	0x20001150

080092d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08a      	sub	sp, #40	@ 0x28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092dc:	f7fe fcca 	bl	8007c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092e0:	4b5c      	ldr	r3, [pc, #368]	@ (8009454 <pvPortMalloc+0x184>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092e8:	f000 f924 	bl	8009534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092ec:	4b5a      	ldr	r3, [pc, #360]	@ (8009458 <pvPortMalloc+0x188>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f040 8095 	bne.w	8009424 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01e      	beq.n	800933e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009300:	2208      	movs	r2, #8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	2b00      	cmp	r3, #0
 8009310:	d015      	beq.n	800933e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f023 0307 	bic.w	r3, r3, #7
 8009318:	3308      	adds	r3, #8
 800931a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <pvPortMalloc+0x6e>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	617b      	str	r3, [r7, #20]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d06f      	beq.n	8009424 <pvPortMalloc+0x154>
 8009344:	4b45      	ldr	r3, [pc, #276]	@ (800945c <pvPortMalloc+0x18c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d86a      	bhi.n	8009424 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800934e:	4b44      	ldr	r3, [pc, #272]	@ (8009460 <pvPortMalloc+0x190>)
 8009350:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009352:	4b43      	ldr	r3, [pc, #268]	@ (8009460 <pvPortMalloc+0x190>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009358:	e004      	b.n	8009364 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d903      	bls.n	8009376 <pvPortMalloc+0xa6>
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f1      	bne.n	800935a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009376:	4b37      	ldr	r3, [pc, #220]	@ (8009454 <pvPortMalloc+0x184>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800937c:	429a      	cmp	r2, r3
 800937e:	d051      	beq.n	8009424 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2208      	movs	r2, #8
 8009386:	4413      	add	r3, r2
 8009388:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	2308      	movs	r3, #8
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	429a      	cmp	r2, r3
 80093a0:	d920      	bls.n	80093e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <pvPortMalloc+0xfc>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	613b      	str	r3, [r7, #16]
}
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
 80093ca:	e7fd      	b.n	80093c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093de:	69b8      	ldr	r0, [r7, #24]
 80093e0:	f000 f90a 	bl	80095f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093e4:	4b1d      	ldr	r3, [pc, #116]	@ (800945c <pvPortMalloc+0x18c>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	4a1b      	ldr	r2, [pc, #108]	@ (800945c <pvPortMalloc+0x18c>)
 80093f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093f2:	4b1a      	ldr	r3, [pc, #104]	@ (800945c <pvPortMalloc+0x18c>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b1b      	ldr	r3, [pc, #108]	@ (8009464 <pvPortMalloc+0x194>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d203      	bcs.n	8009406 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093fe:	4b17      	ldr	r3, [pc, #92]	@ (800945c <pvPortMalloc+0x18c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a18      	ldr	r2, [pc, #96]	@ (8009464 <pvPortMalloc+0x194>)
 8009404:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <pvPortMalloc+0x188>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	431a      	orrs	r2, r3
 8009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009412:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800941a:	4b13      	ldr	r3, [pc, #76]	@ (8009468 <pvPortMalloc+0x198>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	4a11      	ldr	r2, [pc, #68]	@ (8009468 <pvPortMalloc+0x198>)
 8009422:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009424:	f7fe fc34 	bl	8007c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00b      	beq.n	800944a <pvPortMalloc+0x17a>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60fb      	str	r3, [r7, #12]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <pvPortMalloc+0x176>
	return pvReturn;
 800944a:	69fb      	ldr	r3, [r7, #28]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3728      	adds	r7, #40	@ 0x28
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2000395c 	.word	0x2000395c
 8009458:	20003970 	.word	0x20003970
 800945c:	20003960 	.word	0x20003960
 8009460:	20003954 	.word	0x20003954
 8009464:	20003964 	.word	0x20003964
 8009468:	20003968 	.word	0x20003968

0800946c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d04f      	beq.n	800951e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800947e:	2308      	movs	r3, #8
 8009480:	425b      	negs	r3, r3
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4413      	add	r3, r2
 8009486:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	4b25      	ldr	r3, [pc, #148]	@ (8009528 <vPortFree+0xbc>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4013      	ands	r3, r2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vPortFree+0x46>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	60fb      	str	r3, [r7, #12]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <vPortFree+0x66>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	60bb      	str	r3, [r7, #8]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	4b14      	ldr	r3, [pc, #80]	@ (8009528 <vPortFree+0xbc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4013      	ands	r3, r2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01e      	beq.n	800951e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11a      	bne.n	800951e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <vPortFree+0xbc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	43db      	mvns	r3, r3
 80094f2:	401a      	ands	r2, r3
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094f8:	f7fe fbbc 	bl	8007c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <vPortFree+0xc0>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4413      	add	r3, r2
 8009506:	4a09      	ldr	r2, [pc, #36]	@ (800952c <vPortFree+0xc0>)
 8009508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800950a:	6938      	ldr	r0, [r7, #16]
 800950c:	f000 f874 	bl	80095f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009510:	4b07      	ldr	r3, [pc, #28]	@ (8009530 <vPortFree+0xc4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3301      	adds	r3, #1
 8009516:	4a06      	ldr	r2, [pc, #24]	@ (8009530 <vPortFree+0xc4>)
 8009518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800951a:	f7fe fbb9 	bl	8007c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800951e:	bf00      	nop
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20003970 	.word	0x20003970
 800952c:	20003960 	.word	0x20003960
 8009530:	2000396c 	.word	0x2000396c

08009534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800953a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800953e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009540:	4b27      	ldr	r3, [pc, #156]	@ (80095e0 <prvHeapInit+0xac>)
 8009542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0307 	bic.w	r3, r3, #7
 800955a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	4a1f      	ldr	r2, [pc, #124]	@ (80095e0 <prvHeapInit+0xac>)
 8009564:	4413      	add	r3, r2
 8009566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <prvHeapInit+0xb0>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009572:	4b1c      	ldr	r3, [pc, #112]	@ (80095e4 <prvHeapInit+0xb0>)
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009580:	2208      	movs	r2, #8
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a15      	ldr	r2, [pc, #84]	@ (80095e8 <prvHeapInit+0xb4>)
 8009594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009596:	4b14      	ldr	r3, [pc, #80]	@ (80095e8 <prvHeapInit+0xb4>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800959e:	4b12      	ldr	r3, [pc, #72]	@ (80095e8 <prvHeapInit+0xb4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095b4:	4b0c      	ldr	r3, [pc, #48]	@ (80095e8 <prvHeapInit+0xb4>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	@ (80095ec <prvHeapInit+0xb8>)
 80095c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4a09      	ldr	r2, [pc, #36]	@ (80095f0 <prvHeapInit+0xbc>)
 80095ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095cc:	4b09      	ldr	r3, [pc, #36]	@ (80095f4 <prvHeapInit+0xc0>)
 80095ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80095d2:	601a      	str	r2, [r3, #0]
}
 80095d4:	bf00      	nop
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20001154 	.word	0x20001154
 80095e4:	20003954 	.word	0x20003954
 80095e8:	2000395c 	.word	0x2000395c
 80095ec:	20003964 	.word	0x20003964
 80095f0:	20003960 	.word	0x20003960
 80095f4:	20003970 	.word	0x20003970

080095f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009600:	4b27      	ldr	r3, [pc, #156]	@ (80096a0 <prvInsertBlockIntoFreeList+0xa8>)
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	e002      	b.n	800960c <prvInsertBlockIntoFreeList+0x14>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d8f7      	bhi.n	8009606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d108      	bne.n	800963a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	441a      	add	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d118      	bne.n	8009680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b14      	ldr	r3, [pc, #80]	@ (80096a4 <prvInsertBlockIntoFreeList+0xac>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d00d      	beq.n	8009676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	441a      	add	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	e008      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009676:	4b0b      	ldr	r3, [pc, #44]	@ (80096a4 <prvInsertBlockIntoFreeList+0xac>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e003      	b.n	8009688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr
 80096a0:	20003954 	.word	0x20003954
 80096a4:	2000395c 	.word	0x2000395c

080096a8 <_free_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4605      	mov	r5, r0
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d040      	beq.n	8009732 <_free_r+0x8a>
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f0c      	subs	r4, r1, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfb8      	it	lt
 80096ba:	18e4      	addlt	r4, r4, r3
 80096bc:	f000 f8e6 	bl	800988c <__malloc_lock>
 80096c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009734 <_free_r+0x8c>)
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	b933      	cbnz	r3, 80096d4 <_free_r+0x2c>
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	6014      	str	r4, [r2, #0]
 80096ca:	4628      	mov	r0, r5
 80096cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d0:	f000 b8e2 	b.w	8009898 <__malloc_unlock>
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d908      	bls.n	80096ea <_free_r+0x42>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	1821      	adds	r1, r4, r0
 80096dc:	428b      	cmp	r3, r1
 80096de:	bf01      	itttt	eq
 80096e0:	6819      	ldreq	r1, [r3, #0]
 80096e2:	685b      	ldreq	r3, [r3, #4]
 80096e4:	1809      	addeq	r1, r1, r0
 80096e6:	6021      	streq	r1, [r4, #0]
 80096e8:	e7ed      	b.n	80096c6 <_free_r+0x1e>
 80096ea:	461a      	mov	r2, r3
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b10b      	cbz	r3, 80096f4 <_free_r+0x4c>
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d9fa      	bls.n	80096ea <_free_r+0x42>
 80096f4:	6811      	ldr	r1, [r2, #0]
 80096f6:	1850      	adds	r0, r2, r1
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d10b      	bne.n	8009714 <_free_r+0x6c>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	4401      	add	r1, r0
 8009700:	1850      	adds	r0, r2, r1
 8009702:	4283      	cmp	r3, r0
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	d1e0      	bne.n	80096ca <_free_r+0x22>
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4408      	add	r0, r1
 800970e:	6010      	str	r0, [r2, #0]
 8009710:	6053      	str	r3, [r2, #4]
 8009712:	e7da      	b.n	80096ca <_free_r+0x22>
 8009714:	d902      	bls.n	800971c <_free_r+0x74>
 8009716:	230c      	movs	r3, #12
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	e7d6      	b.n	80096ca <_free_r+0x22>
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	1821      	adds	r1, r4, r0
 8009720:	428b      	cmp	r3, r1
 8009722:	bf01      	itttt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	1809      	addeq	r1, r1, r0
 800972a:	6021      	streq	r1, [r4, #0]
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	6054      	str	r4, [r2, #4]
 8009730:	e7cb      	b.n	80096ca <_free_r+0x22>
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20003978 	.word	0x20003978

08009738 <malloc>:
 8009738:	4b02      	ldr	r3, [pc, #8]	@ (8009744 <malloc+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f000 b825 	b.w	800978c <_malloc_r>
 8009742:	bf00      	nop
 8009744:	2000001c 	.word	0x2000001c

08009748 <sbrk_aligned>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	4e0f      	ldr	r6, [pc, #60]	@ (8009788 <sbrk_aligned+0x40>)
 800974c:	460c      	mov	r4, r1
 800974e:	6831      	ldr	r1, [r6, #0]
 8009750:	4605      	mov	r5, r0
 8009752:	b911      	cbnz	r1, 800975a <sbrk_aligned+0x12>
 8009754:	f000 ffd6 	bl	800a704 <_sbrk_r>
 8009758:	6030      	str	r0, [r6, #0]
 800975a:	4621      	mov	r1, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f000 ffd1 	bl	800a704 <_sbrk_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d103      	bne.n	800976e <sbrk_aligned+0x26>
 8009766:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800976a:	4620      	mov	r0, r4
 800976c:	bd70      	pop	{r4, r5, r6, pc}
 800976e:	1cc4      	adds	r4, r0, #3
 8009770:	f024 0403 	bic.w	r4, r4, #3
 8009774:	42a0      	cmp	r0, r4
 8009776:	d0f8      	beq.n	800976a <sbrk_aligned+0x22>
 8009778:	1a21      	subs	r1, r4, r0
 800977a:	4628      	mov	r0, r5
 800977c:	f000 ffc2 	bl	800a704 <_sbrk_r>
 8009780:	3001      	adds	r0, #1
 8009782:	d1f2      	bne.n	800976a <sbrk_aligned+0x22>
 8009784:	e7ef      	b.n	8009766 <sbrk_aligned+0x1e>
 8009786:	bf00      	nop
 8009788:	20003974 	.word	0x20003974

0800978c <_malloc_r>:
 800978c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009790:	1ccd      	adds	r5, r1, #3
 8009792:	f025 0503 	bic.w	r5, r5, #3
 8009796:	3508      	adds	r5, #8
 8009798:	2d0c      	cmp	r5, #12
 800979a:	bf38      	it	cc
 800979c:	250c      	movcc	r5, #12
 800979e:	2d00      	cmp	r5, #0
 80097a0:	4606      	mov	r6, r0
 80097a2:	db01      	blt.n	80097a8 <_malloc_r+0x1c>
 80097a4:	42a9      	cmp	r1, r5
 80097a6:	d904      	bls.n	80097b2 <_malloc_r+0x26>
 80097a8:	230c      	movs	r3, #12
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009888 <_malloc_r+0xfc>
 80097b6:	f000 f869 	bl	800988c <__malloc_lock>
 80097ba:	f8d8 3000 	ldr.w	r3, [r8]
 80097be:	461c      	mov	r4, r3
 80097c0:	bb44      	cbnz	r4, 8009814 <_malloc_r+0x88>
 80097c2:	4629      	mov	r1, r5
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff ffbf 	bl	8009748 <sbrk_aligned>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	4604      	mov	r4, r0
 80097ce:	d158      	bne.n	8009882 <_malloc_r+0xf6>
 80097d0:	f8d8 4000 	ldr.w	r4, [r8]
 80097d4:	4627      	mov	r7, r4
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d143      	bne.n	8009862 <_malloc_r+0xd6>
 80097da:	2c00      	cmp	r4, #0
 80097dc:	d04b      	beq.n	8009876 <_malloc_r+0xea>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	4639      	mov	r1, r7
 80097e2:	4630      	mov	r0, r6
 80097e4:	eb04 0903 	add.w	r9, r4, r3
 80097e8:	f000 ff8c 	bl	800a704 <_sbrk_r>
 80097ec:	4581      	cmp	r9, r0
 80097ee:	d142      	bne.n	8009876 <_malloc_r+0xea>
 80097f0:	6821      	ldr	r1, [r4, #0]
 80097f2:	4630      	mov	r0, r6
 80097f4:	1a6d      	subs	r5, r5, r1
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7ff ffa6 	bl	8009748 <sbrk_aligned>
 80097fc:	3001      	adds	r0, #1
 80097fe:	d03a      	beq.n	8009876 <_malloc_r+0xea>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	442b      	add	r3, r5
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	f8d8 3000 	ldr.w	r3, [r8]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	bb62      	cbnz	r2, 8009868 <_malloc_r+0xdc>
 800980e:	f8c8 7000 	str.w	r7, [r8]
 8009812:	e00f      	b.n	8009834 <_malloc_r+0xa8>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	1b52      	subs	r2, r2, r5
 8009818:	d420      	bmi.n	800985c <_malloc_r+0xd0>
 800981a:	2a0b      	cmp	r2, #11
 800981c:	d917      	bls.n	800984e <_malloc_r+0xc2>
 800981e:	1961      	adds	r1, r4, r5
 8009820:	42a3      	cmp	r3, r4
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	6059      	strne	r1, [r3, #4]
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	bf08      	it	eq
 800982c:	f8c8 1000 	streq.w	r1, [r8]
 8009830:	5162      	str	r2, [r4, r5]
 8009832:	604b      	str	r3, [r1, #4]
 8009834:	4630      	mov	r0, r6
 8009836:	f000 f82f 	bl	8009898 <__malloc_unlock>
 800983a:	f104 000b 	add.w	r0, r4, #11
 800983e:	1d23      	adds	r3, r4, #4
 8009840:	f020 0007 	bic.w	r0, r0, #7
 8009844:	1ac2      	subs	r2, r0, r3
 8009846:	bf1c      	itt	ne
 8009848:	1a1b      	subne	r3, r3, r0
 800984a:	50a3      	strne	r3, [r4, r2]
 800984c:	e7af      	b.n	80097ae <_malloc_r+0x22>
 800984e:	6862      	ldr	r2, [r4, #4]
 8009850:	42a3      	cmp	r3, r4
 8009852:	bf0c      	ite	eq
 8009854:	f8c8 2000 	streq.w	r2, [r8]
 8009858:	605a      	strne	r2, [r3, #4]
 800985a:	e7eb      	b.n	8009834 <_malloc_r+0xa8>
 800985c:	4623      	mov	r3, r4
 800985e:	6864      	ldr	r4, [r4, #4]
 8009860:	e7ae      	b.n	80097c0 <_malloc_r+0x34>
 8009862:	463c      	mov	r4, r7
 8009864:	687f      	ldr	r7, [r7, #4]
 8009866:	e7b6      	b.n	80097d6 <_malloc_r+0x4a>
 8009868:	461a      	mov	r2, r3
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	42a3      	cmp	r3, r4
 800986e:	d1fb      	bne.n	8009868 <_malloc_r+0xdc>
 8009870:	2300      	movs	r3, #0
 8009872:	6053      	str	r3, [r2, #4]
 8009874:	e7de      	b.n	8009834 <_malloc_r+0xa8>
 8009876:	230c      	movs	r3, #12
 8009878:	4630      	mov	r0, r6
 800987a:	6033      	str	r3, [r6, #0]
 800987c:	f000 f80c 	bl	8009898 <__malloc_unlock>
 8009880:	e794      	b.n	80097ac <_malloc_r+0x20>
 8009882:	6005      	str	r5, [r0, #0]
 8009884:	e7d6      	b.n	8009834 <_malloc_r+0xa8>
 8009886:	bf00      	nop
 8009888:	20003978 	.word	0x20003978

0800988c <__malloc_lock>:
 800988c:	4801      	ldr	r0, [pc, #4]	@ (8009894 <__malloc_lock+0x8>)
 800988e:	f7f8 bbbb 	b.w	8002008 <__retarget_lock_acquire_recursive>
 8009892:	bf00      	nop
 8009894:	2000037c 	.word	0x2000037c

08009898 <__malloc_unlock>:
 8009898:	4801      	ldr	r0, [pc, #4]	@ (80098a0 <__malloc_unlock+0x8>)
 800989a:	f7f8 bbca 	b.w	8002032 <__retarget_lock_release_recursive>
 800989e:	bf00      	nop
 80098a0:	2000037c 	.word	0x2000037c

080098a4 <__cvt>:
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098aa:	461d      	mov	r5, r3
 80098ac:	bfbb      	ittet	lt
 80098ae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80098b2:	461d      	movlt	r5, r3
 80098b4:	2300      	movge	r3, #0
 80098b6:	232d      	movlt	r3, #45	@ 0x2d
 80098b8:	b088      	sub	sp, #32
 80098ba:	4614      	mov	r4, r2
 80098bc:	bfb8      	it	lt
 80098be:	4614      	movlt	r4, r2
 80098c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80098c2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80098c4:	7013      	strb	r3, [r2, #0]
 80098c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80098cc:	f023 0820 	bic.w	r8, r3, #32
 80098d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098d4:	d005      	beq.n	80098e2 <__cvt+0x3e>
 80098d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80098da:	d100      	bne.n	80098de <__cvt+0x3a>
 80098dc:	3601      	adds	r6, #1
 80098de:	2302      	movs	r3, #2
 80098e0:	e000      	b.n	80098e4 <__cvt+0x40>
 80098e2:	2303      	movs	r3, #3
 80098e4:	aa07      	add	r2, sp, #28
 80098e6:	9204      	str	r2, [sp, #16]
 80098e8:	aa06      	add	r2, sp, #24
 80098ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80098ee:	e9cd 3600 	strd	r3, r6, [sp]
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	f000 fff7 	bl	800a8e8 <_dtoa_r>
 80098fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098fe:	4607      	mov	r7, r0
 8009900:	d119      	bne.n	8009936 <__cvt+0x92>
 8009902:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009904:	07db      	lsls	r3, r3, #31
 8009906:	d50e      	bpl.n	8009926 <__cvt+0x82>
 8009908:	eb00 0906 	add.w	r9, r0, r6
 800990c:	2200      	movs	r2, #0
 800990e:	2300      	movs	r3, #0
 8009910:	4620      	mov	r0, r4
 8009912:	4629      	mov	r1, r5
 8009914:	f7f7 f848 	bl	80009a8 <__aeabi_dcmpeq>
 8009918:	b108      	cbz	r0, 800991e <__cvt+0x7a>
 800991a:	f8cd 901c 	str.w	r9, [sp, #28]
 800991e:	2230      	movs	r2, #48	@ 0x30
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	454b      	cmp	r3, r9
 8009924:	d31e      	bcc.n	8009964 <__cvt+0xc0>
 8009926:	4638      	mov	r0, r7
 8009928:	9b07      	ldr	r3, [sp, #28]
 800992a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800992c:	1bdb      	subs	r3, r3, r7
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	b008      	add	sp, #32
 8009932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009936:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800993a:	eb00 0906 	add.w	r9, r0, r6
 800993e:	d1e5      	bne.n	800990c <__cvt+0x68>
 8009940:	7803      	ldrb	r3, [r0, #0]
 8009942:	2b30      	cmp	r3, #48	@ 0x30
 8009944:	d10a      	bne.n	800995c <__cvt+0xb8>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f7 f82b 	bl	80009a8 <__aeabi_dcmpeq>
 8009952:	b918      	cbnz	r0, 800995c <__cvt+0xb8>
 8009954:	f1c6 0601 	rsb	r6, r6, #1
 8009958:	f8ca 6000 	str.w	r6, [sl]
 800995c:	f8da 3000 	ldr.w	r3, [sl]
 8009960:	4499      	add	r9, r3
 8009962:	e7d3      	b.n	800990c <__cvt+0x68>
 8009964:	1c59      	adds	r1, r3, #1
 8009966:	9107      	str	r1, [sp, #28]
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	e7d9      	b.n	8009920 <__cvt+0x7c>

0800996c <__exponent>:
 800996c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800996e:	2900      	cmp	r1, #0
 8009970:	bfb6      	itet	lt
 8009972:	232d      	movlt	r3, #45	@ 0x2d
 8009974:	232b      	movge	r3, #43	@ 0x2b
 8009976:	4249      	neglt	r1, r1
 8009978:	2909      	cmp	r1, #9
 800997a:	7002      	strb	r2, [r0, #0]
 800997c:	7043      	strb	r3, [r0, #1]
 800997e:	dd29      	ble.n	80099d4 <__exponent+0x68>
 8009980:	f10d 0307 	add.w	r3, sp, #7
 8009984:	461d      	mov	r5, r3
 8009986:	270a      	movs	r7, #10
 8009988:	fbb1 f6f7 	udiv	r6, r1, r7
 800998c:	461a      	mov	r2, r3
 800998e:	fb07 1416 	mls	r4, r7, r6, r1
 8009992:	3430      	adds	r4, #48	@ 0x30
 8009994:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009998:	460c      	mov	r4, r1
 800999a:	2c63      	cmp	r4, #99	@ 0x63
 800999c:	4631      	mov	r1, r6
 800999e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80099a2:	dcf1      	bgt.n	8009988 <__exponent+0x1c>
 80099a4:	3130      	adds	r1, #48	@ 0x30
 80099a6:	1e94      	subs	r4, r2, #2
 80099a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099ac:	4623      	mov	r3, r4
 80099ae:	1c41      	adds	r1, r0, #1
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	d30a      	bcc.n	80099ca <__exponent+0x5e>
 80099b4:	f10d 0309 	add.w	r3, sp, #9
 80099b8:	1a9b      	subs	r3, r3, r2
 80099ba:	42ac      	cmp	r4, r5
 80099bc:	bf88      	it	hi
 80099be:	2300      	movhi	r3, #0
 80099c0:	3302      	adds	r3, #2
 80099c2:	4403      	add	r3, r0
 80099c4:	1a18      	subs	r0, r3, r0
 80099c6:	b003      	add	sp, #12
 80099c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099d2:	e7ed      	b.n	80099b0 <__exponent+0x44>
 80099d4:	2330      	movs	r3, #48	@ 0x30
 80099d6:	3130      	adds	r1, #48	@ 0x30
 80099d8:	7083      	strb	r3, [r0, #2]
 80099da:	70c1      	strb	r1, [r0, #3]
 80099dc:	1d03      	adds	r3, r0, #4
 80099de:	e7f1      	b.n	80099c4 <__exponent+0x58>

080099e0 <_printf_float>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	b091      	sub	sp, #68	@ 0x44
 80099e6:	460c      	mov	r4, r1
 80099e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80099ec:	4616      	mov	r6, r2
 80099ee:	461f      	mov	r7, r3
 80099f0:	4605      	mov	r5, r0
 80099f2:	f000 fdf9 	bl	800a5e8 <_localeconv_r>
 80099f6:	6803      	ldr	r3, [r0, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	9308      	str	r3, [sp, #32]
 80099fc:	f7f6 fba8 	bl	8000150 <strlen>
 8009a00:	2300      	movs	r3, #0
 8009a02:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a04:	f8d8 3000 	ldr.w	r3, [r8]
 8009a08:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a0a:	3307      	adds	r3, #7
 8009a0c:	f023 0307 	bic.w	r3, r3, #7
 8009a10:	f103 0208 	add.w	r2, r3, #8
 8009a14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a18:	f8d4 b000 	ldr.w	fp, [r4]
 8009a1c:	f8c8 2000 	str.w	r2, [r8]
 8009a20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a2a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8009cac <_printf_float+0x2cc>)
 8009a3c:	f7f6 ffe6 	bl	8000a0c <__aeabi_dcmpun>
 8009a40:	bb70      	cbnz	r0, 8009aa0 <_printf_float+0xc0>
 8009a42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a4a:	4b98      	ldr	r3, [pc, #608]	@ (8009cac <_printf_float+0x2cc>)
 8009a4c:	f7f6 ffc0 	bl	80009d0 <__aeabi_dcmple>
 8009a50:	bb30      	cbnz	r0, 8009aa0 <_printf_float+0xc0>
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	4640      	mov	r0, r8
 8009a58:	4649      	mov	r1, r9
 8009a5a:	f7f6 ffaf 	bl	80009bc <__aeabi_dcmplt>
 8009a5e:	b110      	cbz	r0, 8009a66 <_printf_float+0x86>
 8009a60:	232d      	movs	r3, #45	@ 0x2d
 8009a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a66:	4a92      	ldr	r2, [pc, #584]	@ (8009cb0 <_printf_float+0x2d0>)
 8009a68:	4b92      	ldr	r3, [pc, #584]	@ (8009cb4 <_printf_float+0x2d4>)
 8009a6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a6e:	bf94      	ite	ls
 8009a70:	4690      	movls	r8, r2
 8009a72:	4698      	movhi	r8, r3
 8009a74:	2303      	movs	r3, #3
 8009a76:	f04f 0900 	mov.w	r9, #0
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	f02b 0304 	bic.w	r3, fp, #4
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	4633      	mov	r3, r6
 8009a84:	4621      	mov	r1, r4
 8009a86:	4628      	mov	r0, r5
 8009a88:	9700      	str	r7, [sp, #0]
 8009a8a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009a8c:	f000 f9d4 	bl	8009e38 <_printf_common>
 8009a90:	3001      	adds	r0, #1
 8009a92:	f040 8090 	bne.w	8009bb6 <_printf_float+0x1d6>
 8009a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a9a:	b011      	add	sp, #68	@ 0x44
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	f7f6 ffb0 	bl	8000a0c <__aeabi_dcmpun>
 8009aac:	b148      	cbz	r0, 8009ac2 <_printf_float+0xe2>
 8009aae:	464b      	mov	r3, r9
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfb8      	it	lt
 8009ab4:	232d      	movlt	r3, #45	@ 0x2d
 8009ab6:	4a80      	ldr	r2, [pc, #512]	@ (8009cb8 <_printf_float+0x2d8>)
 8009ab8:	bfb8      	it	lt
 8009aba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009abe:	4b7f      	ldr	r3, [pc, #508]	@ (8009cbc <_printf_float+0x2dc>)
 8009ac0:	e7d3      	b.n	8009a6a <_printf_float+0x8a>
 8009ac2:	6863      	ldr	r3, [r4, #4]
 8009ac4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	d13f      	bne.n	8009b4c <_printf_float+0x16c>
 8009acc:	2306      	movs	r3, #6
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009ad6:	6023      	str	r3, [r4, #0]
 8009ad8:	9206      	str	r2, [sp, #24]
 8009ada:	aa0e      	add	r2, sp, #56	@ 0x38
 8009adc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009ae0:	aa0d      	add	r2, sp, #52	@ 0x34
 8009ae2:	9203      	str	r2, [sp, #12]
 8009ae4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009ae8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009aec:	6863      	ldr	r3, [r4, #4]
 8009aee:	4642      	mov	r2, r8
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	4628      	mov	r0, r5
 8009af4:	464b      	mov	r3, r9
 8009af6:	910a      	str	r1, [sp, #40]	@ 0x28
 8009af8:	f7ff fed4 	bl	80098a4 <__cvt>
 8009afc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009afe:	4680      	mov	r8, r0
 8009b00:	2947      	cmp	r1, #71	@ 0x47
 8009b02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009b04:	d128      	bne.n	8009b58 <_printf_float+0x178>
 8009b06:	1cc8      	adds	r0, r1, #3
 8009b08:	db02      	blt.n	8009b10 <_printf_float+0x130>
 8009b0a:	6863      	ldr	r3, [r4, #4]
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	dd40      	ble.n	8009b92 <_printf_float+0x1b2>
 8009b10:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b14:	fa5f fa8a 	uxtb.w	sl, sl
 8009b18:	4652      	mov	r2, sl
 8009b1a:	3901      	subs	r1, #1
 8009b1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b20:	910d      	str	r1, [sp, #52]	@ 0x34
 8009b22:	f7ff ff23 	bl	800996c <__exponent>
 8009b26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b28:	4681      	mov	r9, r0
 8009b2a:	1813      	adds	r3, r2, r0
 8009b2c:	2a01      	cmp	r2, #1
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	dc02      	bgt.n	8009b38 <_printf_float+0x158>
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	07d2      	lsls	r2, r2, #31
 8009b36:	d501      	bpl.n	8009b3c <_printf_float+0x15c>
 8009b38:	3301      	adds	r3, #1
 8009b3a:	6123      	str	r3, [r4, #16]
 8009b3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d09e      	beq.n	8009a82 <_printf_float+0xa2>
 8009b44:	232d      	movs	r3, #45	@ 0x2d
 8009b46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b4a:	e79a      	b.n	8009a82 <_printf_float+0xa2>
 8009b4c:	2947      	cmp	r1, #71	@ 0x47
 8009b4e:	d1bf      	bne.n	8009ad0 <_printf_float+0xf0>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1bd      	bne.n	8009ad0 <_printf_float+0xf0>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7ba      	b.n	8009ace <_printf_float+0xee>
 8009b58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b5c:	d9dc      	bls.n	8009b18 <_printf_float+0x138>
 8009b5e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b62:	d118      	bne.n	8009b96 <_printf_float+0x1b6>
 8009b64:	2900      	cmp	r1, #0
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	dd0b      	ble.n	8009b82 <_printf_float+0x1a2>
 8009b6a:	6121      	str	r1, [r4, #16]
 8009b6c:	b913      	cbnz	r3, 8009b74 <_printf_float+0x194>
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	07d0      	lsls	r0, r2, #31
 8009b72:	d502      	bpl.n	8009b7a <_printf_float+0x19a>
 8009b74:	3301      	adds	r3, #1
 8009b76:	440b      	add	r3, r1
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	f04f 0900 	mov.w	r9, #0
 8009b7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b80:	e7dc      	b.n	8009b3c <_printf_float+0x15c>
 8009b82:	b913      	cbnz	r3, 8009b8a <_printf_float+0x1aa>
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	07d2      	lsls	r2, r2, #31
 8009b88:	d501      	bpl.n	8009b8e <_printf_float+0x1ae>
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	e7f4      	b.n	8009b78 <_printf_float+0x198>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e7f2      	b.n	8009b78 <_printf_float+0x198>
 8009b92:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b98:	4299      	cmp	r1, r3
 8009b9a:	db05      	blt.n	8009ba8 <_printf_float+0x1c8>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	6121      	str	r1, [r4, #16]
 8009ba0:	07d8      	lsls	r0, r3, #31
 8009ba2:	d5ea      	bpl.n	8009b7a <_printf_float+0x19a>
 8009ba4:	1c4b      	adds	r3, r1, #1
 8009ba6:	e7e7      	b.n	8009b78 <_printf_float+0x198>
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	bfcc      	ite	gt
 8009bac:	2201      	movgt	r2, #1
 8009bae:	f1c1 0202 	rsble	r2, r1, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	e7e0      	b.n	8009b78 <_printf_float+0x198>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	055a      	lsls	r2, r3, #21
 8009bba:	d407      	bmi.n	8009bcc <_printf_float+0x1ec>
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	4642      	mov	r2, r8
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	d12b      	bne.n	8009c22 <_printf_float+0x242>
 8009bca:	e764      	b.n	8009a96 <_printf_float+0xb6>
 8009bcc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bd0:	f240 80dc 	bls.w	8009d8c <_printf_float+0x3ac>
 8009bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f7f6 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d033      	beq.n	8009c4c <_printf_float+0x26c>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	4a35      	ldr	r2, [pc, #212]	@ (8009cc0 <_printf_float+0x2e0>)
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af51 	beq.w	8009a96 <_printf_float+0xb6>
 8009bf4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009bf8:	4543      	cmp	r3, r8
 8009bfa:	db02      	blt.n	8009c02 <_printf_float+0x222>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07d8      	lsls	r0, r3, #31
 8009c00:	d50f      	bpl.n	8009c22 <_printf_float+0x242>
 8009c02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f af42 	beq.w	8009a96 <_printf_float+0xb6>
 8009c12:	f04f 0900 	mov.w	r9, #0
 8009c16:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009c1a:	f104 0a1a 	add.w	sl, r4, #26
 8009c1e:	45c8      	cmp	r8, r9
 8009c20:	dc09      	bgt.n	8009c36 <_printf_float+0x256>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	079b      	lsls	r3, r3, #30
 8009c26:	f100 8102 	bmi.w	8009e2e <_printf_float+0x44e>
 8009c2a:	68e0      	ldr	r0, [r4, #12]
 8009c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c2e:	4298      	cmp	r0, r3
 8009c30:	bfb8      	it	lt
 8009c32:	4618      	movlt	r0, r3
 8009c34:	e731      	b.n	8009a9a <_printf_float+0xba>
 8009c36:	2301      	movs	r3, #1
 8009c38:	4652      	mov	r2, sl
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f af28 	beq.w	8009a96 <_printf_float+0xb6>
 8009c46:	f109 0901 	add.w	r9, r9, #1
 8009c4a:	e7e8      	b.n	8009c1e <_printf_float+0x23e>
 8009c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dc38      	bgt.n	8009cc4 <_printf_float+0x2e4>
 8009c52:	2301      	movs	r3, #1
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	4a19      	ldr	r2, [pc, #100]	@ (8009cc0 <_printf_float+0x2e0>)
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f43f af1a 	beq.w	8009a96 <_printf_float+0xb6>
 8009c62:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009c66:	ea59 0303 	orrs.w	r3, r9, r3
 8009c6a:	d102      	bne.n	8009c72 <_printf_float+0x292>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	07d9      	lsls	r1, r3, #31
 8009c70:	d5d7      	bpl.n	8009c22 <_printf_float+0x242>
 8009c72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c76:	4631      	mov	r1, r6
 8009c78:	4628      	mov	r0, r5
 8009c7a:	47b8      	blx	r7
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	f43f af0a 	beq.w	8009a96 <_printf_float+0xb6>
 8009c82:	f04f 0a00 	mov.w	sl, #0
 8009c86:	f104 0b1a 	add.w	fp, r4, #26
 8009c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c8c:	425b      	negs	r3, r3
 8009c8e:	4553      	cmp	r3, sl
 8009c90:	dc01      	bgt.n	8009c96 <_printf_float+0x2b6>
 8009c92:	464b      	mov	r3, r9
 8009c94:	e793      	b.n	8009bbe <_printf_float+0x1de>
 8009c96:	2301      	movs	r3, #1
 8009c98:	465a      	mov	r2, fp
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f aef8 	beq.w	8009a96 <_printf_float+0xb6>
 8009ca6:	f10a 0a01 	add.w	sl, sl, #1
 8009caa:	e7ee      	b.n	8009c8a <_printf_float+0x2aa>
 8009cac:	7fefffff 	.word	0x7fefffff
 8009cb0:	0800c866 	.word	0x0800c866
 8009cb4:	0800c86a 	.word	0x0800c86a
 8009cb8:	0800c86e 	.word	0x0800c86e
 8009cbc:	0800c872 	.word	0x0800c872
 8009cc0:	0800c876 	.word	0x0800c876
 8009cc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cc6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009cca:	4553      	cmp	r3, sl
 8009ccc:	bfa8      	it	ge
 8009cce:	4653      	movge	r3, sl
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	4699      	mov	r9, r3
 8009cd4:	dc36      	bgt.n	8009d44 <_printf_float+0x364>
 8009cd6:	f04f 0b00 	mov.w	fp, #0
 8009cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cde:	f104 021a 	add.w	r2, r4, #26
 8009ce2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ce4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ce6:	eba3 0309 	sub.w	r3, r3, r9
 8009cea:	455b      	cmp	r3, fp
 8009cec:	dc31      	bgt.n	8009d52 <_printf_float+0x372>
 8009cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cf0:	459a      	cmp	sl, r3
 8009cf2:	dc3a      	bgt.n	8009d6a <_printf_float+0x38a>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	07da      	lsls	r2, r3, #31
 8009cf8:	d437      	bmi.n	8009d6a <_printf_float+0x38a>
 8009cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cfc:	ebaa 0903 	sub.w	r9, sl, r3
 8009d00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d02:	ebaa 0303 	sub.w	r3, sl, r3
 8009d06:	4599      	cmp	r9, r3
 8009d08:	bfa8      	it	ge
 8009d0a:	4699      	movge	r9, r3
 8009d0c:	f1b9 0f00 	cmp.w	r9, #0
 8009d10:	dc33      	bgt.n	8009d7a <_printf_float+0x39a>
 8009d12:	f04f 0800 	mov.w	r8, #0
 8009d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d1a:	f104 0b1a 	add.w	fp, r4, #26
 8009d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d20:	ebaa 0303 	sub.w	r3, sl, r3
 8009d24:	eba3 0309 	sub.w	r3, r3, r9
 8009d28:	4543      	cmp	r3, r8
 8009d2a:	f77f af7a 	ble.w	8009c22 <_printf_float+0x242>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	465a      	mov	r2, fp
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b8      	blx	r7
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f aeac 	beq.w	8009a96 <_printf_float+0xb6>
 8009d3e:	f108 0801 	add.w	r8, r8, #1
 8009d42:	e7ec      	b.n	8009d1e <_printf_float+0x33e>
 8009d44:	4642      	mov	r2, r8
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d1c2      	bne.n	8009cd6 <_printf_float+0x2f6>
 8009d50:	e6a1      	b.n	8009a96 <_printf_float+0xb6>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae9a 	beq.w	8009a96 <_printf_float+0xb6>
 8009d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d64:	f10b 0b01 	add.w	fp, fp, #1
 8009d68:	e7bb      	b.n	8009ce2 <_printf_float+0x302>
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	d1c0      	bne.n	8009cfa <_printf_float+0x31a>
 8009d78:	e68d      	b.n	8009a96 <_printf_float+0xb6>
 8009d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	4442      	add	r2, r8
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	d1c3      	bne.n	8009d12 <_printf_float+0x332>
 8009d8a:	e684      	b.n	8009a96 <_printf_float+0xb6>
 8009d8c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009d90:	f1ba 0f01 	cmp.w	sl, #1
 8009d94:	dc01      	bgt.n	8009d9a <_printf_float+0x3ba>
 8009d96:	07db      	lsls	r3, r3, #31
 8009d98:	d536      	bpl.n	8009e08 <_printf_float+0x428>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	f43f ae76 	beq.w	8009a96 <_printf_float+0xb6>
 8009daa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f ae6e 	beq.w	8009a96 <_printf_float+0xb6>
 8009dba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009dc6:	f7f6 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8009dca:	b9c0      	cbnz	r0, 8009dfe <_printf_float+0x41e>
 8009dcc:	4653      	mov	r3, sl
 8009dce:	f108 0201 	add.w	r2, r8, #1
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d10c      	bne.n	8009df6 <_printf_float+0x416>
 8009ddc:	e65b      	b.n	8009a96 <_printf_float+0xb6>
 8009dde:	2301      	movs	r3, #1
 8009de0:	465a      	mov	r2, fp
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f ae54 	beq.w	8009a96 <_printf_float+0xb6>
 8009dee:	f108 0801 	add.w	r8, r8, #1
 8009df2:	45d0      	cmp	r8, sl
 8009df4:	dbf3      	blt.n	8009dde <_printf_float+0x3fe>
 8009df6:	464b      	mov	r3, r9
 8009df8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009dfc:	e6e0      	b.n	8009bc0 <_printf_float+0x1e0>
 8009dfe:	f04f 0800 	mov.w	r8, #0
 8009e02:	f104 0b1a 	add.w	fp, r4, #26
 8009e06:	e7f4      	b.n	8009df2 <_printf_float+0x412>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	4642      	mov	r2, r8
 8009e0c:	e7e1      	b.n	8009dd2 <_printf_float+0x3f2>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	464a      	mov	r2, r9
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	f43f ae3c 	beq.w	8009a96 <_printf_float+0xb6>
 8009e1e:	f108 0801 	add.w	r8, r8, #1
 8009e22:	68e3      	ldr	r3, [r4, #12]
 8009e24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e26:	1a5b      	subs	r3, r3, r1
 8009e28:	4543      	cmp	r3, r8
 8009e2a:	dcf0      	bgt.n	8009e0e <_printf_float+0x42e>
 8009e2c:	e6fd      	b.n	8009c2a <_printf_float+0x24a>
 8009e2e:	f04f 0800 	mov.w	r8, #0
 8009e32:	f104 0919 	add.w	r9, r4, #25
 8009e36:	e7f4      	b.n	8009e22 <_printf_float+0x442>

08009e38 <_printf_common>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	4698      	mov	r8, r3
 8009e40:	688a      	ldr	r2, [r1, #8]
 8009e42:	690b      	ldr	r3, [r1, #16]
 8009e44:	4607      	mov	r7, r0
 8009e46:	4293      	cmp	r3, r2
 8009e48:	bfb8      	it	lt
 8009e4a:	4613      	movlt	r3, r2
 8009e4c:	6033      	str	r3, [r6, #0]
 8009e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e52:	460c      	mov	r4, r1
 8009e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e58:	b10a      	cbz	r2, 8009e5e <_printf_common+0x26>
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	6033      	str	r3, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	6833      	ldrmi	r3, [r6, #0]
 8009e66:	3302      	addmi	r3, #2
 8009e68:	6033      	strmi	r3, [r6, #0]
 8009e6a:	6825      	ldr	r5, [r4, #0]
 8009e6c:	f015 0506 	ands.w	r5, r5, #6
 8009e70:	d106      	bne.n	8009e80 <_printf_common+0x48>
 8009e72:	f104 0a19 	add.w	sl, r4, #25
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	6832      	ldr	r2, [r6, #0]
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dc2b      	bgt.n	8009ed8 <_printf_common+0xa0>
 8009e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e84:	6822      	ldr	r2, [r4, #0]
 8009e86:	3b00      	subs	r3, #0
 8009e88:	bf18      	it	ne
 8009e8a:	2301      	movne	r3, #1
 8009e8c:	0692      	lsls	r2, r2, #26
 8009e8e:	d430      	bmi.n	8009ef2 <_printf_common+0xba>
 8009e90:	4641      	mov	r1, r8
 8009e92:	4638      	mov	r0, r7
 8009e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e98:	47c8      	blx	r9
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	d023      	beq.n	8009ee6 <_printf_common+0xae>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	6922      	ldr	r2, [r4, #16]
 8009ea2:	f003 0306 	and.w	r3, r3, #6
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	bf14      	ite	ne
 8009eaa:	2500      	movne	r5, #0
 8009eac:	6833      	ldreq	r3, [r6, #0]
 8009eae:	f04f 0600 	mov.w	r6, #0
 8009eb2:	bf08      	it	eq
 8009eb4:	68e5      	ldreq	r5, [r4, #12]
 8009eb6:	f104 041a 	add.w	r4, r4, #26
 8009eba:	bf08      	it	eq
 8009ebc:	1aed      	subeq	r5, r5, r3
 8009ebe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009ec2:	bf08      	it	eq
 8009ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	bfc4      	itt	gt
 8009ecc:	1a9b      	subgt	r3, r3, r2
 8009ece:	18ed      	addgt	r5, r5, r3
 8009ed0:	42b5      	cmp	r5, r6
 8009ed2:	d11a      	bne.n	8009f0a <_printf_common+0xd2>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e008      	b.n	8009eea <_printf_common+0xb2>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	4652      	mov	r2, sl
 8009edc:	4641      	mov	r1, r8
 8009ede:	4638      	mov	r0, r7
 8009ee0:	47c8      	blx	r9
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d103      	bne.n	8009eee <_printf_common+0xb6>
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eee:	3501      	adds	r5, #1
 8009ef0:	e7c1      	b.n	8009e76 <_printf_common+0x3e>
 8009ef2:	2030      	movs	r0, #48	@ 0x30
 8009ef4:	18e1      	adds	r1, r4, r3
 8009ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f00:	4422      	add	r2, r4
 8009f02:	3302      	adds	r3, #2
 8009f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f08:	e7c2      	b.n	8009e90 <_printf_common+0x58>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4641      	mov	r1, r8
 8009f10:	4638      	mov	r0, r7
 8009f12:	47c8      	blx	r9
 8009f14:	3001      	adds	r0, #1
 8009f16:	d0e6      	beq.n	8009ee6 <_printf_common+0xae>
 8009f18:	3601      	adds	r6, #1
 8009f1a:	e7d9      	b.n	8009ed0 <_printf_common+0x98>

08009f1c <_printf_i>:
 8009f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f20:	7e0f      	ldrb	r7, [r1, #24]
 8009f22:	4691      	mov	r9, r2
 8009f24:	2f78      	cmp	r7, #120	@ 0x78
 8009f26:	4680      	mov	r8, r0
 8009f28:	460c      	mov	r4, r1
 8009f2a:	469a      	mov	sl, r3
 8009f2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f32:	d807      	bhi.n	8009f44 <_printf_i+0x28>
 8009f34:	2f62      	cmp	r7, #98	@ 0x62
 8009f36:	d80a      	bhi.n	8009f4e <_printf_i+0x32>
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	f000 80d3 	beq.w	800a0e4 <_printf_i+0x1c8>
 8009f3e:	2f58      	cmp	r7, #88	@ 0x58
 8009f40:	f000 80ba 	beq.w	800a0b8 <_printf_i+0x19c>
 8009f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f4c:	e03a      	b.n	8009fc4 <_printf_i+0xa8>
 8009f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f52:	2b15      	cmp	r3, #21
 8009f54:	d8f6      	bhi.n	8009f44 <_printf_i+0x28>
 8009f56:	a101      	add	r1, pc, #4	@ (adr r1, 8009f5c <_printf_i+0x40>)
 8009f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fc9 	.word	0x08009fc9
 8009f64:	08009f45 	.word	0x08009f45
 8009f68:	08009f45 	.word	0x08009f45
 8009f6c:	08009f45 	.word	0x08009f45
 8009f70:	08009f45 	.word	0x08009f45
 8009f74:	08009fc9 	.word	0x08009fc9
 8009f78:	08009f45 	.word	0x08009f45
 8009f7c:	08009f45 	.word	0x08009f45
 8009f80:	08009f45 	.word	0x08009f45
 8009f84:	08009f45 	.word	0x08009f45
 8009f88:	0800a0cb 	.word	0x0800a0cb
 8009f8c:	08009ff3 	.word	0x08009ff3
 8009f90:	0800a085 	.word	0x0800a085
 8009f94:	08009f45 	.word	0x08009f45
 8009f98:	08009f45 	.word	0x08009f45
 8009f9c:	0800a0ed 	.word	0x0800a0ed
 8009fa0:	08009f45 	.word	0x08009f45
 8009fa4:	08009ff3 	.word	0x08009ff3
 8009fa8:	08009f45 	.word	0x08009f45
 8009fac:	08009f45 	.word	0x08009f45
 8009fb0:	0800a08d 	.word	0x0800a08d
 8009fb4:	6833      	ldr	r3, [r6, #0]
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6032      	str	r2, [r6, #0]
 8009fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e09e      	b.n	800a106 <_printf_i+0x1ea>
 8009fc8:	6833      	ldr	r3, [r6, #0]
 8009fca:	6820      	ldr	r0, [r4, #0]
 8009fcc:	1d19      	adds	r1, r3, #4
 8009fce:	6031      	str	r1, [r6, #0]
 8009fd0:	0606      	lsls	r6, r0, #24
 8009fd2:	d501      	bpl.n	8009fd8 <_printf_i+0xbc>
 8009fd4:	681d      	ldr	r5, [r3, #0]
 8009fd6:	e003      	b.n	8009fe0 <_printf_i+0xc4>
 8009fd8:	0645      	lsls	r5, r0, #25
 8009fda:	d5fb      	bpl.n	8009fd4 <_printf_i+0xb8>
 8009fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	da03      	bge.n	8009fec <_printf_i+0xd0>
 8009fe4:	232d      	movs	r3, #45	@ 0x2d
 8009fe6:	426d      	negs	r5, r5
 8009fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fec:	230a      	movs	r3, #10
 8009fee:	4859      	ldr	r0, [pc, #356]	@ (800a154 <_printf_i+0x238>)
 8009ff0:	e011      	b.n	800a016 <_printf_i+0xfa>
 8009ff2:	6821      	ldr	r1, [r4, #0]
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	0608      	lsls	r0, r1, #24
 8009ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ffc:	d402      	bmi.n	800a004 <_printf_i+0xe8>
 8009ffe:	0649      	lsls	r1, r1, #25
 800a000:	bf48      	it	mi
 800a002:	b2ad      	uxthmi	r5, r5
 800a004:	2f6f      	cmp	r7, #111	@ 0x6f
 800a006:	6033      	str	r3, [r6, #0]
 800a008:	bf14      	ite	ne
 800a00a:	230a      	movne	r3, #10
 800a00c:	2308      	moveq	r3, #8
 800a00e:	4851      	ldr	r0, [pc, #324]	@ (800a154 <_printf_i+0x238>)
 800a010:	2100      	movs	r1, #0
 800a012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a016:	6866      	ldr	r6, [r4, #4]
 800a018:	2e00      	cmp	r6, #0
 800a01a:	bfa8      	it	ge
 800a01c:	6821      	ldrge	r1, [r4, #0]
 800a01e:	60a6      	str	r6, [r4, #8]
 800a020:	bfa4      	itt	ge
 800a022:	f021 0104 	bicge.w	r1, r1, #4
 800a026:	6021      	strge	r1, [r4, #0]
 800a028:	b90d      	cbnz	r5, 800a02e <_printf_i+0x112>
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	d04b      	beq.n	800a0c6 <_printf_i+0x1aa>
 800a02e:	4616      	mov	r6, r2
 800a030:	fbb5 f1f3 	udiv	r1, r5, r3
 800a034:	fb03 5711 	mls	r7, r3, r1, r5
 800a038:	5dc7      	ldrb	r7, [r0, r7]
 800a03a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a03e:	462f      	mov	r7, r5
 800a040:	42bb      	cmp	r3, r7
 800a042:	460d      	mov	r5, r1
 800a044:	d9f4      	bls.n	800a030 <_printf_i+0x114>
 800a046:	2b08      	cmp	r3, #8
 800a048:	d10b      	bne.n	800a062 <_printf_i+0x146>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	07df      	lsls	r7, r3, #31
 800a04e:	d508      	bpl.n	800a062 <_printf_i+0x146>
 800a050:	6923      	ldr	r3, [r4, #16]
 800a052:	6861      	ldr	r1, [r4, #4]
 800a054:	4299      	cmp	r1, r3
 800a056:	bfde      	ittt	le
 800a058:	2330      	movle	r3, #48	@ 0x30
 800a05a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a05e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a062:	1b92      	subs	r2, r2, r6
 800a064:	6122      	str	r2, [r4, #16]
 800a066:	464b      	mov	r3, r9
 800a068:	4621      	mov	r1, r4
 800a06a:	4640      	mov	r0, r8
 800a06c:	f8cd a000 	str.w	sl, [sp]
 800a070:	aa03      	add	r2, sp, #12
 800a072:	f7ff fee1 	bl	8009e38 <_printf_common>
 800a076:	3001      	adds	r0, #1
 800a078:	d14a      	bne.n	800a110 <_printf_i+0x1f4>
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a07e:	b004      	add	sp, #16
 800a080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	f043 0320 	orr.w	r3, r3, #32
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	2778      	movs	r7, #120	@ 0x78
 800a08e:	4832      	ldr	r0, [pc, #200]	@ (800a158 <_printf_i+0x23c>)
 800a090:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	6831      	ldr	r1, [r6, #0]
 800a098:	061f      	lsls	r7, r3, #24
 800a09a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a09e:	d402      	bmi.n	800a0a6 <_printf_i+0x18a>
 800a0a0:	065f      	lsls	r7, r3, #25
 800a0a2:	bf48      	it	mi
 800a0a4:	b2ad      	uxthmi	r5, r5
 800a0a6:	6031      	str	r1, [r6, #0]
 800a0a8:	07d9      	lsls	r1, r3, #31
 800a0aa:	bf44      	itt	mi
 800a0ac:	f043 0320 	orrmi.w	r3, r3, #32
 800a0b0:	6023      	strmi	r3, [r4, #0]
 800a0b2:	b11d      	cbz	r5, 800a0bc <_printf_i+0x1a0>
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	e7ab      	b.n	800a010 <_printf_i+0xf4>
 800a0b8:	4826      	ldr	r0, [pc, #152]	@ (800a154 <_printf_i+0x238>)
 800a0ba:	e7e9      	b.n	800a090 <_printf_i+0x174>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	f023 0320 	bic.w	r3, r3, #32
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	e7f6      	b.n	800a0b4 <_printf_i+0x198>
 800a0c6:	4616      	mov	r6, r2
 800a0c8:	e7bd      	b.n	800a046 <_printf_i+0x12a>
 800a0ca:	6833      	ldr	r3, [r6, #0]
 800a0cc:	6825      	ldr	r5, [r4, #0]
 800a0ce:	1d18      	adds	r0, r3, #4
 800a0d0:	6961      	ldr	r1, [r4, #20]
 800a0d2:	6030      	str	r0, [r6, #0]
 800a0d4:	062e      	lsls	r6, r5, #24
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	d501      	bpl.n	800a0de <_printf_i+0x1c2>
 800a0da:	6019      	str	r1, [r3, #0]
 800a0dc:	e002      	b.n	800a0e4 <_printf_i+0x1c8>
 800a0de:	0668      	lsls	r0, r5, #25
 800a0e0:	d5fb      	bpl.n	800a0da <_printf_i+0x1be>
 800a0e2:	8019      	strh	r1, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4616      	mov	r6, r2
 800a0e8:	6123      	str	r3, [r4, #16]
 800a0ea:	e7bc      	b.n	800a066 <_printf_i+0x14a>
 800a0ec:	6833      	ldr	r3, [r6, #0]
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	1d1a      	adds	r2, r3, #4
 800a0f2:	6032      	str	r2, [r6, #0]
 800a0f4:	681e      	ldr	r6, [r3, #0]
 800a0f6:	6862      	ldr	r2, [r4, #4]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f000 fb4f 	bl	800a79c <memchr>
 800a0fe:	b108      	cbz	r0, 800a104 <_printf_i+0x1e8>
 800a100:	1b80      	subs	r0, r0, r6
 800a102:	6060      	str	r0, [r4, #4]
 800a104:	6863      	ldr	r3, [r4, #4]
 800a106:	6123      	str	r3, [r4, #16]
 800a108:	2300      	movs	r3, #0
 800a10a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a10e:	e7aa      	b.n	800a066 <_printf_i+0x14a>
 800a110:	4632      	mov	r2, r6
 800a112:	4649      	mov	r1, r9
 800a114:	4640      	mov	r0, r8
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	47d0      	blx	sl
 800a11a:	3001      	adds	r0, #1
 800a11c:	d0ad      	beq.n	800a07a <_printf_i+0x15e>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	079b      	lsls	r3, r3, #30
 800a122:	d413      	bmi.n	800a14c <_printf_i+0x230>
 800a124:	68e0      	ldr	r0, [r4, #12]
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	4298      	cmp	r0, r3
 800a12a:	bfb8      	it	lt
 800a12c:	4618      	movlt	r0, r3
 800a12e:	e7a6      	b.n	800a07e <_printf_i+0x162>
 800a130:	2301      	movs	r3, #1
 800a132:	4632      	mov	r2, r6
 800a134:	4649      	mov	r1, r9
 800a136:	4640      	mov	r0, r8
 800a138:	47d0      	blx	sl
 800a13a:	3001      	adds	r0, #1
 800a13c:	d09d      	beq.n	800a07a <_printf_i+0x15e>
 800a13e:	3501      	adds	r5, #1
 800a140:	68e3      	ldr	r3, [r4, #12]
 800a142:	9903      	ldr	r1, [sp, #12]
 800a144:	1a5b      	subs	r3, r3, r1
 800a146:	42ab      	cmp	r3, r5
 800a148:	dcf2      	bgt.n	800a130 <_printf_i+0x214>
 800a14a:	e7eb      	b.n	800a124 <_printf_i+0x208>
 800a14c:	2500      	movs	r5, #0
 800a14e:	f104 0619 	add.w	r6, r4, #25
 800a152:	e7f5      	b.n	800a140 <_printf_i+0x224>
 800a154:	0800c878 	.word	0x0800c878
 800a158:	0800c889 	.word	0x0800c889

0800a15c <std>:
 800a15c:	2300      	movs	r3, #0
 800a15e:	b510      	push	{r4, lr}
 800a160:	4604      	mov	r4, r0
 800a162:	e9c0 3300 	strd	r3, r3, [r0]
 800a166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a16a:	6083      	str	r3, [r0, #8]
 800a16c:	8181      	strh	r1, [r0, #12]
 800a16e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a170:	81c2      	strh	r2, [r0, #14]
 800a172:	6183      	str	r3, [r0, #24]
 800a174:	4619      	mov	r1, r3
 800a176:	2208      	movs	r2, #8
 800a178:	305c      	adds	r0, #92	@ 0x5c
 800a17a:	f000 fa2d 	bl	800a5d8 <memset>
 800a17e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1b4 <std+0x58>)
 800a180:	6224      	str	r4, [r4, #32]
 800a182:	6263      	str	r3, [r4, #36]	@ 0x24
 800a184:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b8 <std+0x5c>)
 800a186:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a188:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <std+0x60>)
 800a18a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a18c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c0 <std+0x64>)
 800a18e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a190:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c4 <std+0x68>)
 800a192:	429c      	cmp	r4, r3
 800a194:	d006      	beq.n	800a1a4 <std+0x48>
 800a196:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a19a:	4294      	cmp	r4, r2
 800a19c:	d002      	beq.n	800a1a4 <std+0x48>
 800a19e:	33d0      	adds	r3, #208	@ 0xd0
 800a1a0:	429c      	cmp	r4, r3
 800a1a2:	d105      	bne.n	800a1b0 <std+0x54>
 800a1a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1ac:	f7f7 bf05 	b.w	8001fba <__retarget_lock_init_recursive>
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0800a429 	.word	0x0800a429
 800a1b8:	0800a44b 	.word	0x0800a44b
 800a1bc:	0800a483 	.word	0x0800a483
 800a1c0:	0800a4a7 	.word	0x0800a4a7
 800a1c4:	2000397c 	.word	0x2000397c

0800a1c8 <stdio_exit_handler>:
 800a1c8:	4a02      	ldr	r2, [pc, #8]	@ (800a1d4 <stdio_exit_handler+0xc>)
 800a1ca:	4903      	ldr	r1, [pc, #12]	@ (800a1d8 <stdio_exit_handler+0x10>)
 800a1cc:	4803      	ldr	r0, [pc, #12]	@ (800a1dc <stdio_exit_handler+0x14>)
 800a1ce:	f000 b869 	b.w	800a2a4 <_fwalk_sglue>
 800a1d2:	bf00      	nop
 800a1d4:	20000010 	.word	0x20000010
 800a1d8:	0800c1a9 	.word	0x0800c1a9
 800a1dc:	20000020 	.word	0x20000020

0800a1e0 <cleanup_stdio>:
 800a1e0:	6841      	ldr	r1, [r0, #4]
 800a1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a214 <cleanup_stdio+0x34>)
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4299      	cmp	r1, r3
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	d001      	beq.n	800a1f0 <cleanup_stdio+0x10>
 800a1ec:	f001 ffdc 	bl	800c1a8 <_fflush_r>
 800a1f0:	68a1      	ldr	r1, [r4, #8]
 800a1f2:	4b09      	ldr	r3, [pc, #36]	@ (800a218 <cleanup_stdio+0x38>)
 800a1f4:	4299      	cmp	r1, r3
 800a1f6:	d002      	beq.n	800a1fe <cleanup_stdio+0x1e>
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f001 ffd5 	bl	800c1a8 <_fflush_r>
 800a1fe:	68e1      	ldr	r1, [r4, #12]
 800a200:	4b06      	ldr	r3, [pc, #24]	@ (800a21c <cleanup_stdio+0x3c>)
 800a202:	4299      	cmp	r1, r3
 800a204:	d004      	beq.n	800a210 <cleanup_stdio+0x30>
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f001 bfcc 	b.w	800c1a8 <_fflush_r>
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop
 800a214:	2000397c 	.word	0x2000397c
 800a218:	200039e4 	.word	0x200039e4
 800a21c:	20003a4c 	.word	0x20003a4c

0800a220 <global_stdio_init.part.0>:
 800a220:	b510      	push	{r4, lr}
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <global_stdio_init.part.0+0x30>)
 800a224:	4c0b      	ldr	r4, [pc, #44]	@ (800a254 <global_stdio_init.part.0+0x34>)
 800a226:	4a0c      	ldr	r2, [pc, #48]	@ (800a258 <global_stdio_init.part.0+0x38>)
 800a228:	4620      	mov	r0, r4
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	2104      	movs	r1, #4
 800a22e:	2200      	movs	r2, #0
 800a230:	f7ff ff94 	bl	800a15c <std>
 800a234:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a238:	2201      	movs	r2, #1
 800a23a:	2109      	movs	r1, #9
 800a23c:	f7ff ff8e 	bl	800a15c <std>
 800a240:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a244:	2202      	movs	r2, #2
 800a246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a24a:	2112      	movs	r1, #18
 800a24c:	f7ff bf86 	b.w	800a15c <std>
 800a250:	20003ab4 	.word	0x20003ab4
 800a254:	2000397c 	.word	0x2000397c
 800a258:	0800a1c9 	.word	0x0800a1c9

0800a25c <__sfp_lock_acquire>:
 800a25c:	4801      	ldr	r0, [pc, #4]	@ (800a264 <__sfp_lock_acquire+0x8>)
 800a25e:	f7f7 bed3 	b.w	8002008 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20000370 	.word	0x20000370

0800a268 <__sfp_lock_release>:
 800a268:	4801      	ldr	r0, [pc, #4]	@ (800a270 <__sfp_lock_release+0x8>)
 800a26a:	f7f7 bee2 	b.w	8002032 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20000370 	.word	0x20000370

0800a274 <__sinit>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff fff0 	bl	800a25c <__sfp_lock_acquire>
 800a27c:	6a23      	ldr	r3, [r4, #32]
 800a27e:	b11b      	cbz	r3, 800a288 <__sinit+0x14>
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bff0 	b.w	800a268 <__sfp_lock_release>
 800a288:	4b04      	ldr	r3, [pc, #16]	@ (800a29c <__sinit+0x28>)
 800a28a:	6223      	str	r3, [r4, #32]
 800a28c:	4b04      	ldr	r3, [pc, #16]	@ (800a2a0 <__sinit+0x2c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f5      	bne.n	800a280 <__sinit+0xc>
 800a294:	f7ff ffc4 	bl	800a220 <global_stdio_init.part.0>
 800a298:	e7f2      	b.n	800a280 <__sinit+0xc>
 800a29a:	bf00      	nop
 800a29c:	0800a1e1 	.word	0x0800a1e1
 800a2a0:	20003ab4 	.word	0x20003ab4

0800a2a4 <_fwalk_sglue>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	4688      	mov	r8, r1
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	2600      	movs	r6, #0
 800a2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a2b8:	d505      	bpl.n	800a2c6 <_fwalk_sglue+0x22>
 800a2ba:	6824      	ldr	r4, [r4, #0]
 800a2bc:	2c00      	cmp	r4, #0
 800a2be:	d1f7      	bne.n	800a2b0 <_fwalk_sglue+0xc>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	89ab      	ldrh	r3, [r5, #12]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d907      	bls.n	800a2dc <_fwalk_sglue+0x38>
 800a2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	d003      	beq.n	800a2dc <_fwalk_sglue+0x38>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	47c0      	blx	r8
 800a2da:	4306      	orrs	r6, r0
 800a2dc:	3568      	adds	r5, #104	@ 0x68
 800a2de:	e7e9      	b.n	800a2b4 <_fwalk_sglue+0x10>

0800a2e0 <iprintf>:
 800a2e0:	b40f      	push	{r0, r1, r2, r3}
 800a2e2:	b507      	push	{r0, r1, r2, lr}
 800a2e4:	4906      	ldr	r1, [pc, #24]	@ (800a300 <iprintf+0x20>)
 800a2e6:	ab04      	add	r3, sp, #16
 800a2e8:	6808      	ldr	r0, [r1, #0]
 800a2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ee:	6881      	ldr	r1, [r0, #8]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	f001 fdc1 	bl	800be78 <_vfiprintf_r>
 800a2f6:	b003      	add	sp, #12
 800a2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2fc:	b004      	add	sp, #16
 800a2fe:	4770      	bx	lr
 800a300:	2000001c 	.word	0x2000001c

0800a304 <_puts_r>:
 800a304:	6a03      	ldr	r3, [r0, #32]
 800a306:	b570      	push	{r4, r5, r6, lr}
 800a308:	4605      	mov	r5, r0
 800a30a:	460e      	mov	r6, r1
 800a30c:	6884      	ldr	r4, [r0, #8]
 800a30e:	b90b      	cbnz	r3, 800a314 <_puts_r+0x10>
 800a310:	f7ff ffb0 	bl	800a274 <__sinit>
 800a314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a316:	07db      	lsls	r3, r3, #31
 800a318:	d405      	bmi.n	800a326 <_puts_r+0x22>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	0598      	lsls	r0, r3, #22
 800a31e:	d402      	bmi.n	800a326 <_puts_r+0x22>
 800a320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a322:	f7f7 fe71 	bl	8002008 <__retarget_lock_acquire_recursive>
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	0719      	lsls	r1, r3, #28
 800a32a:	d502      	bpl.n	800a332 <_puts_r+0x2e>
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d135      	bne.n	800a39e <_puts_r+0x9a>
 800a332:	4621      	mov	r1, r4
 800a334:	4628      	mov	r0, r5
 800a336:	f000 f8f9 	bl	800a52c <__swsetup_r>
 800a33a:	b380      	cbz	r0, 800a39e <_puts_r+0x9a>
 800a33c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a340:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a342:	07da      	lsls	r2, r3, #31
 800a344:	d405      	bmi.n	800a352 <_puts_r+0x4e>
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	059b      	lsls	r3, r3, #22
 800a34a:	d402      	bmi.n	800a352 <_puts_r+0x4e>
 800a34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a34e:	f7f7 fe70 	bl	8002032 <__retarget_lock_release_recursive>
 800a352:	4628      	mov	r0, r5
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	2b00      	cmp	r3, #0
 800a358:	da04      	bge.n	800a364 <_puts_r+0x60>
 800a35a:	69a2      	ldr	r2, [r4, #24]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	dc17      	bgt.n	800a390 <_puts_r+0x8c>
 800a360:	290a      	cmp	r1, #10
 800a362:	d015      	beq.n	800a390 <_puts_r+0x8c>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	6022      	str	r2, [r4, #0]
 800a36a:	7019      	strb	r1, [r3, #0]
 800a36c:	68a3      	ldr	r3, [r4, #8]
 800a36e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a372:	3b01      	subs	r3, #1
 800a374:	60a3      	str	r3, [r4, #8]
 800a376:	2900      	cmp	r1, #0
 800a378:	d1ed      	bne.n	800a356 <_puts_r+0x52>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	da11      	bge.n	800a3a2 <_puts_r+0x9e>
 800a37e:	4622      	mov	r2, r4
 800a380:	210a      	movs	r1, #10
 800a382:	4628      	mov	r0, r5
 800a384:	f000 f893 	bl	800a4ae <__swbuf_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	d0d7      	beq.n	800a33c <_puts_r+0x38>
 800a38c:	250a      	movs	r5, #10
 800a38e:	e7d7      	b.n	800a340 <_puts_r+0x3c>
 800a390:	4622      	mov	r2, r4
 800a392:	4628      	mov	r0, r5
 800a394:	f000 f88b 	bl	800a4ae <__swbuf_r>
 800a398:	3001      	adds	r0, #1
 800a39a:	d1e7      	bne.n	800a36c <_puts_r+0x68>
 800a39c:	e7ce      	b.n	800a33c <_puts_r+0x38>
 800a39e:	3e01      	subs	r6, #1
 800a3a0:	e7e4      	b.n	800a36c <_puts_r+0x68>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	6022      	str	r2, [r4, #0]
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	e7ee      	b.n	800a38c <_puts_r+0x88>
	...

0800a3b0 <puts>:
 800a3b0:	4b02      	ldr	r3, [pc, #8]	@ (800a3bc <puts+0xc>)
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	f7ff bfa5 	b.w	800a304 <_puts_r>
 800a3ba:	bf00      	nop
 800a3bc:	2000001c 	.word	0x2000001c

0800a3c0 <sniprintf>:
 800a3c0:	b40c      	push	{r2, r3}
 800a3c2:	b530      	push	{r4, r5, lr}
 800a3c4:	4b17      	ldr	r3, [pc, #92]	@ (800a424 <sniprintf+0x64>)
 800a3c6:	1e0c      	subs	r4, r1, #0
 800a3c8:	681d      	ldr	r5, [r3, #0]
 800a3ca:	b09d      	sub	sp, #116	@ 0x74
 800a3cc:	da08      	bge.n	800a3e0 <sniprintf+0x20>
 800a3ce:	238b      	movs	r3, #139	@ 0x8b
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	b01d      	add	sp, #116	@ 0x74
 800a3d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3dc:	b002      	add	sp, #8
 800a3de:	4770      	bx	lr
 800a3e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a3e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3e8:	bf0c      	ite	eq
 800a3ea:	4623      	moveq	r3, r4
 800a3ec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3f8:	9002      	str	r0, [sp, #8]
 800a3fa:	9006      	str	r0, [sp, #24]
 800a3fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a400:	4628      	mov	r0, r5
 800a402:	ab21      	add	r3, sp, #132	@ 0x84
 800a404:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a406:	a902      	add	r1, sp, #8
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f001 fc11 	bl	800bc30 <_svfiprintf_r>
 800a40e:	1c43      	adds	r3, r0, #1
 800a410:	bfbc      	itt	lt
 800a412:	238b      	movlt	r3, #139	@ 0x8b
 800a414:	602b      	strlt	r3, [r5, #0]
 800a416:	2c00      	cmp	r4, #0
 800a418:	d0dd      	beq.n	800a3d6 <sniprintf+0x16>
 800a41a:	2200      	movs	r2, #0
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	701a      	strb	r2, [r3, #0]
 800a420:	e7d9      	b.n	800a3d6 <sniprintf+0x16>
 800a422:	bf00      	nop
 800a424:	2000001c 	.word	0x2000001c

0800a428 <__sread>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	460c      	mov	r4, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	f000 f956 	bl	800a6e0 <_read_r>
 800a434:	2800      	cmp	r0, #0
 800a436:	bfab      	itete	ge
 800a438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a43a:	89a3      	ldrhlt	r3, [r4, #12]
 800a43c:	181b      	addge	r3, r3, r0
 800a43e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a442:	bfac      	ite	ge
 800a444:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a446:	81a3      	strhlt	r3, [r4, #12]
 800a448:	bd10      	pop	{r4, pc}

0800a44a <__swrite>:
 800a44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	461f      	mov	r7, r3
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	4605      	mov	r5, r0
 800a454:	05db      	lsls	r3, r3, #23
 800a456:	460c      	mov	r4, r1
 800a458:	4616      	mov	r6, r2
 800a45a:	d505      	bpl.n	800a468 <__swrite+0x1e>
 800a45c:	2302      	movs	r3, #2
 800a45e:	2200      	movs	r2, #0
 800a460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a464:	f000 f92a 	bl	800a6bc <_lseek_r>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	4632      	mov	r2, r6
 800a46c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	4628      	mov	r0, r5
 800a474:	463b      	mov	r3, r7
 800a476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a47a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47e:	f000 b951 	b.w	800a724 <_write_r>

0800a482 <__sseek>:
 800a482:	b510      	push	{r4, lr}
 800a484:	460c      	mov	r4, r1
 800a486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48a:	f000 f917 	bl	800a6bc <_lseek_r>
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	bf15      	itete	ne
 800a494:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a49a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a49e:	81a3      	strheq	r3, [r4, #12]
 800a4a0:	bf18      	it	ne
 800a4a2:	81a3      	strhne	r3, [r4, #12]
 800a4a4:	bd10      	pop	{r4, pc}

0800a4a6 <__sclose>:
 800a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4aa:	f000 b8a1 	b.w	800a5f0 <_close_r>

0800a4ae <__swbuf_r>:
 800a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b0:	460e      	mov	r6, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b118      	cbz	r0, 800a4c0 <__swbuf_r+0x12>
 800a4b8:	6a03      	ldr	r3, [r0, #32]
 800a4ba:	b90b      	cbnz	r3, 800a4c0 <__swbuf_r+0x12>
 800a4bc:	f7ff feda 	bl	800a274 <__sinit>
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	071a      	lsls	r2, r3, #28
 800a4c8:	d501      	bpl.n	800a4ce <__swbuf_r+0x20>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	b943      	cbnz	r3, 800a4e0 <__swbuf_r+0x32>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f82b 	bl	800a52c <__swsetup_r>
 800a4d6:	b118      	cbz	r0, 800a4e0 <__swbuf_r+0x32>
 800a4d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a4dc:	4638      	mov	r0, r7
 800a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6922      	ldr	r2, [r4, #16]
 800a4e4:	b2f6      	uxtb	r6, r6
 800a4e6:	1a98      	subs	r0, r3, r2
 800a4e8:	6963      	ldr	r3, [r4, #20]
 800a4ea:	4637      	mov	r7, r6
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	dc05      	bgt.n	800a4fc <__swbuf_r+0x4e>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f001 fe58 	bl	800c1a8 <_fflush_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d1ed      	bne.n	800a4d8 <__swbuf_r+0x2a>
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	701e      	strb	r6, [r3, #0]
 800a50a:	6962      	ldr	r2, [r4, #20]
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	429a      	cmp	r2, r3
 800a510:	d004      	beq.n	800a51c <__swbuf_r+0x6e>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	07db      	lsls	r3, r3, #31
 800a516:	d5e1      	bpl.n	800a4dc <__swbuf_r+0x2e>
 800a518:	2e0a      	cmp	r6, #10
 800a51a:	d1df      	bne.n	800a4dc <__swbuf_r+0x2e>
 800a51c:	4621      	mov	r1, r4
 800a51e:	4628      	mov	r0, r5
 800a520:	f001 fe42 	bl	800c1a8 <_fflush_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	d0d9      	beq.n	800a4dc <__swbuf_r+0x2e>
 800a528:	e7d6      	b.n	800a4d8 <__swbuf_r+0x2a>
	...

0800a52c <__swsetup_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4b29      	ldr	r3, [pc, #164]	@ (800a5d4 <__swsetup_r+0xa8>)
 800a530:	4605      	mov	r5, r0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	460c      	mov	r4, r1
 800a536:	b118      	cbz	r0, 800a540 <__swsetup_r+0x14>
 800a538:	6a03      	ldr	r3, [r0, #32]
 800a53a:	b90b      	cbnz	r3, 800a540 <__swsetup_r+0x14>
 800a53c:	f7ff fe9a 	bl	800a274 <__sinit>
 800a540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a544:	0719      	lsls	r1, r3, #28
 800a546:	d422      	bmi.n	800a58e <__swsetup_r+0x62>
 800a548:	06da      	lsls	r2, r3, #27
 800a54a:	d407      	bmi.n	800a55c <__swsetup_r+0x30>
 800a54c:	2209      	movs	r2, #9
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	e033      	b.n	800a5c4 <__swsetup_r+0x98>
 800a55c:	0758      	lsls	r0, r3, #29
 800a55e:	d512      	bpl.n	800a586 <__swsetup_r+0x5a>
 800a560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a562:	b141      	cbz	r1, 800a576 <__swsetup_r+0x4a>
 800a564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <__swsetup_r+0x46>
 800a56c:	4628      	mov	r0, r5
 800a56e:	f7ff f89b 	bl	80096a8 <_free_r>
 800a572:	2300      	movs	r3, #0
 800a574:	6363      	str	r3, [r4, #52]	@ 0x34
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	2300      	movs	r3, #0
 800a580:	6063      	str	r3, [r4, #4]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f043 0308 	orr.w	r3, r3, #8
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	b94b      	cbnz	r3, 800a5a6 <__swsetup_r+0x7a>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a59c:	d003      	beq.n	800a5a6 <__swsetup_r+0x7a>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f001 fe4e 	bl	800c242 <__smakebuf_r>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	f013 0201 	ands.w	r2, r3, #1
 800a5ae:	d00a      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	6962      	ldr	r2, [r4, #20]
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	61a2      	str	r2, [r4, #24]
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	b942      	cbnz	r2, 800a5d0 <__swsetup_r+0xa4>
 800a5be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5c2:	d1c5      	bne.n	800a550 <__swsetup_r+0x24>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	0799      	lsls	r1, r3, #30
 800a5c8:	bf58      	it	pl
 800a5ca:	6962      	ldrpl	r2, [r4, #20]
 800a5cc:	60a2      	str	r2, [r4, #8]
 800a5ce:	e7f4      	b.n	800a5ba <__swsetup_r+0x8e>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7f7      	b.n	800a5c4 <__swsetup_r+0x98>
 800a5d4:	2000001c 	.word	0x2000001c

0800a5d8 <memset>:
 800a5d8:	4603      	mov	r3, r0
 800a5da:	4402      	add	r2, r0
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d100      	bne.n	800a5e2 <memset+0xa>
 800a5e0:	4770      	bx	lr
 800a5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e6:	e7f9      	b.n	800a5dc <memset+0x4>

0800a5e8 <_localeconv_r>:
 800a5e8:	4800      	ldr	r0, [pc, #0]	@ (800a5ec <_localeconv_r+0x4>)
 800a5ea:	4770      	bx	lr
 800a5ec:	2000015c 	.word	0x2000015c

0800a5f0 <_close_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4d05      	ldr	r5, [pc, #20]	@ (800a60c <_close_r+0x1c>)
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	f7f7 faf1 	bl	8001be2 <_close>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_close_r+0x1a>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_close_r+0x1a>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20003ab8 	.word	0x20003ab8

0800a610 <_reclaim_reent>:
 800a610:	4b29      	ldr	r3, [pc, #164]	@ (800a6b8 <_reclaim_reent+0xa8>)
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4604      	mov	r4, r0
 800a618:	4283      	cmp	r3, r0
 800a61a:	d04b      	beq.n	800a6b4 <_reclaim_reent+0xa4>
 800a61c:	69c3      	ldr	r3, [r0, #28]
 800a61e:	b1ab      	cbz	r3, 800a64c <_reclaim_reent+0x3c>
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	b16b      	cbz	r3, 800a640 <_reclaim_reent+0x30>
 800a624:	2500      	movs	r5, #0
 800a626:	69e3      	ldr	r3, [r4, #28]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	5959      	ldr	r1, [r3, r5]
 800a62c:	2900      	cmp	r1, #0
 800a62e:	d13b      	bne.n	800a6a8 <_reclaim_reent+0x98>
 800a630:	3504      	adds	r5, #4
 800a632:	2d80      	cmp	r5, #128	@ 0x80
 800a634:	d1f7      	bne.n	800a626 <_reclaim_reent+0x16>
 800a636:	69e3      	ldr	r3, [r4, #28]
 800a638:	4620      	mov	r0, r4
 800a63a:	68d9      	ldr	r1, [r3, #12]
 800a63c:	f7ff f834 	bl	80096a8 <_free_r>
 800a640:	69e3      	ldr	r3, [r4, #28]
 800a642:	6819      	ldr	r1, [r3, #0]
 800a644:	b111      	cbz	r1, 800a64c <_reclaim_reent+0x3c>
 800a646:	4620      	mov	r0, r4
 800a648:	f7ff f82e 	bl	80096a8 <_free_r>
 800a64c:	6961      	ldr	r1, [r4, #20]
 800a64e:	b111      	cbz	r1, 800a656 <_reclaim_reent+0x46>
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff f829 	bl	80096a8 <_free_r>
 800a656:	69e1      	ldr	r1, [r4, #28]
 800a658:	b111      	cbz	r1, 800a660 <_reclaim_reent+0x50>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7ff f824 	bl	80096a8 <_free_r>
 800a660:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a662:	b111      	cbz	r1, 800a66a <_reclaim_reent+0x5a>
 800a664:	4620      	mov	r0, r4
 800a666:	f7ff f81f 	bl	80096a8 <_free_r>
 800a66a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a66c:	b111      	cbz	r1, 800a674 <_reclaim_reent+0x64>
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff f81a 	bl	80096a8 <_free_r>
 800a674:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a676:	b111      	cbz	r1, 800a67e <_reclaim_reent+0x6e>
 800a678:	4620      	mov	r0, r4
 800a67a:	f7ff f815 	bl	80096a8 <_free_r>
 800a67e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a680:	b111      	cbz	r1, 800a688 <_reclaim_reent+0x78>
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff f810 	bl	80096a8 <_free_r>
 800a688:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a68a:	b111      	cbz	r1, 800a692 <_reclaim_reent+0x82>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7ff f80b 	bl	80096a8 <_free_r>
 800a692:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a694:	b111      	cbz	r1, 800a69c <_reclaim_reent+0x8c>
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff f806 	bl	80096a8 <_free_r>
 800a69c:	6a23      	ldr	r3, [r4, #32]
 800a69e:	b14b      	cbz	r3, 800a6b4 <_reclaim_reent+0xa4>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6a6:	4718      	bx	r3
 800a6a8:	680e      	ldr	r6, [r1, #0]
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7fe fffc 	bl	80096a8 <_free_r>
 800a6b0:	4631      	mov	r1, r6
 800a6b2:	e7bb      	b.n	800a62c <_reclaim_reent+0x1c>
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	bf00      	nop
 800a6b8:	2000001c 	.word	0x2000001c

0800a6bc <_lseek_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4604      	mov	r4, r0
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4d05      	ldr	r5, [pc, #20]	@ (800a6dc <_lseek_r+0x20>)
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f7 faad 	bl	8001c2a <_lseek>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_lseek_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_lseek_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20003ab8 	.word	0x20003ab8

0800a6e0 <_read_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4d05      	ldr	r5, [pc, #20]	@ (800a700 <_read_r+0x20>)
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f7f7 fa5a 	bl	8001ba8 <_read>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_read_r+0x1e>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_read_r+0x1e>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20003ab8 	.word	0x20003ab8

0800a704 <_sbrk_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	@ (800a720 <_sbrk_r+0x1c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f7 fa98 	bl	8001c44 <_sbrk>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_sbrk_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_sbrk_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20003ab8 	.word	0x20003ab8

0800a724 <_write_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	4608      	mov	r0, r1
 800a72a:	4611      	mov	r1, r2
 800a72c:	2200      	movs	r2, #0
 800a72e:	4d05      	ldr	r5, [pc, #20]	@ (800a744 <_write_r+0x20>)
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f7 fb86 	bl	8001e44 <_write>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_write_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_write_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20003ab8 	.word	0x20003ab8

0800a748 <__errno>:
 800a748:	4b01      	ldr	r3, [pc, #4]	@ (800a750 <__errno+0x8>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	2000001c 	.word	0x2000001c

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	2600      	movs	r6, #0
 800a758:	4d0c      	ldr	r5, [pc, #48]	@ (800a78c <__libc_init_array+0x38>)
 800a75a:	4c0d      	ldr	r4, [pc, #52]	@ (800a790 <__libc_init_array+0x3c>)
 800a75c:	1b64      	subs	r4, r4, r5
 800a75e:	10a4      	asrs	r4, r4, #2
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	f001 fecc 	bl	800c500 <_init>
 800a768:	2600      	movs	r6, #0
 800a76a:	4d0a      	ldr	r5, [pc, #40]	@ (800a794 <__libc_init_array+0x40>)
 800a76c:	4c0a      	ldr	r4, [pc, #40]	@ (800a798 <__libc_init_array+0x44>)
 800a76e:	1b64      	subs	r4, r4, r5
 800a770:	10a4      	asrs	r4, r4, #2
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800cbe0 	.word	0x0800cbe0
 800a790:	0800cbe0 	.word	0x0800cbe0
 800a794:	0800cbe0 	.word	0x0800cbe0
 800a798:	0800cbe4 	.word	0x0800cbe4

0800a79c <memchr>:
 800a79c:	4603      	mov	r3, r0
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	b2c9      	uxtb	r1, r1
 800a7a2:	4402      	add	r2, r0
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	d101      	bne.n	800a7ae <memchr+0x12>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	e003      	b.n	800a7b6 <memchr+0x1a>
 800a7ae:	7804      	ldrb	r4, [r0, #0]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	428c      	cmp	r4, r1
 800a7b4:	d1f6      	bne.n	800a7a4 <memchr+0x8>
 800a7b6:	bd10      	pop	{r4, pc}

0800a7b8 <memcpy>:
 800a7b8:	440a      	add	r2, r1
 800a7ba:	4291      	cmp	r1, r2
 800a7bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a7c0:	d100      	bne.n	800a7c4 <memcpy+0xc>
 800a7c2:	4770      	bx	lr
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7ca:	4291      	cmp	r1, r2
 800a7cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d0:	d1f9      	bne.n	800a7c6 <memcpy+0xe>
 800a7d2:	bd10      	pop	{r4, pc}

0800a7d4 <quorem>:
 800a7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	6903      	ldr	r3, [r0, #16]
 800a7da:	690c      	ldr	r4, [r1, #16]
 800a7dc:	4607      	mov	r7, r0
 800a7de:	42a3      	cmp	r3, r4
 800a7e0:	db7e      	blt.n	800a8e0 <quorem+0x10c>
 800a7e2:	3c01      	subs	r4, #1
 800a7e4:	00a3      	lsls	r3, r4, #2
 800a7e6:	f100 0514 	add.w	r5, r0, #20
 800a7ea:	f101 0814 	add.w	r8, r1, #20
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7fe:	3301      	adds	r3, #1
 800a800:	429a      	cmp	r2, r3
 800a802:	fbb2 f6f3 	udiv	r6, r2, r3
 800a806:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a80a:	d32e      	bcc.n	800a86a <quorem+0x96>
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	46c4      	mov	ip, r8
 800a812:	46ae      	mov	lr, r5
 800a814:	46d3      	mov	fp, sl
 800a816:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a81a:	b298      	uxth	r0, r3
 800a81c:	fb06 a000 	mla	r0, r6, r0, sl
 800a820:	0c1b      	lsrs	r3, r3, #16
 800a822:	0c02      	lsrs	r2, r0, #16
 800a824:	fb06 2303 	mla	r3, r6, r3, r2
 800a828:	f8de 2000 	ldr.w	r2, [lr]
 800a82c:	b280      	uxth	r0, r0
 800a82e:	b292      	uxth	r2, r2
 800a830:	1a12      	subs	r2, r2, r0
 800a832:	445a      	add	r2, fp
 800a834:	f8de 0000 	ldr.w	r0, [lr]
 800a838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a842:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a846:	b292      	uxth	r2, r2
 800a848:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a84c:	45e1      	cmp	r9, ip
 800a84e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a852:	f84e 2b04 	str.w	r2, [lr], #4
 800a856:	d2de      	bcs.n	800a816 <quorem+0x42>
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	58eb      	ldr	r3, [r5, r3]
 800a85c:	b92b      	cbnz	r3, 800a86a <quorem+0x96>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	3b04      	subs	r3, #4
 800a862:	429d      	cmp	r5, r3
 800a864:	461a      	mov	r2, r3
 800a866:	d32f      	bcc.n	800a8c8 <quorem+0xf4>
 800a868:	613c      	str	r4, [r7, #16]
 800a86a:	4638      	mov	r0, r7
 800a86c:	f001 f87c 	bl	800b968 <__mcmp>
 800a870:	2800      	cmp	r0, #0
 800a872:	db25      	blt.n	800a8c0 <quorem+0xec>
 800a874:	4629      	mov	r1, r5
 800a876:	2000      	movs	r0, #0
 800a878:	f858 2b04 	ldr.w	r2, [r8], #4
 800a87c:	f8d1 c000 	ldr.w	ip, [r1]
 800a880:	fa1f fe82 	uxth.w	lr, r2
 800a884:	fa1f f38c 	uxth.w	r3, ip
 800a888:	eba3 030e 	sub.w	r3, r3, lr
 800a88c:	4403      	add	r3, r0
 800a88e:	0c12      	lsrs	r2, r2, #16
 800a890:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a894:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a898:	b29b      	uxth	r3, r3
 800a89a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a89e:	45c1      	cmp	r9, r8
 800a8a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8a4:	f841 3b04 	str.w	r3, [r1], #4
 800a8a8:	d2e6      	bcs.n	800a878 <quorem+0xa4>
 800a8aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8b2:	b922      	cbnz	r2, 800a8be <quorem+0xea>
 800a8b4:	3b04      	subs	r3, #4
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	d30b      	bcc.n	800a8d4 <quorem+0x100>
 800a8bc:	613c      	str	r4, [r7, #16]
 800a8be:	3601      	adds	r6, #1
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	b003      	add	sp, #12
 800a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	6812      	ldr	r2, [r2, #0]
 800a8ca:	3b04      	subs	r3, #4
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	d1cb      	bne.n	800a868 <quorem+0x94>
 800a8d0:	3c01      	subs	r4, #1
 800a8d2:	e7c6      	b.n	800a862 <quorem+0x8e>
 800a8d4:	6812      	ldr	r2, [r2, #0]
 800a8d6:	3b04      	subs	r3, #4
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d1ef      	bne.n	800a8bc <quorem+0xe8>
 800a8dc:	3c01      	subs	r4, #1
 800a8de:	e7ea      	b.n	800a8b6 <quorem+0xe2>
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e7ee      	b.n	800a8c2 <quorem+0xee>
 800a8e4:	0000      	movs	r0, r0
	...

0800a8e8 <_dtoa_r>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	461d      	mov	r5, r3
 800a8f0:	69c7      	ldr	r7, [r0, #28]
 800a8f2:	b097      	sub	sp, #92	@ 0x5c
 800a8f4:	4683      	mov	fp, r0
 800a8f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a8fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a8fc:	b97f      	cbnz	r7, 800a91e <_dtoa_r+0x36>
 800a8fe:	2010      	movs	r0, #16
 800a900:	f7fe ff1a 	bl	8009738 <malloc>
 800a904:	4602      	mov	r2, r0
 800a906:	f8cb 001c 	str.w	r0, [fp, #28]
 800a90a:	b920      	cbnz	r0, 800a916 <_dtoa_r+0x2e>
 800a90c:	21ef      	movs	r1, #239	@ 0xef
 800a90e:	4ba8      	ldr	r3, [pc, #672]	@ (800abb0 <_dtoa_r+0x2c8>)
 800a910:	48a8      	ldr	r0, [pc, #672]	@ (800abb4 <_dtoa_r+0x2cc>)
 800a912:	f001 fd0f 	bl	800c334 <__assert_func>
 800a916:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a91a:	6007      	str	r7, [r0, #0]
 800a91c:	60c7      	str	r7, [r0, #12]
 800a91e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	b159      	cbz	r1, 800a93e <_dtoa_r+0x56>
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	2301      	movs	r3, #1
 800a92a:	4093      	lsls	r3, r2
 800a92c:	604a      	str	r2, [r1, #4]
 800a92e:	608b      	str	r3, [r1, #8]
 800a930:	4658      	mov	r0, fp
 800a932:	f000 fde1 	bl	800b4f8 <_Bfree>
 800a936:	2200      	movs	r2, #0
 800a938:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	1e2b      	subs	r3, r5, #0
 800a940:	bfaf      	iteee	ge
 800a942:	2300      	movge	r3, #0
 800a944:	2201      	movlt	r2, #1
 800a946:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a94a:	9303      	strlt	r3, [sp, #12]
 800a94c:	bfa8      	it	ge
 800a94e:	6033      	strge	r3, [r6, #0]
 800a950:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a954:	4b98      	ldr	r3, [pc, #608]	@ (800abb8 <_dtoa_r+0x2d0>)
 800a956:	bfb8      	it	lt
 800a958:	6032      	strlt	r2, [r6, #0]
 800a95a:	ea33 0308 	bics.w	r3, r3, r8
 800a95e:	d112      	bne.n	800a986 <_dtoa_r+0x9e>
 800a960:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a964:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a96c:	4323      	orrs	r3, r4
 800a96e:	f000 8550 	beq.w	800b412 <_dtoa_r+0xb2a>
 800a972:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a974:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800abbc <_dtoa_r+0x2d4>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 8552 	beq.w	800b422 <_dtoa_r+0xb3a>
 800a97e:	f10a 0303 	add.w	r3, sl, #3
 800a982:	f000 bd4c 	b.w	800b41e <_dtoa_r+0xb36>
 800a986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a98a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a98e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a992:	2200      	movs	r2, #0
 800a994:	2300      	movs	r3, #0
 800a996:	f7f6 f807 	bl	80009a8 <__aeabi_dcmpeq>
 800a99a:	4607      	mov	r7, r0
 800a99c:	b158      	cbz	r0, 800a9b6 <_dtoa_r+0xce>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a9a6:	b113      	cbz	r3, 800a9ae <_dtoa_r+0xc6>
 800a9a8:	4b85      	ldr	r3, [pc, #532]	@ (800abc0 <_dtoa_r+0x2d8>)
 800a9aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800abc4 <_dtoa_r+0x2dc>
 800a9b2:	f000 bd36 	b.w	800b422 <_dtoa_r+0xb3a>
 800a9b6:	ab14      	add	r3, sp, #80	@ 0x50
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	ab15      	add	r3, sp, #84	@ 0x54
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	4658      	mov	r0, fp
 800a9c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9c4:	f001 f880 	bl	800bac8 <__d2b>
 800a9c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a9cc:	4681      	mov	r9, r0
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	d077      	beq.n	800aac2 <_dtoa_r+0x1da>
 800a9d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9e8:	9712      	str	r7, [sp, #72]	@ 0x48
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4b76      	ldr	r3, [pc, #472]	@ (800abc8 <_dtoa_r+0x2e0>)
 800a9f0:	f7f5 fbba 	bl	8000168 <__aeabi_dsub>
 800a9f4:	a368      	add	r3, pc, #416	@ (adr r3, 800ab98 <_dtoa_r+0x2b0>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fd6d 	bl	80004d8 <__aeabi_dmul>
 800a9fe:	a368      	add	r3, pc, #416	@ (adr r3, 800aba0 <_dtoa_r+0x2b8>)
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fbb2 	bl	800016c <__adddf3>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	f7f5 fcf9 	bl	8000404 <__aeabi_i2d>
 800aa12:	a365      	add	r3, pc, #404	@ (adr r3, 800aba8 <_dtoa_r+0x2c0>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4620      	mov	r0, r4
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7f5 fba2 	bl	800016c <__adddf3>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	f7f6 f804 	bl	8000a38 <__aeabi_d2iz>
 800aa30:	2200      	movs	r2, #0
 800aa32:	4607      	mov	r7, r0
 800aa34:	2300      	movs	r3, #0
 800aa36:	4620      	mov	r0, r4
 800aa38:	4629      	mov	r1, r5
 800aa3a:	f7f5 ffbf 	bl	80009bc <__aeabi_dcmplt>
 800aa3e:	b140      	cbz	r0, 800aa52 <_dtoa_r+0x16a>
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7f5 fcdf 	bl	8000404 <__aeabi_i2d>
 800aa46:	4622      	mov	r2, r4
 800aa48:	462b      	mov	r3, r5
 800aa4a:	f7f5 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 800aa4e:	b900      	cbnz	r0, 800aa52 <_dtoa_r+0x16a>
 800aa50:	3f01      	subs	r7, #1
 800aa52:	2f16      	cmp	r7, #22
 800aa54:	d853      	bhi.n	800aafe <_dtoa_r+0x216>
 800aa56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa5a:	4b5c      	ldr	r3, [pc, #368]	@ (800abcc <_dtoa_r+0x2e4>)
 800aa5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f7f5 ffaa 	bl	80009bc <__aeabi_dcmplt>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d04a      	beq.n	800ab02 <_dtoa_r+0x21a>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	3f01      	subs	r7, #1
 800aa70:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa74:	1b9b      	subs	r3, r3, r6
 800aa76:	1e5a      	subs	r2, r3, #1
 800aa78:	bf46      	itte	mi
 800aa7a:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa7e:	2300      	movmi	r3, #0
 800aa80:	f04f 0800 	movpl.w	r8, #0
 800aa84:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa86:	bf48      	it	mi
 800aa88:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800aa8a:	2f00      	cmp	r7, #0
 800aa8c:	db3b      	blt.n	800ab06 <_dtoa_r+0x21e>
 800aa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa90:	970e      	str	r7, [sp, #56]	@ 0x38
 800aa92:	443b      	add	r3, r7
 800aa94:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa96:	2300      	movs	r3, #0
 800aa98:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d866      	bhi.n	800ab6e <_dtoa_r+0x286>
 800aaa0:	2b05      	cmp	r3, #5
 800aaa2:	bfc4      	itt	gt
 800aaa4:	3b04      	subgt	r3, #4
 800aaa6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800aaa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aaaa:	bfc8      	it	gt
 800aaac:	2400      	movgt	r4, #0
 800aaae:	f1a3 0302 	sub.w	r3, r3, #2
 800aab2:	bfd8      	it	le
 800aab4:	2401      	movle	r4, #1
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d864      	bhi.n	800ab84 <_dtoa_r+0x29c>
 800aaba:	e8df f003 	tbb	[pc, r3]
 800aabe:	382b      	.short	0x382b
 800aac0:	5636      	.short	0x5636
 800aac2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aac6:	441e      	add	r6, r3
 800aac8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aacc:	2b20      	cmp	r3, #32
 800aace:	bfc1      	itttt	gt
 800aad0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aad4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aad8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aadc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aae0:	bfd6      	itet	le
 800aae2:	f1c3 0320 	rsble	r3, r3, #32
 800aae6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aaea:	fa04 f003 	lslle.w	r0, r4, r3
 800aaee:	f7f5 fc79 	bl	80003e4 <__aeabi_ui2d>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aaf8:	3e01      	subs	r6, #1
 800aafa:	9212      	str	r2, [sp, #72]	@ 0x48
 800aafc:	e775      	b.n	800a9ea <_dtoa_r+0x102>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e7b6      	b.n	800aa70 <_dtoa_r+0x188>
 800ab02:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab04:	e7b5      	b.n	800aa72 <_dtoa_r+0x18a>
 800ab06:	427b      	negs	r3, r7
 800ab08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	eba8 0807 	sub.w	r8, r8, r7
 800ab10:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab12:	e7c2      	b.n	800aa9a <_dtoa_r+0x1b2>
 800ab14:	2300      	movs	r3, #0
 800ab16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	dc35      	bgt.n	800ab8a <_dtoa_r+0x2a2>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	461a      	mov	r2, r3
 800ab22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab26:	9221      	str	r2, [sp, #132]	@ 0x84
 800ab28:	e00b      	b.n	800ab42 <_dtoa_r+0x25a>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e7f3      	b.n	800ab16 <_dtoa_r+0x22e>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab34:	18fb      	adds	r3, r7, r3
 800ab36:	9308      	str	r3, [sp, #32]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	9307      	str	r3, [sp, #28]
 800ab3e:	bfb8      	it	lt
 800ab40:	2301      	movlt	r3, #1
 800ab42:	2100      	movs	r1, #0
 800ab44:	2204      	movs	r2, #4
 800ab46:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab4a:	f102 0514 	add.w	r5, r2, #20
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	d91f      	bls.n	800ab92 <_dtoa_r+0x2aa>
 800ab52:	6041      	str	r1, [r0, #4]
 800ab54:	4658      	mov	r0, fp
 800ab56:	f000 fc8f 	bl	800b478 <_Balloc>
 800ab5a:	4682      	mov	sl, r0
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d139      	bne.n	800abd4 <_dtoa_r+0x2ec>
 800ab60:	4602      	mov	r2, r0
 800ab62:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab66:	4b1a      	ldr	r3, [pc, #104]	@ (800abd0 <_dtoa_r+0x2e8>)
 800ab68:	e6d2      	b.n	800a910 <_dtoa_r+0x28>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e7e0      	b.n	800ab30 <_dtoa_r+0x248>
 800ab6e:	2401      	movs	r4, #1
 800ab70:	2300      	movs	r3, #0
 800ab72:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab74:	9320      	str	r3, [sp, #128]	@ 0x80
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab80:	2312      	movs	r3, #18
 800ab82:	e7d0      	b.n	800ab26 <_dtoa_r+0x23e>
 800ab84:	2301      	movs	r3, #1
 800ab86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab88:	e7f5      	b.n	800ab76 <_dtoa_r+0x28e>
 800ab8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab90:	e7d7      	b.n	800ab42 <_dtoa_r+0x25a>
 800ab92:	3101      	adds	r1, #1
 800ab94:	0052      	lsls	r2, r2, #1
 800ab96:	e7d8      	b.n	800ab4a <_dtoa_r+0x262>
 800ab98:	636f4361 	.word	0x636f4361
 800ab9c:	3fd287a7 	.word	0x3fd287a7
 800aba0:	8b60c8b3 	.word	0x8b60c8b3
 800aba4:	3fc68a28 	.word	0x3fc68a28
 800aba8:	509f79fb 	.word	0x509f79fb
 800abac:	3fd34413 	.word	0x3fd34413
 800abb0:	0800c8a7 	.word	0x0800c8a7
 800abb4:	0800c8be 	.word	0x0800c8be
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	0800c8a3 	.word	0x0800c8a3
 800abc0:	0800c877 	.word	0x0800c877
 800abc4:	0800c876 	.word	0x0800c876
 800abc8:	3ff80000 	.word	0x3ff80000
 800abcc:	0800c9b8 	.word	0x0800c9b8
 800abd0:	0800c916 	.word	0x0800c916
 800abd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abd8:	6018      	str	r0, [r3, #0]
 800abda:	9b07      	ldr	r3, [sp, #28]
 800abdc:	2b0e      	cmp	r3, #14
 800abde:	f200 80a4 	bhi.w	800ad2a <_dtoa_r+0x442>
 800abe2:	2c00      	cmp	r4, #0
 800abe4:	f000 80a1 	beq.w	800ad2a <_dtoa_r+0x442>
 800abe8:	2f00      	cmp	r7, #0
 800abea:	dd33      	ble.n	800ac54 <_dtoa_r+0x36c>
 800abec:	4b86      	ldr	r3, [pc, #536]	@ (800ae08 <_dtoa_r+0x520>)
 800abee:	f007 020f 	and.w	r2, r7, #15
 800abf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf6:	05f8      	lsls	r0, r7, #23
 800abf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abfc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac00:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac04:	d516      	bpl.n	800ac34 <_dtoa_r+0x34c>
 800ac06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac0a:	4b80      	ldr	r3, [pc, #512]	@ (800ae0c <_dtoa_r+0x524>)
 800ac0c:	2603      	movs	r6, #3
 800ac0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac12:	f7f5 fd8b 	bl	800072c <__aeabi_ddiv>
 800ac16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1a:	f004 040f 	and.w	r4, r4, #15
 800ac1e:	4d7b      	ldr	r5, [pc, #492]	@ (800ae0c <_dtoa_r+0x524>)
 800ac20:	b954      	cbnz	r4, 800ac38 <_dtoa_r+0x350>
 800ac22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac2a:	f7f5 fd7f 	bl	800072c <__aeabi_ddiv>
 800ac2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac32:	e028      	b.n	800ac86 <_dtoa_r+0x39e>
 800ac34:	2602      	movs	r6, #2
 800ac36:	e7f2      	b.n	800ac1e <_dtoa_r+0x336>
 800ac38:	07e1      	lsls	r1, r4, #31
 800ac3a:	d508      	bpl.n	800ac4e <_dtoa_r+0x366>
 800ac3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac40:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac44:	f7f5 fc48 	bl	80004d8 <__aeabi_dmul>
 800ac48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac4c:	3601      	adds	r6, #1
 800ac4e:	1064      	asrs	r4, r4, #1
 800ac50:	3508      	adds	r5, #8
 800ac52:	e7e5      	b.n	800ac20 <_dtoa_r+0x338>
 800ac54:	f000 80d2 	beq.w	800adfc <_dtoa_r+0x514>
 800ac58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac5c:	427c      	negs	r4, r7
 800ac5e:	4b6a      	ldr	r3, [pc, #424]	@ (800ae08 <_dtoa_r+0x520>)
 800ac60:	f004 020f 	and.w	r2, r4, #15
 800ac64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 fc34 	bl	80004d8 <__aeabi_dmul>
 800ac70:	2602      	movs	r6, #2
 800ac72:	2300      	movs	r3, #0
 800ac74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac78:	4d64      	ldr	r5, [pc, #400]	@ (800ae0c <_dtoa_r+0x524>)
 800ac7a:	1124      	asrs	r4, r4, #4
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	f040 80b2 	bne.w	800ade6 <_dtoa_r+0x4fe>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1d3      	bne.n	800ac2e <_dtoa_r+0x346>
 800ac86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 80b7 	beq.w	800ae00 <_dtoa_r+0x518>
 800ac92:	2200      	movs	r2, #0
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	4b5d      	ldr	r3, [pc, #372]	@ (800ae10 <_dtoa_r+0x528>)
 800ac9a:	f7f5 fe8f 	bl	80009bc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f000 80ae 	beq.w	800ae00 <_dtoa_r+0x518>
 800aca4:	9b07      	ldr	r3, [sp, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 80aa 	beq.w	800ae00 <_dtoa_r+0x518>
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dd37      	ble.n	800ad22 <_dtoa_r+0x43a>
 800acb2:	1e7b      	subs	r3, r7, #1
 800acb4:	4620      	mov	r0, r4
 800acb6:	9304      	str	r3, [sp, #16]
 800acb8:	2200      	movs	r2, #0
 800acba:	4629      	mov	r1, r5
 800acbc:	4b55      	ldr	r3, [pc, #340]	@ (800ae14 <_dtoa_r+0x52c>)
 800acbe:	f7f5 fc0b 	bl	80004d8 <__aeabi_dmul>
 800acc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc6:	9c08      	ldr	r4, [sp, #32]
 800acc8:	3601      	adds	r6, #1
 800acca:	4630      	mov	r0, r6
 800accc:	f7f5 fb9a 	bl	8000404 <__aeabi_i2d>
 800acd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acd4:	f7f5 fc00 	bl	80004d8 <__aeabi_dmul>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b4f      	ldr	r3, [pc, #316]	@ (800ae18 <_dtoa_r+0x530>)
 800acdc:	f7f5 fa46 	bl	800016c <__adddf3>
 800ace0:	4605      	mov	r5, r0
 800ace2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ace6:	2c00      	cmp	r4, #0
 800ace8:	f040 809a 	bne.w	800ae20 <_dtoa_r+0x538>
 800acec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf0:	2200      	movs	r2, #0
 800acf2:	4b4a      	ldr	r3, [pc, #296]	@ (800ae1c <_dtoa_r+0x534>)
 800acf4:	f7f5 fa38 	bl	8000168 <__aeabi_dsub>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad00:	462a      	mov	r2, r5
 800ad02:	4633      	mov	r3, r6
 800ad04:	f7f5 fe78 	bl	80009f8 <__aeabi_dcmpgt>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f040 828e 	bne.w	800b22a <_dtoa_r+0x942>
 800ad0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad12:	462a      	mov	r2, r5
 800ad14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad18:	f7f5 fe50 	bl	80009bc <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f040 8127 	bne.w	800af70 <_dtoa_r+0x688>
 800ad22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f2c0 8163 	blt.w	800aff8 <_dtoa_r+0x710>
 800ad32:	2f0e      	cmp	r7, #14
 800ad34:	f300 8160 	bgt.w	800aff8 <_dtoa_r+0x710>
 800ad38:	4b33      	ldr	r3, [pc, #204]	@ (800ae08 <_dtoa_r+0x520>)
 800ad3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da03      	bge.n	800ad54 <_dtoa_r+0x46c>
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f340 8100 	ble.w	800af54 <_dtoa_r+0x66c>
 800ad54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad58:	4656      	mov	r6, sl
 800ad5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 fce3 	bl	800072c <__aeabi_ddiv>
 800ad66:	f7f5 fe67 	bl	8000a38 <__aeabi_d2iz>
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	f7f5 fb4a 	bl	8000404 <__aeabi_i2d>
 800ad70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad74:	f7f5 fbb0 	bl	80004d8 <__aeabi_dmul>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f7f5 f9f2 	bl	8000168 <__aeabi_dsub>
 800ad84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad88:	9d07      	ldr	r5, [sp, #28]
 800ad8a:	f806 4b01 	strb.w	r4, [r6], #1
 800ad8e:	eba6 040a 	sub.w	r4, r6, sl
 800ad92:	42a5      	cmp	r5, r4
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	f040 8116 	bne.w	800afc8 <_dtoa_r+0x6e0>
 800ad9c:	f7f5 f9e6 	bl	800016c <__adddf3>
 800ada0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	f7f5 fe26 	bl	80009f8 <__aeabi_dcmpgt>
 800adac:	2800      	cmp	r0, #0
 800adae:	f040 80f8 	bne.w	800afa2 <_dtoa_r+0x6ba>
 800adb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fdf5 	bl	80009a8 <__aeabi_dcmpeq>
 800adbe:	b118      	cbz	r0, 800adc8 <_dtoa_r+0x4e0>
 800adc0:	f018 0f01 	tst.w	r8, #1
 800adc4:	f040 80ed 	bne.w	800afa2 <_dtoa_r+0x6ba>
 800adc8:	4649      	mov	r1, r9
 800adca:	4658      	mov	r0, fp
 800adcc:	f000 fb94 	bl	800b4f8 <_Bfree>
 800add0:	2300      	movs	r3, #0
 800add2:	7033      	strb	r3, [r6, #0]
 800add4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800add6:	3701      	adds	r7, #1
 800add8:	601f      	str	r7, [r3, #0]
 800adda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8320 	beq.w	800b422 <_dtoa_r+0xb3a>
 800ade2:	601e      	str	r6, [r3, #0]
 800ade4:	e31d      	b.n	800b422 <_dtoa_r+0xb3a>
 800ade6:	07e2      	lsls	r2, r4, #31
 800ade8:	d505      	bpl.n	800adf6 <_dtoa_r+0x50e>
 800adea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adee:	f7f5 fb73 	bl	80004d8 <__aeabi_dmul>
 800adf2:	2301      	movs	r3, #1
 800adf4:	3601      	adds	r6, #1
 800adf6:	1064      	asrs	r4, r4, #1
 800adf8:	3508      	adds	r5, #8
 800adfa:	e73f      	b.n	800ac7c <_dtoa_r+0x394>
 800adfc:	2602      	movs	r6, #2
 800adfe:	e742      	b.n	800ac86 <_dtoa_r+0x39e>
 800ae00:	9c07      	ldr	r4, [sp, #28]
 800ae02:	9704      	str	r7, [sp, #16]
 800ae04:	e761      	b.n	800acca <_dtoa_r+0x3e2>
 800ae06:	bf00      	nop
 800ae08:	0800c9b8 	.word	0x0800c9b8
 800ae0c:	0800c990 	.word	0x0800c990
 800ae10:	3ff00000 	.word	0x3ff00000
 800ae14:	40240000 	.word	0x40240000
 800ae18:	401c0000 	.word	0x401c0000
 800ae1c:	40140000 	.word	0x40140000
 800ae20:	4b70      	ldr	r3, [pc, #448]	@ (800afe4 <_dtoa_r+0x6fc>)
 800ae22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae2c:	4454      	add	r4, sl
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d045      	beq.n	800aebe <_dtoa_r+0x5d6>
 800ae32:	2000      	movs	r0, #0
 800ae34:	496c      	ldr	r1, [pc, #432]	@ (800afe8 <_dtoa_r+0x700>)
 800ae36:	f7f5 fc79 	bl	800072c <__aeabi_ddiv>
 800ae3a:	4633      	mov	r3, r6
 800ae3c:	462a      	mov	r2, r5
 800ae3e:	f7f5 f993 	bl	8000168 <__aeabi_dsub>
 800ae42:	4656      	mov	r6, sl
 800ae44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae4c:	f7f5 fdf4 	bl	8000a38 <__aeabi_d2iz>
 800ae50:	4605      	mov	r5, r0
 800ae52:	f7f5 fad7 	bl	8000404 <__aeabi_i2d>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae5e:	f7f5 f983 	bl	8000168 <__aeabi_dsub>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	3530      	adds	r5, #48	@ 0x30
 800ae68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae70:	f806 5b01 	strb.w	r5, [r6], #1
 800ae74:	f7f5 fda2 	bl	80009bc <__aeabi_dcmplt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d163      	bne.n	800af44 <_dtoa_r+0x65c>
 800ae7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae80:	2000      	movs	r0, #0
 800ae82:	495a      	ldr	r1, [pc, #360]	@ (800afec <_dtoa_r+0x704>)
 800ae84:	f7f5 f970 	bl	8000168 <__aeabi_dsub>
 800ae88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae8c:	f7f5 fd96 	bl	80009bc <__aeabi_dcmplt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f040 8087 	bne.w	800afa4 <_dtoa_r+0x6bc>
 800ae96:	42a6      	cmp	r6, r4
 800ae98:	f43f af43 	beq.w	800ad22 <_dtoa_r+0x43a>
 800ae9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aea0:	2200      	movs	r2, #0
 800aea2:	4b53      	ldr	r3, [pc, #332]	@ (800aff0 <_dtoa_r+0x708>)
 800aea4:	f7f5 fb18 	bl	80004d8 <__aeabi_dmul>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aeae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeb2:	4b4f      	ldr	r3, [pc, #316]	@ (800aff0 <_dtoa_r+0x708>)
 800aeb4:	f7f5 fb10 	bl	80004d8 <__aeabi_dmul>
 800aeb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aebc:	e7c4      	b.n	800ae48 <_dtoa_r+0x560>
 800aebe:	4631      	mov	r1, r6
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7f5 fb09 	bl	80004d8 <__aeabi_dmul>
 800aec6:	4656      	mov	r6, sl
 800aec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aecc:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed2:	f7f5 fdb1 	bl	8000a38 <__aeabi_d2iz>
 800aed6:	4605      	mov	r5, r0
 800aed8:	f7f5 fa94 	bl	8000404 <__aeabi_i2d>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee4:	f7f5 f940 	bl	8000168 <__aeabi_dsub>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	3530      	adds	r5, #48	@ 0x30
 800aeee:	f806 5b01 	strb.w	r5, [r6], #1
 800aef2:	42a6      	cmp	r6, r4
 800aef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aef8:	f04f 0200 	mov.w	r2, #0
 800aefc:	d124      	bne.n	800af48 <_dtoa_r+0x660>
 800aefe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af02:	4b39      	ldr	r3, [pc, #228]	@ (800afe8 <_dtoa_r+0x700>)
 800af04:	f7f5 f932 	bl	800016c <__adddf3>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af10:	f7f5 fd72 	bl	80009f8 <__aeabi_dcmpgt>
 800af14:	2800      	cmp	r0, #0
 800af16:	d145      	bne.n	800afa4 <_dtoa_r+0x6bc>
 800af18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af1c:	2000      	movs	r0, #0
 800af1e:	4932      	ldr	r1, [pc, #200]	@ (800afe8 <_dtoa_r+0x700>)
 800af20:	f7f5 f922 	bl	8000168 <__aeabi_dsub>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2c:	f7f5 fd46 	bl	80009bc <__aeabi_dcmplt>
 800af30:	2800      	cmp	r0, #0
 800af32:	f43f aef6 	beq.w	800ad22 <_dtoa_r+0x43a>
 800af36:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800af38:	1e73      	subs	r3, r6, #1
 800af3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af40:	2b30      	cmp	r3, #48	@ 0x30
 800af42:	d0f8      	beq.n	800af36 <_dtoa_r+0x64e>
 800af44:	9f04      	ldr	r7, [sp, #16]
 800af46:	e73f      	b.n	800adc8 <_dtoa_r+0x4e0>
 800af48:	4b29      	ldr	r3, [pc, #164]	@ (800aff0 <_dtoa_r+0x708>)
 800af4a:	f7f5 fac5 	bl	80004d8 <__aeabi_dmul>
 800af4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af52:	e7bc      	b.n	800aece <_dtoa_r+0x5e6>
 800af54:	d10c      	bne.n	800af70 <_dtoa_r+0x688>
 800af56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af5a:	2200      	movs	r2, #0
 800af5c:	4b25      	ldr	r3, [pc, #148]	@ (800aff4 <_dtoa_r+0x70c>)
 800af5e:	f7f5 fabb 	bl	80004d8 <__aeabi_dmul>
 800af62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af66:	f7f5 fd3d 	bl	80009e4 <__aeabi_dcmpge>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f000 815b 	beq.w	800b226 <_dtoa_r+0x93e>
 800af70:	2400      	movs	r4, #0
 800af72:	4625      	mov	r5, r4
 800af74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af76:	4656      	mov	r6, sl
 800af78:	43db      	mvns	r3, r3
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	2700      	movs	r7, #0
 800af7e:	4621      	mov	r1, r4
 800af80:	4658      	mov	r0, fp
 800af82:	f000 fab9 	bl	800b4f8 <_Bfree>
 800af86:	2d00      	cmp	r5, #0
 800af88:	d0dc      	beq.n	800af44 <_dtoa_r+0x65c>
 800af8a:	b12f      	cbz	r7, 800af98 <_dtoa_r+0x6b0>
 800af8c:	42af      	cmp	r7, r5
 800af8e:	d003      	beq.n	800af98 <_dtoa_r+0x6b0>
 800af90:	4639      	mov	r1, r7
 800af92:	4658      	mov	r0, fp
 800af94:	f000 fab0 	bl	800b4f8 <_Bfree>
 800af98:	4629      	mov	r1, r5
 800af9a:	4658      	mov	r0, fp
 800af9c:	f000 faac 	bl	800b4f8 <_Bfree>
 800afa0:	e7d0      	b.n	800af44 <_dtoa_r+0x65c>
 800afa2:	9704      	str	r7, [sp, #16]
 800afa4:	4633      	mov	r3, r6
 800afa6:	461e      	mov	r6, r3
 800afa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afac:	2a39      	cmp	r2, #57	@ 0x39
 800afae:	d107      	bne.n	800afc0 <_dtoa_r+0x6d8>
 800afb0:	459a      	cmp	sl, r3
 800afb2:	d1f8      	bne.n	800afa6 <_dtoa_r+0x6be>
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	3201      	adds	r2, #1
 800afb8:	9204      	str	r2, [sp, #16]
 800afba:	2230      	movs	r2, #48	@ 0x30
 800afbc:	f88a 2000 	strb.w	r2, [sl]
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	3201      	adds	r2, #1
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	e7bd      	b.n	800af44 <_dtoa_r+0x65c>
 800afc8:	2200      	movs	r2, #0
 800afca:	4b09      	ldr	r3, [pc, #36]	@ (800aff0 <_dtoa_r+0x708>)
 800afcc:	f7f5 fa84 	bl	80004d8 <__aeabi_dmul>
 800afd0:	2200      	movs	r2, #0
 800afd2:	2300      	movs	r3, #0
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	f7f5 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 800afdc:	2800      	cmp	r0, #0
 800afde:	f43f aebc 	beq.w	800ad5a <_dtoa_r+0x472>
 800afe2:	e6f1      	b.n	800adc8 <_dtoa_r+0x4e0>
 800afe4:	0800c9b8 	.word	0x0800c9b8
 800afe8:	3fe00000 	.word	0x3fe00000
 800afec:	3ff00000 	.word	0x3ff00000
 800aff0:	40240000 	.word	0x40240000
 800aff4:	40140000 	.word	0x40140000
 800aff8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800affa:	2a00      	cmp	r2, #0
 800affc:	f000 80db 	beq.w	800b1b6 <_dtoa_r+0x8ce>
 800b000:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b002:	2a01      	cmp	r2, #1
 800b004:	f300 80bf 	bgt.w	800b186 <_dtoa_r+0x89e>
 800b008:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	f000 80b7 	beq.w	800b17e <_dtoa_r+0x896>
 800b010:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b014:	4646      	mov	r6, r8
 800b016:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b01a:	2101      	movs	r1, #1
 800b01c:	441a      	add	r2, r3
 800b01e:	4658      	mov	r0, fp
 800b020:	4498      	add	r8, r3
 800b022:	9209      	str	r2, [sp, #36]	@ 0x24
 800b024:	f000 fb1c 	bl	800b660 <__i2b>
 800b028:	4605      	mov	r5, r0
 800b02a:	b15e      	cbz	r6, 800b044 <_dtoa_r+0x75c>
 800b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dd08      	ble.n	800b044 <_dtoa_r+0x75c>
 800b032:	42b3      	cmp	r3, r6
 800b034:	bfa8      	it	ge
 800b036:	4633      	movge	r3, r6
 800b038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b03a:	eba8 0803 	sub.w	r8, r8, r3
 800b03e:	1af6      	subs	r6, r6, r3
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	9309      	str	r3, [sp, #36]	@ 0x24
 800b044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b046:	b1f3      	cbz	r3, 800b086 <_dtoa_r+0x79e>
 800b048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 80b7 	beq.w	800b1be <_dtoa_r+0x8d6>
 800b050:	b18c      	cbz	r4, 800b076 <_dtoa_r+0x78e>
 800b052:	4629      	mov	r1, r5
 800b054:	4622      	mov	r2, r4
 800b056:	4658      	mov	r0, fp
 800b058:	f000 fbc0 	bl	800b7dc <__pow5mult>
 800b05c:	464a      	mov	r2, r9
 800b05e:	4601      	mov	r1, r0
 800b060:	4605      	mov	r5, r0
 800b062:	4658      	mov	r0, fp
 800b064:	f000 fb12 	bl	800b68c <__multiply>
 800b068:	4649      	mov	r1, r9
 800b06a:	9004      	str	r0, [sp, #16]
 800b06c:	4658      	mov	r0, fp
 800b06e:	f000 fa43 	bl	800b4f8 <_Bfree>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	4699      	mov	r9, r3
 800b076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b078:	1b1a      	subs	r2, r3, r4
 800b07a:	d004      	beq.n	800b086 <_dtoa_r+0x79e>
 800b07c:	4649      	mov	r1, r9
 800b07e:	4658      	mov	r0, fp
 800b080:	f000 fbac 	bl	800b7dc <__pow5mult>
 800b084:	4681      	mov	r9, r0
 800b086:	2101      	movs	r1, #1
 800b088:	4658      	mov	r0, fp
 800b08a:	f000 fae9 	bl	800b660 <__i2b>
 800b08e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b090:	4604      	mov	r4, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 81c9 	beq.w	800b42a <_dtoa_r+0xb42>
 800b098:	461a      	mov	r2, r3
 800b09a:	4601      	mov	r1, r0
 800b09c:	4658      	mov	r0, fp
 800b09e:	f000 fb9d 	bl	800b7dc <__pow5mult>
 800b0a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0a4:	4604      	mov	r4, r0
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	f300 808f 	bgt.w	800b1ca <_dtoa_r+0x8e2>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 8087 	bne.w	800b1c2 <_dtoa_r+0x8da>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f040 8083 	bne.w	800b1c6 <_dtoa_r+0x8de>
 800b0c0:	9b03      	ldr	r3, [sp, #12]
 800b0c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0c6:	0d1b      	lsrs	r3, r3, #20
 800b0c8:	051b      	lsls	r3, r3, #20
 800b0ca:	b12b      	cbz	r3, 800b0d8 <_dtoa_r+0x7f0>
 800b0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ce:	f108 0801 	add.w	r8, r8, #1
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 81aa 	beq.w	800b436 <_dtoa_r+0xb4e>
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0e8:	6918      	ldr	r0, [r3, #16]
 800b0ea:	f000 fa6d 	bl	800b5c8 <__hi0bits>
 800b0ee:	f1c0 0020 	rsb	r0, r0, #32
 800b0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f4:	4418      	add	r0, r3
 800b0f6:	f010 001f 	ands.w	r0, r0, #31
 800b0fa:	d071      	beq.n	800b1e0 <_dtoa_r+0x8f8>
 800b0fc:	f1c0 0320 	rsb	r3, r0, #32
 800b100:	2b04      	cmp	r3, #4
 800b102:	dd65      	ble.n	800b1d0 <_dtoa_r+0x8e8>
 800b104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b106:	f1c0 001c 	rsb	r0, r0, #28
 800b10a:	4403      	add	r3, r0
 800b10c:	4480      	add	r8, r0
 800b10e:	4406      	add	r6, r0
 800b110:	9309      	str	r3, [sp, #36]	@ 0x24
 800b112:	f1b8 0f00 	cmp.w	r8, #0
 800b116:	dd05      	ble.n	800b124 <_dtoa_r+0x83c>
 800b118:	4649      	mov	r1, r9
 800b11a:	4642      	mov	r2, r8
 800b11c:	4658      	mov	r0, fp
 800b11e:	f000 fbb7 	bl	800b890 <__lshift>
 800b122:	4681      	mov	r9, r0
 800b124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd05      	ble.n	800b136 <_dtoa_r+0x84e>
 800b12a:	4621      	mov	r1, r4
 800b12c:	461a      	mov	r2, r3
 800b12e:	4658      	mov	r0, fp
 800b130:	f000 fbae 	bl	800b890 <__lshift>
 800b134:	4604      	mov	r4, r0
 800b136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d053      	beq.n	800b1e4 <_dtoa_r+0x8fc>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4648      	mov	r0, r9
 800b140:	f000 fc12 	bl	800b968 <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	da4d      	bge.n	800b1e4 <_dtoa_r+0x8fc>
 800b148:	1e7b      	subs	r3, r7, #1
 800b14a:	4649      	mov	r1, r9
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	220a      	movs	r2, #10
 800b150:	2300      	movs	r3, #0
 800b152:	4658      	mov	r0, fp
 800b154:	f000 f9f2 	bl	800b53c <__multadd>
 800b158:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b15a:	4681      	mov	r9, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 816c 	beq.w	800b43a <_dtoa_r+0xb52>
 800b162:	2300      	movs	r3, #0
 800b164:	4629      	mov	r1, r5
 800b166:	220a      	movs	r2, #10
 800b168:	4658      	mov	r0, fp
 800b16a:	f000 f9e7 	bl	800b53c <__multadd>
 800b16e:	9b08      	ldr	r3, [sp, #32]
 800b170:	4605      	mov	r5, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	dc61      	bgt.n	800b23a <_dtoa_r+0x952>
 800b176:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b178:	2b02      	cmp	r3, #2
 800b17a:	dc3b      	bgt.n	800b1f4 <_dtoa_r+0x90c>
 800b17c:	e05d      	b.n	800b23a <_dtoa_r+0x952>
 800b17e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b180:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b184:	e746      	b.n	800b014 <_dtoa_r+0x72c>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	1e5c      	subs	r4, r3, #1
 800b18a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	bfbf      	itttt	lt
 800b190:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b192:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b194:	1ae3      	sublt	r3, r4, r3
 800b196:	18d2      	addlt	r2, r2, r3
 800b198:	bfa8      	it	ge
 800b19a:	1b1c      	subge	r4, r3, r4
 800b19c:	9b07      	ldr	r3, [sp, #28]
 800b19e:	bfbe      	ittt	lt
 800b1a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b1a4:	2400      	movlt	r4, #0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfb5      	itete	lt
 800b1aa:	eba8 0603 	sublt.w	r6, r8, r3
 800b1ae:	4646      	movge	r6, r8
 800b1b0:	2300      	movlt	r3, #0
 800b1b2:	9b07      	ldrge	r3, [sp, #28]
 800b1b4:	e730      	b.n	800b018 <_dtoa_r+0x730>
 800b1b6:	4646      	mov	r6, r8
 800b1b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1bc:	e735      	b.n	800b02a <_dtoa_r+0x742>
 800b1be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1c0:	e75c      	b.n	800b07c <_dtoa_r+0x794>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e788      	b.n	800b0d8 <_dtoa_r+0x7f0>
 800b1c6:	9b02      	ldr	r3, [sp, #8]
 800b1c8:	e786      	b.n	800b0d8 <_dtoa_r+0x7f0>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ce:	e788      	b.n	800b0e2 <_dtoa_r+0x7fa>
 800b1d0:	d09f      	beq.n	800b112 <_dtoa_r+0x82a>
 800b1d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1d4:	331c      	adds	r3, #28
 800b1d6:	441a      	add	r2, r3
 800b1d8:	4498      	add	r8, r3
 800b1da:	441e      	add	r6, r3
 800b1dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1de:	e798      	b.n	800b112 <_dtoa_r+0x82a>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	e7f6      	b.n	800b1d2 <_dtoa_r+0x8ea>
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	9704      	str	r7, [sp, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	dc20      	bgt.n	800b22e <_dtoa_r+0x946>
 800b1ec:	9308      	str	r3, [sp, #32]
 800b1ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	dd1e      	ble.n	800b232 <_dtoa_r+0x94a>
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f47f aebc 	bne.w	800af74 <_dtoa_r+0x68c>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	2205      	movs	r2, #5
 800b200:	4658      	mov	r0, fp
 800b202:	f000 f99b 	bl	800b53c <__multadd>
 800b206:	4601      	mov	r1, r0
 800b208:	4604      	mov	r4, r0
 800b20a:	4648      	mov	r0, r9
 800b20c:	f000 fbac 	bl	800b968 <__mcmp>
 800b210:	2800      	cmp	r0, #0
 800b212:	f77f aeaf 	ble.w	800af74 <_dtoa_r+0x68c>
 800b216:	2331      	movs	r3, #49	@ 0x31
 800b218:	4656      	mov	r6, sl
 800b21a:	f806 3b01 	strb.w	r3, [r6], #1
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	3301      	adds	r3, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	e6aa      	b.n	800af7c <_dtoa_r+0x694>
 800b226:	9c07      	ldr	r4, [sp, #28]
 800b228:	9704      	str	r7, [sp, #16]
 800b22a:	4625      	mov	r5, r4
 800b22c:	e7f3      	b.n	800b216 <_dtoa_r+0x92e>
 800b22e:	9b07      	ldr	r3, [sp, #28]
 800b230:	9308      	str	r3, [sp, #32]
 800b232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8104 	beq.w	800b442 <_dtoa_r+0xb5a>
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	dd05      	ble.n	800b24a <_dtoa_r+0x962>
 800b23e:	4629      	mov	r1, r5
 800b240:	4632      	mov	r2, r6
 800b242:	4658      	mov	r0, fp
 800b244:	f000 fb24 	bl	800b890 <__lshift>
 800b248:	4605      	mov	r5, r0
 800b24a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d05a      	beq.n	800b306 <_dtoa_r+0xa1e>
 800b250:	4658      	mov	r0, fp
 800b252:	6869      	ldr	r1, [r5, #4]
 800b254:	f000 f910 	bl	800b478 <_Balloc>
 800b258:	4606      	mov	r6, r0
 800b25a:	b928      	cbnz	r0, 800b268 <_dtoa_r+0x980>
 800b25c:	4602      	mov	r2, r0
 800b25e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b262:	4b83      	ldr	r3, [pc, #524]	@ (800b470 <_dtoa_r+0xb88>)
 800b264:	f7ff bb54 	b.w	800a910 <_dtoa_r+0x28>
 800b268:	692a      	ldr	r2, [r5, #16]
 800b26a:	f105 010c 	add.w	r1, r5, #12
 800b26e:	3202      	adds	r2, #2
 800b270:	0092      	lsls	r2, r2, #2
 800b272:	300c      	adds	r0, #12
 800b274:	f7ff faa0 	bl	800a7b8 <memcpy>
 800b278:	2201      	movs	r2, #1
 800b27a:	4631      	mov	r1, r6
 800b27c:	4658      	mov	r0, fp
 800b27e:	f000 fb07 	bl	800b890 <__lshift>
 800b282:	462f      	mov	r7, r5
 800b284:	4605      	mov	r5, r0
 800b286:	f10a 0301 	add.w	r3, sl, #1
 800b28a:	9307      	str	r3, [sp, #28]
 800b28c:	9b08      	ldr	r3, [sp, #32]
 800b28e:	4453      	add	r3, sl
 800b290:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b292:	9b02      	ldr	r3, [sp, #8]
 800b294:	f003 0301 	and.w	r3, r3, #1
 800b298:	930a      	str	r3, [sp, #40]	@ 0x28
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	4621      	mov	r1, r4
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	4648      	mov	r0, r9
 800b2a2:	9302      	str	r3, [sp, #8]
 800b2a4:	f7ff fa96 	bl	800a7d4 <quorem>
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	9008      	str	r0, [sp, #32]
 800b2ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2b0:	4648      	mov	r0, r9
 800b2b2:	f000 fb59 	bl	800b968 <__mcmp>
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	9009      	str	r0, [sp, #36]	@ 0x24
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4658      	mov	r0, fp
 800b2be:	f000 fb6f 	bl	800b9a0 <__mdiff>
 800b2c2:	68c2      	ldr	r2, [r0, #12]
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	bb02      	cbnz	r2, 800b30a <_dtoa_r+0xa22>
 800b2c8:	4601      	mov	r1, r0
 800b2ca:	4648      	mov	r0, r9
 800b2cc:	f000 fb4c 	bl	800b968 <__mcmp>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4658      	mov	r0, fp
 800b2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2d8:	f000 f90e 	bl	800b4f8 <_Bfree>
 800b2dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b2e0:	9e07      	ldr	r6, [sp, #28]
 800b2e2:	ea43 0102 	orr.w	r1, r3, r2
 800b2e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2e8:	4319      	orrs	r1, r3
 800b2ea:	d110      	bne.n	800b30e <_dtoa_r+0xa26>
 800b2ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2f0:	d029      	beq.n	800b346 <_dtoa_r+0xa5e>
 800b2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	dd02      	ble.n	800b2fe <_dtoa_r+0xa16>
 800b2f8:	9b08      	ldr	r3, [sp, #32]
 800b2fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b2fe:	9b02      	ldr	r3, [sp, #8]
 800b300:	f883 8000 	strb.w	r8, [r3]
 800b304:	e63b      	b.n	800af7e <_dtoa_r+0x696>
 800b306:	4628      	mov	r0, r5
 800b308:	e7bb      	b.n	800b282 <_dtoa_r+0x99a>
 800b30a:	2201      	movs	r2, #1
 800b30c:	e7e1      	b.n	800b2d2 <_dtoa_r+0x9ea>
 800b30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b310:	2b00      	cmp	r3, #0
 800b312:	db04      	blt.n	800b31e <_dtoa_r+0xa36>
 800b314:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b316:	430b      	orrs	r3, r1
 800b318:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b31a:	430b      	orrs	r3, r1
 800b31c:	d120      	bne.n	800b360 <_dtoa_r+0xa78>
 800b31e:	2a00      	cmp	r2, #0
 800b320:	dded      	ble.n	800b2fe <_dtoa_r+0xa16>
 800b322:	4649      	mov	r1, r9
 800b324:	2201      	movs	r2, #1
 800b326:	4658      	mov	r0, fp
 800b328:	f000 fab2 	bl	800b890 <__lshift>
 800b32c:	4621      	mov	r1, r4
 800b32e:	4681      	mov	r9, r0
 800b330:	f000 fb1a 	bl	800b968 <__mcmp>
 800b334:	2800      	cmp	r0, #0
 800b336:	dc03      	bgt.n	800b340 <_dtoa_r+0xa58>
 800b338:	d1e1      	bne.n	800b2fe <_dtoa_r+0xa16>
 800b33a:	f018 0f01 	tst.w	r8, #1
 800b33e:	d0de      	beq.n	800b2fe <_dtoa_r+0xa16>
 800b340:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b344:	d1d8      	bne.n	800b2f8 <_dtoa_r+0xa10>
 800b346:	2339      	movs	r3, #57	@ 0x39
 800b348:	9a02      	ldr	r2, [sp, #8]
 800b34a:	7013      	strb	r3, [r2, #0]
 800b34c:	4633      	mov	r3, r6
 800b34e:	461e      	mov	r6, r3
 800b350:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b354:	3b01      	subs	r3, #1
 800b356:	2a39      	cmp	r2, #57	@ 0x39
 800b358:	d052      	beq.n	800b400 <_dtoa_r+0xb18>
 800b35a:	3201      	adds	r2, #1
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	e60e      	b.n	800af7e <_dtoa_r+0x696>
 800b360:	2a00      	cmp	r2, #0
 800b362:	dd07      	ble.n	800b374 <_dtoa_r+0xa8c>
 800b364:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b368:	d0ed      	beq.n	800b346 <_dtoa_r+0xa5e>
 800b36a:	9a02      	ldr	r2, [sp, #8]
 800b36c:	f108 0301 	add.w	r3, r8, #1
 800b370:	7013      	strb	r3, [r2, #0]
 800b372:	e604      	b.n	800af7e <_dtoa_r+0x696>
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	9a07      	ldr	r2, [sp, #28]
 800b378:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b37e:	4293      	cmp	r3, r2
 800b380:	d028      	beq.n	800b3d4 <_dtoa_r+0xaec>
 800b382:	4649      	mov	r1, r9
 800b384:	2300      	movs	r3, #0
 800b386:	220a      	movs	r2, #10
 800b388:	4658      	mov	r0, fp
 800b38a:	f000 f8d7 	bl	800b53c <__multadd>
 800b38e:	42af      	cmp	r7, r5
 800b390:	4681      	mov	r9, r0
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	f04f 020a 	mov.w	r2, #10
 800b39a:	4639      	mov	r1, r7
 800b39c:	4658      	mov	r0, fp
 800b39e:	d107      	bne.n	800b3b0 <_dtoa_r+0xac8>
 800b3a0:	f000 f8cc 	bl	800b53c <__multadd>
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	9b07      	ldr	r3, [sp, #28]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	9307      	str	r3, [sp, #28]
 800b3ae:	e774      	b.n	800b29a <_dtoa_r+0x9b2>
 800b3b0:	f000 f8c4 	bl	800b53c <__multadd>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	220a      	movs	r2, #10
 800b3bc:	4658      	mov	r0, fp
 800b3be:	f000 f8bd 	bl	800b53c <__multadd>
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	e7f0      	b.n	800b3a8 <_dtoa_r+0xac0>
 800b3c6:	9b08      	ldr	r3, [sp, #32]
 800b3c8:	2700      	movs	r7, #0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	bfcc      	ite	gt
 800b3ce:	461e      	movgt	r6, r3
 800b3d0:	2601      	movle	r6, #1
 800b3d2:	4456      	add	r6, sl
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	4658      	mov	r0, fp
 800b3da:	f000 fa59 	bl	800b890 <__lshift>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4681      	mov	r9, r0
 800b3e2:	f000 fac1 	bl	800b968 <__mcmp>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	dcb0      	bgt.n	800b34c <_dtoa_r+0xa64>
 800b3ea:	d102      	bne.n	800b3f2 <_dtoa_r+0xb0a>
 800b3ec:	f018 0f01 	tst.w	r8, #1
 800b3f0:	d1ac      	bne.n	800b34c <_dtoa_r+0xa64>
 800b3f2:	4633      	mov	r3, r6
 800b3f4:	461e      	mov	r6, r3
 800b3f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3fa:	2a30      	cmp	r2, #48	@ 0x30
 800b3fc:	d0fa      	beq.n	800b3f4 <_dtoa_r+0xb0c>
 800b3fe:	e5be      	b.n	800af7e <_dtoa_r+0x696>
 800b400:	459a      	cmp	sl, r3
 800b402:	d1a4      	bne.n	800b34e <_dtoa_r+0xa66>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	3301      	adds	r3, #1
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	2331      	movs	r3, #49	@ 0x31
 800b40c:	f88a 3000 	strb.w	r3, [sl]
 800b410:	e5b5      	b.n	800af7e <_dtoa_r+0x696>
 800b412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b414:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b474 <_dtoa_r+0xb8c>
 800b418:	b11b      	cbz	r3, 800b422 <_dtoa_r+0xb3a>
 800b41a:	f10a 0308 	add.w	r3, sl, #8
 800b41e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	4650      	mov	r0, sl
 800b424:	b017      	add	sp, #92	@ 0x5c
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	f77f ae3d 	ble.w	800b0ac <_dtoa_r+0x7c4>
 800b432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b434:	930a      	str	r3, [sp, #40]	@ 0x28
 800b436:	2001      	movs	r0, #1
 800b438:	e65b      	b.n	800b0f2 <_dtoa_r+0x80a>
 800b43a:	9b08      	ldr	r3, [sp, #32]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f77f aed6 	ble.w	800b1ee <_dtoa_r+0x906>
 800b442:	4656      	mov	r6, sl
 800b444:	4621      	mov	r1, r4
 800b446:	4648      	mov	r0, r9
 800b448:	f7ff f9c4 	bl	800a7d4 <quorem>
 800b44c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b450:	9b08      	ldr	r3, [sp, #32]
 800b452:	f806 8b01 	strb.w	r8, [r6], #1
 800b456:	eba6 020a 	sub.w	r2, r6, sl
 800b45a:	4293      	cmp	r3, r2
 800b45c:	ddb3      	ble.n	800b3c6 <_dtoa_r+0xade>
 800b45e:	4649      	mov	r1, r9
 800b460:	2300      	movs	r3, #0
 800b462:	220a      	movs	r2, #10
 800b464:	4658      	mov	r0, fp
 800b466:	f000 f869 	bl	800b53c <__multadd>
 800b46a:	4681      	mov	r9, r0
 800b46c:	e7ea      	b.n	800b444 <_dtoa_r+0xb5c>
 800b46e:	bf00      	nop
 800b470:	0800c916 	.word	0x0800c916
 800b474:	0800c89a 	.word	0x0800c89a

0800b478 <_Balloc>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	69c6      	ldr	r6, [r0, #28]
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	b976      	cbnz	r6, 800b4a0 <_Balloc+0x28>
 800b482:	2010      	movs	r0, #16
 800b484:	f7fe f958 	bl	8009738 <malloc>
 800b488:	4602      	mov	r2, r0
 800b48a:	61e0      	str	r0, [r4, #28]
 800b48c:	b920      	cbnz	r0, 800b498 <_Balloc+0x20>
 800b48e:	216b      	movs	r1, #107	@ 0x6b
 800b490:	4b17      	ldr	r3, [pc, #92]	@ (800b4f0 <_Balloc+0x78>)
 800b492:	4818      	ldr	r0, [pc, #96]	@ (800b4f4 <_Balloc+0x7c>)
 800b494:	f000 ff4e 	bl	800c334 <__assert_func>
 800b498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b49c:	6006      	str	r6, [r0, #0]
 800b49e:	60c6      	str	r6, [r0, #12]
 800b4a0:	69e6      	ldr	r6, [r4, #28]
 800b4a2:	68f3      	ldr	r3, [r6, #12]
 800b4a4:	b183      	cbz	r3, 800b4c8 <_Balloc+0x50>
 800b4a6:	69e3      	ldr	r3, [r4, #28]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4ae:	b9b8      	cbnz	r0, 800b4e0 <_Balloc+0x68>
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b4b6:	1d72      	adds	r2, r6, #5
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	f000 ff58 	bl	800c370 <_calloc_r>
 800b4c0:	b160      	cbz	r0, 800b4dc <_Balloc+0x64>
 800b4c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4c6:	e00e      	b.n	800b4e6 <_Balloc+0x6e>
 800b4c8:	2221      	movs	r2, #33	@ 0x21
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 ff4f 	bl	800c370 <_calloc_r>
 800b4d2:	69e3      	ldr	r3, [r4, #28]
 800b4d4:	60f0      	str	r0, [r6, #12]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e4      	bne.n	800b4a6 <_Balloc+0x2e>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	6802      	ldr	r2, [r0, #0]
 800b4e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4ec:	e7f7      	b.n	800b4de <_Balloc+0x66>
 800b4ee:	bf00      	nop
 800b4f0:	0800c8a7 	.word	0x0800c8a7
 800b4f4:	0800c927 	.word	0x0800c927

0800b4f8 <_Bfree>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	69c6      	ldr	r6, [r0, #28]
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	460c      	mov	r4, r1
 800b500:	b976      	cbnz	r6, 800b520 <_Bfree+0x28>
 800b502:	2010      	movs	r0, #16
 800b504:	f7fe f918 	bl	8009738 <malloc>
 800b508:	4602      	mov	r2, r0
 800b50a:	61e8      	str	r0, [r5, #28]
 800b50c:	b920      	cbnz	r0, 800b518 <_Bfree+0x20>
 800b50e:	218f      	movs	r1, #143	@ 0x8f
 800b510:	4b08      	ldr	r3, [pc, #32]	@ (800b534 <_Bfree+0x3c>)
 800b512:	4809      	ldr	r0, [pc, #36]	@ (800b538 <_Bfree+0x40>)
 800b514:	f000 ff0e 	bl	800c334 <__assert_func>
 800b518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b51c:	6006      	str	r6, [r0, #0]
 800b51e:	60c6      	str	r6, [r0, #12]
 800b520:	b13c      	cbz	r4, 800b532 <_Bfree+0x3a>
 800b522:	69eb      	ldr	r3, [r5, #28]
 800b524:	6862      	ldr	r2, [r4, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b52c:	6021      	str	r1, [r4, #0]
 800b52e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b532:	bd70      	pop	{r4, r5, r6, pc}
 800b534:	0800c8a7 	.word	0x0800c8a7
 800b538:	0800c927 	.word	0x0800c927

0800b53c <__multadd>:
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	4607      	mov	r7, r0
 800b542:	460c      	mov	r4, r1
 800b544:	461e      	mov	r6, r3
 800b546:	2000      	movs	r0, #0
 800b548:	690d      	ldr	r5, [r1, #16]
 800b54a:	f101 0c14 	add.w	ip, r1, #20
 800b54e:	f8dc 3000 	ldr.w	r3, [ip]
 800b552:	3001      	adds	r0, #1
 800b554:	b299      	uxth	r1, r3
 800b556:	fb02 6101 	mla	r1, r2, r1, r6
 800b55a:	0c1e      	lsrs	r6, r3, #16
 800b55c:	0c0b      	lsrs	r3, r1, #16
 800b55e:	fb02 3306 	mla	r3, r2, r6, r3
 800b562:	b289      	uxth	r1, r1
 800b564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b568:	4285      	cmp	r5, r0
 800b56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b56e:	f84c 1b04 	str.w	r1, [ip], #4
 800b572:	dcec      	bgt.n	800b54e <__multadd+0x12>
 800b574:	b30e      	cbz	r6, 800b5ba <__multadd+0x7e>
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	42ab      	cmp	r3, r5
 800b57a:	dc19      	bgt.n	800b5b0 <__multadd+0x74>
 800b57c:	6861      	ldr	r1, [r4, #4]
 800b57e:	4638      	mov	r0, r7
 800b580:	3101      	adds	r1, #1
 800b582:	f7ff ff79 	bl	800b478 <_Balloc>
 800b586:	4680      	mov	r8, r0
 800b588:	b928      	cbnz	r0, 800b596 <__multadd+0x5a>
 800b58a:	4602      	mov	r2, r0
 800b58c:	21ba      	movs	r1, #186	@ 0xba
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <__multadd+0x84>)
 800b590:	480c      	ldr	r0, [pc, #48]	@ (800b5c4 <__multadd+0x88>)
 800b592:	f000 fecf 	bl	800c334 <__assert_func>
 800b596:	6922      	ldr	r2, [r4, #16]
 800b598:	f104 010c 	add.w	r1, r4, #12
 800b59c:	3202      	adds	r2, #2
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	f7ff f909 	bl	800a7b8 <memcpy>
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f7ff ffa5 	bl	800b4f8 <_Bfree>
 800b5ae:	4644      	mov	r4, r8
 800b5b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	615e      	str	r6, [r3, #20]
 800b5b8:	6125      	str	r5, [r4, #16]
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	0800c916 	.word	0x0800c916
 800b5c4:	0800c927 	.word	0x0800c927

0800b5c8 <__hi0bits>:
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5ce:	bf3a      	itte	cc
 800b5d0:	0403      	lslcc	r3, r0, #16
 800b5d2:	2010      	movcc	r0, #16
 800b5d4:	2000      	movcs	r0, #0
 800b5d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5da:	bf3c      	itt	cc
 800b5dc:	021b      	lslcc	r3, r3, #8
 800b5de:	3008      	addcc	r0, #8
 800b5e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5e4:	bf3c      	itt	cc
 800b5e6:	011b      	lslcc	r3, r3, #4
 800b5e8:	3004      	addcc	r0, #4
 800b5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ee:	bf3c      	itt	cc
 800b5f0:	009b      	lslcc	r3, r3, #2
 800b5f2:	3002      	addcc	r0, #2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	db05      	blt.n	800b604 <__hi0bits+0x3c>
 800b5f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5fc:	f100 0001 	add.w	r0, r0, #1
 800b600:	bf08      	it	eq
 800b602:	2020      	moveq	r0, #32
 800b604:	4770      	bx	lr

0800b606 <__lo0bits>:
 800b606:	6803      	ldr	r3, [r0, #0]
 800b608:	4602      	mov	r2, r0
 800b60a:	f013 0007 	ands.w	r0, r3, #7
 800b60e:	d00b      	beq.n	800b628 <__lo0bits+0x22>
 800b610:	07d9      	lsls	r1, r3, #31
 800b612:	d421      	bmi.n	800b658 <__lo0bits+0x52>
 800b614:	0798      	lsls	r0, r3, #30
 800b616:	bf49      	itett	mi
 800b618:	085b      	lsrmi	r3, r3, #1
 800b61a:	089b      	lsrpl	r3, r3, #2
 800b61c:	2001      	movmi	r0, #1
 800b61e:	6013      	strmi	r3, [r2, #0]
 800b620:	bf5c      	itt	pl
 800b622:	2002      	movpl	r0, #2
 800b624:	6013      	strpl	r3, [r2, #0]
 800b626:	4770      	bx	lr
 800b628:	b299      	uxth	r1, r3
 800b62a:	b909      	cbnz	r1, 800b630 <__lo0bits+0x2a>
 800b62c:	2010      	movs	r0, #16
 800b62e:	0c1b      	lsrs	r3, r3, #16
 800b630:	b2d9      	uxtb	r1, r3
 800b632:	b909      	cbnz	r1, 800b638 <__lo0bits+0x32>
 800b634:	3008      	adds	r0, #8
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	0719      	lsls	r1, r3, #28
 800b63a:	bf04      	itt	eq
 800b63c:	091b      	lsreq	r3, r3, #4
 800b63e:	3004      	addeq	r0, #4
 800b640:	0799      	lsls	r1, r3, #30
 800b642:	bf04      	itt	eq
 800b644:	089b      	lsreq	r3, r3, #2
 800b646:	3002      	addeq	r0, #2
 800b648:	07d9      	lsls	r1, r3, #31
 800b64a:	d403      	bmi.n	800b654 <__lo0bits+0x4e>
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	f100 0001 	add.w	r0, r0, #1
 800b652:	d003      	beq.n	800b65c <__lo0bits+0x56>
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	4770      	bx	lr
 800b658:	2000      	movs	r0, #0
 800b65a:	4770      	bx	lr
 800b65c:	2020      	movs	r0, #32
 800b65e:	4770      	bx	lr

0800b660 <__i2b>:
 800b660:	b510      	push	{r4, lr}
 800b662:	460c      	mov	r4, r1
 800b664:	2101      	movs	r1, #1
 800b666:	f7ff ff07 	bl	800b478 <_Balloc>
 800b66a:	4602      	mov	r2, r0
 800b66c:	b928      	cbnz	r0, 800b67a <__i2b+0x1a>
 800b66e:	f240 1145 	movw	r1, #325	@ 0x145
 800b672:	4b04      	ldr	r3, [pc, #16]	@ (800b684 <__i2b+0x24>)
 800b674:	4804      	ldr	r0, [pc, #16]	@ (800b688 <__i2b+0x28>)
 800b676:	f000 fe5d 	bl	800c334 <__assert_func>
 800b67a:	2301      	movs	r3, #1
 800b67c:	6144      	str	r4, [r0, #20]
 800b67e:	6103      	str	r3, [r0, #16]
 800b680:	bd10      	pop	{r4, pc}
 800b682:	bf00      	nop
 800b684:	0800c916 	.word	0x0800c916
 800b688:	0800c927 	.word	0x0800c927

0800b68c <__multiply>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	4614      	mov	r4, r2
 800b692:	690a      	ldr	r2, [r1, #16]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	460f      	mov	r7, r1
 800b698:	429a      	cmp	r2, r3
 800b69a:	bfa2      	ittt	ge
 800b69c:	4623      	movge	r3, r4
 800b69e:	460c      	movge	r4, r1
 800b6a0:	461f      	movge	r7, r3
 800b6a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b6a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	6861      	ldr	r1, [r4, #4]
 800b6ae:	eb0a 0609 	add.w	r6, sl, r9
 800b6b2:	42b3      	cmp	r3, r6
 800b6b4:	b085      	sub	sp, #20
 800b6b6:	bfb8      	it	lt
 800b6b8:	3101      	addlt	r1, #1
 800b6ba:	f7ff fedd 	bl	800b478 <_Balloc>
 800b6be:	b930      	cbnz	r0, 800b6ce <__multiply+0x42>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6c6:	4b43      	ldr	r3, [pc, #268]	@ (800b7d4 <__multiply+0x148>)
 800b6c8:	4843      	ldr	r0, [pc, #268]	@ (800b7d8 <__multiply+0x14c>)
 800b6ca:	f000 fe33 	bl	800c334 <__assert_func>
 800b6ce:	f100 0514 	add.w	r5, r0, #20
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6da:	4543      	cmp	r3, r8
 800b6dc:	d321      	bcc.n	800b722 <__multiply+0x96>
 800b6de:	f107 0114 	add.w	r1, r7, #20
 800b6e2:	f104 0214 	add.w	r2, r4, #20
 800b6e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b6ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b6ee:	9302      	str	r3, [sp, #8]
 800b6f0:	1b13      	subs	r3, r2, r4
 800b6f2:	3b15      	subs	r3, #21
 800b6f4:	f023 0303 	bic.w	r3, r3, #3
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	f104 0715 	add.w	r7, r4, #21
 800b6fe:	42ba      	cmp	r2, r7
 800b700:	bf38      	it	cc
 800b702:	2304      	movcc	r3, #4
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	9b02      	ldr	r3, [sp, #8]
 800b708:	9103      	str	r1, [sp, #12]
 800b70a:	428b      	cmp	r3, r1
 800b70c:	d80c      	bhi.n	800b728 <__multiply+0x9c>
 800b70e:	2e00      	cmp	r6, #0
 800b710:	dd03      	ble.n	800b71a <__multiply+0x8e>
 800b712:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b716:	2b00      	cmp	r3, #0
 800b718:	d05a      	beq.n	800b7d0 <__multiply+0x144>
 800b71a:	6106      	str	r6, [r0, #16]
 800b71c:	b005      	add	sp, #20
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	f843 2b04 	str.w	r2, [r3], #4
 800b726:	e7d8      	b.n	800b6da <__multiply+0x4e>
 800b728:	f8b1 a000 	ldrh.w	sl, [r1]
 800b72c:	f1ba 0f00 	cmp.w	sl, #0
 800b730:	d023      	beq.n	800b77a <__multiply+0xee>
 800b732:	46a9      	mov	r9, r5
 800b734:	f04f 0c00 	mov.w	ip, #0
 800b738:	f104 0e14 	add.w	lr, r4, #20
 800b73c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b740:	f8d9 3000 	ldr.w	r3, [r9]
 800b744:	fa1f fb87 	uxth.w	fp, r7
 800b748:	b29b      	uxth	r3, r3
 800b74a:	fb0a 330b 	mla	r3, sl, fp, r3
 800b74e:	4463      	add	r3, ip
 800b750:	f8d9 c000 	ldr.w	ip, [r9]
 800b754:	0c3f      	lsrs	r7, r7, #16
 800b756:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b75a:	fb0a c707 	mla	r7, sl, r7, ip
 800b75e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b762:	b29b      	uxth	r3, r3
 800b764:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b768:	4572      	cmp	r2, lr
 800b76a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b76e:	f849 3b04 	str.w	r3, [r9], #4
 800b772:	d8e3      	bhi.n	800b73c <__multiply+0xb0>
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	f845 c003 	str.w	ip, [r5, r3]
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	3104      	adds	r1, #4
 800b77e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b782:	f1b9 0f00 	cmp.w	r9, #0
 800b786:	d021      	beq.n	800b7cc <__multiply+0x140>
 800b788:	46ae      	mov	lr, r5
 800b78a:	f04f 0a00 	mov.w	sl, #0
 800b78e:	682b      	ldr	r3, [r5, #0]
 800b790:	f104 0c14 	add.w	ip, r4, #20
 800b794:	f8bc b000 	ldrh.w	fp, [ip]
 800b798:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	fb09 770b 	mla	r7, r9, fp, r7
 800b7a2:	4457      	add	r7, sl
 800b7a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7a8:	f84e 3b04 	str.w	r3, [lr], #4
 800b7ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b7b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7b4:	f8be 3000 	ldrh.w	r3, [lr]
 800b7b8:	4562      	cmp	r2, ip
 800b7ba:	fb09 330a 	mla	r3, r9, sl, r3
 800b7be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b7c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7c6:	d8e5      	bhi.n	800b794 <__multiply+0x108>
 800b7c8:	9f01      	ldr	r7, [sp, #4]
 800b7ca:	51eb      	str	r3, [r5, r7]
 800b7cc:	3504      	adds	r5, #4
 800b7ce:	e79a      	b.n	800b706 <__multiply+0x7a>
 800b7d0:	3e01      	subs	r6, #1
 800b7d2:	e79c      	b.n	800b70e <__multiply+0x82>
 800b7d4:	0800c916 	.word	0x0800c916
 800b7d8:	0800c927 	.word	0x0800c927

0800b7dc <__pow5mult>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	f012 0203 	ands.w	r2, r2, #3
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	460e      	mov	r6, r1
 800b7ea:	d007      	beq.n	800b7fc <__pow5mult+0x20>
 800b7ec:	4c25      	ldr	r4, [pc, #148]	@ (800b884 <__pow5mult+0xa8>)
 800b7ee:	3a01      	subs	r2, #1
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7f6:	f7ff fea1 	bl	800b53c <__multadd>
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	10ad      	asrs	r5, r5, #2
 800b7fe:	d03d      	beq.n	800b87c <__pow5mult+0xa0>
 800b800:	69fc      	ldr	r4, [r7, #28]
 800b802:	b97c      	cbnz	r4, 800b824 <__pow5mult+0x48>
 800b804:	2010      	movs	r0, #16
 800b806:	f7fd ff97 	bl	8009738 <malloc>
 800b80a:	4602      	mov	r2, r0
 800b80c:	61f8      	str	r0, [r7, #28]
 800b80e:	b928      	cbnz	r0, 800b81c <__pow5mult+0x40>
 800b810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b814:	4b1c      	ldr	r3, [pc, #112]	@ (800b888 <__pow5mult+0xac>)
 800b816:	481d      	ldr	r0, [pc, #116]	@ (800b88c <__pow5mult+0xb0>)
 800b818:	f000 fd8c 	bl	800c334 <__assert_func>
 800b81c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b820:	6004      	str	r4, [r0, #0]
 800b822:	60c4      	str	r4, [r0, #12]
 800b824:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b82c:	b94c      	cbnz	r4, 800b842 <__pow5mult+0x66>
 800b82e:	f240 2171 	movw	r1, #625	@ 0x271
 800b832:	4638      	mov	r0, r7
 800b834:	f7ff ff14 	bl	800b660 <__i2b>
 800b838:	2300      	movs	r3, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b840:	6003      	str	r3, [r0, #0]
 800b842:	f04f 0900 	mov.w	r9, #0
 800b846:	07eb      	lsls	r3, r5, #31
 800b848:	d50a      	bpl.n	800b860 <__pow5mult+0x84>
 800b84a:	4631      	mov	r1, r6
 800b84c:	4622      	mov	r2, r4
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff ff1c 	bl	800b68c <__multiply>
 800b854:	4680      	mov	r8, r0
 800b856:	4631      	mov	r1, r6
 800b858:	4638      	mov	r0, r7
 800b85a:	f7ff fe4d 	bl	800b4f8 <_Bfree>
 800b85e:	4646      	mov	r6, r8
 800b860:	106d      	asrs	r5, r5, #1
 800b862:	d00b      	beq.n	800b87c <__pow5mult+0xa0>
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	b938      	cbnz	r0, 800b878 <__pow5mult+0x9c>
 800b868:	4622      	mov	r2, r4
 800b86a:	4621      	mov	r1, r4
 800b86c:	4638      	mov	r0, r7
 800b86e:	f7ff ff0d 	bl	800b68c <__multiply>
 800b872:	6020      	str	r0, [r4, #0]
 800b874:	f8c0 9000 	str.w	r9, [r0]
 800b878:	4604      	mov	r4, r0
 800b87a:	e7e4      	b.n	800b846 <__pow5mult+0x6a>
 800b87c:	4630      	mov	r0, r6
 800b87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b882:	bf00      	nop
 800b884:	0800c980 	.word	0x0800c980
 800b888:	0800c8a7 	.word	0x0800c8a7
 800b88c:	0800c927 	.word	0x0800c927

0800b890 <__lshift>:
 800b890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	460c      	mov	r4, r1
 800b896:	4607      	mov	r7, r0
 800b898:	4691      	mov	r9, r2
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	6849      	ldr	r1, [r1, #4]
 800b89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8a8:	f108 0601 	add.w	r6, r8, #1
 800b8ac:	42b3      	cmp	r3, r6
 800b8ae:	db0b      	blt.n	800b8c8 <__lshift+0x38>
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	f7ff fde1 	bl	800b478 <_Balloc>
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b948      	cbnz	r0, 800b8ce <__lshift+0x3e>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b8c0:	4b27      	ldr	r3, [pc, #156]	@ (800b960 <__lshift+0xd0>)
 800b8c2:	4828      	ldr	r0, [pc, #160]	@ (800b964 <__lshift+0xd4>)
 800b8c4:	f000 fd36 	bl	800c334 <__assert_func>
 800b8c8:	3101      	adds	r1, #1
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	e7ee      	b.n	800b8ac <__lshift+0x1c>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f100 0114 	add.w	r1, r0, #20
 800b8d4:	f100 0210 	add.w	r2, r0, #16
 800b8d8:	4618      	mov	r0, r3
 800b8da:	4553      	cmp	r3, sl
 800b8dc:	db33      	blt.n	800b946 <__lshift+0xb6>
 800b8de:	6920      	ldr	r0, [r4, #16]
 800b8e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8e4:	f104 0314 	add.w	r3, r4, #20
 800b8e8:	f019 091f 	ands.w	r9, r9, #31
 800b8ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8f4:	d02b      	beq.n	800b94e <__lshift+0xbe>
 800b8f6:	468a      	mov	sl, r1
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f1c9 0e20 	rsb	lr, r9, #32
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	fa00 f009 	lsl.w	r0, r0, r9
 800b904:	4310      	orrs	r0, r2
 800b906:	f84a 0b04 	str.w	r0, [sl], #4
 800b90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b90e:	459c      	cmp	ip, r3
 800b910:	fa22 f20e 	lsr.w	r2, r2, lr
 800b914:	d8f3      	bhi.n	800b8fe <__lshift+0x6e>
 800b916:	ebac 0304 	sub.w	r3, ip, r4
 800b91a:	3b15      	subs	r3, #21
 800b91c:	f023 0303 	bic.w	r3, r3, #3
 800b920:	3304      	adds	r3, #4
 800b922:	f104 0015 	add.w	r0, r4, #21
 800b926:	4584      	cmp	ip, r0
 800b928:	bf38      	it	cc
 800b92a:	2304      	movcc	r3, #4
 800b92c:	50ca      	str	r2, [r1, r3]
 800b92e:	b10a      	cbz	r2, 800b934 <__lshift+0xa4>
 800b930:	f108 0602 	add.w	r6, r8, #2
 800b934:	3e01      	subs	r6, #1
 800b936:	4638      	mov	r0, r7
 800b938:	4621      	mov	r1, r4
 800b93a:	612e      	str	r6, [r5, #16]
 800b93c:	f7ff fddc 	bl	800b4f8 <_Bfree>
 800b940:	4628      	mov	r0, r5
 800b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b946:	f842 0f04 	str.w	r0, [r2, #4]!
 800b94a:	3301      	adds	r3, #1
 800b94c:	e7c5      	b.n	800b8da <__lshift+0x4a>
 800b94e:	3904      	subs	r1, #4
 800b950:	f853 2b04 	ldr.w	r2, [r3], #4
 800b954:	459c      	cmp	ip, r3
 800b956:	f841 2f04 	str.w	r2, [r1, #4]!
 800b95a:	d8f9      	bhi.n	800b950 <__lshift+0xc0>
 800b95c:	e7ea      	b.n	800b934 <__lshift+0xa4>
 800b95e:	bf00      	nop
 800b960:	0800c916 	.word	0x0800c916
 800b964:	0800c927 	.word	0x0800c927

0800b968 <__mcmp>:
 800b968:	4603      	mov	r3, r0
 800b96a:	690a      	ldr	r2, [r1, #16]
 800b96c:	6900      	ldr	r0, [r0, #16]
 800b96e:	b530      	push	{r4, r5, lr}
 800b970:	1a80      	subs	r0, r0, r2
 800b972:	d10e      	bne.n	800b992 <__mcmp+0x2a>
 800b974:	3314      	adds	r3, #20
 800b976:	3114      	adds	r1, #20
 800b978:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b97c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b988:	4295      	cmp	r5, r2
 800b98a:	d003      	beq.n	800b994 <__mcmp+0x2c>
 800b98c:	d205      	bcs.n	800b99a <__mcmp+0x32>
 800b98e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b992:	bd30      	pop	{r4, r5, pc}
 800b994:	42a3      	cmp	r3, r4
 800b996:	d3f3      	bcc.n	800b980 <__mcmp+0x18>
 800b998:	e7fb      	b.n	800b992 <__mcmp+0x2a>
 800b99a:	2001      	movs	r0, #1
 800b99c:	e7f9      	b.n	800b992 <__mcmp+0x2a>
	...

0800b9a0 <__mdiff>:
 800b9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	4689      	mov	r9, r1
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4648      	mov	r0, r9
 800b9ac:	4614      	mov	r4, r2
 800b9ae:	f7ff ffdb 	bl	800b968 <__mcmp>
 800b9b2:	1e05      	subs	r5, r0, #0
 800b9b4:	d112      	bne.n	800b9dc <__mdiff+0x3c>
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7ff fd5d 	bl	800b478 <_Balloc>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <__mdiff+0x2e>
 800b9c2:	f240 2137 	movw	r1, #567	@ 0x237
 800b9c6:	4b3e      	ldr	r3, [pc, #248]	@ (800bac0 <__mdiff+0x120>)
 800b9c8:	483e      	ldr	r0, [pc, #248]	@ (800bac4 <__mdiff+0x124>)
 800b9ca:	f000 fcb3 	bl	800c334 <__assert_func>
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	b003      	add	sp, #12
 800b9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9dc:	bfbc      	itt	lt
 800b9de:	464b      	movlt	r3, r9
 800b9e0:	46a1      	movlt	r9, r4
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9e8:	bfba      	itte	lt
 800b9ea:	461c      	movlt	r4, r3
 800b9ec:	2501      	movlt	r5, #1
 800b9ee:	2500      	movge	r5, #0
 800b9f0:	f7ff fd42 	bl	800b478 <_Balloc>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	b918      	cbnz	r0, 800ba00 <__mdiff+0x60>
 800b9f8:	f240 2145 	movw	r1, #581	@ 0x245
 800b9fc:	4b30      	ldr	r3, [pc, #192]	@ (800bac0 <__mdiff+0x120>)
 800b9fe:	e7e3      	b.n	800b9c8 <__mdiff+0x28>
 800ba00:	f100 0b14 	add.w	fp, r0, #20
 800ba04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba08:	f109 0310 	add.w	r3, r9, #16
 800ba0c:	60c5      	str	r5, [r0, #12]
 800ba0e:	f04f 0c00 	mov.w	ip, #0
 800ba12:	f109 0514 	add.w	r5, r9, #20
 800ba16:	46d9      	mov	r9, fp
 800ba18:	6926      	ldr	r6, [r4, #16]
 800ba1a:	f104 0e14 	add.w	lr, r4, #20
 800ba1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ba22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ba2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba32:	b281      	uxth	r1, r0
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	fa1f f38a 	uxth.w	r3, sl
 800ba3a:	1a5b      	subs	r3, r3, r1
 800ba3c:	0c00      	lsrs	r0, r0, #16
 800ba3e:	4463      	add	r3, ip
 800ba40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba4e:	4576      	cmp	r6, lr
 800ba50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba54:	f849 3b04 	str.w	r3, [r9], #4
 800ba58:	d8e6      	bhi.n	800ba28 <__mdiff+0x88>
 800ba5a:	1b33      	subs	r3, r6, r4
 800ba5c:	3b15      	subs	r3, #21
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	3415      	adds	r4, #21
 800ba64:	3304      	adds	r3, #4
 800ba66:	42a6      	cmp	r6, r4
 800ba68:	bf38      	it	cc
 800ba6a:	2304      	movcc	r3, #4
 800ba6c:	441d      	add	r5, r3
 800ba6e:	445b      	add	r3, fp
 800ba70:	461e      	mov	r6, r3
 800ba72:	462c      	mov	r4, r5
 800ba74:	4544      	cmp	r4, r8
 800ba76:	d30e      	bcc.n	800ba96 <__mdiff+0xf6>
 800ba78:	f108 0103 	add.w	r1, r8, #3
 800ba7c:	1b49      	subs	r1, r1, r5
 800ba7e:	f021 0103 	bic.w	r1, r1, #3
 800ba82:	3d03      	subs	r5, #3
 800ba84:	45a8      	cmp	r8, r5
 800ba86:	bf38      	it	cc
 800ba88:	2100      	movcc	r1, #0
 800ba8a:	440b      	add	r3, r1
 800ba8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba90:	b199      	cbz	r1, 800baba <__mdiff+0x11a>
 800ba92:	6117      	str	r7, [r2, #16]
 800ba94:	e79e      	b.n	800b9d4 <__mdiff+0x34>
 800ba96:	46e6      	mov	lr, ip
 800ba98:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba9c:	fa1f fc81 	uxth.w	ip, r1
 800baa0:	44f4      	add	ip, lr
 800baa2:	0c08      	lsrs	r0, r1, #16
 800baa4:	4471      	add	r1, lr
 800baa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800baaa:	b289      	uxth	r1, r1
 800baac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bab4:	f846 1b04 	str.w	r1, [r6], #4
 800bab8:	e7dc      	b.n	800ba74 <__mdiff+0xd4>
 800baba:	3f01      	subs	r7, #1
 800babc:	e7e6      	b.n	800ba8c <__mdiff+0xec>
 800babe:	bf00      	nop
 800bac0:	0800c916 	.word	0x0800c916
 800bac4:	0800c927 	.word	0x0800c927

0800bac8 <__d2b>:
 800bac8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bacc:	2101      	movs	r1, #1
 800bace:	4690      	mov	r8, r2
 800bad0:	4699      	mov	r9, r3
 800bad2:	9e08      	ldr	r6, [sp, #32]
 800bad4:	f7ff fcd0 	bl	800b478 <_Balloc>
 800bad8:	4604      	mov	r4, r0
 800bada:	b930      	cbnz	r0, 800baea <__d2b+0x22>
 800badc:	4602      	mov	r2, r0
 800bade:	f240 310f 	movw	r1, #783	@ 0x30f
 800bae2:	4b23      	ldr	r3, [pc, #140]	@ (800bb70 <__d2b+0xa8>)
 800bae4:	4823      	ldr	r0, [pc, #140]	@ (800bb74 <__d2b+0xac>)
 800bae6:	f000 fc25 	bl	800c334 <__assert_func>
 800baea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800baee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baf2:	b10d      	cbz	r5, 800baf8 <__d2b+0x30>
 800baf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	f1b8 0300 	subs.w	r3, r8, #0
 800bafe:	d024      	beq.n	800bb4a <__d2b+0x82>
 800bb00:	4668      	mov	r0, sp
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	f7ff fd7f 	bl	800b606 <__lo0bits>
 800bb08:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb0c:	b1d8      	cbz	r0, 800bb46 <__d2b+0x7e>
 800bb0e:	f1c0 0320 	rsb	r3, r0, #32
 800bb12:	fa02 f303 	lsl.w	r3, r2, r3
 800bb16:	430b      	orrs	r3, r1
 800bb18:	40c2      	lsrs	r2, r0
 800bb1a:	6163      	str	r3, [r4, #20]
 800bb1c:	9201      	str	r2, [sp, #4]
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bf0c      	ite	eq
 800bb24:	2201      	moveq	r2, #1
 800bb26:	2202      	movne	r2, #2
 800bb28:	61a3      	str	r3, [r4, #24]
 800bb2a:	6122      	str	r2, [r4, #16]
 800bb2c:	b1ad      	cbz	r5, 800bb5a <__d2b+0x92>
 800bb2e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb32:	4405      	add	r5, r0
 800bb34:	6035      	str	r5, [r6, #0]
 800bb36:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb3c:	6018      	str	r0, [r3, #0]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	b002      	add	sp, #8
 800bb42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bb46:	6161      	str	r1, [r4, #20]
 800bb48:	e7e9      	b.n	800bb1e <__d2b+0x56>
 800bb4a:	a801      	add	r0, sp, #4
 800bb4c:	f7ff fd5b 	bl	800b606 <__lo0bits>
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	6163      	str	r3, [r4, #20]
 800bb56:	3020      	adds	r0, #32
 800bb58:	e7e7      	b.n	800bb2a <__d2b+0x62>
 800bb5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb62:	6030      	str	r0, [r6, #0]
 800bb64:	6918      	ldr	r0, [r3, #16]
 800bb66:	f7ff fd2f 	bl	800b5c8 <__hi0bits>
 800bb6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb6e:	e7e4      	b.n	800bb3a <__d2b+0x72>
 800bb70:	0800c916 	.word	0x0800c916
 800bb74:	0800c927 	.word	0x0800c927

0800bb78 <__ssputs_r>:
 800bb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb7c:	461f      	mov	r7, r3
 800bb7e:	688e      	ldr	r6, [r1, #8]
 800bb80:	4682      	mov	sl, r0
 800bb82:	42be      	cmp	r6, r7
 800bb84:	460c      	mov	r4, r1
 800bb86:	4690      	mov	r8, r2
 800bb88:	680b      	ldr	r3, [r1, #0]
 800bb8a:	d82d      	bhi.n	800bbe8 <__ssputs_r+0x70>
 800bb8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb94:	d026      	beq.n	800bbe4 <__ssputs_r+0x6c>
 800bb96:	6965      	ldr	r5, [r4, #20]
 800bb98:	6909      	ldr	r1, [r1, #16]
 800bb9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb9e:	eba3 0901 	sub.w	r9, r3, r1
 800bba2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bba6:	1c7b      	adds	r3, r7, #1
 800bba8:	444b      	add	r3, r9
 800bbaa:	106d      	asrs	r5, r5, #1
 800bbac:	429d      	cmp	r5, r3
 800bbae:	bf38      	it	cc
 800bbb0:	461d      	movcc	r5, r3
 800bbb2:	0553      	lsls	r3, r2, #21
 800bbb4:	d527      	bpl.n	800bc06 <__ssputs_r+0x8e>
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7fd fde8 	bl	800978c <_malloc_r>
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	b360      	cbz	r0, 800bc1a <__ssputs_r+0xa2>
 800bbc0:	464a      	mov	r2, r9
 800bbc2:	6921      	ldr	r1, [r4, #16]
 800bbc4:	f7fe fdf8 	bl	800a7b8 <memcpy>
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	6126      	str	r6, [r4, #16]
 800bbd6:	444e      	add	r6, r9
 800bbd8:	6026      	str	r6, [r4, #0]
 800bbda:	463e      	mov	r6, r7
 800bbdc:	6165      	str	r5, [r4, #20]
 800bbde:	eba5 0509 	sub.w	r5, r5, r9
 800bbe2:	60a5      	str	r5, [r4, #8]
 800bbe4:	42be      	cmp	r6, r7
 800bbe6:	d900      	bls.n	800bbea <__ssputs_r+0x72>
 800bbe8:	463e      	mov	r6, r7
 800bbea:	4632      	mov	r2, r6
 800bbec:	4641      	mov	r1, r8
 800bbee:	6820      	ldr	r0, [r4, #0]
 800bbf0:	f000 fb63 	bl	800c2ba <memmove>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	1b9b      	subs	r3, r3, r6
 800bbfa:	60a3      	str	r3, [r4, #8]
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	4433      	add	r3, r6
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc06:	462a      	mov	r2, r5
 800bc08:	f000 fbd8 	bl	800c3bc <_realloc_r>
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d1e0      	bne.n	800bbd4 <__ssputs_r+0x5c>
 800bc12:	4650      	mov	r0, sl
 800bc14:	6921      	ldr	r1, [r4, #16]
 800bc16:	f7fd fd47 	bl	80096a8 <_free_r>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	f8ca 3000 	str.w	r3, [sl]
 800bc20:	89a3      	ldrh	r3, [r4, #12]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc2a:	81a3      	strh	r3, [r4, #12]
 800bc2c:	e7e9      	b.n	800bc02 <__ssputs_r+0x8a>
	...

0800bc30 <_svfiprintf_r>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	4698      	mov	r8, r3
 800bc36:	898b      	ldrh	r3, [r1, #12]
 800bc38:	4607      	mov	r7, r0
 800bc3a:	061b      	lsls	r3, r3, #24
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	4614      	mov	r4, r2
 800bc40:	b09d      	sub	sp, #116	@ 0x74
 800bc42:	d510      	bpl.n	800bc66 <_svfiprintf_r+0x36>
 800bc44:	690b      	ldr	r3, [r1, #16]
 800bc46:	b973      	cbnz	r3, 800bc66 <_svfiprintf_r+0x36>
 800bc48:	2140      	movs	r1, #64	@ 0x40
 800bc4a:	f7fd fd9f 	bl	800978c <_malloc_r>
 800bc4e:	6028      	str	r0, [r5, #0]
 800bc50:	6128      	str	r0, [r5, #16]
 800bc52:	b930      	cbnz	r0, 800bc62 <_svfiprintf_r+0x32>
 800bc54:	230c      	movs	r3, #12
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc5c:	b01d      	add	sp, #116	@ 0x74
 800bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc62:	2340      	movs	r3, #64	@ 0x40
 800bc64:	616b      	str	r3, [r5, #20]
 800bc66:	2300      	movs	r3, #0
 800bc68:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc6a:	2320      	movs	r3, #32
 800bc6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc70:	2330      	movs	r3, #48	@ 0x30
 800bc72:	f04f 0901 	mov.w	r9, #1
 800bc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800be14 <_svfiprintf_r+0x1e4>
 800bc7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc82:	4623      	mov	r3, r4
 800bc84:	469a      	mov	sl, r3
 800bc86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc8a:	b10a      	cbz	r2, 800bc90 <_svfiprintf_r+0x60>
 800bc8c:	2a25      	cmp	r2, #37	@ 0x25
 800bc8e:	d1f9      	bne.n	800bc84 <_svfiprintf_r+0x54>
 800bc90:	ebba 0b04 	subs.w	fp, sl, r4
 800bc94:	d00b      	beq.n	800bcae <_svfiprintf_r+0x7e>
 800bc96:	465b      	mov	r3, fp
 800bc98:	4622      	mov	r2, r4
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff ff6b 	bl	800bb78 <__ssputs_r>
 800bca2:	3001      	adds	r0, #1
 800bca4:	f000 80a7 	beq.w	800bdf6 <_svfiprintf_r+0x1c6>
 800bca8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcaa:	445a      	add	r2, fp
 800bcac:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcae:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f000 809f 	beq.w	800bdf6 <_svfiprintf_r+0x1c6>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bcbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc2:	f10a 0a01 	add.w	sl, sl, #1
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	9307      	str	r3, [sp, #28]
 800bcca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcce:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcd0:	4654      	mov	r4, sl
 800bcd2:	2205      	movs	r2, #5
 800bcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd8:	484e      	ldr	r0, [pc, #312]	@ (800be14 <_svfiprintf_r+0x1e4>)
 800bcda:	f7fe fd5f 	bl	800a79c <memchr>
 800bcde:	9a04      	ldr	r2, [sp, #16]
 800bce0:	b9d8      	cbnz	r0, 800bd1a <_svfiprintf_r+0xea>
 800bce2:	06d0      	lsls	r0, r2, #27
 800bce4:	bf44      	itt	mi
 800bce6:	2320      	movmi	r3, #32
 800bce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcec:	0711      	lsls	r1, r2, #28
 800bcee:	bf44      	itt	mi
 800bcf0:	232b      	movmi	r3, #43	@ 0x2b
 800bcf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcfc:	d015      	beq.n	800bd2a <_svfiprintf_r+0xfa>
 800bcfe:	4654      	mov	r4, sl
 800bd00:	2000      	movs	r0, #0
 800bd02:	f04f 0c0a 	mov.w	ip, #10
 800bd06:	9a07      	ldr	r2, [sp, #28]
 800bd08:	4621      	mov	r1, r4
 800bd0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd0e:	3b30      	subs	r3, #48	@ 0x30
 800bd10:	2b09      	cmp	r3, #9
 800bd12:	d94b      	bls.n	800bdac <_svfiprintf_r+0x17c>
 800bd14:	b1b0      	cbz	r0, 800bd44 <_svfiprintf_r+0x114>
 800bd16:	9207      	str	r2, [sp, #28]
 800bd18:	e014      	b.n	800bd44 <_svfiprintf_r+0x114>
 800bd1a:	eba0 0308 	sub.w	r3, r0, r8
 800bd1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd22:	4313      	orrs	r3, r2
 800bd24:	46a2      	mov	sl, r4
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	e7d2      	b.n	800bcd0 <_svfiprintf_r+0xa0>
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	1d19      	adds	r1, r3, #4
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	9103      	str	r1, [sp, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	bfbb      	ittet	lt
 800bd36:	425b      	neglt	r3, r3
 800bd38:	f042 0202 	orrlt.w	r2, r2, #2
 800bd3c:	9307      	strge	r3, [sp, #28]
 800bd3e:	9307      	strlt	r3, [sp, #28]
 800bd40:	bfb8      	it	lt
 800bd42:	9204      	strlt	r2, [sp, #16]
 800bd44:	7823      	ldrb	r3, [r4, #0]
 800bd46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd48:	d10a      	bne.n	800bd60 <_svfiprintf_r+0x130>
 800bd4a:	7863      	ldrb	r3, [r4, #1]
 800bd4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd4e:	d132      	bne.n	800bdb6 <_svfiprintf_r+0x186>
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	3402      	adds	r4, #2
 800bd54:	1d1a      	adds	r2, r3, #4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	9203      	str	r2, [sp, #12]
 800bd5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800be18 <_svfiprintf_r+0x1e8>
 800bd64:	2203      	movs	r2, #3
 800bd66:	4650      	mov	r0, sl
 800bd68:	7821      	ldrb	r1, [r4, #0]
 800bd6a:	f7fe fd17 	bl	800a79c <memchr>
 800bd6e:	b138      	cbz	r0, 800bd80 <_svfiprintf_r+0x150>
 800bd70:	2240      	movs	r2, #64	@ 0x40
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	eba0 000a 	sub.w	r0, r0, sl
 800bd78:	4082      	lsls	r2, r0
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	3401      	adds	r4, #1
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd84:	2206      	movs	r2, #6
 800bd86:	4825      	ldr	r0, [pc, #148]	@ (800be1c <_svfiprintf_r+0x1ec>)
 800bd88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd8c:	f7fe fd06 	bl	800a79c <memchr>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d036      	beq.n	800be02 <_svfiprintf_r+0x1d2>
 800bd94:	4b22      	ldr	r3, [pc, #136]	@ (800be20 <_svfiprintf_r+0x1f0>)
 800bd96:	bb1b      	cbnz	r3, 800bde0 <_svfiprintf_r+0x1b0>
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	3307      	adds	r3, #7
 800bd9c:	f023 0307 	bic.w	r3, r3, #7
 800bda0:	3308      	adds	r3, #8
 800bda2:	9303      	str	r3, [sp, #12]
 800bda4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda6:	4433      	add	r3, r6
 800bda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdaa:	e76a      	b.n	800bc82 <_svfiprintf_r+0x52>
 800bdac:	460c      	mov	r4, r1
 800bdae:	2001      	movs	r0, #1
 800bdb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdb4:	e7a8      	b.n	800bd08 <_svfiprintf_r+0xd8>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f04f 0c0a 	mov.w	ip, #10
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc8:	3a30      	subs	r2, #48	@ 0x30
 800bdca:	2a09      	cmp	r2, #9
 800bdcc:	d903      	bls.n	800bdd6 <_svfiprintf_r+0x1a6>
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0c6      	beq.n	800bd60 <_svfiprintf_r+0x130>
 800bdd2:	9105      	str	r1, [sp, #20]
 800bdd4:	e7c4      	b.n	800bd60 <_svfiprintf_r+0x130>
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	2301      	movs	r3, #1
 800bdda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdde:	e7f0      	b.n	800bdc2 <_svfiprintf_r+0x192>
 800bde0:	ab03      	add	r3, sp, #12
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	462a      	mov	r2, r5
 800bde6:	4638      	mov	r0, r7
 800bde8:	4b0e      	ldr	r3, [pc, #56]	@ (800be24 <_svfiprintf_r+0x1f4>)
 800bdea:	a904      	add	r1, sp, #16
 800bdec:	f7fd fdf8 	bl	80099e0 <_printf_float>
 800bdf0:	1c42      	adds	r2, r0, #1
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	d1d6      	bne.n	800bda4 <_svfiprintf_r+0x174>
 800bdf6:	89ab      	ldrh	r3, [r5, #12]
 800bdf8:	065b      	lsls	r3, r3, #25
 800bdfa:	f53f af2d 	bmi.w	800bc58 <_svfiprintf_r+0x28>
 800bdfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be00:	e72c      	b.n	800bc5c <_svfiprintf_r+0x2c>
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4638      	mov	r0, r7
 800be0a:	4b06      	ldr	r3, [pc, #24]	@ (800be24 <_svfiprintf_r+0x1f4>)
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	f7fe f885 	bl	8009f1c <_printf_i>
 800be12:	e7ed      	b.n	800bdf0 <_svfiprintf_r+0x1c0>
 800be14:	0800ca80 	.word	0x0800ca80
 800be18:	0800ca86 	.word	0x0800ca86
 800be1c:	0800ca8a 	.word	0x0800ca8a
 800be20:	080099e1 	.word	0x080099e1
 800be24:	0800bb79 	.word	0x0800bb79

0800be28 <__sfputc_r>:
 800be28:	6893      	ldr	r3, [r2, #8]
 800be2a:	b410      	push	{r4}
 800be2c:	3b01      	subs	r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	6093      	str	r3, [r2, #8]
 800be32:	da07      	bge.n	800be44 <__sfputc_r+0x1c>
 800be34:	6994      	ldr	r4, [r2, #24]
 800be36:	42a3      	cmp	r3, r4
 800be38:	db01      	blt.n	800be3e <__sfputc_r+0x16>
 800be3a:	290a      	cmp	r1, #10
 800be3c:	d102      	bne.n	800be44 <__sfputc_r+0x1c>
 800be3e:	bc10      	pop	{r4}
 800be40:	f7fe bb35 	b.w	800a4ae <__swbuf_r>
 800be44:	6813      	ldr	r3, [r2, #0]
 800be46:	1c58      	adds	r0, r3, #1
 800be48:	6010      	str	r0, [r2, #0]
 800be4a:	7019      	strb	r1, [r3, #0]
 800be4c:	4608      	mov	r0, r1
 800be4e:	bc10      	pop	{r4}
 800be50:	4770      	bx	lr

0800be52 <__sfputs_r>:
 800be52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be54:	4606      	mov	r6, r0
 800be56:	460f      	mov	r7, r1
 800be58:	4614      	mov	r4, r2
 800be5a:	18d5      	adds	r5, r2, r3
 800be5c:	42ac      	cmp	r4, r5
 800be5e:	d101      	bne.n	800be64 <__sfputs_r+0x12>
 800be60:	2000      	movs	r0, #0
 800be62:	e007      	b.n	800be74 <__sfputs_r+0x22>
 800be64:	463a      	mov	r2, r7
 800be66:	4630      	mov	r0, r6
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	f7ff ffdc 	bl	800be28 <__sfputc_r>
 800be70:	1c43      	adds	r3, r0, #1
 800be72:	d1f3      	bne.n	800be5c <__sfputs_r+0xa>
 800be74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be78 <_vfiprintf_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	460d      	mov	r5, r1
 800be7e:	4614      	mov	r4, r2
 800be80:	4698      	mov	r8, r3
 800be82:	4606      	mov	r6, r0
 800be84:	b09d      	sub	sp, #116	@ 0x74
 800be86:	b118      	cbz	r0, 800be90 <_vfiprintf_r+0x18>
 800be88:	6a03      	ldr	r3, [r0, #32]
 800be8a:	b90b      	cbnz	r3, 800be90 <_vfiprintf_r+0x18>
 800be8c:	f7fe f9f2 	bl	800a274 <__sinit>
 800be90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_vfiprintf_r+0x2a>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_vfiprintf_r+0x2a>
 800be9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be9e:	f7f6 f8b3 	bl	8002008 <__retarget_lock_acquire_recursive>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	071b      	lsls	r3, r3, #28
 800bea6:	d501      	bpl.n	800beac <_vfiprintf_r+0x34>
 800bea8:	692b      	ldr	r3, [r5, #16]
 800beaa:	b99b      	cbnz	r3, 800bed4 <_vfiprintf_r+0x5c>
 800beac:	4629      	mov	r1, r5
 800beae:	4630      	mov	r0, r6
 800beb0:	f7fe fb3c 	bl	800a52c <__swsetup_r>
 800beb4:	b170      	cbz	r0, 800bed4 <_vfiprintf_r+0x5c>
 800beb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beb8:	07dc      	lsls	r4, r3, #31
 800beba:	d504      	bpl.n	800bec6 <_vfiprintf_r+0x4e>
 800bebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bec0:	b01d      	add	sp, #116	@ 0x74
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	0598      	lsls	r0, r3, #22
 800beca:	d4f7      	bmi.n	800bebc <_vfiprintf_r+0x44>
 800becc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bece:	f7f6 f8b0 	bl	8002032 <__retarget_lock_release_recursive>
 800bed2:	e7f3      	b.n	800bebc <_vfiprintf_r+0x44>
 800bed4:	2300      	movs	r3, #0
 800bed6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bed8:	2320      	movs	r3, #32
 800beda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bede:	2330      	movs	r3, #48	@ 0x30
 800bee0:	f04f 0901 	mov.w	r9, #1
 800bee4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bee8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c094 <_vfiprintf_r+0x21c>
 800beec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bef0:	4623      	mov	r3, r4
 800bef2:	469a      	mov	sl, r3
 800bef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bef8:	b10a      	cbz	r2, 800befe <_vfiprintf_r+0x86>
 800befa:	2a25      	cmp	r2, #37	@ 0x25
 800befc:	d1f9      	bne.n	800bef2 <_vfiprintf_r+0x7a>
 800befe:	ebba 0b04 	subs.w	fp, sl, r4
 800bf02:	d00b      	beq.n	800bf1c <_vfiprintf_r+0xa4>
 800bf04:	465b      	mov	r3, fp
 800bf06:	4622      	mov	r2, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f7ff ffa1 	bl	800be52 <__sfputs_r>
 800bf10:	3001      	adds	r0, #1
 800bf12:	f000 80a7 	beq.w	800c064 <_vfiprintf_r+0x1ec>
 800bf16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf18:	445a      	add	r2, fp
 800bf1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 809f 	beq.w	800c064 <_vfiprintf_r+0x1ec>
 800bf26:	2300      	movs	r3, #0
 800bf28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf30:	f10a 0a01 	add.w	sl, sl, #1
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	9307      	str	r3, [sp, #28]
 800bf38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf3e:	4654      	mov	r4, sl
 800bf40:	2205      	movs	r2, #5
 800bf42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf46:	4853      	ldr	r0, [pc, #332]	@ (800c094 <_vfiprintf_r+0x21c>)
 800bf48:	f7fe fc28 	bl	800a79c <memchr>
 800bf4c:	9a04      	ldr	r2, [sp, #16]
 800bf4e:	b9d8      	cbnz	r0, 800bf88 <_vfiprintf_r+0x110>
 800bf50:	06d1      	lsls	r1, r2, #27
 800bf52:	bf44      	itt	mi
 800bf54:	2320      	movmi	r3, #32
 800bf56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf5a:	0713      	lsls	r3, r2, #28
 800bf5c:	bf44      	itt	mi
 800bf5e:	232b      	movmi	r3, #43	@ 0x2b
 800bf60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf64:	f89a 3000 	ldrb.w	r3, [sl]
 800bf68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf6a:	d015      	beq.n	800bf98 <_vfiprintf_r+0x120>
 800bf6c:	4654      	mov	r4, sl
 800bf6e:	2000      	movs	r0, #0
 800bf70:	f04f 0c0a 	mov.w	ip, #10
 800bf74:	9a07      	ldr	r2, [sp, #28]
 800bf76:	4621      	mov	r1, r4
 800bf78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf7c:	3b30      	subs	r3, #48	@ 0x30
 800bf7e:	2b09      	cmp	r3, #9
 800bf80:	d94b      	bls.n	800c01a <_vfiprintf_r+0x1a2>
 800bf82:	b1b0      	cbz	r0, 800bfb2 <_vfiprintf_r+0x13a>
 800bf84:	9207      	str	r2, [sp, #28]
 800bf86:	e014      	b.n	800bfb2 <_vfiprintf_r+0x13a>
 800bf88:	eba0 0308 	sub.w	r3, r0, r8
 800bf8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf90:	4313      	orrs	r3, r2
 800bf92:	46a2      	mov	sl, r4
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	e7d2      	b.n	800bf3e <_vfiprintf_r+0xc6>
 800bf98:	9b03      	ldr	r3, [sp, #12]
 800bf9a:	1d19      	adds	r1, r3, #4
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	9103      	str	r1, [sp, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bfbb      	ittet	lt
 800bfa4:	425b      	neglt	r3, r3
 800bfa6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfaa:	9307      	strge	r3, [sp, #28]
 800bfac:	9307      	strlt	r3, [sp, #28]
 800bfae:	bfb8      	it	lt
 800bfb0:	9204      	strlt	r2, [sp, #16]
 800bfb2:	7823      	ldrb	r3, [r4, #0]
 800bfb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfb6:	d10a      	bne.n	800bfce <_vfiprintf_r+0x156>
 800bfb8:	7863      	ldrb	r3, [r4, #1]
 800bfba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfbc:	d132      	bne.n	800c024 <_vfiprintf_r+0x1ac>
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	3402      	adds	r4, #2
 800bfc2:	1d1a      	adds	r2, r3, #4
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	9203      	str	r2, [sp, #12]
 800bfc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c098 <_vfiprintf_r+0x220>
 800bfd2:	2203      	movs	r2, #3
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	7821      	ldrb	r1, [r4, #0]
 800bfd8:	f7fe fbe0 	bl	800a79c <memchr>
 800bfdc:	b138      	cbz	r0, 800bfee <_vfiprintf_r+0x176>
 800bfde:	2240      	movs	r2, #64	@ 0x40
 800bfe0:	9b04      	ldr	r3, [sp, #16]
 800bfe2:	eba0 000a 	sub.w	r0, r0, sl
 800bfe6:	4082      	lsls	r2, r0
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	3401      	adds	r4, #1
 800bfec:	9304      	str	r3, [sp, #16]
 800bfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bff2:	2206      	movs	r2, #6
 800bff4:	4829      	ldr	r0, [pc, #164]	@ (800c09c <_vfiprintf_r+0x224>)
 800bff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bffa:	f7fe fbcf 	bl	800a79c <memchr>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d03f      	beq.n	800c082 <_vfiprintf_r+0x20a>
 800c002:	4b27      	ldr	r3, [pc, #156]	@ (800c0a0 <_vfiprintf_r+0x228>)
 800c004:	bb1b      	cbnz	r3, 800c04e <_vfiprintf_r+0x1d6>
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	3307      	adds	r3, #7
 800c00a:	f023 0307 	bic.w	r3, r3, #7
 800c00e:	3308      	adds	r3, #8
 800c010:	9303      	str	r3, [sp, #12]
 800c012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c014:	443b      	add	r3, r7
 800c016:	9309      	str	r3, [sp, #36]	@ 0x24
 800c018:	e76a      	b.n	800bef0 <_vfiprintf_r+0x78>
 800c01a:	460c      	mov	r4, r1
 800c01c:	2001      	movs	r0, #1
 800c01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c022:	e7a8      	b.n	800bf76 <_vfiprintf_r+0xfe>
 800c024:	2300      	movs	r3, #0
 800c026:	f04f 0c0a 	mov.w	ip, #10
 800c02a:	4619      	mov	r1, r3
 800c02c:	3401      	adds	r4, #1
 800c02e:	9305      	str	r3, [sp, #20]
 800c030:	4620      	mov	r0, r4
 800c032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c036:	3a30      	subs	r2, #48	@ 0x30
 800c038:	2a09      	cmp	r2, #9
 800c03a:	d903      	bls.n	800c044 <_vfiprintf_r+0x1cc>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d0c6      	beq.n	800bfce <_vfiprintf_r+0x156>
 800c040:	9105      	str	r1, [sp, #20]
 800c042:	e7c4      	b.n	800bfce <_vfiprintf_r+0x156>
 800c044:	4604      	mov	r4, r0
 800c046:	2301      	movs	r3, #1
 800c048:	fb0c 2101 	mla	r1, ip, r1, r2
 800c04c:	e7f0      	b.n	800c030 <_vfiprintf_r+0x1b8>
 800c04e:	ab03      	add	r3, sp, #12
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4630      	mov	r0, r6
 800c056:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <_vfiprintf_r+0x22c>)
 800c058:	a904      	add	r1, sp, #16
 800c05a:	f7fd fcc1 	bl	80099e0 <_printf_float>
 800c05e:	4607      	mov	r7, r0
 800c060:	1c78      	adds	r0, r7, #1
 800c062:	d1d6      	bne.n	800c012 <_vfiprintf_r+0x19a>
 800c064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c066:	07d9      	lsls	r1, r3, #31
 800c068:	d405      	bmi.n	800c076 <_vfiprintf_r+0x1fe>
 800c06a:	89ab      	ldrh	r3, [r5, #12]
 800c06c:	059a      	lsls	r2, r3, #22
 800c06e:	d402      	bmi.n	800c076 <_vfiprintf_r+0x1fe>
 800c070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c072:	f7f5 ffde 	bl	8002032 <__retarget_lock_release_recursive>
 800c076:	89ab      	ldrh	r3, [r5, #12]
 800c078:	065b      	lsls	r3, r3, #25
 800c07a:	f53f af1f 	bmi.w	800bebc <_vfiprintf_r+0x44>
 800c07e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c080:	e71e      	b.n	800bec0 <_vfiprintf_r+0x48>
 800c082:	ab03      	add	r3, sp, #12
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	462a      	mov	r2, r5
 800c088:	4630      	mov	r0, r6
 800c08a:	4b06      	ldr	r3, [pc, #24]	@ (800c0a4 <_vfiprintf_r+0x22c>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	f7fd ff45 	bl	8009f1c <_printf_i>
 800c092:	e7e4      	b.n	800c05e <_vfiprintf_r+0x1e6>
 800c094:	0800ca80 	.word	0x0800ca80
 800c098:	0800ca86 	.word	0x0800ca86
 800c09c:	0800ca8a 	.word	0x0800ca8a
 800c0a0:	080099e1 	.word	0x080099e1
 800c0a4:	0800be53 	.word	0x0800be53

0800c0a8 <__sflush_r>:
 800c0a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	0716      	lsls	r6, r2, #28
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	d454      	bmi.n	800c160 <__sflush_r+0xb8>
 800c0b6:	684b      	ldr	r3, [r1, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dc02      	bgt.n	800c0c2 <__sflush_r+0x1a>
 800c0bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dd48      	ble.n	800c154 <__sflush_r+0xac>
 800c0c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	d045      	beq.n	800c154 <__sflush_r+0xac>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0ce:	682f      	ldr	r7, [r5, #0]
 800c0d0:	6a21      	ldr	r1, [r4, #32]
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	d030      	beq.n	800c138 <__sflush_r+0x90>
 800c0d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	0759      	lsls	r1, r3, #29
 800c0dc:	d505      	bpl.n	800c0ea <__sflush_r+0x42>
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	1ad2      	subs	r2, r2, r3
 800c0e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0e4:	b10b      	cbz	r3, 800c0ea <__sflush_r+0x42>
 800c0e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0e8:	1ad2      	subs	r2, r2, r3
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f0:	6a21      	ldr	r1, [r4, #32]
 800c0f2:	47b0      	blx	r6
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	d106      	bne.n	800c108 <__sflush_r+0x60>
 800c0fa:	6829      	ldr	r1, [r5, #0]
 800c0fc:	291d      	cmp	r1, #29
 800c0fe:	d82b      	bhi.n	800c158 <__sflush_r+0xb0>
 800c100:	4a28      	ldr	r2, [pc, #160]	@ (800c1a4 <__sflush_r+0xfc>)
 800c102:	410a      	asrs	r2, r1
 800c104:	07d6      	lsls	r6, r2, #31
 800c106:	d427      	bmi.n	800c158 <__sflush_r+0xb0>
 800c108:	2200      	movs	r2, #0
 800c10a:	6062      	str	r2, [r4, #4]
 800c10c:	6922      	ldr	r2, [r4, #16]
 800c10e:	04d9      	lsls	r1, r3, #19
 800c110:	6022      	str	r2, [r4, #0]
 800c112:	d504      	bpl.n	800c11e <__sflush_r+0x76>
 800c114:	1c42      	adds	r2, r0, #1
 800c116:	d101      	bne.n	800c11c <__sflush_r+0x74>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b903      	cbnz	r3, 800c11e <__sflush_r+0x76>
 800c11c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c11e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c120:	602f      	str	r7, [r5, #0]
 800c122:	b1b9      	cbz	r1, 800c154 <__sflush_r+0xac>
 800c124:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c128:	4299      	cmp	r1, r3
 800c12a:	d002      	beq.n	800c132 <__sflush_r+0x8a>
 800c12c:	4628      	mov	r0, r5
 800c12e:	f7fd fabb 	bl	80096a8 <_free_r>
 800c132:	2300      	movs	r3, #0
 800c134:	6363      	str	r3, [r4, #52]	@ 0x34
 800c136:	e00d      	b.n	800c154 <__sflush_r+0xac>
 800c138:	2301      	movs	r3, #1
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b0      	blx	r6
 800c13e:	4602      	mov	r2, r0
 800c140:	1c50      	adds	r0, r2, #1
 800c142:	d1c9      	bne.n	800c0d8 <__sflush_r+0x30>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d0c6      	beq.n	800c0d8 <__sflush_r+0x30>
 800c14a:	2b1d      	cmp	r3, #29
 800c14c:	d001      	beq.n	800c152 <__sflush_r+0xaa>
 800c14e:	2b16      	cmp	r3, #22
 800c150:	d11d      	bne.n	800c18e <__sflush_r+0xe6>
 800c152:	602f      	str	r7, [r5, #0]
 800c154:	2000      	movs	r0, #0
 800c156:	e021      	b.n	800c19c <__sflush_r+0xf4>
 800c158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c15c:	b21b      	sxth	r3, r3
 800c15e:	e01a      	b.n	800c196 <__sflush_r+0xee>
 800c160:	690f      	ldr	r7, [r1, #16]
 800c162:	2f00      	cmp	r7, #0
 800c164:	d0f6      	beq.n	800c154 <__sflush_r+0xac>
 800c166:	0793      	lsls	r3, r2, #30
 800c168:	bf18      	it	ne
 800c16a:	2300      	movne	r3, #0
 800c16c:	680e      	ldr	r6, [r1, #0]
 800c16e:	bf08      	it	eq
 800c170:	694b      	ldreq	r3, [r1, #20]
 800c172:	1bf6      	subs	r6, r6, r7
 800c174:	600f      	str	r7, [r1, #0]
 800c176:	608b      	str	r3, [r1, #8]
 800c178:	2e00      	cmp	r6, #0
 800c17a:	ddeb      	ble.n	800c154 <__sflush_r+0xac>
 800c17c:	4633      	mov	r3, r6
 800c17e:	463a      	mov	r2, r7
 800c180:	4628      	mov	r0, r5
 800c182:	6a21      	ldr	r1, [r4, #32]
 800c184:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c188:	47e0      	blx	ip
 800c18a:	2800      	cmp	r0, #0
 800c18c:	dc07      	bgt.n	800c19e <__sflush_r+0xf6>
 800c18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c196:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c19e:	4407      	add	r7, r0
 800c1a0:	1a36      	subs	r6, r6, r0
 800c1a2:	e7e9      	b.n	800c178 <__sflush_r+0xd0>
 800c1a4:	dfbffffe 	.word	0xdfbffffe

0800c1a8 <_fflush_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	690b      	ldr	r3, [r1, #16]
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	b913      	cbnz	r3, 800c1b8 <_fflush_r+0x10>
 800c1b2:	2500      	movs	r5, #0
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	b118      	cbz	r0, 800c1c2 <_fflush_r+0x1a>
 800c1ba:	6a03      	ldr	r3, [r0, #32]
 800c1bc:	b90b      	cbnz	r3, 800c1c2 <_fflush_r+0x1a>
 800c1be:	f7fe f859 	bl	800a274 <__sinit>
 800c1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0f3      	beq.n	800c1b2 <_fflush_r+0xa>
 800c1ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1cc:	07d0      	lsls	r0, r2, #31
 800c1ce:	d404      	bmi.n	800c1da <_fflush_r+0x32>
 800c1d0:	0599      	lsls	r1, r3, #22
 800c1d2:	d402      	bmi.n	800c1da <_fflush_r+0x32>
 800c1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1d6:	f7f5 ff17 	bl	8002008 <__retarget_lock_acquire_recursive>
 800c1da:	4628      	mov	r0, r5
 800c1dc:	4621      	mov	r1, r4
 800c1de:	f7ff ff63 	bl	800c0a8 <__sflush_r>
 800c1e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	07da      	lsls	r2, r3, #31
 800c1e8:	d4e4      	bmi.n	800c1b4 <_fflush_r+0xc>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	059b      	lsls	r3, r3, #22
 800c1ee:	d4e1      	bmi.n	800c1b4 <_fflush_r+0xc>
 800c1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1f2:	f7f5 ff1e 	bl	8002032 <__retarget_lock_release_recursive>
 800c1f6:	e7dd      	b.n	800c1b4 <_fflush_r+0xc>

0800c1f8 <__swhatbuf_r>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	4615      	mov	r5, r2
 800c202:	2900      	cmp	r1, #0
 800c204:	461e      	mov	r6, r3
 800c206:	b096      	sub	sp, #88	@ 0x58
 800c208:	da0c      	bge.n	800c224 <__swhatbuf_r+0x2c>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	2100      	movs	r1, #0
 800c20e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c212:	bf14      	ite	ne
 800c214:	2340      	movne	r3, #64	@ 0x40
 800c216:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c21a:	2000      	movs	r0, #0
 800c21c:	6031      	str	r1, [r6, #0]
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	b016      	add	sp, #88	@ 0x58
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	466a      	mov	r2, sp
 800c226:	f000 f863 	bl	800c2f0 <_fstat_r>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	dbed      	blt.n	800c20a <__swhatbuf_r+0x12>
 800c22e:	9901      	ldr	r1, [sp, #4]
 800c230:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c234:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c238:	4259      	negs	r1, r3
 800c23a:	4159      	adcs	r1, r3
 800c23c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c240:	e7eb      	b.n	800c21a <__swhatbuf_r+0x22>

0800c242 <__smakebuf_r>:
 800c242:	898b      	ldrh	r3, [r1, #12]
 800c244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c246:	079d      	lsls	r5, r3, #30
 800c248:	4606      	mov	r6, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	d507      	bpl.n	800c25e <__smakebuf_r+0x1c>
 800c24e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	6123      	str	r3, [r4, #16]
 800c256:	2301      	movs	r3, #1
 800c258:	6163      	str	r3, [r4, #20]
 800c25a:	b003      	add	sp, #12
 800c25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c25e:	466a      	mov	r2, sp
 800c260:	ab01      	add	r3, sp, #4
 800c262:	f7ff ffc9 	bl	800c1f8 <__swhatbuf_r>
 800c266:	9f00      	ldr	r7, [sp, #0]
 800c268:	4605      	mov	r5, r0
 800c26a:	4639      	mov	r1, r7
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7fd fa8d 	bl	800978c <_malloc_r>
 800c272:	b948      	cbnz	r0, 800c288 <__smakebuf_r+0x46>
 800c274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c278:	059a      	lsls	r2, r3, #22
 800c27a:	d4ee      	bmi.n	800c25a <__smakebuf_r+0x18>
 800c27c:	f023 0303 	bic.w	r3, r3, #3
 800c280:	f043 0302 	orr.w	r3, r3, #2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e7e2      	b.n	800c24e <__smakebuf_r+0xc>
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	6020      	str	r0, [r4, #0]
 800c298:	b15b      	cbz	r3, 800c2b2 <__smakebuf_r+0x70>
 800c29a:	4630      	mov	r0, r6
 800c29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a0:	f000 f838 	bl	800c314 <_isatty_r>
 800c2a4:	b128      	cbz	r0, 800c2b2 <__smakebuf_r+0x70>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f023 0303 	bic.w	r3, r3, #3
 800c2ac:	f043 0301 	orr.w	r3, r3, #1
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	431d      	orrs	r5, r3
 800c2b6:	81a5      	strh	r5, [r4, #12]
 800c2b8:	e7cf      	b.n	800c25a <__smakebuf_r+0x18>

0800c2ba <memmove>:
 800c2ba:	4288      	cmp	r0, r1
 800c2bc:	b510      	push	{r4, lr}
 800c2be:	eb01 0402 	add.w	r4, r1, r2
 800c2c2:	d902      	bls.n	800c2ca <memmove+0x10>
 800c2c4:	4284      	cmp	r4, r0
 800c2c6:	4623      	mov	r3, r4
 800c2c8:	d807      	bhi.n	800c2da <memmove+0x20>
 800c2ca:	1e43      	subs	r3, r0, #1
 800c2cc:	42a1      	cmp	r1, r4
 800c2ce:	d008      	beq.n	800c2e2 <memmove+0x28>
 800c2d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2d8:	e7f8      	b.n	800c2cc <memmove+0x12>
 800c2da:	4601      	mov	r1, r0
 800c2dc:	4402      	add	r2, r0
 800c2de:	428a      	cmp	r2, r1
 800c2e0:	d100      	bne.n	800c2e4 <memmove+0x2a>
 800c2e2:	bd10      	pop	{r4, pc}
 800c2e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2ec:	e7f7      	b.n	800c2de <memmove+0x24>
	...

0800c2f0 <_fstat_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4d06      	ldr	r5, [pc, #24]	@ (800c310 <_fstat_r+0x20>)
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	602b      	str	r3, [r5, #0]
 800c2fe:	f7f5 fc7b 	bl	8001bf8 <_fstat>
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	d102      	bne.n	800c30c <_fstat_r+0x1c>
 800c306:	682b      	ldr	r3, [r5, #0]
 800c308:	b103      	cbz	r3, 800c30c <_fstat_r+0x1c>
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	bd38      	pop	{r3, r4, r5, pc}
 800c30e:	bf00      	nop
 800c310:	20003ab8 	.word	0x20003ab8

0800c314 <_isatty_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	2300      	movs	r3, #0
 800c318:	4d05      	ldr	r5, [pc, #20]	@ (800c330 <_isatty_r+0x1c>)
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	602b      	str	r3, [r5, #0]
 800c320:	f7f5 fc79 	bl	8001c16 <_isatty>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_isatty_r+0x1a>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_isatty_r+0x1a>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	20003ab8 	.word	0x20003ab8

0800c334 <__assert_func>:
 800c334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c336:	4614      	mov	r4, r2
 800c338:	461a      	mov	r2, r3
 800c33a:	4b09      	ldr	r3, [pc, #36]	@ (800c360 <__assert_func+0x2c>)
 800c33c:	4605      	mov	r5, r0
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68d8      	ldr	r0, [r3, #12]
 800c342:	b954      	cbnz	r4, 800c35a <__assert_func+0x26>
 800c344:	4b07      	ldr	r3, [pc, #28]	@ (800c364 <__assert_func+0x30>)
 800c346:	461c      	mov	r4, r3
 800c348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c34c:	9100      	str	r1, [sp, #0]
 800c34e:	462b      	mov	r3, r5
 800c350:	4905      	ldr	r1, [pc, #20]	@ (800c368 <__assert_func+0x34>)
 800c352:	f000 f86f 	bl	800c434 <fiprintf>
 800c356:	f000 f87f 	bl	800c458 <abort>
 800c35a:	4b04      	ldr	r3, [pc, #16]	@ (800c36c <__assert_func+0x38>)
 800c35c:	e7f4      	b.n	800c348 <__assert_func+0x14>
 800c35e:	bf00      	nop
 800c360:	2000001c 	.word	0x2000001c
 800c364:	0800cad6 	.word	0x0800cad6
 800c368:	0800caa8 	.word	0x0800caa8
 800c36c:	0800ca9b 	.word	0x0800ca9b

0800c370 <_calloc_r>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	fba1 5402 	umull	r5, r4, r1, r2
 800c376:	b93c      	cbnz	r4, 800c388 <_calloc_r+0x18>
 800c378:	4629      	mov	r1, r5
 800c37a:	f7fd fa07 	bl	800978c <_malloc_r>
 800c37e:	4606      	mov	r6, r0
 800c380:	b928      	cbnz	r0, 800c38e <_calloc_r+0x1e>
 800c382:	2600      	movs	r6, #0
 800c384:	4630      	mov	r0, r6
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	220c      	movs	r2, #12
 800c38a:	6002      	str	r2, [r0, #0]
 800c38c:	e7f9      	b.n	800c382 <_calloc_r+0x12>
 800c38e:	462a      	mov	r2, r5
 800c390:	4621      	mov	r1, r4
 800c392:	f7fe f921 	bl	800a5d8 <memset>
 800c396:	e7f5      	b.n	800c384 <_calloc_r+0x14>

0800c398 <__ascii_mbtowc>:
 800c398:	b082      	sub	sp, #8
 800c39a:	b901      	cbnz	r1, 800c39e <__ascii_mbtowc+0x6>
 800c39c:	a901      	add	r1, sp, #4
 800c39e:	b142      	cbz	r2, 800c3b2 <__ascii_mbtowc+0x1a>
 800c3a0:	b14b      	cbz	r3, 800c3b6 <__ascii_mbtowc+0x1e>
 800c3a2:	7813      	ldrb	r3, [r2, #0]
 800c3a4:	600b      	str	r3, [r1, #0]
 800c3a6:	7812      	ldrb	r2, [r2, #0]
 800c3a8:	1e10      	subs	r0, r2, #0
 800c3aa:	bf18      	it	ne
 800c3ac:	2001      	movne	r0, #1
 800c3ae:	b002      	add	sp, #8
 800c3b0:	4770      	bx	lr
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	e7fb      	b.n	800c3ae <__ascii_mbtowc+0x16>
 800c3b6:	f06f 0001 	mvn.w	r0, #1
 800c3ba:	e7f8      	b.n	800c3ae <__ascii_mbtowc+0x16>

0800c3bc <_realloc_r>:
 800c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4615      	mov	r5, r2
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	b921      	cbnz	r1, 800c3d2 <_realloc_r+0x16>
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ce:	f7fd b9dd 	b.w	800978c <_malloc_r>
 800c3d2:	b92a      	cbnz	r2, 800c3e0 <_realloc_r+0x24>
 800c3d4:	f7fd f968 	bl	80096a8 <_free_r>
 800c3d8:	2400      	movs	r4, #0
 800c3da:	4620      	mov	r0, r4
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	f000 f841 	bl	800c466 <_malloc_usable_size_r>
 800c3e4:	4285      	cmp	r5, r0
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	d802      	bhi.n	800c3f0 <_realloc_r+0x34>
 800c3ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c3ee:	d8f4      	bhi.n	800c3da <_realloc_r+0x1e>
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	f7fd f9ca 	bl	800978c <_malloc_r>
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0ec      	beq.n	800c3d8 <_realloc_r+0x1c>
 800c3fe:	42b5      	cmp	r5, r6
 800c400:	462a      	mov	r2, r5
 800c402:	4621      	mov	r1, r4
 800c404:	bf28      	it	cs
 800c406:	4632      	movcs	r2, r6
 800c408:	f7fe f9d6 	bl	800a7b8 <memcpy>
 800c40c:	4621      	mov	r1, r4
 800c40e:	4640      	mov	r0, r8
 800c410:	f7fd f94a 	bl	80096a8 <_free_r>
 800c414:	463c      	mov	r4, r7
 800c416:	e7e0      	b.n	800c3da <_realloc_r+0x1e>

0800c418 <__ascii_wctomb>:
 800c418:	4603      	mov	r3, r0
 800c41a:	4608      	mov	r0, r1
 800c41c:	b141      	cbz	r1, 800c430 <__ascii_wctomb+0x18>
 800c41e:	2aff      	cmp	r2, #255	@ 0xff
 800c420:	d904      	bls.n	800c42c <__ascii_wctomb+0x14>
 800c422:	228a      	movs	r2, #138	@ 0x8a
 800c424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	4770      	bx	lr
 800c42c:	2001      	movs	r0, #1
 800c42e:	700a      	strb	r2, [r1, #0]
 800c430:	4770      	bx	lr
	...

0800c434 <fiprintf>:
 800c434:	b40e      	push	{r1, r2, r3}
 800c436:	b503      	push	{r0, r1, lr}
 800c438:	4601      	mov	r1, r0
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	4805      	ldr	r0, [pc, #20]	@ (800c454 <fiprintf+0x20>)
 800c43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	f7ff fd17 	bl	800be78 <_vfiprintf_r>
 800c44a:	b002      	add	sp, #8
 800c44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c450:	b003      	add	sp, #12
 800c452:	4770      	bx	lr
 800c454:	2000001c 	.word	0x2000001c

0800c458 <abort>:
 800c458:	2006      	movs	r0, #6
 800c45a:	b508      	push	{r3, lr}
 800c45c:	f000 f834 	bl	800c4c8 <raise>
 800c460:	2001      	movs	r0, #1
 800c462:	f7f5 fb96 	bl	8001b92 <_exit>

0800c466 <_malloc_usable_size_r>:
 800c466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c46a:	1f18      	subs	r0, r3, #4
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	bfbc      	itt	lt
 800c470:	580b      	ldrlt	r3, [r1, r0]
 800c472:	18c0      	addlt	r0, r0, r3
 800c474:	4770      	bx	lr

0800c476 <_raise_r>:
 800c476:	291f      	cmp	r1, #31
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4605      	mov	r5, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	d904      	bls.n	800c48a <_raise_r+0x14>
 800c480:	2316      	movs	r3, #22
 800c482:	6003      	str	r3, [r0, #0]
 800c484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c48c:	b112      	cbz	r2, 800c494 <_raise_r+0x1e>
 800c48e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c492:	b94b      	cbnz	r3, 800c4a8 <_raise_r+0x32>
 800c494:	4628      	mov	r0, r5
 800c496:	f000 f831 	bl	800c4fc <_getpid_r>
 800c49a:	4622      	mov	r2, r4
 800c49c:	4601      	mov	r1, r0
 800c49e:	4628      	mov	r0, r5
 800c4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4a4:	f000 b818 	b.w	800c4d8 <_kill_r>
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d00a      	beq.n	800c4c2 <_raise_r+0x4c>
 800c4ac:	1c59      	adds	r1, r3, #1
 800c4ae:	d103      	bne.n	800c4b8 <_raise_r+0x42>
 800c4b0:	2316      	movs	r3, #22
 800c4b2:	6003      	str	r3, [r0, #0]
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	e7e7      	b.n	800c488 <_raise_r+0x12>
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4c0:	4798      	blx	r3
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	e7e0      	b.n	800c488 <_raise_r+0x12>
	...

0800c4c8 <raise>:
 800c4c8:	4b02      	ldr	r3, [pc, #8]	@ (800c4d4 <raise+0xc>)
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	6818      	ldr	r0, [r3, #0]
 800c4ce:	f7ff bfd2 	b.w	800c476 <_raise_r>
 800c4d2:	bf00      	nop
 800c4d4:	2000001c 	.word	0x2000001c

0800c4d8 <_kill_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4d06      	ldr	r5, [pc, #24]	@ (800c4f8 <_kill_r+0x20>)
 800c4de:	4604      	mov	r4, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	602b      	str	r3, [r5, #0]
 800c4e6:	f7f5 fb44 	bl	8001b72 <_kill>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d102      	bne.n	800c4f4 <_kill_r+0x1c>
 800c4ee:	682b      	ldr	r3, [r5, #0]
 800c4f0:	b103      	cbz	r3, 800c4f4 <_kill_r+0x1c>
 800c4f2:	6023      	str	r3, [r4, #0]
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20003ab8 	.word	0x20003ab8

0800c4fc <_getpid_r>:
 800c4fc:	f7f5 bb32 	b.w	8001b64 <_getpid>

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr
