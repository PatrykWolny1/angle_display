
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800dd18  0800dd18  0000ed18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e470  0800e470  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e470  0800e470  0000f470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e478  0800e478  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e47c  0800e47c  0000f47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e480  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003904  200001e8  0800e668  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003aec  0800e668  00010aec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d13f  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004891  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  00031be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d2  00000000  00000000  00033580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d800  00000000  00000000  00034952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001feac  00000000  00000000  00052152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b571  00000000  00000000  00071ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ef0  00000000  00000000  0010d5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001154a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dd00 	.word	0x0800dd00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800dd00 	.word	0x0800dd00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <computeDT>:
#include "compute_angles.h"
#include "mpu6050.h"

PitchRollYaw resultsPRY;

double computeDT(uint32_t *prevTick) {
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    uint32_t currTick = osKernelGetTickCount();  // Get current tick
 8000fec:	f005 f846 	bl	800607c <osKernelGetTickCount>
 8000ff0:	6178      	str	r0, [r7, #20]
    uint32_t tickFreq = osKernelGetTickFreq();  // Get tick frequency (e.g., 1000 Hz)
 8000ff2:	f005 f858 	bl	80060a6 <osKernelGetTickFreq>
 8000ff6:	6138      	str	r0, [r7, #16]

    double dt = (double)(currTick - *prevTick) / tickFreq;  // Convert ticks to seconds
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f9ef 	bl	80003e4 <__aeabi_ui2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	6938      	ldr	r0, [r7, #16]
 800100c:	f7ff f9ea 	bl	80003e4 <__aeabi_ui2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff fb88 	bl	800072c <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	e9c7 2302 	strd	r2, r3, [r7, #8]
    *prevTick = currTick;  // Update previous tick for the next call
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	601a      	str	r2, [r3, #0]

    return dt;  // Return time difference in seconds
 800102a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <radiansToDegrees>:

float radiansToDegrees(float radians) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    return radians * (180.0f / M_PI);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff f9f1 	bl	8000428 <__aeabi_f2d>
 8001046:	a308      	add	r3, pc, #32	@ (adr r3, 8001068 <radiansToDegrees+0x30>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa44 	bl	80004d8 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd16 	bl	8000a88 <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	1a63c1f8 	.word	0x1a63c1f8
 800106c:	404ca5dc 	.word	0x404ca5dc

08001070 <computeAngles>:

void complementary_filter(MPU6050_Data *dataToProcess) {

}

PitchRollYaw* computeAngles(MPU6050_Data *dataToProcess, uint32_t *prevTick) {
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f9d1 	bl	8000428 <__aeabi_f2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f9ca 	bl	8000428 <__aeabi_f2d>
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800109c:	f008 fd6e 	bl	8009b7c <pow>
 80010a0:	4680      	mov	r8, r0
 80010a2:	4689      	mov	r9, r1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9bd 	bl	8000428 <__aeabi_f2d>
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b6:	f008 fd61 	bl	8009b7c <pow>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4640      	mov	r0, r8
 80010c0:	4649      	mov	r1, r9
 80010c2:	f7ff f853 	bl	800016c <__adddf3>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f008 fdbd 	bl	8009c4c <sqrt>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f008 fd4d 	bl	8009b78 <atan2>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fccf 	bl	8000a88 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a5a      	ldr	r2, [pc, #360]	@ (8001258 <computeAngles+0x1e8>)
 80010ee:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f997 	bl	8000428 <__aeabi_f2d>
 80010fa:	4604      	mov	r4, r0
 80010fc:	460d      	mov	r5, r1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f990 	bl	8000428 <__aeabi_f2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001110:	f008 fd34 	bl	8009b7c <pow>
 8001114:	4680      	mov	r8, r0
 8001116:	4689      	mov	r9, r1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f983 	bl	8000428 <__aeabi_f2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800112a:	f008 fd27 	bl	8009b7c <pow>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4640      	mov	r0, r8
 8001134:	4649      	mov	r1, r9
 8001136:	f7ff f819 	bl	800016c <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f008 fd83 	bl	8009c4c <sqrt>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f008 fd13 	bl	8009b78 <atan2>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fc95 	bl	8000a88 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <computeAngles+0x1e8>)
 8001162:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 8001164:	4b3c      	ldr	r3, [pc, #240]	@ (8001258 <computeAngles+0x1e8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff65 	bl	8001038 <radiansToDegrees>
 800116e:	4603      	mov	r3, r0
 8001170:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <computeAngles+0x1e8>)
 8001172:	6013      	str	r3, [r2, #0]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 8001174:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <computeAngles+0x1e8>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <radiansToDegrees>
 800117e:	4603      	mov	r3, r0
 8001180:	4a35      	ldr	r2, [pc, #212]	@ (8001258 <computeAngles+0x1e8>)
 8001182:	6053      	str	r3, [r2, #4]

    double dt = computeDT(prevTick);
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f7ff ff2d 	bl	8000fe4 <computeDT>
 800118a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    printf("%.2f\r\n", dt);
 800118e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001192:	4832      	ldr	r0, [pc, #200]	@ (800125c <computeAngles+0x1ec>)
 8001194:	f00a fca6 	bl	800bae4 <iprintf>

    resultsPRY.pitchGyroDelta = dataToProcess->gyroX * dt;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f943 	bl	8000428 <__aeabi_f2d>
 80011a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011a6:	f7ff f997 	bl	80004d8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc69 	bl	8000a88 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a27      	ldr	r2, [pc, #156]	@ (8001258 <computeAngles+0x1e8>)
 80011ba:	6153      	str	r3, [r2, #20]
    resultsPRY.rollGyroDelta = dataToProcess->gyroY * dt;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f931 	bl	8000428 <__aeabi_f2d>
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	f7ff f985 	bl	80004d8 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc57 	bl	8000a88 <__aeabi_d2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <computeAngles+0x1e8>)
 80011de:	6193      	str	r3, [r2, #24]
    resultsPRY.yawGyroDelta = dataToProcess->gyroZ * dt;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f91f 	bl	8000428 <__aeabi_f2d>
 80011ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ee:	f7ff f973 	bl	80004d8 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fc45 	bl	8000a88 <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <computeAngles+0x1e8>)
 8001202:	61d3      	str	r3, [r2, #28]

    resultsPRY.pitchGyro += resultsPRY.pitchGyroDelta;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <computeAngles+0x1e8>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <computeAngles+0x1e8>)
 800120a:	6952      	ldr	r2, [r2, #20]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fc90 	bl	8000b34 <__addsf3>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <computeAngles+0x1e8>)
 800121a:	609a      	str	r2, [r3, #8]
    resultsPRY.rollGyro += resultsPRY.rollGyroDelta;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <computeAngles+0x1e8>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <computeAngles+0x1e8>)
 8001222:	6992      	ldr	r2, [r2, #24]
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fc84 	bl	8000b34 <__addsf3>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <computeAngles+0x1e8>)
 8001232:	60da      	str	r2, [r3, #12]
    resultsPRY.yawGyro += resultsPRY.yawGyroDelta;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <computeAngles+0x1e8>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <computeAngles+0x1e8>)
 800123a:	69d2      	ldr	r2, [r2, #28]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fc78 	bl	8000b34 <__addsf3>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <computeAngles+0x1e8>)
 800124a:	611a      	str	r2, [r3, #16]

    return &resultsPRY;
 800124c:	4b02      	ldr	r3, [pc, #8]	@ (8001258 <computeAngles+0x1e8>)
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001258:	20000204 	.word	0x20000204
 800125c:	0800dd18 	.word	0x0800dd18

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <MX_DMA_Init+0x48>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <MX_DMA_Init+0x48>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <MX_DMA_Init+0x48>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2105      	movs	r1, #5
 8001282:	2010      	movs	r0, #16
 8001284:	f001 fa2d 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001288:	2010      	movs	r0, #16
 800128a:	f001 fa46 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2105      	movs	r1, #5
 8001292:	2011      	movs	r0, #17
 8001294:	f001 fa25 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f001 fa3e 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <MX_FREERTOS_Init>:
  * @retval None
  */
osMessageQueueId_t dataQueue;
osMutexId_t uartMutex;
osSemaphoreId_t dmaTxCompleteSemaphore;
void MX_FREERTOS_Init(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
    osKernelInitialize();
 80012b2:	f004 fe9b 	bl	8005fec <osKernelInitialize>

    // Create the data QUEUE
    dataQueue = osMessageQueueNew(20, sizeof(MPU6050_Data), NULL); // Queue with 20 slots
 80012b6:	2200      	movs	r2, #0
 80012b8:	2124      	movs	r1, #36	@ 0x24
 80012ba:	2014      	movs	r0, #20
 80012bc:	f005 f9d6 	bl	800666c <osMessageQueueNew>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a31      	ldr	r2, [pc, #196]	@ (8001388 <MX_FREERTOS_Init+0xdc>)
 80012c4:	6013      	str	r3, [r2, #0]
    if (dataQueue == NULL) {
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <MX_FREERTOS_Init+0xdc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <MX_FREERTOS_Init+0x2c>
		printf("No data in QUEUE!");
 80012ce:	482f      	ldr	r0, [pc, #188]	@ (800138c <MX_FREERTOS_Init+0xe0>)
 80012d0:	f00a fc08 	bl	800bae4 <iprintf>
		while (1);
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MX_FREERTOS_Init+0x28>
	}

    // Create the UART mutex
    uartMutex = osMutexNew(NULL);  // Create a mutex
 80012d8:	2000      	movs	r0, #0
 80012da:	f004 ff99 	bl	8006210 <osMutexNew>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001390 <MX_FREERTOS_Init+0xe4>)
 80012e2:	6013      	str	r3, [r2, #0]
    if (uartMutex == NULL) {
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <MX_FREERTOS_Init+0xe4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <MX_FREERTOS_Init+0x4a>
        printf("Failed to create UART Mutex!");
 80012ec:	4829      	ldr	r0, [pc, #164]	@ (8001394 <MX_FREERTOS_Init+0xe8>)
 80012ee:	f00a fbf9 	bl	800bae4 <iprintf>
        while (1);  // Handle error
 80012f2:	bf00      	nop
 80012f4:	e7fd      	b.n	80012f2 <MX_FREERTOS_Init+0x46>
    }

    dmaTxCompleteSemaphore = osSemaphoreNew(1, 0, NULL);  // Initial count is 0
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2001      	movs	r0, #1
 80012fc:	f005 f896 	bl	800642c <osSemaphoreNew>
 8001300:	4603      	mov	r3, r0
 8001302:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <MX_FREERTOS_Init+0xec>)
 8001304:	6013      	str	r3, [r2, #0]
    if (dmaTxCompleteSemaphore == NULL) {
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <MX_FREERTOS_Init+0xec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <MX_FREERTOS_Init+0x6c>
        printf("Failed to create DMA semaphore!");
 800130e:	4823      	ldr	r0, [pc, #140]	@ (800139c <MX_FREERTOS_Init+0xf0>)
 8001310:	f00a fbe8 	bl	800bae4 <iprintf>
        while (1);
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <MX_FREERTOS_Init+0x68>
    }

    osThreadAttr_t taskReadData = {
 8001318:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131c:	2224      	movs	r2, #36	@ 0x24
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00a fd5b 	bl	800bddc <memset>
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <MX_FREERTOS_Init+0xf4>)
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800132a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001330:	2320      	movs	r3, #32
 8001332:	643b      	str	r3, [r7, #64]	@ 0x40
        .name = "mpu6050_ReadData",
        .priority = osPriorityAboveNormal,
        .stack_size = 512 * 4
    };

    osThreadAttr_t taskProcessData = {
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2224      	movs	r2, #36	@ 0x24
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00a fd4e 	bl	800bddc <memset>
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_FREERTOS_Init+0xf8>)
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	2318      	movs	r3, #24
 800134c:	61fb      	str	r3, [r7, #28]
        .name = "DataProcessing",
        .priority = osPriorityNormal,
        .stack_size = 512 * 4
    };

    osThreadNew(mpu6050_ReadData, NULL, &taskReadData);
 800134e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <MX_FREERTOS_Init+0xfc>)
 8001358:	f004 fead 	bl	80060b6 <osThreadNew>
    osThreadId_t processDataTaskHandle = osThreadNew(DataProcessing, NULL, &taskProcessData);
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	461a      	mov	r2, r3
 8001360:	2100      	movs	r1, #0
 8001362:	4812      	ldr	r0, [pc, #72]	@ (80013ac <MX_FREERTOS_Init+0x100>)
 8001364:	f004 fea7 	bl	80060b6 <osThreadNew>
 8001368:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (processDataTaskHandle == NULL) {
 800136a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <MX_FREERTOS_Init+0xce>
        printf("Failed to create DataProcessing task\r\n");
 8001370:	480f      	ldr	r0, [pc, #60]	@ (80013b0 <MX_FREERTOS_Init+0x104>)
 8001372:	f00a fc1f 	bl	800bbb4 <puts>
        while (1);
 8001376:	bf00      	nop
 8001378:	e7fd      	b.n	8001376 <MX_FREERTOS_Init+0xca>
    }
    vTaskStartScheduler();
 800137a:	f006 fe61 	bl	8008040 <vTaskStartScheduler>

    osKernelStart();
 800137e:	f004 fe57 	bl	8006030 <osKernelStart>

    while (1) {
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <MX_FREERTOS_Init+0xd6>
 8001386:	bf00      	nop
 8001388:	20000224 	.word	0x20000224
 800138c:	0800dd20 	.word	0x0800dd20
 8001390:	20000228 	.word	0x20000228
 8001394:	0800dd34 	.word	0x0800dd34
 8001398:	2000022c 	.word	0x2000022c
 800139c:	0800dd54 	.word	0x0800dd54
 80013a0:	0800dd74 	.word	0x0800dd74
 80013a4:	0800dd88 	.word	0x0800dd88
 80013a8:	08001c21 	.word	0x08001c21
 80013ac:	08001ca5 	.word	0x08001ca5
 80013b0:	0800dd98 	.word	0x0800dd98

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a1a      	ldr	r2, [pc, #104]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_GPIO_Init+0xcc>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2120      	movs	r1, #32
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_GPIO_Init+0xd0>)
 800142e:	f001 fda9 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_GPIO_Init+0xd4>)
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_GPIO_Init+0xd8>)
 8001448:	f001 fc18 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	2320      	movs	r3, #32
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_GPIO_Init+0xd0>)
 8001464:	f001 fc0a 	bl	8002c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2105      	movs	r1, #5
 800146c:	2028      	movs	r0, #40	@ 0x28
 800146e:	f001 f938 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001472:	2028      	movs	r0, #40	@ 0x28
 8001474:	f001 f951 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800
 8001488:	10110000 	.word	0x10110000
 800148c:	40011000 	.word	0x40011000

08001490 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C1_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <MX_I2C1_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C1_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ce:	f001 fd93 	bl	8002ff8 <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f000 f8ac 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000230 	.word	0x20000230
 80014e4:	40005400 	.word	0x40005400
 80014e8:	00061a80 	.word	0x00061a80

080014ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0x70>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d123      	bne.n	8001554 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001528:	2312      	movs	r3, #18
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_I2C_MspInit+0x78>)
 8001538:	f001 fba0 	bl	8002c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001546:	61d3      	str	r3, [r2, #28]
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_I2C_MspInit+0x74>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40005400 	.word	0x40005400
 8001560:	40021000 	.word	0x40021000
 8001564:	40010c00 	.word	0x40010c00

08001568 <main>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    HAL_Init();
 800156c:	f000 ffae 	bl	80024cc <HAL_Init>
    SystemClock_Config();
 8001570:	f000 f80c 	bl	800158c <SystemClock_Config>
    MX_GPIO_Init();
 8001574:	f7ff ff1e 	bl	80013b4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001578:	f7ff ff8a 	bl	8001490 <MX_I2C1_Init>
    MX_DMA_Init();
 800157c:	f7ff fe70 	bl	8001260 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8001580:	f000 fdd4 	bl	800212c <MX_USART2_UART_Init>
    MX_FREERTOS_Init();
 8001584:	f7ff fe92 	bl	80012ac <MX_FREERTOS_Init>

	while (1) {
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <main+0x20>

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b090      	sub	sp, #64	@ 0x40
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2228      	movs	r2, #40	@ 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00a fc1e 	bl	800bddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b6:	2310      	movs	r3, #16
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80015be:	2300      	movs	r3, #0
 80015c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015c2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fef9 	bl	80043c4 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80015d8:	f000 f82c 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	230f      	movs	r3, #15
 80015de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f966 	bl	80048c8 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001602:	f000 f817 	bl	8001634 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3740      	adds	r7, #64	@ 0x40
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001622:	f000 ff69 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40012c00 	.word	0x40012c00

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <Error_Handler+0x8>

08001640 <MPU6050_Init>:
#include "mpu6050.h"
#include "write_printf.h"

extern MPU6050_Data dataToProcess;

void MPU6050_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 8001646:	f000 fa69 	bl	8001b1c <MPU6050_SoftReset>

    HAL_Delay(2000);
 800164a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800164e:	f000 ff6f 	bl	8002530 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 8001652:	236b      	movs	r3, #107	@ 0x6b
 8001654:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 8001656:	2300      	movs	r3, #0
 8001658:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	21d0      	movs	r1, #208	@ 0xd0
 8001668:	4854      	ldr	r0, [pc, #336]	@ (80017bc <MPU6050_Init+0x17c>)
 800166a:	f001 fe09 	bl	8003280 <HAL_I2C_Master_Transmit>
    }

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f107 030b 	add.w	r3, r7, #11
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	221c      	movs	r2, #28
 8001686:	21d0      	movs	r1, #208	@ 0xd0
 8001688:	484c      	ldr	r0, [pc, #304]	@ (80017bc <MPU6050_Init+0x17c>)
 800168a:	f001 fef7 	bl	800347c <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	f107 030b 	add.w	r3, r7, #11
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2301      	movs	r3, #1
 80016a4:	221b      	movs	r2, #27
 80016a6:	21d0      	movs	r1, #208	@ 0xd0
 80016a8:	4844      	ldr	r0, [pc, #272]	@ (80017bc <MPU6050_Init+0x17c>)
 80016aa:	f001 fee7 	bl	800347c <HAL_I2C_Mem_Write>

    uint8_t config;


    // Set sample rate to 100 Hz
    config = 0x09; // 1000 / (1 + 9) = 100 Hz
 80016ae:	2309      	movs	r3, #9
 80016b0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030a 	add.w	r3, r7, #10
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2219      	movs	r2, #25
 80016c6:	21d0      	movs	r1, #208	@ 0xd0
 80016c8:	483c      	ldr	r0, [pc, #240]	@ (80017bc <MPU6050_Init+0x17c>)
 80016ca:	f001 fed7 	bl	800347c <HAL_I2C_Mem_Write>

    // Set DLPF_CFG to 4 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x02;
 80016ce:	2302      	movs	r3, #2
 80016d0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	f107 030a 	add.w	r3, r7, #10
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	221a      	movs	r2, #26
 80016e6:	21d0      	movs	r1, #208	@ 0xd0
 80016e8:	4834      	ldr	r0, [pc, #208]	@ (80017bc <MPU6050_Init+0x17c>)
 80016ea:	f001 fec7 	bl	800347c <HAL_I2C_Mem_Write>

    config = 0x01;  // ACCEL_HPF = 1 (5 Hz cutoff frequency)
 80016ee:	2301      	movs	r3, #1
 80016f0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2301      	movs	r3, #1
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f107 030a 	add.w	r3, r7, #10
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	221c      	movs	r2, #28
 8001706:	21d0      	movs	r1, #208	@ 0xd0
 8001708:	482c      	ldr	r0, [pc, #176]	@ (80017bc <MPU6050_Init+0x17c>)
 800170a:	f001 feb7 	bl	800347c <HAL_I2C_Mem_Write>

    uint8_t whoAmI = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, 1, HAL_MAX_DELAY);
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2301      	movs	r3, #1
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	f107 0309 	add.w	r3, r7, #9
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2301      	movs	r3, #1
 8001724:	2275      	movs	r2, #117	@ 0x75
 8001726:	21d0      	movs	r1, #208	@ 0xd0
 8001728:	4824      	ldr	r0, [pc, #144]	@ (80017bc <MPU6050_Init+0x17c>)
 800172a:	f001 ffa1 	bl	8003670 <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 800172e:	7a7b      	ldrb	r3, [r7, #9]
 8001730:	2b68      	cmp	r3, #104	@ 0x68
 8001732:	d005      	beq.n	8001740 <MPU6050_Init+0x100>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001734:	7a7b      	ldrb	r3, [r7, #9]
 8001736:	4619      	mov	r1, r3
 8001738:	4821      	ldr	r0, [pc, #132]	@ (80017c0 <MPU6050_Init+0x180>)
 800173a:	f00a f9d3 	bl	800bae4 <iprintf>
 800173e:	e004      	b.n	800174a <MPU6050_Init+0x10a>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	4619      	mov	r1, r3
 8001744:	481f      	ldr	r0, [pc, #124]	@ (80017c4 <MPU6050_Init+0x184>)
 8001746:	f00a f9cd 	bl	800bae4 <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	2301      	movs	r3, #1
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	2223      	movs	r2, #35	@ 0x23
 800175e:	21d0      	movs	r1, #208	@ 0xd0
 8001760:	4816      	ldr	r0, [pc, #88]	@ (80017bc <MPU6050_Init+0x17c>)
 8001762:	f001 ff85 	bl	8003670 <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	2301      	movs	r3, #1
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	226a      	movs	r2, #106	@ 0x6a
 8001778:	21d0      	movs	r1, #208	@ 0xd0
 800177a:	4810      	ldr	r0, [pc, #64]	@ (80017bc <MPU6050_Init+0x17c>)
 800177c:	f001 ff78 	bl	8003670 <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	221c      	movs	r2, #28
 8001792:	21d0      	movs	r1, #208	@ 0xd0
 8001794:	4809      	ldr	r0, [pc, #36]	@ (80017bc <MPU6050_Init+0x17c>)
 8001796:	f001 ff6b 	bl	8003670 <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2301      	movs	r3, #1
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	1d7b      	adds	r3, r7, #5
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2301      	movs	r3, #1
 80017aa:	221b      	movs	r2, #27
 80017ac:	21d0      	movs	r1, #208	@ 0xd0
 80017ae:	4803      	ldr	r0, [pc, #12]	@ (80017bc <MPU6050_Init+0x17c>)
 80017b0:	f001 ff5e 	bl	8003670 <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000230 	.word	0x20000230
 80017c0:	0800ddc0 	.word	0x0800ddc0
 80017c4:	0800ddec 	.word	0x0800ddec

080017c8 <MPU6050_ReadAll>:

void MPU6050_ReadAll(MPU6050_Data *dataToProcess) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08e      	sub	sp, #56	@ 0x38
 80017cc:	af04      	add	r7, sp, #16
 80017ce:	6078      	str	r0, [r7, #4]

    int16_t accelX, accelY, accelZ;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	230e      	movs	r3, #14
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	223b      	movs	r2, #59	@ 0x3b
 80017e4:	21d0      	movs	r1, #208	@ 0xd0
 80017e6:	485d      	ldr	r0, [pc, #372]	@ (800195c <MPU6050_ReadAll+0x194>)
 80017e8:	f001 ff42 	bl	8003670 <HAL_I2C_Mem_Read>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d159      	bne.n	80018a6 <MPU6050_ReadAll+0xde>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]) - dataToProcess->accelOffsets[0];
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001808:	b29b      	uxth	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]) - dataToProcess->accelOffsets[1];
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21a      	sxth	r2, r3
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	b21b      	sxth	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b21b      	sxth	r3, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001826:	b29b      	uxth	r3, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]) - dataToProcess->accelOffsets[2];
 800182e:	7c3b      	ldrb	r3, [r7, #16]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7c7b      	ldrb	r3, [r7, #17]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21b      	sxth	r3, r3
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001844:	b29b      	uxth	r3, r3
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	847b      	strh	r3, [r7, #34]	@ 0x22
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]) - dataToProcess->gyroOffsets[0];
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	7d7b      	ldrb	r3, [r7, #21]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001862:	b29b      	uxth	r3, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	843b      	strh	r3, [r7, #32]
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]) - dataToProcess->gyroOffsets[1];
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	b21b      	sxth	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b21b      	sxth	r3, r3
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001880:	b29b      	uxth	r3, r3
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	83fb      	strh	r3, [r7, #30]
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]) - dataToProcess->gyroOffsets[2];
 8001888:	7e3b      	ldrb	r3, [r7, #24]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7e7b      	ldrb	r3, [r7, #25]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800189e:	b29b      	uxth	r3, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	83bb      	strh	r3, [r7, #28]
    } else {
    	//Error handle
    }
    dataToProcess->accelX = accelX / 16384.0f;
 80018a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9f6 	bl	8000c9c <__aeabi_i2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff faf8 	bl	8000eac <__aeabi_fdiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	601a      	str	r2, [r3, #0]
    dataToProcess->accelY = accelY / 16384.0f;
 80018c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff f9e7 	bl	8000c9c <__aeabi_i2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fae9 	bl	8000eac <__aeabi_fdiv>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	605a      	str	r2, [r3, #4]
    dataToProcess->accelZ = accelZ / 16384.0f;
 80018e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f9d8 	bl	8000c9c <__aeabi_i2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fada 	bl	8000eac <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]

    dataToProcess->gyroX = gyroX / 131.0f;
 8001900:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f9c9 	bl	8000c9c <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4914      	ldr	r1, [pc, #80]	@ (8001960 <MPU6050_ReadAll+0x198>)
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff facc 	bl	8000eac <__aeabi_fdiv>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
    dataToProcess->gyroY = gyroY / 131.0f;
 800191c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9bb 	bl	8000c9c <__aeabi_i2f>
 8001926:	4603      	mov	r3, r0
 8001928:	490d      	ldr	r1, [pc, #52]	@ (8001960 <MPU6050_ReadAll+0x198>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fabe 	bl	8000eac <__aeabi_fdiv>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	611a      	str	r2, [r3, #16]
    dataToProcess->gyroZ = gyroZ / 131.0f;
 8001938:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9ad 	bl	8000c9c <__aeabi_i2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4906      	ldr	r1, [pc, #24]	@ (8001960 <MPU6050_ReadAll+0x198>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fab0 	bl	8000eac <__aeabi_fdiv>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	615a      	str	r2, [r3, #20]
}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000230 	.word	0x20000230
 8001960:	43030000 	.word	0x43030000

08001964 <MPU6050_CalibrateExternal>:
    		dataToProcess->gyroOffsets[2]);

    HAL_Delay(2000);
}

void MPU6050_CalibrateExternal(MPU6050_Data *dataToProcess) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    // Calculate offsets
    MPU6050_CalculateOffsets(dataToProcess->accelOffsets, dataToProcess->gyroOffsets);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f103 0218 	add.w	r2, r3, #24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	331e      	adds	r3, #30
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f000 f829 	bl	80019d0 <MPU6050_CalculateOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001984:	4619      	mov	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800198c:	461a      	mov	r2, r3
    		dataToProcess->accelOffsets[2]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <MPU6050_CalibrateExternal+0x64>)
 8001996:	f00a f8a5 	bl	800bae4 <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019a0:	4619      	mov	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019a8:	461a      	mov	r2, r3
    		dataToProcess->gyroOffsets[2]);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 80019b0:	4806      	ldr	r0, [pc, #24]	@ (80019cc <MPU6050_CalibrateExternal+0x68>)
 80019b2:	f00a f897 	bl	800bae4 <iprintf>

    HAL_Delay(2000);
 80019b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019ba:	f000 fdb9 	bl	8002530 <HAL_Delay>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800de14 	.word	0x0800de14
 80019cc:	0800de38 	.word	0x0800de38

080019d0 <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b092      	sub	sp, #72	@ 0x48
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]

    int n = 4000;
 80019f2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80019f6:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[14];

    for (int i = 0; i < n; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	e056      	b.n	8001aac <MPU6050_CalculateOffsets+0xdc>
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 14, HAL_MAX_DELAY) == HAL_OK) {
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	230e      	movs	r3, #14
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	223b      	movs	r2, #59	@ 0x3b
 8001a12:	21d0      	movs	r1, #208	@ 0xd0
 8001a14:	4840      	ldr	r0, [pc, #256]	@ (8001b18 <MPU6050_CalculateOffsets+0x148>)
 8001a16:	f001 fe2b 	bl	8003670 <HAL_I2C_Mem_Read>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d142      	bne.n	8001aa6 <MPU6050_CalculateOffsets+0xd6>
        	accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 8001a20:	7a3b      	ldrb	r3, [r7, #8]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	7a7b      	ldrb	r3, [r7, #9]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a32:	4413      	add	r3, r2
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
        	accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8001a36:	7abb      	ldrb	r3, [r7, #10]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a48:	4413      	add	r3, r2
 8001a4a:	633b      	str	r3, [r7, #48]	@ 0x30
        	accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]) - 16384;
 8001a4c:	7b3b      	ldrb	r3, [r7, #12]
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	7b7b      	ldrb	r3, [r7, #13]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a60:	4413      	add	r3, r2
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	gyroX_sum  += (int16_t)((rawData[8] << 8) | rawData[9]);
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7c7b      	ldrb	r3, [r7, #17]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a76:	4413      	add	r3, r2
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
        	gyroY_sum  += (int16_t)((rawData[10] << 8) | rawData[11]);
 8001a7a:	7cbb      	ldrb	r3, [r7, #18]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	4413      	add	r3, r2
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        	gyroZ_sum  += (int16_t)((rawData[12] << 8) | rawData[13]);
 8001a90:	7d3b      	ldrb	r3, [r7, #20]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	7d7b      	ldrb	r3, [r7, #21]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++) {
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dba4      	blt.n	80019fe <MPU6050_CalculateOffsets+0x2e>
        	//Error handle
        }
    }

    // Calculate average offsets
    accelOffsets[0] = (accelX_sum / n);
 8001ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = (accelY_sum / n);
 8001ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fb92 f2f3 	sdiv	r2, r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3302      	adds	r3, #2
 8001ace:	b212      	sxth	r2, r2
 8001ad0:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / n);
 8001ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	b212      	sxth	r2, r2
 8001ae0:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = (gyroX_sum / n);
 8001ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = (gyroY_sum / n);
 8001af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	fb92 f2f3 	sdiv	r2, r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3302      	adds	r3, #2
 8001afc:	b212      	sxth	r2, r2
 8001afe:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = (gyroZ_sum / n);
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	b212      	sxth	r2, r2
 8001b0e:	801a      	strh	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	3738      	adds	r7, #56	@ 0x38
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000230 	.word	0x20000230

08001b1c <MPU6050_SoftReset>:
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
}

void MPU6050_SoftReset(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af04      	add	r7, sp, #16
    uint8_t data_rst = 0x80; // DEVICE_RESET bit
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data_rst, 1, HAL_MAX_DELAY);
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	226b      	movs	r2, #107	@ 0x6b
 8001b38:	21d0      	movs	r1, #208	@ 0xd0
 8001b3a:	482d      	ldr	r0, [pc, #180]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001b3c:	f001 fc9e 	bl	800347c <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 8001b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b44:	f000 fcf4 	bl	8002530 <HAL_Delay>
    uint8_t data[2] = {0x00, 0x00}; // Zero offset
 8001b48:	2300      	movs	r3, #0
 8001b4a:	80bb      	strh	r3, [r7, #4]

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	2302      	movs	r3, #2
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	2206      	movs	r2, #6
 8001b5e:	21d0      	movs	r1, #208	@ 0xd0
 8001b60:	4823      	ldr	r0, [pc, #140]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001b62:	f001 fc8b 	bl	800347c <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2301      	movs	r3, #1
 8001b76:	2208      	movs	r2, #8
 8001b78:	21d0      	movs	r1, #208	@ 0xd0
 8001b7a:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001b7c:	f001 fc7e 	bl	800347c <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2302      	movs	r3, #2
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	220a      	movs	r2, #10
 8001b92:	21d0      	movs	r1, #208	@ 0xd0
 8001b94:	4816      	ldr	r0, [pc, #88]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001b96:	f001 fc71 	bl	800347c <HAL_I2C_Mem_Write>

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	2213      	movs	r2, #19
 8001bac:	21d0      	movs	r1, #208	@ 0xd0
 8001bae:	4810      	ldr	r0, [pc, #64]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001bb0:	f001 fc64 	bl	800347c <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	2215      	movs	r2, #21
 8001bc6:	21d0      	movs	r1, #208	@ 0xd0
 8001bc8:	4809      	ldr	r0, [pc, #36]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001bca:	f001 fc57 	bl	800347c <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2217      	movs	r2, #23
 8001be0:	21d0      	movs	r1, #208	@ 0xd0
 8001be2:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <MPU6050_SoftReset+0xd4>)
 8001be4:	f001 fc4a 	bl	800347c <HAL_I2C_Mem_Write>

}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000230 	.word	0x20000230

08001bf4 <HAL_UART_TxCpltCallback>:

extern osMessageQueueId_t dataQueue;
extern osMutexId_t uartMutex;
extern osSemaphoreId_t dmaTxCompleteSemaphore;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_UART_TxCpltCallback+0x24>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d104      	bne.n	8001c0e <HAL_UART_TxCpltCallback+0x1a>
        osSemaphoreRelease(dmaTxCompleteSemaphore);
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_UART_TxCpltCallback+0x28>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f004 fceb 	bl	80065e4 <osSemaphoreRelease>

    }
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002d0 	.word	0x200002d0
 8001c1c:	2000022c 	.word	0x2000022c

08001c20 <mpu6050_ReadData>:

void mpu6050_ReadData(void *argument) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0be      	sub	sp, #248	@ 0xf8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    MPU6050_Data dataToProcess;

    char buffer[200];


    MPU6050_Init();
 8001c28:	f7ff fd0a 	bl	8001640 <MPU6050_Init>
//    MPU6050_CalibrateInternal(&dataToProcess);
    MPU6050_CalibrateExternal(&dataToProcess);
 8001c2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe97 	bl	8001964 <MPU6050_CalibrateExternal>
    printf("MPU6050 initialized\r\n");
 8001c36:	4816      	ldr	r0, [pc, #88]	@ (8001c90 <mpu6050_ReadData+0x70>)
 8001c38:	f009 ffbc 	bl	800bbb4 <puts>

    while (1) {
        // Read sensor data
        MPU6050_ReadAll(&dataToProcess);
 8001c3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdc1 	bl	80017c8 <MPU6050_ReadAll>
//                 "Xa=%6.2f Xg=%6.2f Ya=%6.2f Yg=%6.2f Za=%6.2f Zg=%6.2f\r\n",
//                 dataToProcess.accelX, dataToProcess.gyroX, dataToProcess.accelY,
//				 dataToProcess.gyroY, dataToProcess.accelZ, dataToProcess.gyroZ);

        // Transmit data over UART
        if (osMutexAcquire(uartMutex, 100) == osOK) {  // Use timeout to avoid deadlocks
 8001c46:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <mpu6050_ReadData+0x74>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2164      	movs	r1, #100	@ 0x64
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 fb65 	bl	800631c <osMutexAcquire>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <mpu6050_ReadData+0x44>
//                    printf("UART DMA timeout\r\n");
//                }
//            } else {
//                printf("UART DMA transmission failed\r\n");
//            }
            osMutexRelease(uartMutex);  // Release mutex
 8001c58:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <mpu6050_ReadData+0x74>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fba8 	bl	80063b2 <osMutexRelease>
 8001c62:	e002      	b.n	8001c6a <mpu6050_ReadData+0x4a>
        } else {
            printf("UART mutex acquire failed\r\n");
 8001c64:	480c      	ldr	r0, [pc, #48]	@ (8001c98 <mpu6050_ReadData+0x78>)
 8001c66:	f009 ffa5 	bl	800bbb4 <puts>
        }

        // Send data to the queue
        if (osMessageQueuePut(dataQueue, &dataToProcess, 0, 200) != osOK) {
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <mpu6050_ReadData+0x7c>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001c72:	23c8      	movs	r3, #200	@ 0xc8
 8001c74:	2200      	movs	r2, #0
 8001c76:	f004 fd6d 	bl	8006754 <osMessageQueuePut>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <mpu6050_ReadData+0x66>
            printf("Queue is full\r\n");
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <mpu6050_ReadData+0x80>)
 8001c82:	f009 ff97 	bl	800bbb4 <puts>
        }

        osDelay(2);  // Prevent rapid polling
 8001c86:	2002      	movs	r0, #2
 8001c88:	f004 faa7 	bl	80061da <osDelay>
        MPU6050_ReadAll(&dataToProcess);
 8001c8c:	e7d6      	b.n	8001c3c <mpu6050_ReadData+0x1c>
 8001c8e:	bf00      	nop
 8001c90:	0800df38 	.word	0x0800df38
 8001c94:	20000228 	.word	0x20000228
 8001c98:	0800df50 	.word	0x0800df50
 8001c9c:	20000224 	.word	0x20000224
 8001ca0:	0800df6c 	.word	0x0800df6c

08001ca4 <DataProcessing>:
    }
}


void DataProcessing(void *argument) {
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b0cc      	sub	sp, #304	@ 0x130
 8001caa:	af0a      	add	r7, sp, #40	@ 0x28
 8001cac:	60f8      	str	r0, [r7, #12]
    PitchRollYaw *resultsPRY;


    char buffer[200];

    printf("DataProcessing task started\r\n");
 8001cae:	4846      	ldr	r0, [pc, #280]	@ (8001dc8 <DataProcessing+0x124>)
 8001cb0:	f009 ff80 	bl	800bbb4 <puts>

    uint32_t prevTick = osKernelGetTickCount();  // Initialize previous tick
 8001cb4:	f004 f9e2 	bl	800607c <osKernelGetTickCount>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	617b      	str	r3, [r7, #20]

    while (1) {

        // Get data from queue
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <DataProcessing+0x128>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8001cc4:	23c8      	movs	r3, #200	@ 0xc8
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f004 fda4 	bl	8006814 <osMessageQueueGet>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f4      	bne.n	8001cbc <DataProcessing+0x18>
        	// Record the start time

            resultsPRY = computeAngles(&receivedData, &prevTick);
 8001cd2:	f107 0214 	add.w	r2, r7, #20
 8001cd6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f9c7 	bl	8001070 <computeAngles>
 8001ce2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

            // Format processed data
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
            		"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8001ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cea:	681b      	ldr	r3, [r3, #0]
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb9b 	bl	8000428 <__aeabi_f2d>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	460d      	mov	r5, r1
            		"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8001cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001cfa:	685b      	ldr	r3, [r3, #4]
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fb93 	bl	8000428 <__aeabi_f2d>
 8001d02:	4680      	mov	r8, r0
 8001d04:	4689      	mov	r9, r1
            		"Yaw=%6.2f\r\n", resultsPRY->pitchAcc, resultsPRY->rollAcc, resultsPRY->pitchGyro,
 8001d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d0a:	689b      	ldr	r3, [r3, #8]
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fb8b 	bl	8000428 <__aeabi_f2d>
 8001d12:	4682      	mov	sl, r0
 8001d14:	468b      	mov	fp, r1
					resultsPRY->rollGyro, resultsPRY->yawGyro);
 8001d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d1a:	68db      	ldr	r3, [r3, #12]
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fb83 	bl	8000428 <__aeabi_f2d>
 8001d22:	e9c7 0100 	strd	r0, r1, [r7]
					resultsPRY->rollGyro, resultsPRY->yawGyro);
 8001d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d2a:	691b      	ldr	r3, [r3, #16]
            snprintf(buffer, sizeof(buffer), "Acc | Pitch=%6.2f Roll=%6.2f | Gyro | Pitch=%6.2f Roll=%6.2f"
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fb7b 	bl	8000428 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	f107 0018 	add.w	r0, r7, #24
 8001d3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d46:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d4a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d4e:	e9cd 4500 	strd	r4, r5, [sp]
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <DataProcessing+0x12c>)
 8001d54:	21c8      	movs	r1, #200	@ 0xc8
 8001d56:	f009 ff35 	bl	800bbc4 <sniprintf>

            // Transmit processed data over UART
            if (osMutexAcquire(uartMutex, 100) == osOK) {  // Use timeout to avoid deadlocks
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <DataProcessing+0x130>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2164      	movs	r1, #100	@ 0x64
 8001d60:	4618      	mov	r0, r3
 8001d62:	f004 fadb 	bl	800631c <osMutexAcquire>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d125      	bne.n	8001db8 <DataProcessing+0x114>
                if (HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer)) == HAL_OK) {
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe f9ed 	bl	8000150 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <DataProcessing+0x134>)
 8001d82:	f003 fa79 	bl	8005278 <HAL_UART_Transmit_DMA>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <DataProcessing+0x102>
                    if (osSemaphoreAcquire(dmaTxCompleteSemaphore, 100) != osOK) {
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <DataProcessing+0x138>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2164      	movs	r1, #100	@ 0x64
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 fbd4 	bl	8006540 <osSemaphoreAcquire>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <DataProcessing+0x108>
                        printf("UART DMA timeout\r\n");
 8001d9e:	4810      	ldr	r0, [pc, #64]	@ (8001de0 <DataProcessing+0x13c>)
 8001da0:	f009 ff08 	bl	800bbb4 <puts>
 8001da4:	e002      	b.n	8001dac <DataProcessing+0x108>
                    }
                } else {
                    printf("UART DMA transmission failed\r\n");
 8001da6:	480f      	ldr	r0, [pc, #60]	@ (8001de4 <DataProcessing+0x140>)
 8001da8:	f009 ff04 	bl	800bbb4 <puts>
                }
                osMutexRelease(uartMutex);  // Release mutex
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <DataProcessing+0x130>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 fafe 	bl	80063b2 <osMutexRelease>
 8001db6:	e002      	b.n	8001dbe <DataProcessing+0x11a>
            } else {
                printf("UART mutex acquire failed\r\n");
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <DataProcessing+0x144>)
 8001dba:	f009 fefb 	bl	800bbb4 <puts>
            }
    		osDelay(20);  // Prevent rapid polling
 8001dbe:	2014      	movs	r0, #20
 8001dc0:	f004 fa0b 	bl	80061da <osDelay>
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 8001dc4:	e77a      	b.n	8001cbc <DataProcessing+0x18>
 8001dc6:	bf00      	nop
 8001dc8:	0800df7c 	.word	0x0800df7c
 8001dcc:	20000224 	.word	0x20000224
 8001dd0:	0800df9c 	.word	0x0800df9c
 8001dd4:	20000228 	.word	0x20000228
 8001dd8:	200002d0 	.word	0x200002d0
 8001ddc:	2000022c 	.word	0x2000022c
 8001de0:	0800dfe4 	.word	0x0800dfe4
 8001de4:	0800dff8 	.word	0x0800dff8
 8001de8:	0800df50 	.word	0x0800df50

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001df2:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <HAL_MspInit+0x68>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_MspInit+0x68>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6193      	str	r3, [r2, #24]
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_MspInit+0x68>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_MspInit+0x68>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_MspInit+0x68>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_MspInit+0x68>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	f06f 0001 	mvn.w	r0, #1
 8001e2a:	f000 fc5a 	bl	80026e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_MspInit+0x6c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_MspInit+0x6c>)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000

08001e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	@ 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e72:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_InitTick+0xd0>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <HAL_InitTick+0xd0>)
 8001e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_InitTick+0xd0>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8a:	f107 020c 	add.w	r2, r7, #12
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fe87 	bl	8004ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e9a:	f002 fe71 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 8001e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea2:	4a23      	ldr	r2, [pc, #140]	@ (8001f30 <HAL_InitTick+0xd4>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001eae:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001eb0:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <HAL_InitTick+0xdc>)
 8001eb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001eb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ed4:	4817      	ldr	r0, [pc, #92]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001ed6:	f002 feb5 	bl	8004c44 <HAL_TIM_Base_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d11b      	bne.n	8001f20 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ee8:	4812      	ldr	r0, [pc, #72]	@ (8001f34 <HAL_InitTick+0xd8>)
 8001eea:	f002 ff03 	bl	8004cf4 <HAL_TIM_Base_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001efc:	2019      	movs	r0, #25
 8001efe:	f000 fc0c 	bl	800271a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d808      	bhi.n	8001f1a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	2019      	movs	r0, #25
 8001f0e:	f000 fbe8 	bl	80026e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <HAL_InitTick+0xe0>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e002      	b.n	8001f20 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3730      	adds	r7, #48	@ 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	431bde83 	.word	0x431bde83
 8001f34:	20000284 	.word	0x20000284
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	20000004 	.word	0x20000004

08001f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <NMI_Handler+0x4>

08001f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <MemManage_Handler+0x4>

08001f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <DMA1_Channel6_IRQHandler+0x10>)
 8001f7a:	f000 fd4b 	bl	8002a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000318 	.word	0x20000318

08001f88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <DMA1_Channel7_IRQHandler+0x10>)
 8001f8e:	f000 fd41 	bl	8002a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000035c 	.word	0x2000035c

08001f9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <TIM1_UP_IRQHandler+0x10>)
 8001fa2:	f002 fef9 	bl	8004d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000284 	.word	0x20000284

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f003 f9cf 	bl	8005358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002d0 	.word	0x200002d0

08001fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fcc:	f000 fff2 	bl	8002fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <_kill>:

int _kill(int pid, int sig)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fec:	f009 ffae 	bl	800bf4c <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2216      	movs	r2, #22
 8001ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_exit>:

void _exit (int status)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffe7 	bl	8001fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <_exit+0x12>

08002018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e00a      	b.n	8002040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4601      	mov	r1, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf0      	blt.n	800202a <_read+0x12>
  }

  return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002078:	605a      	str	r2, [r3, #4]
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f009 ff32 	bl	800bf4c <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20005000 	.word	0x20005000
 8002114:	00000400 	.word	0x00000400
 8002118:	200002cc 	.word	0x200002cc
 800211c:	20003af0 	.word	0x20003af0

08002120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002130:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002132:	4a12      	ldr	r2, [pc, #72]	@ (800217c <MX_USART2_UART_Init+0x50>)
 8002134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002138:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800213c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_USART2_UART_Init+0x4c>)
 8002164:	f002 ffac 	bl	80050c0 <HAL_UART_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216e:	f7ff fa61 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200002d0 	.word	0x200002d0
 800217c:	40004400 	.word	0x40004400

08002180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3f      	ldr	r2, [pc, #252]	@ (8002298 <HAL_UART_MspInit+0x118>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d177      	bne.n	8002290 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021a0:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a3d      	ldr	r2, [pc, #244]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021aa:	61d3      	str	r3, [r2, #28]
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b38      	ldr	r3, [pc, #224]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a37      	ldr	r2, [pc, #220]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_UART_MspInit+0x11c>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021d0:	230c      	movs	r3, #12
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2302      	movs	r3, #2
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	482f      	ldr	r0, [pc, #188]	@ (80022a0 <HAL_UART_MspInit+0x120>)
 80021e4:	f000 fd4a 	bl	8002c7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 80021ea:	4a2f      	ldr	r2, [pc, #188]	@ (80022a8 <HAL_UART_MspInit+0x128>)
 80021ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ee:	4b2d      	ldr	r3, [pc, #180]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021fa:	4b2a      	ldr	r3, [pc, #168]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002206:	4b27      	ldr	r3, [pc, #156]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 800220e:	2220      	movs	r2, #32
 8002210:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002212:	4b24      	ldr	r3, [pc, #144]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 8002214:	2200      	movs	r2, #0
 8002216:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002218:	4822      	ldr	r0, [pc, #136]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 800221a:	f000 fa8d 	bl	8002738 <HAL_DMA_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8002224:	f7ff fa06 	bl	8001634 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a1e      	ldr	r2, [pc, #120]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 800222c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800222e:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_UART_MspInit+0x124>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_UART_MspInit+0x130>)
 8002238:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800223a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 800223c:	2210      	movs	r2, #16
 800223e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002248:	2280      	movs	r2, #128	@ 0x80
 800224a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002266:	f000 fa67 	bl	8002738 <HAL_DMA_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002270:	f7ff f9e0 	bl	8001634 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
 800227a:	4a0c      	ldr	r2, [pc, #48]	@ (80022ac <HAL_UART_MspInit+0x12c>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2105      	movs	r1, #5
 8002284:	2026      	movs	r0, #38	@ 0x26
 8002286:	f000 fa2c 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800228a:	2026      	movs	r0, #38	@ 0x26
 800228c:	f000 fa45 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004400 	.word	0x40004400
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010800 	.word	0x40010800
 80022a4:	20000318 	.word	0x20000318
 80022a8:	4002006c 	.word	0x4002006c
 80022ac:	2000035c 	.word	0x2000035c
 80022b0:	40020080 	.word	0x40020080

080022b4 <_write>:
 */

#include "write_printf.h"
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	4804      	ldr	r0, [pc, #16]	@ (80022dc <_write+0x28>)
 80022cc:	f002 ff48 	bl	8005160 <HAL_UART_Transmit>
    return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200002d0 	.word	0x200002d0

080022e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022e0:	f7ff ff1e 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e4:	480b      	ldr	r0, [pc, #44]	@ (8002314 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022e6:	490c      	ldr	r1, [pc, #48]	@ (8002318 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022e8:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022fc:	4c09      	ldr	r4, [pc, #36]	@ (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230a:	f009 fe25 	bl	800bf58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800230e:	f7ff f92b 	bl	8001568 <main>
  bx lr
 8002312:	4770      	bx	lr
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800231c:	0800e480 	.word	0x0800e480
  ldr r2, =_sbss
 8002320:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002324:	20003aec 	.word	0x20003aec

08002328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC1_2_IRQHandler>

0800232a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
 800233c:	f7ff f97a 	bl	8001634 <Error_Handler>
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e007      	b.n	800235a <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	2100      	movs	r1, #0
 8002350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d9f4      	bls.n	800234a <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	721a      	strb	r2, [r3, #8]
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
 8002380:	f7ff f958 	bl	8001634 <Error_Handler>
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7a1b      	ldrb	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d905      	bls.n	800239c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
}
 8002392:	bf00      	nop
 8002394:	f7ff f94e 	bl	8001634 <Error_Handler>
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7a1b      	ldrb	r3, [r3, #8]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	b2d1      	uxtb	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	7211      	strb	r1, [r2, #8]
 80023a8:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80023aa:	f3ef 8211 	mrs	r2, BASEPRI
 80023ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
 80023e4:	f7ff f926 	bl	8001634 <Error_Handler>
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7a1b      	ldrb	r3, [r3, #8]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7a1b      	ldrb	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d905      	bls.n	800240c <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
}
 8002402:	bf00      	nop
 8002404:	f7ff f916 	bl	8001634 <Error_Handler>
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7a1b      	ldrb	r3, [r3, #8]
 8002410:	461a      	mov	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002420:	bf00      	nop
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002438:	f009 fd88 	bl	800bf4c <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	2216      	movs	r2, #22
 8002440:	601a      	str	r2, [r3, #0]
    return;
 8002442:	e016      	b.n	8002472 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002444:	200c      	movs	r0, #12
 8002446:	f008 fd79 	bl	800af3c <malloc>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff63 	bl	800232a <stm32_lock_init>
    return;
 8002464:	e005      	b.n	8002472 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002466:	b672      	cpsid	i
}
 8002468:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800246a:	f7ff f8e3 	bl	8001634 <Error_Handler>
 800246e:	bf00      	nop
 8002470:	e7fd      	b.n	800246e <__retarget_lock_init_recursive+0x44>
}
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002486:	b672      	cpsid	i
}
 8002488:	bf00      	nop
 800248a:	f7ff f8d3 	bl	8001634 <Error_Handler>
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff6a 	bl	800236e <stm32_lock_acquire>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
 80024b4:	f7ff f8be 	bl	8001634 <Error_Handler>
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff87 	bl	80023d2 <stm32_lock_release>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_Init+0x28>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_Init+0x28>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f8f5 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	200f      	movs	r0, #15
 80024e4:	f7ff fcba 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fc80 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_IncTick+0x1c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_IncTick+0x20>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a03      	ldr	r2, [pc, #12]	@ (8002518 <HAL_IncTick+0x20>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000008 	.word	0x20000008
 8002518:	200003b8 	.word	0x200003b8

0800251c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b02      	ldr	r3, [pc, #8]	@ (800252c <HAL_GetTick+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	200003b8 	.word	0x200003b8

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fff0 	bl	800251c <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffe0 	bl	800251c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000008 	.word	0x20000008

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4906      	ldr	r1, [pc, #24]	@ (8002610 <__NVIC_EnableIRQ+0x34>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff4f 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff64 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ffb2 	bl	8002668 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff81 	bl	8002614 <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff57 	bl	80025dc <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e043      	b.n	80027d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_DMA_Init+0xa8>)
 8002756:	4413      	add	r3, r2
 8002758:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <HAL_DMA_Init+0xac>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	009a      	lsls	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <HAL_DMA_Init+0xb0>)
 800276a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002782:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	bffdfff8 	.word	0xbffdfff8
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_DMA_Start_IT+0x20>
 8002808:	2302      	movs	r3, #2
 800280a:	e04b      	b.n	80028a4 <HAL_DMA_Start_IT+0xb8>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d13a      	bne.n	8002896 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f9eb 	bl	8002c20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 020e 	orr.w	r2, r2, #14
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e00f      	b.n	8002884 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 020a 	orr.w	r2, r2, #10
 8002882:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e005      	b.n	80028a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800289e:	2302      	movs	r3, #2
 80028a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d008      	beq.n	80028d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2204      	movs	r2, #4
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e020      	b.n	8002918 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 020e 	bic.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fe:	2101      	movs	r1, #1
 8002900:	fa01 f202 	lsl.w	r2, r1, r2
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002916:	7bfb      	ldrb	r3, [r7, #15]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d005      	beq.n	8002948 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2204      	movs	r2, #4
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e051      	b.n	80029ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 020e 	bic.w	r2, r2, #14
 8002956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_DMA_Abort_IT+0xd4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d029      	beq.n	80029c6 <HAL_DMA_Abort_IT+0xa2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a21      	ldr	r2, [pc, #132]	@ (80029fc <HAL_DMA_Abort_IT+0xd8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d022      	beq.n	80029c2 <HAL_DMA_Abort_IT+0x9e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_DMA_Abort_IT+0xdc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01a      	beq.n	80029bc <HAL_DMA_Abort_IT+0x98>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_DMA_Abort_IT+0xe0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d012      	beq.n	80029b6 <HAL_DMA_Abort_IT+0x92>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_DMA_Abort_IT+0xe4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00a      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x8c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_DMA_Abort_IT+0xe8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d102      	bne.n	80029aa <HAL_DMA_Abort_IT+0x86>
 80029a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029a8:	e00e      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ae:	e00b      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029b4:	e008      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ba:	e005      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029c0:	e002      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029c2:	2310      	movs	r3, #16
 80029c4:	e000      	b.n	80029c8 <HAL_DMA_Abort_IT+0xa4>
 80029c6:	2301      	movs	r3, #1
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_DMA_Abort_IT+0xec>)
 80029ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
    } 
  }
  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40020008 	.word	0x40020008
 80029fc:	4002001c 	.word	0x4002001c
 8002a00:	40020030 	.word	0x40020030
 8002a04:	40020044 	.word	0x40020044
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	4002006c 	.word	0x4002006c
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04f      	beq.n	8002adc <HAL_DMA_IRQHandler+0xc8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d04a      	beq.n	8002adc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a66      	ldr	r2, [pc, #408]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d029      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0xae>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a65      	ldr	r2, [pc, #404]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0xaa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a63      	ldr	r2, [pc, #396]	@ (8002c0c <HAL_DMA_IRQHandler+0x1f8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xa4>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a62      	ldr	r2, [pc, #392]	@ (8002c10 <HAL_DMA_IRQHandler+0x1fc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0x9e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a60      	ldr	r2, [pc, #384]	@ (8002c14 <HAL_DMA_IRQHandler+0x200>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00a      	beq.n	8002aac <HAL_DMA_IRQHandler+0x98>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c18 <HAL_DMA_IRQHandler+0x204>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x92>
 8002aa0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aa4:	e00e      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002aa6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002aaa:	e00b      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002aac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ab0:	e008      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ab2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ab6:	e005      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abc:	e002      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002abe:	2340      	movs	r3, #64	@ 0x40
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_IRQHandler+0xb0>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	4a55      	ldr	r2, [pc, #340]	@ (8002c1c <HAL_DMA_IRQHandler+0x208>)
 8002ac6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8094 	beq.w	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ada:	e08e      	b.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d056      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x186>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d051      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020a 	bic.w	r2, r2, #10
 8002b12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a38      	ldr	r2, [pc, #224]	@ (8002c04 <HAL_DMA_IRQHandler+0x1f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d029      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x166>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a37      	ldr	r2, [pc, #220]	@ (8002c08 <HAL_DMA_IRQHandler+0x1f4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d022      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x162>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a35      	ldr	r2, [pc, #212]	@ (8002c0c <HAL_DMA_IRQHandler+0x1f8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x15c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a34      	ldr	r2, [pc, #208]	@ (8002c10 <HAL_DMA_IRQHandler+0x1fc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x156>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a32      	ldr	r2, [pc, #200]	@ (8002c14 <HAL_DMA_IRQHandler+0x200>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x150>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a31      	ldr	r2, [pc, #196]	@ (8002c18 <HAL_DMA_IRQHandler+0x204>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x14a>
 8002b58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b5c:	e00e      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b62:	e00b      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b68:	e008      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b6e:	e005      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b74:	e002      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b76:	2320      	movs	r3, #32
 8002b78:	e000      	b.n	8002b7c <HAL_DMA_IRQHandler+0x168>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	4a27      	ldr	r2, [pc, #156]	@ (8002c1c <HAL_DMA_IRQHandler+0x208>)
 8002b7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d034      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b98:	e02f      	b.n	8002bfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d028      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 020e 	bic.w	r2, r2, #14
 8002bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
    }
  }
  return;
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
}
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40020008 	.word	0x40020008
 8002c08:	4002001c 	.word	0x4002001c
 8002c0c:	40020030 	.word	0x40020030
 8002c10:	40020044 	.word	0x40020044
 8002c14:	40020058 	.word	0x40020058
 8002c18:	4002006c 	.word	0x4002006c
 8002c1c:	40020000 	.word	0x40020000

08002c20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b10      	cmp	r3, #16
 8002c4c:	d108      	bne.n	8002c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c5e:	e007      	b.n	8002c70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b08b      	sub	sp, #44	@ 0x2c
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8e:	e169      	b.n	8002f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c90:	2201      	movs	r2, #1
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f040 8158 	bne.w	8002f5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a9a      	ldr	r2, [pc, #616]	@ (8002f1c <HAL_GPIO_Init+0x2a0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d05e      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a98      	ldr	r2, [pc, #608]	@ (8002f1c <HAL_GPIO_Init+0x2a0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d875      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002cbe:	4a98      	ldr	r2, [pc, #608]	@ (8002f20 <HAL_GPIO_Init+0x2a4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d058      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a96      	ldr	r2, [pc, #600]	@ (8002f20 <HAL_GPIO_Init+0x2a4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d86f      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002cca:	4a96      	ldr	r2, [pc, #600]	@ (8002f24 <HAL_GPIO_Init+0x2a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d052      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
 8002cd0:	4a94      	ldr	r2, [pc, #592]	@ (8002f24 <HAL_GPIO_Init+0x2a8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d869      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002cd6:	4a94      	ldr	r2, [pc, #592]	@ (8002f28 <HAL_GPIO_Init+0x2ac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04c      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
 8002cdc:	4a92      	ldr	r2, [pc, #584]	@ (8002f28 <HAL_GPIO_Init+0x2ac>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d863      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002ce2:	4a92      	ldr	r2, [pc, #584]	@ (8002f2c <HAL_GPIO_Init+0x2b0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d046      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
 8002ce8:	4a90      	ldr	r2, [pc, #576]	@ (8002f2c <HAL_GPIO_Init+0x2b0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d85d      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d82a      	bhi.n	8002d48 <HAL_GPIO_Init+0xcc>
 8002cf2:	2b12      	cmp	r3, #18
 8002cf4:	d859      	bhi.n	8002daa <HAL_GPIO_Init+0x12e>
 8002cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <HAL_GPIO_Init+0x80>)
 8002cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfc:	08002d77 	.word	0x08002d77
 8002d00:	08002d51 	.word	0x08002d51
 8002d04:	08002d63 	.word	0x08002d63
 8002d08:	08002da5 	.word	0x08002da5
 8002d0c:	08002dab 	.word	0x08002dab
 8002d10:	08002dab 	.word	0x08002dab
 8002d14:	08002dab 	.word	0x08002dab
 8002d18:	08002dab 	.word	0x08002dab
 8002d1c:	08002dab 	.word	0x08002dab
 8002d20:	08002dab 	.word	0x08002dab
 8002d24:	08002dab 	.word	0x08002dab
 8002d28:	08002dab 	.word	0x08002dab
 8002d2c:	08002dab 	.word	0x08002dab
 8002d30:	08002dab 	.word	0x08002dab
 8002d34:	08002dab 	.word	0x08002dab
 8002d38:	08002dab 	.word	0x08002dab
 8002d3c:	08002dab 	.word	0x08002dab
 8002d40:	08002d59 	.word	0x08002d59
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	4a79      	ldr	r2, [pc, #484]	@ (8002f30 <HAL_GPIO_Init+0x2b4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4e:	e02c      	b.n	8002daa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	623b      	str	r3, [r7, #32]
          break;
 8002d56:	e029      	b.n	8002dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	623b      	str	r3, [r7, #32]
          break;
 8002d60:	e024      	b.n	8002dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	3308      	adds	r3, #8
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e01f      	b.n	8002dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	330c      	adds	r3, #12
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e01a      	b.n	8002dac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	623b      	str	r3, [r7, #32]
          break;
 8002d82:	e013      	b.n	8002dac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d105      	bne.n	8002d98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	611a      	str	r2, [r3, #16]
          break;
 8002d96:	e009      	b.n	8002dac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	615a      	str	r2, [r3, #20]
          break;
 8002da2:	e003      	b.n	8002dac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
          break;
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x130>
          break;
 8002daa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2bff      	cmp	r3, #255	@ 0xff
 8002db0:	d801      	bhi.n	8002db6 <HAL_GPIO_Init+0x13a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	e001      	b.n	8002dba <HAL_GPIO_Init+0x13e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2bff      	cmp	r3, #255	@ 0xff
 8002dc0:	d802      	bhi.n	8002dc8 <HAL_GPIO_Init+0x14c>
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	e002      	b.n	8002dce <HAL_GPIO_Init+0x152>
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	3b08      	subs	r3, #8
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	210f      	movs	r1, #15
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	fa01 f303 	lsl.w	r3, r1, r3
 8002de8:	431a      	orrs	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80b1 	beq.w	8002f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f34 <HAL_GPIO_Init+0x2b8>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4a4c      	ldr	r2, [pc, #304]	@ (8002f34 <HAL_GPIO_Init+0x2b8>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6193      	str	r3, [r2, #24]
 8002e08:	4b4a      	ldr	r3, [pc, #296]	@ (8002f34 <HAL_GPIO_Init+0x2b8>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e14:	4a48      	ldr	r2, [pc, #288]	@ (8002f38 <HAL_GPIO_Init+0x2bc>)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a40      	ldr	r2, [pc, #256]	@ (8002f3c <HAL_GPIO_Init+0x2c0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_GPIO_Init+0x1ec>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3f      	ldr	r2, [pc, #252]	@ (8002f40 <HAL_GPIO_Init+0x2c4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00d      	beq.n	8002e64 <HAL_GPIO_Init+0x1e8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f44 <HAL_GPIO_Init+0x2c8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <HAL_GPIO_Init+0x1e4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3d      	ldr	r2, [pc, #244]	@ (8002f48 <HAL_GPIO_Init+0x2cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <HAL_GPIO_Init+0x1e0>
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e004      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e60:	2302      	movs	r3, #2
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_GPIO_Init+0x1ee>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6c:	f002 0203 	and.w	r2, r2, #3
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	4093      	lsls	r3, r2
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e7a:	492f      	ldr	r1, [pc, #188]	@ (8002f38 <HAL_GPIO_Init+0x2bc>)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e94:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	492c      	ldr	r1, [pc, #176]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	4928      	ldr	r1, [pc, #160]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ebc:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4922      	ldr	r1, [pc, #136]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60cb      	str	r3, [r1, #12]
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	491e      	ldr	r1, [pc, #120]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4918      	ldr	r1, [pc, #96]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4914      	ldr	r1, [pc, #80]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d021      	beq.n	8002f50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <HAL_GPIO_Init+0x2d0>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e021      	b.n	8002f5e <HAL_GPIO_Init+0x2e2>
 8002f1a:	bf00      	nop
 8002f1c:	10320000 	.word	0x10320000
 8002f20:	10310000 	.word	0x10310000
 8002f24:	10220000 	.word	0x10220000
 8002f28:	10210000 	.word	0x10210000
 8002f2c:	10120000 	.word	0x10120000
 8002f30:	10110000 	.word	0x10110000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010800 	.word	0x40010800
 8002f40:	40010c00 	.word	0x40010c00
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40011400 	.word	0x40011400
 8002f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_GPIO_Init+0x304>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4909      	ldr	r1, [pc, #36]	@ (8002f80 <HAL_GPIO_Init+0x304>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	3301      	adds	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f47f ae8e 	bne.w	8002c90 <HAL_GPIO_Init+0x14>
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	372c      	adds	r7, #44	@ 0x2c
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	611a      	str	r2, [r3, #16]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fbe:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fca:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f806 	bl	8002fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e12b      	b.n	8003262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fa64 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	@ 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800304a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800305a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800305c:	f001 fd7c 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8003060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a81      	ldr	r2, [pc, #516]	@ (800326c <HAL_I2C_Init+0x274>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d807      	bhi.n	800307c <HAL_I2C_Init+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a80      	ldr	r2, [pc, #512]	@ (8003270 <HAL_I2C_Init+0x278>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	e006      	b.n	800308a <HAL_I2C_Init+0x92>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a7d      	ldr	r2, [pc, #500]	@ (8003274 <HAL_I2C_Init+0x27c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	bf94      	ite	ls
 8003084:	2301      	movls	r3, #1
 8003086:	2300      	movhi	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0e7      	b.n	8003262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a78      	ldr	r2, [pc, #480]	@ (8003278 <HAL_I2C_Init+0x280>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0c9b      	lsrs	r3, r3, #18
 800309c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	@ (800326c <HAL_I2C_Init+0x274>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d802      	bhi.n	80030cc <HAL_I2C_Init+0xd4>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3301      	adds	r3, #1
 80030ca:	e009      	b.n	80030e0 <HAL_I2C_Init+0xe8>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	4a69      	ldr	r2, [pc, #420]	@ (800327c <HAL_I2C_Init+0x284>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	495c      	ldr	r1, [pc, #368]	@ (800326c <HAL_I2C_Init+0x274>)
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d819      	bhi.n	8003134 <HAL_I2C_Init+0x13c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e59      	subs	r1, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fbb1 f3f3 	udiv	r3, r1, r3
 800310e:	1c59      	adds	r1, r3, #1
 8003110:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003114:	400b      	ands	r3, r1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_I2C_Init+0x138>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1e59      	subs	r1, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fbb1 f3f3 	udiv	r3, r1, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	e051      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003130:	2304      	movs	r3, #4
 8003132:	e04f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d111      	bne.n	8003160 <HAL_I2C_Init+0x168>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e012      	b.n	8003186 <HAL_I2C_Init+0x18e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	0099      	lsls	r1, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x196>
 800318a:	2301      	movs	r3, #1
 800318c:	e022      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_I2C_Init+0x1bc>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e58      	subs	r0, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	440b      	add	r3, r1
 80031a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031b2:	e00f      	b.n	80031d4 <HAL_I2C_Init+0x1dc>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e58      	subs	r0, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	0099      	lsls	r1, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	6809      	ldr	r1, [r1, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6911      	ldr	r1, [r2, #16]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	430b      	orrs	r3, r1
 8003216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	000186a0 	.word	0x000186a0
 8003270:	001e847f 	.word	0x001e847f
 8003274:	003d08ff 	.word	0x003d08ff
 8003278:	431bde83 	.word	0x431bde83
 800327c:	10624dd3 	.word	0x10624dd3

08003280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
 8003290:	4613      	mov	r3, r2
 8003292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff f942 	bl	800251c <HAL_GetTick>
 8003298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	f040 80e0 	bne.w	8003468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2319      	movs	r3, #25
 80032ae:	2201      	movs	r2, #1
 80032b0:	4970      	ldr	r1, [pc, #448]	@ (8003474 <HAL_I2C_Master_Transmit+0x1f4>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fe50 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	e0d3      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2C_Master_Transmit+0x50>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0cc      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d007      	beq.n	80032f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	@ 0x21
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2210      	movs	r2, #16
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	893a      	ldrh	r2, [r7, #8]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a50      	ldr	r2, [pc, #320]	@ (8003478 <HAL_I2C_Master_Transmit+0x1f8>)
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fc0a 	bl	8003b58 <I2C_MasterRequestWrite>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e08d      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003364:	e066      	b.n	8003434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	6a39      	ldr	r1, [r7, #32]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 ff0e 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	2b04      	cmp	r3, #4
 800337c:	d107      	bne.n	800338e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e06b      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d11b      	bne.n	8003408 <HAL_I2C_Master_Transmit+0x188>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	6a39      	ldr	r1, [r7, #32]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 ff05 	bl	800421c <I2C_WaitOnBTFFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01a      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d194      	bne.n	8003366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000

0800347c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003496:	f7ff f841 	bl	800251c <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	f040 80d9 	bne.w	800365c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	2319      	movs	r3, #25
 80034b0:	2201      	movs	r2, #1
 80034b2:	496d      	ldr	r1, [pc, #436]	@ (8003668 <HAL_I2C_Mem_Write+0x1ec>)
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fd4f 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0cc      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_I2C_Mem_Write+0x56>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0c5      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2221      	movs	r2, #33	@ 0x21
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a3a      	ldr	r2, [r7, #32]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003528:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a4d      	ldr	r2, [pc, #308]	@ (800366c <HAL_I2C_Mem_Write+0x1f0>)
 8003538:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353a:	88f8      	ldrh	r0, [r7, #6]
 800353c:	893a      	ldrh	r2, [r7, #8]
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4603      	mov	r3, r0
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fb86 	bl	8003c5c <I2C_RequestMemoryWrite>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d052      	beq.n	80035fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e081      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fe14 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	2b04      	cmp	r3, #4
 8003570:	d107      	bne.n	8003582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06b      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11b      	bne.n	80035fc <HAL_I2C_Mem_Write+0x180>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d017      	beq.n	80035fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1aa      	bne.n	800355a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fe07 	bl	800421c <I2C_WaitOnBTFFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	2b04      	cmp	r3, #4
 800361a:	d107      	bne.n	800362c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e016      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	00100002 	.word	0x00100002
 800366c:	ffff0000 	.word	0xffff0000

08003670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08c      	sub	sp, #48	@ 0x30
 8003674:	af02      	add	r7, sp, #8
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	460b      	mov	r3, r1
 8003684:	813b      	strh	r3, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7fe ff45 	bl	800251c <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	f040 8250 	bne.w	8003b42 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	2319      	movs	r3, #25
 80036a8:	2201      	movs	r2, #1
 80036aa:	4982      	ldr	r1, [pc, #520]	@ (80038b4 <HAL_I2C_Mem_Read+0x244>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fc53 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	e243      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_I2C_Mem_Read+0x5a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e23c      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d007      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2222      	movs	r2, #34	@ 0x22
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2240      	movs	r2, #64	@ 0x40
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a62      	ldr	r2, [pc, #392]	@ (80038b8 <HAL_I2C_Mem_Read+0x248>)
 8003730:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003732:	88f8      	ldrh	r0, [r7, #6]
 8003734:	893a      	ldrh	r2, [r7, #8]
 8003736:	8979      	ldrh	r1, [r7, #10]
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4603      	mov	r3, r0
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fb20 	bl	8003d88 <I2C_RequestMemoryRead>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e1f8      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d113      	bne.n	8003782 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e1cc      	b.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003786:	2b01      	cmp	r3, #1
 8003788:	d11e      	bne.n	80037c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003798:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800379a:	b672      	cpsid	i
}
 800379c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037c4:	b662      	cpsie	i
}
 80037c6:	e035      	b.n	8003834 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11e      	bne.n	800380e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e0:	b672      	cpsid	i
}
 80037e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003808:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800380a:	b662      	cpsie	i
}
 800380c:	e012      	b.n	8003834 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800381c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003834:	e172      	b.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	2b03      	cmp	r3, #3
 800383c:	f200 811f 	bhi.w	8003a7e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	2b01      	cmp	r3, #1
 8003846:	d123      	bne.n	8003890 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fd2d 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e173      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800388e:	e145      	b.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	2b02      	cmp	r3, #2
 8003896:	d152      	bne.n	800393e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389e:	2200      	movs	r2, #0
 80038a0:	4906      	ldr	r1, [pc, #24]	@ (80038bc <HAL_I2C_Mem_Read+0x24c>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fb58 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e148      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
 80038b2:	bf00      	nop
 80038b4:	00100002 	.word	0x00100002
 80038b8:	ffff0000 	.word	0xffff0000
 80038bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038c0:	b672      	cpsid	i
}
 80038c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003906:	b662      	cpsie	i
}
 8003908:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800393c:	e0ee      	b.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003944:	2200      	movs	r2, #0
 8003946:	4981      	ldr	r1, [pc, #516]	@ (8003b4c <HAL_I2C_Mem_Read+0x4dc>)
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fb05 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0f5      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003968:	b672      	cpsid	i
}
 800396a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800399e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b50 <HAL_I2C_Mem_Read+0x4e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	08db      	lsrs	r3, r3, #3
 80039a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003b54 <HAL_I2C_Mem_Read+0x4e4>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0a1a      	lsrs	r2, r3, #8
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00da      	lsls	r2, r3, #3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d118      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f043 0220 	orr.w	r2, r3, #32
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039e6:	b662      	cpsie	i
}
 80039e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0a6      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d1d9      	bne.n	80039b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a46:	b662      	cpsie	i
}
 8003a48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a7c:	e04e      	b.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fc12 	bl	80042ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e058      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d124      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f ae88 	bne.w	8003836 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	@ 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010004 	.word	0x00010004
 8003b50:	20000000 	.word	0x20000000
 8003b54:	14f8b589 	.word	0x14f8b589

08003b58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	460b      	mov	r3, r1
 8003b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d006      	beq.n	8003b82 <I2C_MasterRequestWrite+0x2a>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d003      	beq.n	8003b82 <I2C_MasterRequestWrite+0x2a>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b80:	d108      	bne.n	8003b94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00b      	b.n	8003bac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	2b12      	cmp	r3, #18
 8003b9a:	d107      	bne.n	8003bac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003baa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f9cd 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd2:	d103      	bne.n	8003bdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e035      	b.n	8003c4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003be8:	d108      	bne.n	8003bfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bf8:	611a      	str	r2, [r3, #16]
 8003bfa:	e01b      	b.n	8003c34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bfc:	897b      	ldrh	r3, [r7, #10]
 8003bfe:	11db      	asrs	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f063 030f 	orn	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	490e      	ldr	r1, [pc, #56]	@ (8003c54 <I2C_MasterRequestWrite+0xfc>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa16 	bl	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e010      	b.n	8003c4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <I2C_MasterRequestWrite+0x100>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fa06 	bl	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010008 	.word	0x00010008
 8003c58:	00010002 	.word	0x00010002

08003c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	817b      	strh	r3, [r7, #10]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	813b      	strh	r3, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f960 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cac:	d103      	bne.n	8003cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e05f      	b.n	8003d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	492d      	ldr	r1, [pc, #180]	@ (8003d84 <I2C_RequestMemoryWrite+0x128>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f9bb 	bl	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04c      	b.n	8003d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf8:	6a39      	ldr	r1, [r7, #32]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fa46 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d107      	bne.n	8003d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e02b      	b.n	8003d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e021      	b.n	8003d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 fa20 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e005      	b.n	8003d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6e:	893b      	ldrh	r3, [r7, #8]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	00010002 	.word	0x00010002

08003d88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f8c2 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de8:	d103      	bne.n	8003df2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0aa      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	6a3a      	ldr	r2, [r7, #32]
 8003e0a:	4952      	ldr	r1, [pc, #328]	@ (8003f54 <I2C_RequestMemoryRead+0x1cc>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f91d 	bl	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e097      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f9a8 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e076      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	e021      	b.n	8003eb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f982 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e050      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eaa:	893b      	ldrh	r3, [r7, #8]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb6:	6a39      	ldr	r1, [r7, #32]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f967 	bl	800418c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d107      	bne.n	8003edc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e035      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f82b 	bl	8003f58 <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00d      	beq.n	8003f24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f16:	d103      	bne.n	8003f20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e013      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f24:	897b      	ldrh	r3, [r7, #10]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	6a3a      	ldr	r2, [r7, #32]
 8003f38:	4906      	ldr	r1, [pc, #24]	@ (8003f54 <I2C_RequestMemoryRead+0x1cc>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f886 	bl	800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	00010002 	.word	0x00010002

08003f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f68:	e048      	b.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f70:	d044      	beq.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe fad3 	bl	800251c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d139      	bne.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	0c1b      	lsrs	r3, r3, #16
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d10d      	bne.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	e00c      	b.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d116      	bne.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e023      	b.n	8004044 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d10d      	bne.n	8004022 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	43da      	mvns	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	e00c      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	43da      	mvns	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4013      	ands	r3, r2
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	429a      	cmp	r2, r3
 8004040:	d093      	beq.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405a:	e071      	b.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d123      	bne.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e067      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040ba:	d041      	beq.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fe fa2e 	bl	800251c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d136      	bne.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10c      	bne.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e00b      	b.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e021      	b.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10c      	bne.n	8004164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e00b      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	f47f af6d 	bne.w	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004198:	e034      	b.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8e3 	bl	8004366 <I2C_IsAcknowledgeFailed>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e034      	b.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041b0:	d028      	beq.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe f9b3 	bl	800251c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d11d      	bne.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d016      	beq.n	8004204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e007      	b.n	8004214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d1c3      	bne.n	800419a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004228:	e034      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f89b 	bl	8004366 <I2C_IsAcknowledgeFailed>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e034      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004240:	d028      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe f96b 	bl	800251c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11d      	bne.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d016      	beq.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e007      	b.n	80042a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d1c3      	bne.n	800422a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b8:	e049      	b.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d119      	bne.n	80042fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0210 	mvn.w	r2, #16
 80042d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e030      	b.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fc:	f7fe f90e 	bl	800251c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	429a      	cmp	r2, r3
 800430a:	d302      	bcc.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d11d      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b40      	cmp	r3, #64	@ 0x40
 800431e:	d016      	beq.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e007      	b.n	800435e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d1ae      	bne.n	80042ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800437c:	d11b      	bne.n	80043b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004386:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr
	...

080043c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e272      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8087 	beq.w	80044f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e4:	4b92      	ldr	r3, [pc, #584]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d00c      	beq.n	800440a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d112      	bne.n	8004422 <HAL_RCC_OscConfig+0x5e>
 80043fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004408:	d10b      	bne.n	8004422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440a:	4b89      	ldr	r3, [pc, #548]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d06c      	beq.n	80044f0 <HAL_RCC_OscConfig+0x12c>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d168      	bne.n	80044f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e24c      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442a:	d106      	bne.n	800443a <HAL_RCC_OscConfig+0x76>
 800442c:	4b80      	ldr	r3, [pc, #512]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a7f      	ldr	r2, [pc, #508]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	e02e      	b.n	8004498 <HAL_RCC_OscConfig+0xd4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x98>
 8004442:	4b7b      	ldr	r3, [pc, #492]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7a      	ldr	r2, [pc, #488]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b78      	ldr	r3, [pc, #480]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a77      	ldr	r2, [pc, #476]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e01d      	b.n	8004498 <HAL_RCC_OscConfig+0xd4>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0xbc>
 8004466:	4b72      	ldr	r3, [pc, #456]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a71      	ldr	r2, [pc, #452]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6e      	ldr	r2, [pc, #440]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0xd4>
 8004480:	4b6b      	ldr	r3, [pc, #428]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a6a      	ldr	r2, [pc, #424]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b68      	ldr	r3, [pc, #416]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a67      	ldr	r2, [pc, #412]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d013      	beq.n	80044c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fe f83c 	bl	800251c <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fe f838 	bl	800251c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	@ 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e200      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0xe4>
 80044c6:	e014      	b.n	80044f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe f828 	bl	800251c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe f824 	bl	800251c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1ec      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	4b53      	ldr	r3, [pc, #332]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x10c>
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d063      	beq.n	80045c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800450a:	4b49      	ldr	r3, [pc, #292]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b08      	cmp	r3, #8
 8004514:	d11c      	bne.n	8004550 <HAL_RCC_OscConfig+0x18c>
 8004516:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004522:	4b43      	ldr	r3, [pc, #268]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_RCC_OscConfig+0x176>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1c0      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b3d      	ldr	r3, [pc, #244]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4939      	ldr	r1, [pc, #228]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	e03a      	b.n	80045c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b36      	ldr	r3, [pc, #216]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fd ffdd 	bl	800251c <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd ffd9 	bl	800251c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e1a1      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	4b2d      	ldr	r3, [pc, #180]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	4b2a      	ldr	r3, [pc, #168]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	4927      	ldr	r1, [pc, #156]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
 8004598:	e015      	b.n	80045c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459a:	4b26      	ldr	r3, [pc, #152]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fd ffbc 	bl	800251c <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd ffb8 	bl	800251c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e180      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d03a      	beq.n	8004648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d019      	beq.n	800460e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045da:	4b17      	ldr	r3, [pc, #92]	@ (8004638 <HAL_RCC_OscConfig+0x274>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e0:	f7fd ff9c 	bl	800251c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fd ff98 	bl	800251c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e160      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004606:	2001      	movs	r0, #1
 8004608:	f000 fafe 	bl	8004c08 <RCC_Delay>
 800460c:	e01c      	b.n	8004648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460e:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <HAL_RCC_OscConfig+0x274>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004614:	f7fd ff82 	bl	800251c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461a:	e00f      	b.n	800463c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461c:	f7fd ff7e 	bl	800251c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d908      	bls.n	800463c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e146      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	42420000 	.word	0x42420000
 8004638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b92      	ldr	r3, [pc, #584]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e9      	bne.n	800461c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a6 	beq.w	80047a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b8b      	ldr	r3, [pc, #556]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	4b88      	ldr	r3, [pc, #544]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4a87      	ldr	r2, [pc, #540]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004670:	61d3      	str	r3, [r2, #28]
 8004672:	4b85      	ldr	r3, [pc, #532]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004682:	4b82      	ldr	r3, [pc, #520]	@ (800488c <HAL_RCC_OscConfig+0x4c8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d118      	bne.n	80046c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800468e:	4b7f      	ldr	r3, [pc, #508]	@ (800488c <HAL_RCC_OscConfig+0x4c8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7e      	ldr	r2, [pc, #504]	@ (800488c <HAL_RCC_OscConfig+0x4c8>)
 8004694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469a:	f7fd ff3f 	bl	800251c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a2:	f7fd ff3b 	bl	800251c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b64      	cmp	r3, #100	@ 0x64
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e103      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	4b75      	ldr	r3, [pc, #468]	@ (800488c <HAL_RCC_OscConfig+0x4c8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x312>
 80046c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6213      	str	r3, [r2, #32]
 80046d4:	e02d      	b.n	8004732 <HAL_RCC_OscConfig+0x36e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x334>
 80046de:	4b6a      	ldr	r3, [pc, #424]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4a69      	ldr	r2, [pc, #420]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6213      	str	r3, [r2, #32]
 80046ea:	4b67      	ldr	r3, [pc, #412]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	4a66      	ldr	r2, [pc, #408]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	6213      	str	r3, [r2, #32]
 80046f6:	e01c      	b.n	8004732 <HAL_RCC_OscConfig+0x36e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d10c      	bne.n	800471a <HAL_RCC_OscConfig+0x356>
 8004700:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a60      	ldr	r2, [pc, #384]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	6213      	str	r3, [r2, #32]
 800470c:	4b5e      	ldr	r3, [pc, #376]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a5d      	ldr	r2, [pc, #372]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e00b      	b.n	8004732 <HAL_RCC_OscConfig+0x36e>
 800471a:	4b5b      	ldr	r3, [pc, #364]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4a5a      	ldr	r2, [pc, #360]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	6213      	str	r3, [r2, #32]
 8004726:	4b58      	ldr	r3, [pc, #352]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d015      	beq.n	8004766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fd feef 	bl	800251c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd feeb 	bl	800251c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0b1      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004758:	4b4b      	ldr	r3, [pc, #300]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ee      	beq.n	8004742 <HAL_RCC_OscConfig+0x37e>
 8004764:	e014      	b.n	8004790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004766:	f7fd fed9 	bl	800251c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476e:	f7fd fed5 	bl	800251c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e09b      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004784:	4b40      	ldr	r3, [pc, #256]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ee      	bne.n	800476e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d105      	bne.n	80047a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004796:	4b3c      	ldr	r3, [pc, #240]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	4a3b      	ldr	r2, [pc, #236]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8087 	beq.w	80048ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ac:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d061      	beq.n	800487c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d146      	bne.n	800484e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c0:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <HAL_RCC_OscConfig+0x4cc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7fd fea9 	bl	800251c <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ce:	f7fd fea5 	bl	800251c <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e06d      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e0:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f4:	d108      	bne.n	8004808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047f6:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4921      	ldr	r1, [pc, #132]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a19      	ldr	r1, [r3, #32]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	430b      	orrs	r3, r1
 800481a:	491b      	ldr	r1, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_RCC_OscConfig+0x4cc>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fd fe79 	bl	800251c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fd fe75 	bl	800251c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x46a>
 800484c:	e035      	b.n	80048ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <HAL_RCC_OscConfig+0x4cc>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd fe62 	bl	800251c <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fd fe5e 	bl	800251c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e026      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x498>
 800487a:	e01e      	b.n	80048ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e019      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
 8004888:	40021000 	.word	0x40021000
 800488c:	40007000 	.word	0x40007000
 8004890:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <HAL_RCC_OscConfig+0x500>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d106      	bne.n	80048b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000

080048c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0d0      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d910      	bls.n	800490c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	4b67      	ldr	r3, [pc, #412]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 0207 	bic.w	r2, r3, #7
 80048f2:	4965      	ldr	r1, [pc, #404]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fa:	4b63      	ldr	r3, [pc, #396]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0b8      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a58      	ldr	r2, [pc, #352]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800492e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800493c:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a52      	ldr	r2, [pc, #328]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004946:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	494d      	ldr	r1, [pc, #308]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d040      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d115      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e07f      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d107      	bne.n	8004996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004986:	4b41      	ldr	r3, [pc, #260]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e073      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004996:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e06b      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049a6:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f023 0203 	bic.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4936      	ldr	r1, [pc, #216]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049b8:	f7fd fdb0 	bl	800251c <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c0:	f7fd fdac 	bl	800251c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e053      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 020c 	and.w	r2, r3, #12
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d1eb      	bne.n	80049c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049e8:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d210      	bcs.n	8004a18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f6:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 0207 	bic.w	r2, r3, #7
 80049fe:	4922      	ldr	r1, [pc, #136]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a06:	4b20      	ldr	r3, [pc, #128]	@ (8004a88 <HAL_RCC_ClockConfig+0x1c0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e032      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a24:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	4916      	ldr	r1, [pc, #88]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	490e      	ldr	r1, [pc, #56]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a56:	f000 f821 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a8c <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	490a      	ldr	r1, [pc, #40]	@ (8004a90 <HAL_RCC_ClockConfig+0x1c8>)
 8004a68:	5ccb      	ldrb	r3, [r1, r3]
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1cc>)
 8004a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a72:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <HAL_RCC_ClockConfig+0x1d0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd f9f0 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40022000 	.word	0x40022000
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	0800e030 	.word	0x0800e030
 8004a94:	20000000 	.word	0x20000000
 8004a98:	20000004 	.word	0x20000004

08004a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x30>
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8004aca:	e027      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004acc:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ace:	613b      	str	r3, [r7, #16]
      break;
 8004ad0:	e027      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	0c9b      	lsrs	r3, r3, #18
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	4a17      	ldr	r2, [pc, #92]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004adc:	5cd3      	ldrb	r3, [r2, r3]
 8004ade:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d010      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004aea:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	0c5b      	lsrs	r3, r3, #17
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	4a11      	ldr	r2, [pc, #68]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004af6:	5cd3      	ldrb	r3, [r2, r3]
 8004af8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004afe:	fb03 f202 	mul.w	r2, r3, r2
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e004      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	613b      	str	r3, [r7, #16]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b1e:	613b      	str	r3, [r7, #16]
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	693b      	ldr	r3, [r7, #16]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	007a1200 	.word	0x007a1200
 8004b38:	0800e048 	.word	0x0800e048
 8004b3c:	0800e058 	.word	0x0800e058
 8004b40:	003d0900 	.word	0x003d0900

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b02      	ldr	r3, [pc, #8]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	20000000 	.word	0x20000000

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b5c:	f7ff fff2 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4903      	ldr	r1, [pc, #12]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800e040 	.word	0x0800e040

08004b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b84:	f7ff ffde 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	0adb      	lsrs	r3, r3, #11
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4903      	ldr	r1, [pc, #12]	@ (8004ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	0800e040 	.word	0x0800e040

08004ba8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <HAL_RCC_GetClockConfig+0x58>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0203 	and.w	r2, r3, #3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <HAL_RCC_GetClockConfig+0x58>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_GetClockConfig+0x58>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004bdc:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <HAL_RCC_GetClockConfig+0x58>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	08db      	lsrs	r3, r3, #3
 8004be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bea:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <HAL_RCC_GetClockConfig+0x5c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0207 	and.w	r2, r3, #7
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40022000 	.word	0x40022000

08004c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c10:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <RCC_Delay+0x34>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0a      	ldr	r2, [pc, #40]	@ (8004c40 <RCC_Delay+0x38>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0a5b      	lsrs	r3, r3, #9
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c24:	bf00      	nop
  }
  while (Delay --);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1e5a      	subs	r2, r3, #1
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f9      	bne.n	8004c24 <RCC_Delay+0x1c>
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	10624dd3 	.word	0x10624dd3

08004c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e041      	b.n	8004cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f839 	bl	8004ce2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f000 f99c 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e03a      	b.n	8004d82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a18      	ldr	r2, [pc, #96]	@ (8004d8c <HAL_TIM_Base_Start_IT+0x98>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d36:	d009      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a14      	ldr	r2, [pc, #80]	@ (8004d90 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x58>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a13      	ldr	r2, [pc, #76]	@ (8004d94 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d111      	bne.n	8004d70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b06      	cmp	r3, #6
 8004d5c:	d010      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f042 0201 	orr.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	e007      	b.n	8004d80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800

08004d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d020      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01b      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0202 	mvn.w	r2, #2
 8004dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8d1 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f8c4 	bl	8004f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8d3 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d020      	beq.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0204 	mvn.w	r2, #4
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8ab 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f89e 	bl	8004f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8ad 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d020      	beq.n	8004e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0208 	mvn.w	r2, #8
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f885 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f878 	bl	8004f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f887 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d020      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01b      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0210 	mvn.w	r2, #16
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f85f 	bl	8004f8a <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f852 	bl	8004f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f861 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0201 	mvn.w	r2, #1
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fb86 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8c3 	bl	80050ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f831 	bl	8004fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0220 	mvn.w	r2, #32
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f896 	bl	800509c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005090 <TIM_Base_SetConfig+0xd0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <TIM_Base_SetConfig+0x30>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fde:	d007      	beq.n	8004ff0 <TIM_Base_SetConfig+0x30>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <TIM_Base_SetConfig+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0x30>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	@ (8005098 <TIM_Base_SetConfig+0xd8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a22      	ldr	r2, [pc, #136]	@ (8005090 <TIM_Base_SetConfig+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x62>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <TIM_Base_SetConfig+0xd4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x62>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <TIM_Base_SetConfig+0xd8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0d      	ldr	r2, [pc, #52]	@ (8005090 <TIM_Base_SetConfig+0xd0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  }
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800

0800509c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e042      	b.n	8005158 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd f84a 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2224      	movs	r2, #36	@ 0x24
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fe9f 	bl	8005e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b20      	cmp	r3, #32
 800517e:	d175      	bne.n	800526c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_UART_Transmit+0x2c>
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e06e      	b.n	800526e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2221      	movs	r2, #33	@ 0x21
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800519e:	f7fd f9bd 	bl	800251c <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	88fa      	ldrh	r2, [r7, #6]
 80051a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b8:	d108      	bne.n	80051cc <HAL_UART_Transmit+0x6c>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e003      	b.n	80051d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051d4:	e02e      	b.n	8005234 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	2180      	movs	r1, #128	@ 0x80
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 fc16 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e03a      	b.n	800526e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10b      	bne.n	8005216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800520c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3302      	adds	r3, #2
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e007      	b.n	8005226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1cb      	bne.n	80051d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	2140      	movs	r1, #64	@ 0x40
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fbe2 	bl	8005a12 <UART_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800526c:	2302      	movs	r3, #2
  }
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	@ 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b20      	cmp	r3, #32
 8005290:	d156      	bne.n	8005340 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_UART_Transmit_DMA+0x26>
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e04f      	b.n	8005342 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2221      	movs	r2, #33	@ 0x21
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_UART_Transmit_DMA+0xd4>)
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ce:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <HAL_UART_Transmit_DMA+0xd8>)
 80052d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005354 <HAL_UART_Transmit_DMA+0xdc>)
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	2200      	movs	r2, #0
 80052e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3304      	adds	r3, #4
 80052f6:	461a      	mov	r2, r3
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	f7fd fa77 	bl	80027ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005306:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3314      	adds	r3, #20
 800530e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	617b      	str	r3, [r7, #20]
   return(result);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800531e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3314      	adds	r3, #20
 8005326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005328:	627a      	str	r2, [r7, #36]	@ 0x24
 800532a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	61fb      	str	r3, [r7, #28]
   return(result);
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	@ 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	080058c9 	.word	0x080058c9
 8005350:	08005963 	.word	0x08005963
 8005354:	0800597f 	.word	0x0800597f

08005358 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b0ba      	sub	sp, #232	@ 0xe8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800539e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_UART_IRQHandler+0x66>
 80053aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fc88 	bl	8005ccc <UART_Receive_IT>
      return;
 80053bc:	e25b      	b.n	8005876 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80de 	beq.w	8005584 <HAL_UART_IRQHandler+0x22c>
 80053c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80d1 	beq.w	8005584 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_UART_IRQHandler+0xae>
 80053ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xd2>
 8005412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xf6>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d011      	beq.n	800547e <HAL_UART_IRQHandler+0x126>
 800545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005476:	f043 0208 	orr.w	r2, r3, #8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 81f2 	beq.w	800586c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_UART_IRQHandler+0x14e>
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fc13 	bl	8005ccc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <HAL_UART_IRQHandler+0x17a>
 80054ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04f      	beq.n	8005572 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fb1d 	bl	8005b12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d041      	beq.n	800556a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800551e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800552a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1d9      	bne.n	80054e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d013      	beq.n	8005562 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	4a7e      	ldr	r2, [pc, #504]	@ (8005738 <HAL_UART_IRQHandler+0x3e0>)
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005546:	4618      	mov	r0, r3
 8005548:	f7fd f9ec 	bl	8002924 <HAL_DMA_Abort_IT>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800555c:	4610      	mov	r0, r2
 800555e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	e00e      	b.n	8005580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f99c 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e00a      	b.n	8005580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f998 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	e006      	b.n	8005580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f994 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800557e:	e175      	b.n	800586c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	bf00      	nop
    return;
 8005582:	e173      	b.n	800586c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	f040 814f 	bne.w	800582c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8148 	beq.w	800582c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8141 	beq.w	800582c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80b6 	beq.w	800573c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8145 	beq.w	8005870 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055ee:	429a      	cmp	r2, r3
 80055f0:	f080 813e 	bcs.w	8005870 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b20      	cmp	r3, #32
 8005604:	f000 8088 	beq.w	8005718 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800561e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005626:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	330c      	adds	r3, #12
 8005630:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005634:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005640:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800564c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1d9      	bne.n	8005608 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005678:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800567c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005680:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800568a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e1      	bne.n	8005654 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e3      	bne.n	8005690 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e8:	f023 0310 	bic.w	r3, r3, #16
 80056ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005700:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e3      	bne.n	80056d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	4618      	mov	r0, r3
 8005714:	f7fd f8ca 	bl	80028ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005726:	b29b      	uxth	r3, r3
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	b29b      	uxth	r3, r3
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8bf 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005734:	e09c      	b.n	8005870 <HAL_UART_IRQHandler+0x518>
 8005736:	bf00      	nop
 8005738:	08005bd7 	.word	0x08005bd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 808e 	beq.w	8005874 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 8089 	beq.w	8005874 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005786:	647a      	str	r2, [r7, #68]	@ 0x44
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800578c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	623b      	str	r3, [r7, #32]
   return(result);
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057be:	633a      	str	r2, [r7, #48]	@ 0x30
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e3      	bne.n	800579a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	330c      	adds	r3, #12
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005804:	61fa      	str	r2, [r7, #28]
 8005806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e3      	bne.n	80057e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f844 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800582a:	e023      	b.n	8005874 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_UART_IRQHandler+0x4f4>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9da 	bl	8005bfe <UART_Transmit_IT>
    return;
 800584a:	e014      	b.n	8005876 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <HAL_UART_IRQHandler+0x51e>
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fa19 	bl	8005c9c <UART_EndTransmit_IT>
    return;
 800586a:	e004      	b.n	8005876 <HAL_UART_IRQHandler+0x51e>
    return;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_UART_IRQHandler+0x51e>
      return;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_UART_IRQHandler+0x51e>
      return;
 8005874:	bf00      	nop
  }
}
 8005876:	37e8      	adds	r7, #232	@ 0xe8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b090      	sub	sp, #64	@ 0x40
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d137      	bne.n	8005954 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80058e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e6:	2200      	movs	r2, #0
 80058e8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	623b      	str	r3, [r7, #32]
   return(result);
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005900:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800590a:	633a      	str	r2, [r7, #48]	@ 0x30
 800590c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800591e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	60fb      	str	r3, [r7, #12]
   return(result);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800593e:	61fa      	str	r2, [r7, #28]
 8005940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	69b9      	ldr	r1, [r7, #24]
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	617b      	str	r3, [r7, #20]
   return(result);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e5      	bne.n	800591e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005952:	e002      	b.n	800595a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005954:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005956:	f7fc f94d 	bl	8001bf4 <HAL_UART_TxCpltCallback>
}
 800595a:	bf00      	nop
 800595c:	3740      	adds	r7, #64	@ 0x40
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff83 	bl	800587c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b21      	cmp	r3, #33	@ 0x21
 80059b0:	d108      	bne.n	80059c4 <UART_DMAError+0x46>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80059be:	68b8      	ldr	r0, [r7, #8]
 80059c0:	f000 f880 	bl	8005ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b22      	cmp	r3, #34	@ 0x22
 80059e4:	d108      	bne.n	80059f8 <UART_DMAError+0x7a>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	f000 f88d 	bl	8005b12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fc:	f043 0210 	orr.w	r2, r3, #16
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f7ff ff4b 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a22:	e03b      	b.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a2a:	d037      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2c:	f7fc fd76 	bl	800251c <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	6a3a      	ldr	r2, [r7, #32]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e03a      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d023      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b80      	cmp	r3, #128	@ 0x80
 8005a58:	d020      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b40      	cmp	r3, #64	@ 0x40
 8005a5e:	d01d      	beq.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d116      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f844 	bl	8005b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e00f      	b.n	8005abc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d0b4      	beq.n	8005a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005b08:	bf00      	nop
 8005b0a:	3724      	adds	r7, #36	@ 0x24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b095      	sub	sp, #84	@ 0x54
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	330c      	adds	r3, #12
 8005b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3314      	adds	r3, #20
 8005b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d119      	bne.n	8005bbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0310 	bic.w	r3, r3, #16
 8005ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005baa:	61ba      	str	r2, [r7, #24]
 8005bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6979      	ldr	r1, [r7, #20]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bcc:	bf00      	nop
 8005bce:	3754      	adds	r7, #84	@ 0x54
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fe55 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b21      	cmp	r3, #33	@ 0x21
 8005c10:	d13e      	bne.n	8005c90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1a:	d114      	bne.n	8005c46 <UART_Transmit_IT+0x48>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d110      	bne.n	8005c46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	1c9a      	adds	r2, r3, #2
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]
 8005c44:	e008      	b.n	8005c58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	1c59      	adds	r1, r3, #1
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6211      	str	r1, [r2, #32]
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4619      	mov	r1, r3
 8005c66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10f      	bne.n	8005c8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fb ff99 	bl	8001bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b22      	cmp	r3, #34	@ 0x22
 8005cde:	f040 80ae 	bne.w	8005e3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cea:	d117      	bne.n	8005d1c <UART_Receive_IT+0x50>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d113      	bne.n	8005d1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	1c9a      	adds	r2, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d1a:	e026      	b.n	8005d6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2e:	d007      	beq.n	8005d40 <UART_Receive_IT+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <UART_Receive_IT+0x82>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e008      	b.n	8005d60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d15d      	bne.n	8005e3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0220 	bic.w	r2, r2, #32
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d135      	bne.n	8005e30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dea:	623a      	str	r2, [r7, #32]
 8005dec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e5      	bne.n	8005dca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d10a      	bne.n	8005e22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff fd42 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
 8005e2e:	e002      	b.n	8005e36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fd2c 	bl	800588e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e002      	b.n	8005e40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e000      	b.n	8005e40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3730      	adds	r7, #48	@ 0x30
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e82:	f023 030c 	bic.w	r3, r3, #12
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <UART_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d103      	bne.n	8005eb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb0:	f7fe fe66 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	e002      	b.n	8005ebe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005eb8:	f7fe fe4e 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8005ebc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009a      	lsls	r2, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <UART_SetConfig+0x118>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	0119      	lsls	r1, r3, #4
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f60 <UART_SetConfig+0x118>)
 8005ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2064      	movs	r0, #100	@ 0x64
 8005efe:	fb00 f303 	mul.w	r3, r0, r3
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	@ 0x32
 8005f08:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <UART_SetConfig+0x118>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f14:	4419      	add	r1, r3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009a      	lsls	r2, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f60 <UART_SetConfig+0x118>)
 8005f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2064      	movs	r0, #100	@ 0x64
 8005f36:	fb00 f303 	mul.w	r3, r0, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	@ 0x32
 8005f40:	4a07      	ldr	r2, [pc, #28]	@ (8005f60 <UART_SetConfig+0x118>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 020f 	and.w	r2, r3, #15
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	440a      	add	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40013800 	.word	0x40013800
 8005f60:	51eb851f 	.word	0x51eb851f

08005f64 <__NVIC_SetPriority>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6039      	str	r1, [r7, #0]
 8005f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db0a      	blt.n	8005f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	490c      	ldr	r1, [pc, #48]	@ (8005fb0 <__NVIC_SetPriority+0x4c>)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	440b      	add	r3, r1
 8005f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f8c:	e00a      	b.n	8005fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4908      	ldr	r1, [pc, #32]	@ (8005fb4 <__NVIC_SetPriority+0x50>)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	0112      	lsls	r2, r2, #4
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	761a      	strb	r2, [r3, #24]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	e000e100 	.word	0xe000e100
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <SysTick_Handler+0x1c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005fc0:	f002 fcbe 	bl	8008940 <xTaskGetSchedulerState>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005fca:	f003 fb65 	bl	8009698 <xPortSysTickHandler>
  }
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	e000e010 	.word	0xe000e010

08005fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005fdc:	2100      	movs	r1, #0
 8005fde:	f06f 0004 	mvn.w	r0, #4
 8005fe2:	f7ff ffbf 	bl	8005f64 <__NVIC_SetPriority>
#endif
}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff2:	f3ef 8305 	mrs	r3, IPSR
 8005ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ffe:	f06f 0305 	mvn.w	r3, #5
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	e00c      	b.n	8006020 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006006:	4b09      	ldr	r3, [pc, #36]	@ (800602c <osKernelInitialize+0x40>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800600e:	4b07      	ldr	r3, [pc, #28]	@ (800602c <osKernelInitialize+0x40>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006014:	2300      	movs	r3, #0
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e002      	b.n	8006020 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800601e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006020:	687b      	ldr	r3, [r7, #4]
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr
 800602c:	200003bc 	.word	0x200003bc

08006030 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	603b      	str	r3, [r7, #0]
  return(result);
 800603c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006042:	f06f 0305 	mvn.w	r3, #5
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	e010      	b.n	800606c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <osKernelStart+0x48>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d109      	bne.n	8006066 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006052:	f7ff ffc1 	bl	8005fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006056:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <osKernelStart+0x48>)
 8006058:	2202      	movs	r2, #2
 800605a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800605c:	f001 fff0 	bl	8008040 <vTaskStartScheduler>
      stat = osOK;
 8006060:	2300      	movs	r3, #0
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	e002      	b.n	800606c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800606a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800606c:	687b      	ldr	r3, [r7, #4]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200003bc 	.word	0x200003bc

0800607c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006082:	f3ef 8305 	mrs	r3, IPSR
 8006086:	603b      	str	r3, [r7, #0]
  return(result);
 8006088:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800608e:	f002 f901 	bl	8008294 <xTaskGetTickCountFromISR>
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	e002      	b.n	800609c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006096:	f002 f8ef 	bl	8008278 <xTaskGetTickCount>
 800609a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800609c:	687b      	ldr	r3, [r7, #4]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80060aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b08e      	sub	sp, #56	@ 0x38
 80060ba:	af04      	add	r7, sp, #16
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	617b      	str	r3, [r7, #20]
  return(result);
 80060cc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d17e      	bne.n	80061d0 <osThreadNew+0x11a>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d07b      	beq.n	80061d0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80060dc:	2318      	movs	r3, #24
 80060de:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d045      	beq.n	800617c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <osThreadNew+0x48>
        name = attr->name;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <osThreadNew+0x6e>
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b38      	cmp	r3, #56	@ 0x38
 8006116:	d805      	bhi.n	8006124 <osThreadNew+0x6e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <osThreadNew+0x72>
        return (NULL);
 8006124:	2300      	movs	r3, #0
 8006126:	e054      	b.n	80061d2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <osThreadNew+0xa8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2ba7      	cmp	r3, #167	@ 0xa7
 8006146:	d90a      	bls.n	800615e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <osThreadNew+0xa8>
        mem = 1;
 8006158:	2301      	movs	r3, #1
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e010      	b.n	8006180 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10c      	bne.n	8006180 <osThreadNew+0xca>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d108      	bne.n	8006180 <osThreadNew+0xca>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d104      	bne.n	8006180 <osThreadNew+0xca>
          mem = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e001      	b.n	8006180 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d110      	bne.n	80061a8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800618e:	9202      	str	r2, [sp, #8]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6a3a      	ldr	r2, [r7, #32]
 800619a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f001 fd5b 	bl	8007c58 <xTaskCreateStatic>
 80061a2:	4603      	mov	r3, r0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	e013      	b.n	80061d0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d110      	bne.n	80061d0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 fda9 	bl	8007d18 <xTaskCreate>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <osThreadNew+0x11a>
            hTask = NULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061d0:	693b      	ldr	r3, [r7, #16]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3728      	adds	r7, #40	@ 0x28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e2:	f3ef 8305 	mrs	r3, IPSR
 80061e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <osDelay+0x1c>
    stat = osErrorISR;
 80061ee:	f06f 0305 	mvn.w	r3, #5
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e007      	b.n	8006206 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 fee7 	bl	8007fd4 <vTaskDelay>
    }
  }

  return (stat);
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621c:	f3ef 8305 	mrs	r3, IPSR
 8006220:	60bb      	str	r3, [r7, #8]
  return(result);
 8006222:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006224:	2b00      	cmp	r3, #0
 8006226:	d174      	bne.n	8006312 <osMutexNew+0x102>
    if (attr != NULL) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <osMutexNew+0x26>
      type = attr->attr_bits;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e001      	b.n	800623a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <osMutexNew+0x3a>
      rmtx = 1U;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e001      	b.n	800624e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d15c      	bne.n	8006312 <osMutexNew+0x102>
      mem = -1;
 8006258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800625c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d015      	beq.n	8006290 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <osMutexNew+0x6a>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b4f      	cmp	r3, #79	@ 0x4f
 8006272:	d902      	bls.n	800627a <osMutexNew+0x6a>
          mem = 1;
 8006274:	2301      	movs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	e00c      	b.n	8006294 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <osMutexNew+0x84>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d104      	bne.n	8006294 <osMutexNew+0x84>
            mem = 0;
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	e001      	b.n	8006294 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d112      	bne.n	80062c0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4619      	mov	r1, r3
 80062a6:	2004      	movs	r0, #4
 80062a8:	f000 fd6b 	bl	8006d82 <xQueueCreateMutexStatic>
 80062ac:	61f8      	str	r0, [r7, #28]
 80062ae:	e016      	b.n	80062de <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4619      	mov	r1, r3
 80062b6:	2001      	movs	r0, #1
 80062b8:	f000 fd63 	bl	8006d82 <xQueueCreateMutexStatic>
 80062bc:	61f8      	str	r0, [r7, #28]
 80062be:	e00e      	b.n	80062de <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80062cc:	2004      	movs	r0, #4
 80062ce:	f000 fd40 	bl	8006d52 <xQueueCreateMutex>
 80062d2:	61f8      	str	r0, [r7, #28]
 80062d4:	e003      	b.n	80062de <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80062d6:	2001      	movs	r0, #1
 80062d8:	f000 fd3b 	bl	8006d52 <xQueueCreateMutex>
 80062dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <osMutexNew+0xee>
        if (attr != NULL) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <osMutexNew+0xe2>
          name = attr->name;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e001      	b.n	80062f6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	69f8      	ldr	r0, [r7, #28]
 80062fa:	f001 fc27 	bl	8007b4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d006      	beq.n	8006312 <osMutexNew+0x102>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006312:	69fb      	ldr	r3, [r7, #28]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800633a:	f3ef 8305 	mrs	r3, IPSR
 800633e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006340:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006346:	f06f 0305 	mvn.w	r3, #5
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e02c      	b.n	80063a8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006354:	f06f 0303 	mvn.w	r3, #3
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e025      	b.n	80063a8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6938      	ldr	r0, [r7, #16]
 8006366:	f000 fd5c 	bl	8006e22 <xQueueTakeMutexRecursive>
 800636a:	4603      	mov	r3, r0
 800636c:	2b01      	cmp	r3, #1
 800636e:	d01b      	beq.n	80063a8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006376:	f06f 0301 	mvn.w	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e014      	b.n	80063a8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800637e:	f06f 0302 	mvn.w	r3, #2
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	e010      	b.n	80063a8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f001 f901 	bl	8007590 <xQueueSemaphoreTake>
 800638e:	4603      	mov	r3, r0
 8006390:	2b01      	cmp	r3, #1
 8006392:	d009      	beq.n	80063a8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800639a:	f06f 0301 	mvn.w	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e002      	b.n	80063a8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80063a2:	f06f 0302 	mvn.w	r3, #2
 80063a6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80063a8:	697b      	ldr	r3, [r7, #20]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f023 0301 	bic.w	r3, r3, #1
 80063c0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ce:	f3ef 8305 	mrs	r3, IPSR
 80063d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80063da:	f06f 0305 	mvn.w	r3, #5
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e01f      	b.n	8006422 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80063e8:	f06f 0303 	mvn.w	r3, #3
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e018      	b.n	8006422 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80063f6:	6938      	ldr	r0, [r7, #16]
 80063f8:	f000 fcde 	bl	8006db8 <xQueueGiveMutexRecursive>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d00f      	beq.n	8006422 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006402:	f06f 0302 	mvn.w	r3, #2
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e00b      	b.n	8006422 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800640a:	2300      	movs	r3, #0
 800640c:	2200      	movs	r2, #0
 800640e:	2100      	movs	r1, #0
 8006410:	6938      	ldr	r0, [r7, #16]
 8006412:	f000 fdab 	bl	8006f6c <xQueueGenericSend>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d002      	beq.n	8006422 <osMutexRelease+0x70>
        stat = osErrorResource;
 800641c:	f06f 0302 	mvn.w	r3, #2
 8006420:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b08a      	sub	sp, #40	@ 0x28
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800643c:	f3ef 8305 	mrs	r3, IPSR
 8006440:	613b      	str	r3, [r7, #16]
  return(result);
 8006442:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006444:	2b00      	cmp	r3, #0
 8006446:	d175      	bne.n	8006534 <osSemaphoreNew+0x108>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d072      	beq.n	8006534 <osSemaphoreNew+0x108>
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	429a      	cmp	r2, r3
 8006454:	d86e      	bhi.n	8006534 <osSemaphoreNew+0x108>
    mem = -1;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800645a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d015      	beq.n	800648e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d006      	beq.n	8006478 <osSemaphoreNew+0x4c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006470:	d902      	bls.n	8006478 <osSemaphoreNew+0x4c>
        mem = 1;
 8006472:	2301      	movs	r3, #1
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e00c      	b.n	8006492 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <osSemaphoreNew+0x66>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <osSemaphoreNew+0x66>
          mem = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e001      	b.n	8006492 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006498:	d04c      	beq.n	8006534 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d128      	bne.n	80064f2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d10a      	bne.n	80064bc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2203      	movs	r2, #3
 80064ac:	9200      	str	r2, [sp, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	2100      	movs	r1, #0
 80064b2:	2001      	movs	r0, #1
 80064b4:	f000 fb58 	bl	8006b68 <xQueueGenericCreateStatic>
 80064b8:	61f8      	str	r0, [r7, #28]
 80064ba:	e005      	b.n	80064c8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80064bc:	2203      	movs	r2, #3
 80064be:	2100      	movs	r1, #0
 80064c0:	2001      	movs	r0, #1
 80064c2:	f000 fbce 	bl	8006c62 <xQueueGenericCreate>
 80064c6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d022      	beq.n	8006514 <osSemaphoreNew+0xe8>
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01f      	beq.n	8006514 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80064d4:	2300      	movs	r3, #0
 80064d6:	2200      	movs	r2, #0
 80064d8:	2100      	movs	r1, #0
 80064da:	69f8      	ldr	r0, [r7, #28]
 80064dc:	f000 fd46 	bl	8006f6c <xQueueGenericSend>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d016      	beq.n	8006514 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80064e6:	69f8      	ldr	r0, [r7, #28]
 80064e8:	f001 f9e4 	bl	80078b4 <vQueueDelete>
            hSemaphore = NULL;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e010      	b.n	8006514 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d108      	bne.n	800650a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	461a      	mov	r2, r3
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fcc5 	bl	8006e90 <xQueueCreateCountingSemaphoreStatic>
 8006506:	61f8      	str	r0, [r7, #28]
 8006508:	e004      	b.n	8006514 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fcf8 	bl	8006f02 <xQueueCreateCountingSemaphore>
 8006512:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800652c:	6979      	ldr	r1, [r7, #20]
 800652e:	69f8      	ldr	r0, [r7, #28]
 8006530:	f001 fb0c 	bl	8007b4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006534:	69fb      	ldr	r3, [r7, #28]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006558:	f06f 0303 	mvn.w	r3, #3
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	e039      	b.n	80065d4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006560:	f3ef 8305 	mrs	r3, IPSR
 8006564:	60fb      	str	r3, [r7, #12]
  return(result);
 8006566:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006568:	2b00      	cmp	r3, #0
 800656a:	d022      	beq.n	80065b2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006572:	f06f 0303 	mvn.w	r3, #3
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e02c      	b.n	80065d4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	461a      	mov	r2, r3
 8006584:	2100      	movs	r1, #0
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f001 f912 	bl	80077b0 <xQueueReceiveFromISR>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d003      	beq.n	800659a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006592:	f06f 0302 	mvn.w	r3, #2
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e01c      	b.n	80065d4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d019      	beq.n	80065d4 <osSemaphoreAcquire+0x94>
 80065a0:	4b0f      	ldr	r3, [pc, #60]	@ (80065e0 <osSemaphoreAcquire+0xa0>)
 80065a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	e010      	b.n	80065d4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6938      	ldr	r0, [r7, #16]
 80065b6:	f000 ffeb 	bl	8007590 <xQueueSemaphoreTake>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d009      	beq.n	80065d4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80065c6:	f06f 0301 	mvn.w	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e002      	b.n	80065d4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80065ce:	f06f 0302 	mvn.w	r3, #2
 80065d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80065d4:	697b      	ldr	r3, [r7, #20]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80065fa:	f06f 0303 	mvn.w	r3, #3
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e02c      	b.n	800665c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006602:	f3ef 8305 	mrs	r3, IPSR
 8006606:	60fb      	str	r3, [r7, #12]
  return(result);
 8006608:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01a      	beq.n	8006644 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4619      	mov	r1, r3
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f000 fe47 	bl	80072ac <xQueueGiveFromISR>
 800661e:	4603      	mov	r3, r0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d003      	beq.n	800662c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006624:	f06f 0302 	mvn.w	r3, #2
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e017      	b.n	800665c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <osSemaphoreRelease+0x78>
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <osSemaphoreRelease+0x84>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	e00b      	b.n	800665c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006644:	2300      	movs	r3, #0
 8006646:	2200      	movs	r2, #0
 8006648:	2100      	movs	r1, #0
 800664a:	6938      	ldr	r0, [r7, #16]
 800664c:	f000 fc8e 	bl	8006f6c <xQueueGenericSend>
 8006650:	4603      	mov	r3, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d002      	beq.n	800665c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006656:	f06f 0302 	mvn.w	r3, #2
 800665a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800665c:	697b      	ldr	r3, [r7, #20]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	@ 0x28
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667c:	f3ef 8305 	mrs	r3, IPSR
 8006680:	613b      	str	r3, [r7, #16]
  return(result);
 8006682:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006684:	2b00      	cmp	r3, #0
 8006686:	d15f      	bne.n	8006748 <osMessageQueueNew+0xdc>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d05c      	beq.n	8006748 <osMessageQueueNew+0xdc>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d059      	beq.n	8006748 <osMessageQueueNew+0xdc>
    mem = -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006698:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d029      	beq.n	80066f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <osMessageQueueNew+0x62>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80066ae:	d90e      	bls.n	80066ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d302      	bcc.n	80066ce <osMessageQueueNew+0x62>
        mem = 1;
 80066c8:	2301      	movs	r3, #1
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	e014      	b.n	80066f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d110      	bne.n	80066f8 <osMessageQueueNew+0x8c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10c      	bne.n	80066f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d108      	bne.n	80066f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	e001      	b.n	80066f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d10b      	bne.n	8006716 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2100      	movs	r1, #0
 8006708:	9100      	str	r1, [sp, #0]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa2b 	bl	8006b68 <xQueueGenericCreateStatic>
 8006712:	61f8      	str	r0, [r7, #28]
 8006714:	e008      	b.n	8006728 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800671c:	2200      	movs	r2, #0
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fa9e 	bl	8006c62 <xQueueGenericCreate>
 8006726:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e001      	b.n	8006740 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	69f8      	ldr	r0, [r7, #28]
 8006744:	f001 fa02 	bl	8007b4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006748:	69fb      	ldr	r3, [r7, #28]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800676c:	f3ef 8305 	mrs	r3, IPSR
 8006770:	617b      	str	r3, [r7, #20]
  return(result);
 8006772:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006774:	2b00      	cmp	r3, #0
 8006776:	d028      	beq.n	80067ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <osMessageQueuePut+0x36>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <osMessageQueuePut+0x36>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800678a:	f06f 0303 	mvn.w	r3, #3
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	e038      	b.n	8006804 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006796:	f107 0210 	add.w	r2, r7, #16
 800679a:	2300      	movs	r3, #0
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	69b8      	ldr	r0, [r7, #24]
 80067a0:	f000 fce6 	bl	8007170 <xQueueGenericSendFromISR>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d003      	beq.n	80067b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80067aa:	f06f 0302 	mvn.w	r3, #2
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e028      	b.n	8006804 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d025      	beq.n	8006804 <osMessageQueuePut+0xb0>
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <osMessageQueuePut+0xbc>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	e01c      	b.n	8006804 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <osMessageQueuePut+0x82>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80067d6:	f06f 0303 	mvn.w	r3, #3
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e012      	b.n	8006804 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067de:	2300      	movs	r3, #0
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	69b8      	ldr	r0, [r7, #24]
 80067e6:	f000 fbc1 	bl	8006f6c <xQueueGenericSend>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d009      	beq.n	8006804 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80067f6:	f06f 0301 	mvn.w	r3, #1
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	e002      	b.n	8006804 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80067fe:	f06f 0302 	mvn.w	r3, #2
 8006802:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006804:	69fb      	ldr	r3, [r7, #28]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006826:	2300      	movs	r3, #0
 8006828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800682a:	f3ef 8305 	mrs	r3, IPSR
 800682e:	617b      	str	r3, [r7, #20]
  return(result);
 8006830:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006832:	2b00      	cmp	r3, #0
 8006834:	d028      	beq.n	8006888 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <osMessageQueueGet+0x34>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <osMessageQueueGet+0x34>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006848:	f06f 0303 	mvn.w	r3, #3
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	e037      	b.n	80068c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f000 ffa7 	bl	80077b0 <xQueueReceiveFromISR>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d003      	beq.n	8006870 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006868:	f06f 0302 	mvn.w	r3, #2
 800686c:	61fb      	str	r3, [r7, #28]
 800686e:	e027      	b.n	80068c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d024      	beq.n	80068c0 <osMessageQueueGet+0xac>
 8006876:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <osMessageQueueGet+0xb8>)
 8006878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	e01b      	b.n	80068c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <osMessageQueueGet+0x80>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d103      	bne.n	800689c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006894:	f06f 0303 	mvn.w	r3, #3
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e011      	b.n	80068c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	69b8      	ldr	r0, [r7, #24]
 80068a2:	f000 fd93 	bl	80073cc <xQueueReceive>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d009      	beq.n	80068c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80068b2:	f06f 0301 	mvn.w	r3, #1
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e002      	b.n	80068c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80068ba:	f06f 0302 	mvn.w	r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a06      	ldr	r2, [pc, #24]	@ (80068f8 <vApplicationGetIdleTaskMemory+0x28>)
 80068e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	4a05      	ldr	r2, [pc, #20]	@ (80068fc <vApplicationGetIdleTaskMemory+0x2c>)
 80068e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2280      	movs	r2, #128	@ 0x80
 80068ec:	601a      	str	r2, [r3, #0]
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr
 80068f8:	200003c0 	.word	0x200003c0
 80068fc:	20000468 	.word	0x20000468

08006900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a07      	ldr	r2, [pc, #28]	@ (800692c <vApplicationGetTimerTaskMemory+0x2c>)
 8006910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4a06      	ldr	r2, [pc, #24]	@ (8006930 <vApplicationGetTimerTaskMemory+0x30>)
 8006916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000668 	.word	0x20000668
 8006930:	20000710 	.word	0x20000710

08006934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f103 0208 	add.w	r2, r3, #8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800694c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f103 0208 	add.w	r2, r3, #8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
}
 80069c6:	bf00      	nop
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e6:	d103      	bne.n	80069f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e00c      	b.n	8006a0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3308      	adds	r3, #8
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e002      	b.n	80069fe <vListInsert+0x2e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d2f6      	bcs.n	80069f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr

08006a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6892      	ldr	r2, [r2, #8]
 8006a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d103      	bne.n	8006a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
	...

08006a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xQueueGenericReset+0x2c>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60bb      	str	r3, [r7, #8]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ac0:	f002 fd6c 	bl	800959c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	441a      	add	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af0:	3b01      	subs	r3, #1
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	441a      	add	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	22ff      	movs	r2, #255	@ 0xff
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d114      	bne.n	8006b40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01a      	beq.n	8006b54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3310      	adds	r3, #16
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 fd38 	bl	8008598 <xTaskRemoveFromEventList>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d012      	beq.n	8006b54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <xQueueGenericReset+0xd0>)
 8006b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	e009      	b.n	8006b54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3310      	adds	r3, #16
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fef5 	bl	8006934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3324      	adds	r3, #36	@ 0x24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fef0 	bl	8006934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b54:	f002 fd52 	bl	80095fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b58:	2301      	movs	r3, #1
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08e      	sub	sp, #56	@ 0x38
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <xQueueGenericCreateStatic+0x56>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xQueueGenericCreateStatic+0x5a>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericCreateStatic+0x5c>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	623b      	str	r3, [r7, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	e7fd      	b.n	8006bdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <xQueueGenericCreateStatic+0x84>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueGenericCreateStatic+0x88>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueGenericCreateStatic+0x8a>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10b      	bne.n	8006c0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61fb      	str	r3, [r7, #28]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c0e:	2350      	movs	r3, #80	@ 0x50
 8006c10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b50      	cmp	r3, #80	@ 0x50
 8006c16:	d00b      	beq.n	8006c30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61bb      	str	r3, [r7, #24]
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	e7fd      	b.n	8006c2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00d      	beq.n	8006c58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f840 	bl	8006cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3730      	adds	r7, #48	@ 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b08a      	sub	sp, #40	@ 0x28
 8006c66:	af02      	add	r7, sp, #8
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10b      	bne.n	8006c8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	613b      	str	r3, [r7, #16]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	fb02 f303 	mul.w	r3, r2, r3
 8006c96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	3350      	adds	r3, #80	@ 0x50
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f002 fd7f 	bl	80097a0 <pvPortMalloc>
 8006ca2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d011      	beq.n	8006cce <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	3350      	adds	r3, #80	@ 0x50
 8006cb2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f805 	bl	8006cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cce:	69bb      	ldr	r3, [r7, #24]
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3720      	adds	r7, #32
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e002      	b.n	8006cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d06:	2101      	movs	r1, #1
 8006d08:	69b8      	ldr	r0, [r7, #24]
 8006d0a:	f7ff fec3 	bl	8006a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	78fa      	ldrb	r2, [r7, #3]
 8006d12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d16:	bf00      	nop
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00e      	beq.n	8006d4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2200      	movs	r2, #0
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f911 	bl	8006f6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	4603      	mov	r3, r0
 8006d5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	461a      	mov	r2, r3
 8006d68:	6939      	ldr	r1, [r7, #16]
 8006d6a:	6978      	ldr	r0, [r7, #20]
 8006d6c:	f7ff ff79 	bl	8006c62 <xQueueGenericCreate>
 8006d70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ffd3 	bl	8006d1e <prvInitialiseMutex>

		return xNewQueue;
 8006d78:	68fb      	ldr	r3, [r7, #12]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b088      	sub	sp, #32
 8006d86:	af02      	add	r7, sp, #8
 8006d88:	4603      	mov	r3, r0
 8006d8a:	6039      	str	r1, [r7, #0]
 8006d8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6939      	ldr	r1, [r7, #16]
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f7ff fee1 	bl	8006b68 <xQueueGenericCreateStatic>
 8006da6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ffb8 	bl	8006d1e <prvInitialiseMutex>

		return xNewQueue;
 8006dae:	68fb      	ldr	r3, [r7, #12]
	}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	689c      	ldr	r4, [r3, #8]
 8006de6:	f001 fd9d 	bl	8008924 <xTaskGetCurrentTaskHandle>
 8006dea:	4603      	mov	r3, r0
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d111      	bne.n	8006e14 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	1e5a      	subs	r2, r3, #1
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d105      	bne.n	8006e0e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	6938      	ldr	r0, [r7, #16]
 8006e0a:	f000 f8af 	bl	8006f6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e001      	b.n	8006e18 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006e18:	697b      	ldr	r3, [r7, #20]
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd90      	pop	{r4, r7, pc}

08006e22 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006e22:	b590      	push	{r4, r7, lr}
 8006e24:	b087      	sub	sp, #28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60fb      	str	r3, [r7, #12]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	689c      	ldr	r4, [r3, #8]
 8006e52:	f001 fd67 	bl	8008924 <xTaskGetCurrentTaskHandle>
 8006e56:	4603      	mov	r3, r0
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	d107      	bne.n	8006e6c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006e66:	2301      	movs	r3, #1
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	e00c      	b.n	8006e86 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6938      	ldr	r0, [r7, #16]
 8006e70:	f000 fb8e 	bl	8007590 <xQueueSemaphoreTake>
 8006e74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006e86:	697b      	ldr	r3, [r7, #20]
	}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd90      	pop	{r4, r7, pc}

08006e90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	@ 0x28
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	61bb      	str	r3, [r7, #24]
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	e7fd      	b.n	8006eb6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d90b      	bls.n	8006eda <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006eda:	2302      	movs	r3, #2
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fe3f 	bl	8006b68 <xQueueGenericCreateStatic>
 8006eea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
	}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	613b      	str	r3, [r7, #16]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d90b      	bls.n	8006f4a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60fb      	str	r3, [r7, #12]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fe87 	bl	8006c62 <xQueueGenericCreate>
 8006f54:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006f62:	697b      	ldr	r3, [r7, #20]
	}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	@ 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <xQueueGenericSend+0x34>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueGenericSend+0x42>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <xQueueGenericSend+0x46>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <xQueueGenericSend+0x48>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <xQueueGenericSend+0x64>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d103      	bne.n	8006fde <xQueueGenericSend+0x72>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <xQueueGenericSend+0x76>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <xQueueGenericSend+0x78>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <xQueueGenericSend+0x94>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	623b      	str	r3, [r7, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	e7fd      	b.n	8006ffc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007000:	f001 fc9e 	bl	8008940 <xTaskGetSchedulerState>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <xQueueGenericSend+0xa4>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <xQueueGenericSend+0xa8>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <xQueueGenericSend+0xaa>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <xQueueGenericSend+0xc6>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61fb      	str	r3, [r7, #28]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007032:	f002 fab3 	bl	800959c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <xQueueGenericSend+0xdc>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d129      	bne.n	800709c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800704e:	f000 fc6c 	bl	800792a <prvCopyDataToQueue>
 8007052:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	3324      	adds	r3, #36	@ 0x24
 8007060:	4618      	mov	r0, r3
 8007062:	f001 fa99 	bl	8008598 <xTaskRemoveFromEventList>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d013      	beq.n	8007094 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800706c:	4b3f      	ldr	r3, [pc, #252]	@ (800716c <xQueueGenericSend+0x200>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	e00a      	b.n	8007094 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800707e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007084:	4b39      	ldr	r3, [pc, #228]	@ (800716c <xQueueGenericSend+0x200>)
 8007086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007094:	f002 fab2 	bl	80095fc <vPortExitCritical>
				return pdPASS;
 8007098:	2301      	movs	r3, #1
 800709a:	e063      	b.n	8007164 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070a2:	f002 faab 	bl	80095fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e05c      	b.n	8007164 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070b0:	f107 0314 	add.w	r3, r7, #20
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 fad3 	bl	8008660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ba:	2301      	movs	r3, #1
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070be:	f002 fa9d 	bl	80095fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070c2:	f001 f82d 	bl	8008120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070c6:	f002 fa69 	bl	800959c <vPortEnterCritical>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070d0:	b25b      	sxtb	r3, r3
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070d6:	d103      	bne.n	80070e0 <xQueueGenericSend+0x174>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSend+0x18a>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070f6:	f002 fa81 	bl	80095fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070fa:	1d3a      	adds	r2, r7, #4
 80070fc:	f107 0314 	add.w	r3, r7, #20
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fac2 	bl	800868c <xTaskCheckForTimeOut>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d124      	bne.n	8007158 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800710e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007110:	f000 fd03 	bl	8007b1a <prvIsQueueFull>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d018      	beq.n	800714c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	3310      	adds	r3, #16
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f001 f9e6 	bl	80084f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800712a:	f000 fc8e 	bl	8007a4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800712e:	f001 f805 	bl	800813c <xTaskResumeAll>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	f47f af7c 	bne.w	8007032 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800713a:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <xQueueGenericSend+0x200>)
 800713c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	e772      	b.n	8007032 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800714c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800714e:	f000 fc7c 	bl	8007a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007152:	f000 fff3 	bl	800813c <xTaskResumeAll>
 8007156:	e76c      	b.n	8007032 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800715a:	f000 fc76 	bl	8007a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800715e:	f000 ffed 	bl	800813c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007164:	4618      	mov	r0, r3
 8007166:	3738      	adds	r7, #56	@ 0x38
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b090      	sub	sp, #64	@ 0x40
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <xQueueGenericSendFromISR+0x3e>
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <xQueueGenericSendFromISR+0x42>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <xQueueGenericSendFromISR+0x44>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d103      	bne.n	80071de <xQueueGenericSendFromISR+0x6e>
 80071d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <xQueueGenericSendFromISR+0x72>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <xQueueGenericSendFromISR+0x74>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	623b      	str	r3, [r7, #32]
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	e7fd      	b.n	80071fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007200:	f002 fa8e 	bl	8009720 <vPortValidateInterruptPriority>
	__asm volatile
 8007204:	f3ef 8211 	mrs	r2, BASEPRI
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61fa      	str	r2, [r7, #28]
 800721a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800721c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <xQueueGenericSendFromISR+0xc2>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d12f      	bne.n	8007292 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007238:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007248:	f000 fb6f 	bl	800792a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800724c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007254:	d112      	bne.n	800727c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	3324      	adds	r3, #36	@ 0x24
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f998 	bl	8008598 <xTaskRemoveFromEventList>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00e      	beq.n	800728c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e007      	b.n	800728c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800727c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007280:	3301      	adds	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	b25a      	sxtb	r2, r3
 8007286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800728c:	2301      	movs	r3, #1
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007290:	e001      	b.n	8007296 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007292:	2300      	movs	r3, #0
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007298:	617b      	str	r3, [r7, #20]
	__asm volatile
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f383 8811 	msr	BASEPRI, r3
}
 80072a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3740      	adds	r7, #64	@ 0x40
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08e      	sub	sp, #56	@ 0x38
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	623b      	str	r3, [r7, #32]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61fb      	str	r3, [r7, #28]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <xQueueGiveFromISR+0x5c>
 8007300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <xQueueGiveFromISR+0x60>
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <xQueueGiveFromISR+0x62>
 800730c:	2300      	movs	r3, #0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	61bb      	str	r3, [r7, #24]
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	e7fd      	b.n	8007326 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800732a:	f002 f9f9 	bl	8009720 <vPortValidateInterruptPriority>
	__asm volatile
 800732e:	f3ef 8211 	mrs	r2, BASEPRI
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	617a      	str	r2, [r7, #20]
 8007344:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007346:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007348:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007356:	429a      	cmp	r2, r3
 8007358:	d22b      	bcs.n	80073b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800736c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007374:	d112      	bne.n	800739c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	3324      	adds	r3, #36	@ 0x24
 8007382:	4618      	mov	r0, r3
 8007384:	f001 f908 	bl	8008598 <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00e      	beq.n	80073ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e007      	b.n	80073ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073a0:	3301      	adds	r3, #1
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	b25a      	sxtb	r2, r3
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073ac:	2301      	movs	r3, #1
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b0:	e001      	b.n	80073b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f383 8811 	msr	BASEPRI, r3
}
 80073c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3738      	adds	r7, #56	@ 0x38
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	@ 0x30
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073d8:	2300      	movs	r3, #0
 80073da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10b      	bne.n	80073fe <xQueueReceive+0x32>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	623b      	str	r3, [r7, #32]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <xQueueReceive+0x40>
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <xQueueReceive+0x44>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <xQueueReceive+0x46>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <xQueueReceive+0x62>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	61fb      	str	r3, [r7, #28]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800742e:	f001 fa87 	bl	8008940 <xTaskGetSchedulerState>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <xQueueReceive+0x72>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <xQueueReceive+0x76>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <xQueueReceive+0x78>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <xQueueReceive+0x94>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61bb      	str	r3, [r7, #24]
}
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007460:	f002 f89c 	bl	800959c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01f      	beq.n	80074b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007474:	f000 fac3 	bl	80079fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	1e5a      	subs	r2, r3, #1
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00f      	beq.n	80074a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748a:	3310      	adds	r3, #16
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f883 	bl	8008598 <xTaskRemoveFromEventList>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007498:	4b3c      	ldr	r3, [pc, #240]	@ (800758c <xQueueReceive+0x1c0>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074a8:	f002 f8a8 	bl	80095fc <vPortExitCritical>
				return pdPASS;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e069      	b.n	8007584 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b6:	f002 f8a1 	bl	80095fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e062      	b.n	8007584 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074c4:	f107 0310 	add.w	r3, r7, #16
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 f8c9 	bl	8008660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d2:	f002 f893 	bl	80095fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074d6:	f000 fe23 	bl	8008120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074da:	f002 f85f 	bl	800959c <vPortEnterCritical>
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ea:	d103      	bne.n	80074f4 <xQueueReceive+0x128>
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074fa:	b25b      	sxtb	r3, r3
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007500:	d103      	bne.n	800750a <xQueueReceive+0x13e>
 8007502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800750a:	f002 f877 	bl	80095fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800750e:	1d3a      	adds	r2, r7, #4
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f8b8 	bl	800868c <xTaskCheckForTimeOut>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d123      	bne.n	800756a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007524:	f000 fae3 	bl	8007aee <prvIsQueueEmpty>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d017      	beq.n	800755e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800752e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007530:	3324      	adds	r3, #36	@ 0x24
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f000 ffdc 	bl	80084f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800753c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753e:	f000 fa84 	bl	8007a4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007542:	f000 fdfb 	bl	800813c <xTaskResumeAll>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d189      	bne.n	8007460 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800754c:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <xQueueReceive+0x1c0>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	e780      	b.n	8007460 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800755e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007560:	f000 fa73 	bl	8007a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007564:	f000 fdea 	bl	800813c <xTaskResumeAll>
 8007568:	e77a      	b.n	8007460 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800756a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800756c:	f000 fa6d 	bl	8007a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007570:	f000 fde4 	bl	800813c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007576:	f000 faba 	bl	8007aee <prvIsQueueEmpty>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	f43f af6f 	beq.w	8007460 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007582:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007584:	4618      	mov	r0, r3
 8007586:	3730      	adds	r7, #48	@ 0x30
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08e      	sub	sp, #56	@ 0x38
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	623b      	str	r3, [r7, #32]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61fb      	str	r3, [r7, #28]
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075e4:	f001 f9ac 	bl	8008940 <xTaskGetSchedulerState>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <xQueueSemaphoreTake+0x64>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <xQueueSemaphoreTake+0x68>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <xQueueSemaphoreTake+0x6a>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	61bb      	str	r3, [r7, #24]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007616:	f001 ffc1 	bl	800959c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800761a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007622:	2b00      	cmp	r3, #0
 8007624:	d024      	beq.n	8007670 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d104      	bne.n	8007640 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007636:	f001 fafd 	bl	8008c34 <pvTaskIncrementMutexHeldCount>
 800763a:	4602      	mov	r2, r0
 800763c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00f      	beq.n	8007668 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764a:	3310      	adds	r3, #16
 800764c:	4618      	mov	r0, r3
 800764e:	f000 ffa3 	bl	8008598 <xTaskRemoveFromEventList>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007658:	4b54      	ldr	r3, [pc, #336]	@ (80077ac <xQueueSemaphoreTake+0x21c>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007668:	f001 ffc8 	bl	80095fc <vPortExitCritical>
				return pdPASS;
 800766c:	2301      	movs	r3, #1
 800766e:	e098      	b.n	80077a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d112      	bne.n	800769c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	617b      	str	r3, [r7, #20]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007694:	f001 ffb2 	bl	80095fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007698:	2300      	movs	r3, #0
 800769a:	e082      	b.n	80077a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 ffda 	bl	8008660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076ac:	2301      	movs	r3, #1
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076b0:	f001 ffa4 	bl	80095fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076b4:	f000 fd34 	bl	8008120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b8:	f001 ff70 	bl	800959c <vPortEnterCritical>
 80076bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076c2:	b25b      	sxtb	r3, r3
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076c8:	d103      	bne.n	80076d2 <xQueueSemaphoreTake+0x142>
 80076ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076d8:	b25b      	sxtb	r3, r3
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076de:	d103      	bne.n	80076e8 <xQueueSemaphoreTake+0x158>
 80076e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e8:	f001 ff88 	bl	80095fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ec:	463a      	mov	r2, r7
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 ffc9 	bl	800868c <xTaskCheckForTimeOut>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d132      	bne.n	8007766 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007700:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007702:	f000 f9f4 	bl	8007aee <prvIsQueueEmpty>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d026      	beq.n	800775a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007714:	f001 ff42 	bl	800959c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	4618      	mov	r0, r3
 800771e:	f001 f92d 	bl	800897c <xTaskPriorityInherit>
 8007722:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007724:	f001 ff6a 	bl	80095fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772a:	3324      	adds	r3, #36	@ 0x24
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fedf 	bl	80084f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007736:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007738:	f000 f987 	bl	8007a4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800773c:	f000 fcfe 	bl	800813c <xTaskResumeAll>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	f47f af67 	bne.w	8007616 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007748:	4b18      	ldr	r3, [pc, #96]	@ (80077ac <xQueueSemaphoreTake+0x21c>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	e75d      	b.n	8007616 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800775a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800775c:	f000 f975 	bl	8007a4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007760:	f000 fcec 	bl	800813c <xTaskResumeAll>
 8007764:	e757      	b.n	8007616 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007768:	f000 f96f 	bl	8007a4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800776c:	f000 fce6 	bl	800813c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007770:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007772:	f000 f9bc 	bl	8007aee <prvIsQueueEmpty>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	f43f af4c 	beq.w	8007616 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007784:	f001 ff0a 	bl	800959c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800778a:	f000 f8b7 	bl	80078fc <prvGetDisinheritPriorityAfterTimeout>
 800778e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007796:	4618      	mov	r0, r3
 8007798:	f001 f9c8 	bl	8008b2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800779c:	f001 ff2e 	bl	80095fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3738      	adds	r7, #56	@ 0x38
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08e      	sub	sp, #56	@ 0x38
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	623b      	str	r3, [r7, #32]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <xQueueReceiveFromISR+0x3c>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <xQueueReceiveFromISR+0x40>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <xQueueReceiveFromISR+0x42>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10b      	bne.n	800780e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	61fb      	str	r3, [r7, #28]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800780e:	f001 ff87 	bl	8009720 <vPortValidateInterruptPriority>
	__asm volatile
 8007812:	f3ef 8211 	mrs	r2, BASEPRI
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	61ba      	str	r2, [r7, #24]
 8007828:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800782a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800782c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007832:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d02f      	beq.n	800789a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007848:	f000 f8d9 	bl	80079fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007854:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800785c:	d112      	bne.n	8007884 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d016      	beq.n	8007894 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	3310      	adds	r3, #16
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fe94 	bl	8008598 <xTaskRemoveFromEventList>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	e007      	b.n	8007894 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007888:	3301      	adds	r3, #1
 800788a:	b2db      	uxtb	r3, r3
 800788c:	b25a      	sxtb	r2, r3
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007894:	2301      	movs	r3, #1
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	e001      	b.n	800789e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800789a:	2300      	movs	r3, #0
 800789c:	637b      	str	r3, [r7, #52]	@ 0x34
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f383 8811 	msr	BASEPRI, r3
}
 80078a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3738      	adds	r7, #56	@ 0x38
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10b      	bne.n	80078de <vQueueDelete+0x2a>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60bb      	str	r3, [r7, #8]
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	e7fd      	b.n	80078da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f95c 	bl	8007b9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f002 f824 	bl	800993c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d006      	beq.n	800791a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e001      	b.n	800791e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800791e:	68fb      	ldr	r3, [r7, #12]
	}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr

0800792a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10d      	bne.n	8007964 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d14d      	bne.n	80079ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f001 f879 	bl	8008a4c <xTaskPriorityDisinherit>
 800795a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	609a      	str	r2, [r3, #8]
 8007962:	e043      	b.n	80079ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d119      	bne.n	800799e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6858      	ldr	r0, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007972:	461a      	mov	r2, r3
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	f004 fb21 	bl	800bfbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007982:	441a      	add	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	d32b      	bcc.n	80079ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	e026      	b.n	80079ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	68d8      	ldr	r0, [r3, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	461a      	mov	r2, r3
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	f004 fb07 	bl	800bfbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	425b      	negs	r3, r3
 80079b8:	441a      	add	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d207      	bcs.n	80079da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d2:	425b      	negs	r3, r3
 80079d4:	441a      	add	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d105      	bne.n	80079ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80079f4:	697b      	ldr	r3, [r7, #20]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d018      	beq.n	8007a42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	441a      	add	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d303      	bcc.n	8007a32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68d9      	ldr	r1, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6838      	ldr	r0, [r7, #0]
 8007a3e:	f004 fabd 	bl	800bfbc <memcpy>
	}
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a52:	f001 fda3 	bl	800959c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a5e:	e011      	b.n	8007a84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d012      	beq.n	8007a8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3324      	adds	r3, #36	@ 0x24
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 fd93 	bl	8008598 <xTaskRemoveFromEventList>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a78:	f000 fe6c 	bl	8008754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dce9      	bgt.n	8007a60 <prvUnlockQueue+0x16>
 8007a8c:	e000      	b.n	8007a90 <prvUnlockQueue+0x46>
					break;
 8007a8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	22ff      	movs	r2, #255	@ 0xff
 8007a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007a98:	f001 fdb0 	bl	80095fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a9c:	f001 fd7e 	bl	800959c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aa6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aa8:	e011      	b.n	8007ace <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d012      	beq.n	8007ad8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 fd6e 	bl	8008598 <xTaskRemoveFromEventList>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ac2:	f000 fe47 	bl	8008754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dce9      	bgt.n	8007aaa <prvUnlockQueue+0x60>
 8007ad6:	e000      	b.n	8007ada <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ad8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	22ff      	movs	r2, #255	@ 0xff
 8007ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ae2:	f001 fd8b 	bl	80095fc <vPortExitCritical>
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007af6:	f001 fd51 	bl	800959c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e001      	b.n	8007b0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fd76 	bl	80095fc <vPortExitCritical>

	return xReturn;
 8007b10:	68fb      	ldr	r3, [r7, #12]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b22:	f001 fd3b 	bl	800959c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d102      	bne.n	8007b38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b32:	2301      	movs	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	e001      	b.n	8007b3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b3c:	f001 fd5e 	bl	80095fc <vPortExitCritical>

	return xReturn;
 8007b40:	68fb      	ldr	r3, [r7, #12]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	e014      	b.n	8007b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8007b98 <vQueueAddToRegistry+0x4c>)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b68:	490b      	ldr	r1, [pc, #44]	@ (8007b98 <vQueueAddToRegistry+0x4c>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b72:	4a09      	ldr	r2, [pc, #36]	@ (8007b98 <vQueueAddToRegistry+0x4c>)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4413      	add	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b7e:	e006      	b.n	8007b8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2b07      	cmp	r3, #7
 8007b8a:	d9e7      	bls.n	8007b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr
 8007b98:	20000b10 	.word	0x20000b10

08007b9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e016      	b.n	8007bd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007baa:	4a10      	ldr	r2, [pc, #64]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d10b      	bne.n	8007bd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007bba:	4a0c      	ldr	r2, [pc, #48]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007bc4:	4a09      	ldr	r2, [pc, #36]	@ (8007bec <vQueueUnregisterQueue+0x50>)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]
				break;
 8007bd0:	e006      	b.n	8007be0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d9e5      	bls.n	8007baa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000b10 	.word	0x20000b10

08007bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c00:	f001 fccc 	bl	800959c <vPortEnterCritical>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c0a:	b25b      	sxtb	r3, r3
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c10:	d103      	bne.n	8007c1a <vQueueWaitForMessageRestricted+0x2a>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c20:	b25b      	sxtb	r3, r3
 8007c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c26:	d103      	bne.n	8007c30 <vQueueWaitForMessageRestricted+0x40>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c30:	f001 fce4 	bl	80095fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3324      	adds	r3, #36	@ 0x24
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fc7b 	bl	8008540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c4a:	6978      	ldr	r0, [r7, #20]
 8007c4c:	f7ff fefd 	bl	8007a4a <prvUnlockQueue>
	}
 8007c50:	bf00      	nop
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	@ 0x38
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	623b      	str	r3, [r7, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	61fb      	str	r3, [r7, #28]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ca2:	23a8      	movs	r3, #168	@ 0xa8
 8007ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007caa:	d00b      	beq.n	8007cc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61bb      	str	r3, [r7, #24]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01e      	beq.n	8007d0a <xTaskCreateStatic+0xb2>
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01b      	beq.n	8007d0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f851 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d04:	f000 f8f6 	bl	8007ef4 <prvAddNewTaskToReadyList>
 8007d08:	e001      	b.n	8007d0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d0e:	697b      	ldr	r3, [r7, #20]
	}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3728      	adds	r7, #40	@ 0x28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	@ 0x30
 8007d1c:	af04      	add	r7, sp, #16
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fd37 	bl	80097a0 <pvPortMalloc>
 8007d32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d3a:	20a8      	movs	r0, #168	@ 0xa8
 8007d3c:	f001 fd30 	bl	80097a0 <pvPortMalloc>
 8007d40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d4e:	e005      	b.n	8007d5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f001 fdf3 	bl	800993c <vPortFree>
 8007d56:	e001      	b.n	8007d5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d017      	beq.n	8007d92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	9302      	str	r3, [sp, #8]
 8007d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f80f 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d86:	69f8      	ldr	r0, [r7, #28]
 8007d88:	f000 f8b4 	bl	8007ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	e002      	b.n	8007d98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d98:	69bb      	ldr	r3, [r7, #24]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	461a      	mov	r2, r3
 8007dbc:	21a5      	movs	r1, #165	@ 0xa5
 8007dbe:	f004 f80d 	bl	800bddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00b      	beq.n	8007dfe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	617b      	str	r3, [r7, #20]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01f      	beq.n	8007e44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e012      	b.n	8007e30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	3334      	adds	r3, #52	@ 0x34
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	4413      	add	r3, r2
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d9e9      	bls.n	8007e0a <prvInitialiseNewTask+0x66>
 8007e36:	e000      	b.n	8007e3a <prvInitialiseNewTask+0x96>
			{
				break;
 8007e38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e42:	e003      	b.n	8007e4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	2b37      	cmp	r3, #55	@ 0x37
 8007e50:	d901      	bls.n	8007e56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e52:	2337      	movs	r3, #55	@ 0x37
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	2200      	movs	r2, #0
 8007e66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fd80 	bl	8006972 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	3318      	adds	r3, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fd7b 	bl	8006972 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	3354      	adds	r3, #84	@ 0x54
 8007ea6:	224c      	movs	r2, #76	@ 0x4c
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f003 ff96 	bl	800bddc <memset>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ee8 <prvInitialiseNewTask+0x144>)
 8007eb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8007eec <prvInitialiseNewTask+0x148>)
 8007eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <prvInitialiseNewTask+0x14c>)
 8007ec0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	68f9      	ldr	r1, [r7, #12]
 8007ec6:	69b8      	ldr	r0, [r7, #24]
 8007ec8:	f001 fa74 	bl	80093b4 <pxPortInitialiseStack>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ede:	bf00      	nop
 8007ee0:	3720      	adds	r7, #32
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200039ac 	.word	0x200039ac
 8007eec:	20003a14 	.word	0x20003a14
 8007ef0:	20003a7c 	.word	0x20003a7c

08007ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007efc:	f001 fb4e 	bl	800959c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f00:	4b2d      	ldr	r3, [pc, #180]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f12:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f18:	4b27      	ldr	r3, [pc, #156]	@ (8007fb8 <prvAddNewTaskToReadyList+0xc4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d110      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f20:	f000 fc3c 	bl	800879c <prvInitialiseTaskLists>
 8007f24:	e00d      	b.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f26:	4b26      	ldr	r3, [pc, #152]	@ (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d109      	bne.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f2e:	4b23      	ldr	r3, [pc, #140]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d802      	bhi.n	8007f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f42:	4b20      	ldr	r3, [pc, #128]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc4 <prvAddNewTaskToReadyList+0xd0>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f58:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d903      	bls.n	8007f68 <prvAddNewTaskToReadyList+0x74>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	4a18      	ldr	r2, [pc, #96]	@ (8007fc8 <prvAddNewTaskToReadyList+0xd4>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a15      	ldr	r2, [pc, #84]	@ (8007fcc <prvAddNewTaskToReadyList+0xd8>)
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fe fd03 	bl	800698a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f84:	f001 fb3a 	bl	80095fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f88:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <prvAddNewTaskToReadyList+0xcc>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00e      	beq.n	8007fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <prvAddNewTaskToReadyList+0xc8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d207      	bcs.n	8007fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd0 <prvAddNewTaskToReadyList+0xdc>)
 8007fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001024 	.word	0x20001024
 8007fbc:	20000b50 	.word	0x20000b50
 8007fc0:	20001030 	.word	0x20001030
 8007fc4:	20001040 	.word	0x20001040
 8007fc8:	2000102c 	.word	0x2000102c
 8007fcc:	20000b54 	.word	0x20000b54
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d018      	beq.n	8008018 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fe6:	4b14      	ldr	r3, [pc, #80]	@ (8008038 <vTaskDelay+0x64>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <vTaskDelay+0x32>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	60bb      	str	r3, [r7, #8]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008006:	f000 f88b 	bl	8008120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800800a:	2100      	movs	r1, #0
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fe25 	bl	8008c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008012:	f000 f893 	bl	800813c <xTaskResumeAll>
 8008016:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d107      	bne.n	800802e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800801e:	4b07      	ldr	r3, [pc, #28]	@ (800803c <vTaskDelay+0x68>)
 8008020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	2000104c 	.word	0x2000104c
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	@ 0x28
 8008044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800804e:	463a      	mov	r2, r7
 8008050:	1d39      	adds	r1, r7, #4
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fc3a 	bl	80068d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	2300      	movs	r3, #0
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	2300      	movs	r3, #0
 800806c:	460a      	mov	r2, r1
 800806e:	4924      	ldr	r1, [pc, #144]	@ (8008100 <vTaskStartScheduler+0xc0>)
 8008070:	4824      	ldr	r0, [pc, #144]	@ (8008104 <vTaskStartScheduler+0xc4>)
 8008072:	f7ff fdf1 	bl	8007c58 <xTaskCreateStatic>
 8008076:	4603      	mov	r3, r0
 8008078:	4a23      	ldr	r2, [pc, #140]	@ (8008108 <vTaskStartScheduler+0xc8>)
 800807a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800807c:	4b22      	ldr	r3, [pc, #136]	@ (8008108 <vTaskStartScheduler+0xc8>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	e001      	b.n	800808e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008094:	f000 fe36 	bl	8008d04 <xTimerCreateTimerTask>
 8008098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d11b      	bne.n	80080d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080b4:	4b15      	ldr	r3, [pc, #84]	@ (800810c <vTaskStartScheduler+0xcc>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3354      	adds	r3, #84	@ 0x54
 80080ba:	4a15      	ldr	r2, [pc, #84]	@ (8008110 <vTaskStartScheduler+0xd0>)
 80080bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080be:	4b15      	ldr	r3, [pc, #84]	@ (8008114 <vTaskStartScheduler+0xd4>)
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080c6:	4b14      	ldr	r3, [pc, #80]	@ (8008118 <vTaskStartScheduler+0xd8>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080cc:	4b13      	ldr	r3, [pc, #76]	@ (800811c <vTaskStartScheduler+0xdc>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080d2:	f001 f9f1 	bl	80094b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080d6:	e00f      	b.n	80080f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080de:	d10b      	bne.n	80080f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <vTaskStartScheduler+0xb4>
}
 80080f8:	bf00      	nop
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	0800e018 	.word	0x0800e018
 8008104:	0800876d 	.word	0x0800876d
 8008108:	20001048 	.word	0x20001048
 800810c:	20000b50 	.word	0x20000b50
 8008110:	2000002c 	.word	0x2000002c
 8008114:	20001044 	.word	0x20001044
 8008118:	20001030 	.word	0x20001030
 800811c:	20001028 	.word	0x20001028

08008120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008124:	4b04      	ldr	r3, [pc, #16]	@ (8008138 <vTaskSuspendAll+0x18>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	4a03      	ldr	r2, [pc, #12]	@ (8008138 <vTaskSuspendAll+0x18>)
 800812c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800812e:	bf00      	nop
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	2000104c 	.word	0x2000104c

0800813c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800814a:	4b42      	ldr	r3, [pc, #264]	@ (8008254 <xTaskResumeAll+0x118>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <xTaskResumeAll+0x2e>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	603b      	str	r3, [r7, #0]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800816a:	f001 fa17 	bl	800959c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800816e:	4b39      	ldr	r3, [pc, #228]	@ (8008254 <xTaskResumeAll+0x118>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3b01      	subs	r3, #1
 8008174:	4a37      	ldr	r2, [pc, #220]	@ (8008254 <xTaskResumeAll+0x118>)
 8008176:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008178:	4b36      	ldr	r3, [pc, #216]	@ (8008254 <xTaskResumeAll+0x118>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d162      	bne.n	8008246 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008180:	4b35      	ldr	r3, [pc, #212]	@ (8008258 <xTaskResumeAll+0x11c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d05e      	beq.n	8008246 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008188:	e02f      	b.n	80081ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818a:	4b34      	ldr	r3, [pc, #208]	@ (800825c <xTaskResumeAll+0x120>)
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3318      	adds	r3, #24
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fc52 	bl	8006a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fc4d 	bl	8006a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008260 <xTaskResumeAll+0x124>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d903      	bls.n	80081ba <xTaskResumeAll+0x7e>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008260 <xTaskResumeAll+0x124>)
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4a27      	ldr	r2, [pc, #156]	@ (8008264 <xTaskResumeAll+0x128>)
 80081c8:	441a      	add	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7fe fbda 	bl	800698a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081da:	4b23      	ldr	r3, [pc, #140]	@ (8008268 <xTaskResumeAll+0x12c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d302      	bcc.n	80081ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80081e4:	4b21      	ldr	r3, [pc, #132]	@ (800826c <xTaskResumeAll+0x130>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081ea:	4b1c      	ldr	r3, [pc, #112]	@ (800825c <xTaskResumeAll+0x120>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1cb      	bne.n	800818a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081f8:	f000 fb74 	bl	80088e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008270 <xTaskResumeAll+0x134>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008208:	f000 f856 	bl	80082b8 <xTaskIncrementTick>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008212:	4b16      	ldr	r3, [pc, #88]	@ (800826c <xTaskResumeAll+0x130>)
 8008214:	2201      	movs	r2, #1
 8008216:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3b01      	subs	r3, #1
 800821c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f1      	bne.n	8008208 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008224:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <xTaskResumeAll+0x134>)
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800822a:	4b10      	ldr	r3, [pc, #64]	@ (800826c <xTaskResumeAll+0x130>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008232:	2301      	movs	r3, #1
 8008234:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008236:	4b0f      	ldr	r3, [pc, #60]	@ (8008274 <xTaskResumeAll+0x138>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008246:	f001 f9d9 	bl	80095fc <vPortExitCritical>

	return xAlreadyYielded;
 800824a:	68bb      	ldr	r3, [r7, #8]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	2000104c 	.word	0x2000104c
 8008258:	20001024 	.word	0x20001024
 800825c:	20000fe4 	.word	0x20000fe4
 8008260:	2000102c 	.word	0x2000102c
 8008264:	20000b54 	.word	0x20000b54
 8008268:	20000b50 	.word	0x20000b50
 800826c:	20001038 	.word	0x20001038
 8008270:	20001034 	.word	0x20001034
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800827e:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <xTaskGetTickCount+0x18>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008284:	687b      	ldr	r3, [r7, #4]
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr
 8008290:	20001028 	.word	0x20001028

08008294 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800829a:	f001 fa41 	bl	8009720 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800829e:	2300      	movs	r3, #0
 80082a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80082a2:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <xTaskGetTickCountFromISR+0x20>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a8:	683b      	ldr	r3, [r7, #0]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20001028 	.word	0x20001028

080082b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c2:	4b4f      	ldr	r3, [pc, #316]	@ (8008400 <xTaskIncrementTick+0x148>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f040 8090 	bne.w	80083ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008404 <xTaskIncrementTick+0x14c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082d4:	4a4b      	ldr	r2, [pc, #300]	@ (8008404 <xTaskIncrementTick+0x14c>)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d121      	bne.n	8008324 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082e0:	4b49      	ldr	r3, [pc, #292]	@ (8008408 <xTaskIncrementTick+0x150>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00b      	beq.n	8008302 <xTaskIncrementTick+0x4a>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	603b      	str	r3, [r7, #0]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <xTaskIncrementTick+0x46>
 8008302:	4b41      	ldr	r3, [pc, #260]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	4b40      	ldr	r3, [pc, #256]	@ (800840c <xTaskIncrementTick+0x154>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a3e      	ldr	r2, [pc, #248]	@ (8008408 <xTaskIncrementTick+0x150>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	4a3e      	ldr	r2, [pc, #248]	@ (800840c <xTaskIncrementTick+0x154>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4b3e      	ldr	r3, [pc, #248]	@ (8008410 <xTaskIncrementTick+0x158>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	4a3c      	ldr	r2, [pc, #240]	@ (8008410 <xTaskIncrementTick+0x158>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	f000 fae0 	bl	80088e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008324:	4b3b      	ldr	r3, [pc, #236]	@ (8008414 <xTaskIncrementTick+0x15c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	d349      	bcc.n	80083c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800832e:	4b36      	ldr	r3, [pc, #216]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	4b36      	ldr	r3, [pc, #216]	@ (8008414 <xTaskIncrementTick+0x15c>)
 800833a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800833e:	601a      	str	r2, [r3, #0]
					break;
 8008340:	e03f      	b.n	80083c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008342:	4b31      	ldr	r3, [pc, #196]	@ (8008408 <xTaskIncrementTick+0x150>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d203      	bcs.n	8008362 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800835a:	4a2e      	ldr	r2, [pc, #184]	@ (8008414 <xTaskIncrementTick+0x15c>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008360:	e02f      	b.n	80083c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fb6a 	bl	8006a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3318      	adds	r3, #24
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe fb61 	bl	8006a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008382:	4b25      	ldr	r3, [pc, #148]	@ (8008418 <xTaskIncrementTick+0x160>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <xTaskIncrementTick+0xda>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838e:	4a22      	ldr	r2, [pc, #136]	@ (8008418 <xTaskIncrementTick+0x160>)
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4a1f      	ldr	r2, [pc, #124]	@ (800841c <xTaskIncrementTick+0x164>)
 80083a0:	441a      	add	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f7fe faee 	bl	800698a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008420 <xTaskIncrementTick+0x168>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d3b8      	bcc.n	800832e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c0:	e7b5      	b.n	800832e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083c2:	4b17      	ldr	r3, [pc, #92]	@ (8008420 <xTaskIncrementTick+0x168>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c8:	4914      	ldr	r1, [pc, #80]	@ (800841c <xTaskIncrementTick+0x164>)
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d901      	bls.n	80083de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80083da:	2301      	movs	r3, #1
 80083dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083de:	4b11      	ldr	r3, [pc, #68]	@ (8008424 <xTaskIncrementTick+0x16c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80083e6:	2301      	movs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e004      	b.n	80083f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008428 <xTaskIncrementTick+0x170>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3301      	adds	r3, #1
 80083f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008428 <xTaskIncrementTick+0x170>)
 80083f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083f6:	697b      	ldr	r3, [r7, #20]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	2000104c 	.word	0x2000104c
 8008404:	20001028 	.word	0x20001028
 8008408:	20000fdc 	.word	0x20000fdc
 800840c:	20000fe0 	.word	0x20000fe0
 8008410:	2000103c 	.word	0x2000103c
 8008414:	20001044 	.word	0x20001044
 8008418:	2000102c 	.word	0x2000102c
 800841c:	20000b54 	.word	0x20000b54
 8008420:	20000b50 	.word	0x20000b50
 8008424:	20001038 	.word	0x20001038
 8008428:	20001034 	.word	0x20001034

0800842c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008432:	4b2a      	ldr	r3, [pc, #168]	@ (80084dc <vTaskSwitchContext+0xb0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800843a:	4b29      	ldr	r3, [pc, #164]	@ (80084e0 <vTaskSwitchContext+0xb4>)
 800843c:	2201      	movs	r2, #1
 800843e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008440:	e047      	b.n	80084d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008442:	4b27      	ldr	r3, [pc, #156]	@ (80084e0 <vTaskSwitchContext+0xb4>)
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008448:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <vTaskSwitchContext+0xb8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e011      	b.n	8008474 <vTaskSwitchContext+0x48>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <vTaskSwitchContext+0x42>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	607b      	str	r3, [r7, #4]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <vTaskSwitchContext+0x3e>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b01      	subs	r3, #1
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	491c      	ldr	r1, [pc, #112]	@ (80084e8 <vTaskSwitchContext+0xbc>)
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	440b      	add	r3, r1
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0e3      	beq.n	8008450 <vTaskSwitchContext+0x24>
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4a15      	ldr	r2, [pc, #84]	@ (80084e8 <vTaskSwitchContext+0xbc>)
 8008494:	4413      	add	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	3308      	adds	r3, #8
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d104      	bne.n	80084b8 <vTaskSwitchContext+0x8c>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	4a0b      	ldr	r2, [pc, #44]	@ (80084ec <vTaskSwitchContext+0xc0>)
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	4a08      	ldr	r2, [pc, #32]	@ (80084e4 <vTaskSwitchContext+0xb8>)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084c8:	4b08      	ldr	r3, [pc, #32]	@ (80084ec <vTaskSwitchContext+0xc0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3354      	adds	r3, #84	@ 0x54
 80084ce:	4a08      	ldr	r2, [pc, #32]	@ (80084f0 <vTaskSwitchContext+0xc4>)
 80084d0:	6013      	str	r3, [r2, #0]
}
 80084d2:	bf00      	nop
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	2000104c 	.word	0x2000104c
 80084e0:	20001038 	.word	0x20001038
 80084e4:	2000102c 	.word	0x2000102c
 80084e8:	20000b54 	.word	0x20000b54
 80084ec:	20000b50 	.word	0x20000b50
 80084f0:	2000002c 	.word	0x2000002c

080084f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60fb      	str	r3, [r7, #12]
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800851c:	4b07      	ldr	r3, [pc, #28]	@ (800853c <vTaskPlaceOnEventList+0x48>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3318      	adds	r3, #24
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7fe fa53 	bl	80069d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800852a:	2101      	movs	r1, #1
 800852c:	6838      	ldr	r0, [r7, #0]
 800852e:	f000 fb95 	bl	8008c5c <prvAddCurrentTaskToDelayedList>
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000b50 	.word	0x20000b50

08008540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	617b      	str	r3, [r7, #20]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800856a:	4b0a      	ldr	r3, [pc, #40]	@ (8008594 <vTaskPlaceOnEventListRestricted+0x54>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3318      	adds	r3, #24
 8008570:	4619      	mov	r1, r3
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7fe fa09 	bl	800698a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800857e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008582:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	68b8      	ldr	r0, [r7, #8]
 8008588:	f000 fb68 	bl	8008c5c <prvAddCurrentTaskToDelayedList>
	}
 800858c:	bf00      	nop
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000b50 	.word	0x20000b50

08008598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	60fb      	str	r3, [r7, #12]
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	e7fd      	b.n	80085c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	3318      	adds	r3, #24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fa38 	bl	8006a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d0:	4b1d      	ldr	r3, [pc, #116]	@ (8008648 <xTaskRemoveFromEventList+0xb0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11d      	bne.n	8008614 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	3304      	adds	r3, #4
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe fa2f 	bl	8006a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e6:	4b19      	ldr	r3, [pc, #100]	@ (800864c <xTaskRemoveFromEventList+0xb4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d903      	bls.n	80085f6 <xTaskRemoveFromEventList+0x5e>
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f2:	4a16      	ldr	r2, [pc, #88]	@ (800864c <xTaskRemoveFromEventList+0xb4>)
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a13      	ldr	r2, [pc, #76]	@ (8008650 <xTaskRemoveFromEventList+0xb8>)
 8008604:	441a      	add	r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fe f9bc 	bl	800698a <vListInsertEnd>
 8008612:	e005      	b.n	8008620 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	3318      	adds	r3, #24
 8008618:	4619      	mov	r1, r3
 800861a:	480e      	ldr	r0, [pc, #56]	@ (8008654 <xTaskRemoveFromEventList+0xbc>)
 800861c:	f7fe f9b5 	bl	800698a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008624:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <xTaskRemoveFromEventList+0xc0>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	429a      	cmp	r2, r3
 800862c:	d905      	bls.n	800863a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008632:	4b0a      	ldr	r3, [pc, #40]	@ (800865c <xTaskRemoveFromEventList+0xc4>)
 8008634:	2201      	movs	r2, #1
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	e001      	b.n	800863e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800863e:	697b      	ldr	r3, [r7, #20]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	2000104c 	.word	0x2000104c
 800864c:	2000102c 	.word	0x2000102c
 8008650:	20000b54 	.word	0x20000b54
 8008654:	20000fe4 	.word	0x20000fe4
 8008658:	20000b50 	.word	0x20000b50
 800865c:	20001038 	.word	0x20001038

08008660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008668:	4b06      	ldr	r3, [pc, #24]	@ (8008684 <vTaskInternalSetTimeOutState+0x24>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008670:	4b05      	ldr	r3, [pc, #20]	@ (8008688 <vTaskInternalSetTimeOutState+0x28>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	605a      	str	r2, [r3, #4]
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	2000103c 	.word	0x2000103c
 8008688:	20001028 	.word	0x20001028

0800868c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	613b      	str	r3, [r7, #16]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60fb      	str	r3, [r7, #12]
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	e7fd      	b.n	80086ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086d2:	f000 ff63 	bl	800959c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086d6:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <xTaskCheckForTimeOut+0xc0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	69ba      	ldr	r2, [r7, #24]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ee:	d102      	bne.n	80086f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	e023      	b.n	800873e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b15      	ldr	r3, [pc, #84]	@ (8008750 <xTaskCheckForTimeOut+0xc4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d007      	beq.n	8008712 <xTaskCheckForTimeOut+0x86>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	d302      	bcc.n	8008712 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	e015      	b.n	800873e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	429a      	cmp	r2, r3
 800871a:	d20b      	bcs.n	8008734 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1ad2      	subs	r2, r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff ff99 	bl	8008660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	e004      	b.n	800873e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800873a:	2301      	movs	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800873e:	f000 ff5d 	bl	80095fc <vPortExitCritical>

	return xReturn;
 8008742:	69fb      	ldr	r3, [r7, #28]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20001028 	.word	0x20001028
 8008750:	2000103c 	.word	0x2000103c

08008754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008758:	4b03      	ldr	r3, [pc, #12]	@ (8008768 <vTaskMissedYield+0x14>)
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
}
 800875e:	bf00      	nop
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20001038 	.word	0x20001038

0800876c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008774:	f000 f852 	bl	800881c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008778:	4b06      	ldr	r3, [pc, #24]	@ (8008794 <prvIdleTask+0x28>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d9f9      	bls.n	8008774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008780:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <prvIdleTask+0x2c>)
 8008782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008790:	e7f0      	b.n	8008774 <prvIdleTask+0x8>
 8008792:	bf00      	nop
 8008794:	20000b54 	.word	0x20000b54
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
 80087a6:	e00c      	b.n	80087c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4a12      	ldr	r2, [pc, #72]	@ (80087fc <prvInitialiseTaskLists+0x60>)
 80087b4:	4413      	add	r3, r2
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe f8bc 	bl	8006934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3301      	adds	r3, #1
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b37      	cmp	r3, #55	@ 0x37
 80087c6:	d9ef      	bls.n	80087a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087c8:	480d      	ldr	r0, [pc, #52]	@ (8008800 <prvInitialiseTaskLists+0x64>)
 80087ca:	f7fe f8b3 	bl	8006934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087ce:	480d      	ldr	r0, [pc, #52]	@ (8008804 <prvInitialiseTaskLists+0x68>)
 80087d0:	f7fe f8b0 	bl	8006934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087d4:	480c      	ldr	r0, [pc, #48]	@ (8008808 <prvInitialiseTaskLists+0x6c>)
 80087d6:	f7fe f8ad 	bl	8006934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087da:	480c      	ldr	r0, [pc, #48]	@ (800880c <prvInitialiseTaskLists+0x70>)
 80087dc:	f7fe f8aa 	bl	8006934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087e0:	480b      	ldr	r0, [pc, #44]	@ (8008810 <prvInitialiseTaskLists+0x74>)
 80087e2:	f7fe f8a7 	bl	8006934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <prvInitialiseTaskLists+0x78>)
 80087e8:	4a05      	ldr	r2, [pc, #20]	@ (8008800 <prvInitialiseTaskLists+0x64>)
 80087ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <prvInitialiseTaskLists+0x7c>)
 80087ee:	4a05      	ldr	r2, [pc, #20]	@ (8008804 <prvInitialiseTaskLists+0x68>)
 80087f0:	601a      	str	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000b54 	.word	0x20000b54
 8008800:	20000fb4 	.word	0x20000fb4
 8008804:	20000fc8 	.word	0x20000fc8
 8008808:	20000fe4 	.word	0x20000fe4
 800880c:	20000ff8 	.word	0x20000ff8
 8008810:	20001010 	.word	0x20001010
 8008814:	20000fdc 	.word	0x20000fdc
 8008818:	20000fe0 	.word	0x20000fe0

0800881c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008822:	e019      	b.n	8008858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008824:	f000 feba 	bl	800959c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008828:	4b10      	ldr	r3, [pc, #64]	@ (800886c <prvCheckTasksWaitingTermination+0x50>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe f903 	bl	8006a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800883a:	4b0d      	ldr	r3, [pc, #52]	@ (8008870 <prvCheckTasksWaitingTermination+0x54>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3b01      	subs	r3, #1
 8008840:	4a0b      	ldr	r2, [pc, #44]	@ (8008870 <prvCheckTasksWaitingTermination+0x54>)
 8008842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008844:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <prvCheckTasksWaitingTermination+0x58>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	4a0a      	ldr	r2, [pc, #40]	@ (8008874 <prvCheckTasksWaitingTermination+0x58>)
 800884c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800884e:	f000 fed5 	bl	80095fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f810 	bl	8008878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008858:	4b06      	ldr	r3, [pc, #24]	@ (8008874 <prvCheckTasksWaitingTermination+0x58>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e1      	bne.n	8008824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000ff8 	.word	0x20000ff8
 8008870:	20001024 	.word	0x20001024
 8008874:	2000100c 	.word	0x2000100c

08008878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3354      	adds	r3, #84	@ 0x54
 8008884:	4618      	mov	r0, r3
 8008886:	f003 fac5 	bl	800be14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f84f 	bl	800993c <vPortFree>
				vPortFree( pxTCB );
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f84c 	bl	800993c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088a4:	e019      	b.n	80088da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d103      	bne.n	80088b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f001 f843 	bl	800993c <vPortFree>
	}
 80088b6:	e010      	b.n	80088da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d00b      	beq.n	80088da <prvDeleteTCB+0x62>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <prvDeleteTCB+0x5e>
	}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088ea:	4b0c      	ldr	r3, [pc, #48]	@ (800891c <prvResetNextTaskUnblockTime+0x38>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 80088f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088fc:	e008      	b.n	8008910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088fe:	4b07      	ldr	r3, [pc, #28]	@ (800891c <prvResetNextTaskUnblockTime+0x38>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4a04      	ldr	r2, [pc, #16]	@ (8008920 <prvResetNextTaskUnblockTime+0x3c>)
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000fdc 	.word	0x20000fdc
 8008920:	20001044 	.word	0x20001044

08008924 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800892a:	4b04      	ldr	r3, [pc, #16]	@ (800893c <xTaskGetCurrentTaskHandle+0x18>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008930:	687b      	ldr	r3, [r7, #4]
	}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr
 800893c:	20000b50 	.word	0x20000b50

08008940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008946:	4b0b      	ldr	r3, [pc, #44]	@ (8008974 <xTaskGetSchedulerState+0x34>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800894e:	2301      	movs	r3, #1
 8008950:	607b      	str	r3, [r7, #4]
 8008952:	e008      	b.n	8008966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008954:	4b08      	ldr	r3, [pc, #32]	@ (8008978 <xTaskGetSchedulerState+0x38>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800895c:	2302      	movs	r3, #2
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	e001      	b.n	8008966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008966:	687b      	ldr	r3, [r7, #4]
	}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20001030 	.word	0x20001030
 8008978:	2000104c 	.word	0x2000104c

0800897c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d051      	beq.n	8008a36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008996:	4b2a      	ldr	r3, [pc, #168]	@ (8008a40 <xTaskPriorityInherit+0xc4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d241      	bcs.n	8008a24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	db06      	blt.n	80089b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a8:	4b25      	ldr	r3, [pc, #148]	@ (8008a40 <xTaskPriorityInherit+0xc4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	6959      	ldr	r1, [r3, #20]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a44 <xTaskPriorityInherit+0xc8>)
 80089c8:	4413      	add	r3, r2
 80089ca:	4299      	cmp	r1, r3
 80089cc:	d122      	bne.n	8008a14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe f834 	bl	8006a40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089d8:	4b19      	ldr	r3, [pc, #100]	@ (8008a40 <xTaskPriorityInherit+0xc4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e6:	4b18      	ldr	r3, [pc, #96]	@ (8008a48 <xTaskPriorityInherit+0xcc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d903      	bls.n	80089f6 <xTaskPriorityInherit+0x7a>
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f2:	4a15      	ldr	r2, [pc, #84]	@ (8008a48 <xTaskPriorityInherit+0xcc>)
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4a10      	ldr	r2, [pc, #64]	@ (8008a44 <xTaskPriorityInherit+0xc8>)
 8008a04:	441a      	add	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7fd ffbc 	bl	800698a <vListInsertEnd>
 8008a12:	e004      	b.n	8008a1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a14:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <xTaskPriorityInherit+0xc4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e008      	b.n	8008a36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a28:	4b05      	ldr	r3, [pc, #20]	@ (8008a40 <xTaskPriorityInherit+0xc4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d201      	bcs.n	8008a36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a32:	2301      	movs	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a36:	68fb      	ldr	r3, [r7, #12]
	}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000b50 	.word	0x20000b50
 8008a44:	20000b54 	.word	0x20000b54
 8008a48:	2000102c 	.word	0x2000102c

08008a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d058      	beq.n	8008b14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a62:	4b2f      	ldr	r3, [pc, #188]	@ (8008b20 <xTaskPriorityDisinherit+0xd4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d00b      	beq.n	8008a84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60fb      	str	r3, [r7, #12]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10b      	bne.n	8008aa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	60bb      	str	r3, [r7, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	e7fd      	b.n	8008aa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa8:	1e5a      	subs	r2, r3, #1
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d02c      	beq.n	8008b14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d128      	bne.n	8008b14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fd ffba 	bl	8006a40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b24 <xTaskPriorityDisinherit+0xd8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <xTaskPriorityDisinherit+0xa8>
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	4a0c      	ldr	r2, [pc, #48]	@ (8008b24 <xTaskPriorityDisinherit+0xd8>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4a09      	ldr	r2, [pc, #36]	@ (8008b28 <xTaskPriorityDisinherit+0xdc>)
 8008b02:	441a      	add	r2, r3
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7fd ff3d 	bl	800698a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b14:	697b      	ldr	r3, [r7, #20]
	}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20000b50 	.word	0x20000b50
 8008b24:	2000102c 	.word	0x2000102c
 8008b28:	20000b54 	.word	0x20000b54

08008b2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b088      	sub	sp, #32
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d06c      	beq.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	60fb      	str	r3, [r7, #12]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d902      	bls.n	8008b74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	61fb      	str	r3, [r7, #28]
 8008b72:	e002      	b.n	8008b7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d04c      	beq.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d147      	bne.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b8e:	4b26      	ldr	r3, [pc, #152]	@ (8008c28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d10b      	bne.n	8008bb0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60bb      	str	r3, [r7, #8]
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db04      	blt.n	8008bce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	6959      	ldr	r1, [r3, #20]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4a13      	ldr	r2, [pc, #76]	@ (8008c2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008bde:	4413      	add	r3, r2
 8008be0:	4299      	cmp	r1, r3
 8008be2:	d11c      	bne.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fd ff29 	bl	8006a40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d903      	bls.n	8008c02 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8008c30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a07      	ldr	r2, [pc, #28]	@ (8008c2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c10:	441a      	add	r2, r3
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7fd feb6 	bl	800698a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c1e:	bf00      	nop
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000b50 	.word	0x20000b50
 8008c2c:	20000b54 	.word	0x20000b54
 8008c30:	2000102c 	.word	0x2000102c

08008c34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c38:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c40:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c46:	3201      	adds	r2, #1
 8008c48:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008c4a:	4b03      	ldr	r3, [pc, #12]	@ (8008c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
	}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000b50 	.word	0x20000b50

08008c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c66:	4b21      	ldr	r3, [pc, #132]	@ (8008cec <prvAddCurrentTaskToDelayedList+0x90>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6c:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fd fee4 	bl	8006a40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c7e:	d10a      	bne.n	8008c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d007      	beq.n	8008c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c86:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	4819      	ldr	r0, [pc, #100]	@ (8008cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008c90:	f7fd fe7b 	bl	800698a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c94:	e026      	b.n	8008ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c9e:	4b14      	ldr	r3, [pc, #80]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d209      	bcs.n	8008cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cae:	4b12      	ldr	r3, [pc, #72]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f7fd fe88 	bl	80069d0 <vListInsert>
}
 8008cc0:	e010      	b.n	8008ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8008cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fd fe7e 	bl	80069d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d202      	bcs.n	8008ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008cde:	4a08      	ldr	r2, [pc, #32]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6013      	str	r3, [r2, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20001028 	.word	0x20001028
 8008cf0:	20000b50 	.word	0x20000b50
 8008cf4:	20001010 	.word	0x20001010
 8008cf8:	20000fe0 	.word	0x20000fe0
 8008cfc:	20000fdc 	.word	0x20000fdc
 8008d00:	20001044 	.word	0x20001044

08008d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08a      	sub	sp, #40	@ 0x28
 8008d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d0e:	f000 fb11 	bl	8009334 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d12:	4b1d      	ldr	r3, [pc, #116]	@ (8008d88 <xTimerCreateTimerTask+0x84>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d021      	beq.n	8008d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d22:	1d3a      	adds	r2, r7, #4
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	f107 030c 	add.w	r3, r7, #12
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fd fde7 	bl	8006900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	9202      	str	r2, [sp, #8]
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	2300      	movs	r3, #0
 8008d42:	460a      	mov	r2, r1
 8008d44:	4911      	ldr	r1, [pc, #68]	@ (8008d8c <xTimerCreateTimerTask+0x88>)
 8008d46:	4812      	ldr	r0, [pc, #72]	@ (8008d90 <xTimerCreateTimerTask+0x8c>)
 8008d48:	f7fe ff86 	bl	8007c58 <xTaskCreateStatic>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	4a11      	ldr	r2, [pc, #68]	@ (8008d94 <xTimerCreateTimerTask+0x90>)
 8008d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d52:	4b10      	ldr	r3, [pc, #64]	@ (8008d94 <xTimerCreateTimerTask+0x90>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	613b      	str	r3, [r7, #16]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d7c:	697b      	ldr	r3, [r7, #20]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20001080 	.word	0x20001080
 8008d8c:	0800e020 	.word	0x0800e020
 8008d90:	08008ed1 	.word	0x08008ed1
 8008d94:	20001084 	.word	0x20001084

08008d98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10b      	bne.n	8008dc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008dc8:	4b19      	ldr	r3, [pc, #100]	@ (8008e30 <xTimerGenericCommand+0x98>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d02a      	beq.n	8008e26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	dc18      	bgt.n	8008e14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008de2:	f7ff fdad 	bl	8008940 <xTaskGetSchedulerState>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d109      	bne.n	8008e00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008dec:	4b10      	ldr	r3, [pc, #64]	@ (8008e30 <xTimerGenericCommand+0x98>)
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	f107 0110 	add.w	r1, r7, #16
 8008df4:	2300      	movs	r3, #0
 8008df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df8:	f7fe f8b8 	bl	8006f6c <xQueueGenericSend>
 8008dfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008dfe:	e012      	b.n	8008e26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <xTimerGenericCommand+0x98>)
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	f107 0110 	add.w	r1, r7, #16
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f7fe f8ae 	bl	8006f6c <xQueueGenericSend>
 8008e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e12:	e008      	b.n	8008e26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e14:	4b06      	ldr	r3, [pc, #24]	@ (8008e30 <xTimerGenericCommand+0x98>)
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	f107 0110 	add.w	r1, r7, #16
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	f7fe f9a6 	bl	8007170 <xQueueGenericSendFromISR>
 8008e24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3728      	adds	r7, #40	@ 0x28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20001080 	.word	0x20001080

08008e34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ecc <prvProcessExpiredTimer+0x98>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fdf7 	bl	8006a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d023      	beq.n	8008ea8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	18d1      	adds	r1, r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	6978      	ldr	r0, [r7, #20]
 8008e6e:	f000 f8d3 	bl	8009018 <prvInsertTimerInActiveList>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d020      	beq.n	8008eba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	2100      	movs	r1, #0
 8008e82:	6978      	ldr	r0, [r7, #20]
 8008e84:	f7ff ff88 	bl	8008d98 <xTimerGenericCommand>
 8008e88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d114      	bne.n	8008eba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	6978      	ldr	r0, [r7, #20]
 8008ec0:	4798      	blx	r3
}
 8008ec2:	bf00      	nop
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20001078 	.word	0x20001078

08008ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f859 	bl	8008f94 <prvGetNextExpireTime>
 8008ee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 f805 	bl	8008ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008eee:	f000 f8d5 	bl	800909c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ef2:	bf00      	nop
 8008ef4:	e7f0      	b.n	8008ed8 <prvTimerTask+0x8>
	...

08008ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f02:	f7ff f90d 	bl	8008120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f864 	bl	8008fd8 <prvSampleTimeNow>
 8008f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d130      	bne.n	8008f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <prvProcessTimerOrBlockTask+0x3c>
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d806      	bhi.n	8008f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f26:	f7ff f909 	bl	800813c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff ff81 	bl	8008e34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f32:	e024      	b.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f3a:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <prvProcessTimerOrBlockTask+0x90>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d101      	bne.n	8008f48 <prvProcessTimerOrBlockTask+0x50>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <prvProcessTimerOrBlockTask+0x52>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <prvProcessTimerOrBlockTask+0x94>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	f7fe fe49 	bl	8007bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f5e:	f7ff f8ed 	bl	800813c <xTaskResumeAll>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f68:	4b09      	ldr	r3, [pc, #36]	@ (8008f90 <prvProcessTimerOrBlockTask+0x98>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
}
 8008f78:	e001      	b.n	8008f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f7a:	f7ff f8df 	bl	800813c <xTaskResumeAll>
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000107c 	.word	0x2000107c
 8008f8c:	20001080 	.word	0x20001080
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd4 <prvGetNextExpireTime+0x40>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <prvGetNextExpireTime+0x16>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	e000      	b.n	8008fac <prvGetNextExpireTime+0x18>
 8008faa:	2200      	movs	r2, #0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d105      	bne.n	8008fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fb8:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <prvGetNextExpireTime+0x40>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e001      	b.n	8008fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr
 8008fd4:	20001078 	.word	0x20001078

08008fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008fe0:	f7ff f94a 	bl	8008278 <xTaskGetTickCount>
 8008fe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8009014 <prvSampleTimeNow+0x3c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d205      	bcs.n	8008ffc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ff0:	f000 f93a 	bl	8009268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	e002      	b.n	8009002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009002:	4a04      	ldr	r2, [pc, #16]	@ (8009014 <prvSampleTimeNow+0x3c>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20001088 	.word	0x20001088

08009018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	429a      	cmp	r2, r3
 800903c:	d812      	bhi.n	8009064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	429a      	cmp	r2, r3
 800904a:	d302      	bcc.n	8009052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e01b      	b.n	800908a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009052:	4b10      	ldr	r3, [pc, #64]	@ (8009094 <prvInsertTimerInActiveList+0x7c>)
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7fd fcb7 	bl	80069d0 <vListInsert>
 8009062:	e012      	b.n	800908a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d206      	bcs.n	800907a <prvInsertTimerInActiveList+0x62>
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d302      	bcc.n	800907a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	e007      	b.n	800908a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800907a:	4b07      	ldr	r3, [pc, #28]	@ (8009098 <prvInsertTimerInActiveList+0x80>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f7fd fca3 	bl	80069d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800908a:	697b      	ldr	r3, [r7, #20]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	2000107c 	.word	0x2000107c
 8009098:	20001078 	.word	0x20001078

0800909c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08e      	sub	sp, #56	@ 0x38
 80090a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090a2:	e0ce      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da19      	bge.n	80090de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090aa:	1d3b      	adds	r3, r7, #4
 80090ac:	3304      	adds	r3, #4
 80090ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	61fb      	str	r3, [r7, #28]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d4:	6850      	ldr	r0, [r2, #4]
 80090d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d8:	6892      	ldr	r2, [r2, #8]
 80090da:	4611      	mov	r1, r2
 80090dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f2c0 80ae 	blt.w	8009242 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fca2 	bl	8006a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090fc:	463b      	mov	r3, r7
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff ff6a 	bl	8008fd8 <prvSampleTimeNow>
 8009104:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b09      	cmp	r3, #9
 800910a:	f200 8097 	bhi.w	800923c <prvProcessReceivedCommands+0x1a0>
 800910e:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <prvProcessReceivedCommands+0x78>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800913d 	.word	0x0800913d
 8009118:	0800913d 	.word	0x0800913d
 800911c:	0800913d 	.word	0x0800913d
 8009120:	080091b3 	.word	0x080091b3
 8009124:	080091c7 	.word	0x080091c7
 8009128:	08009213 	.word	0x08009213
 800912c:	0800913d 	.word	0x0800913d
 8009130:	0800913d 	.word	0x0800913d
 8009134:	080091b3 	.word	0x080091b3
 8009138:	080091c7 	.word	0x080091c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009142:	f043 0301 	orr.w	r3, r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	18d1      	adds	r1, r2, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800915a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800915c:	f7ff ff5c 	bl	8009018 <prvInsertTimerInActiveList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d06c      	beq.n	8009240 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800916c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	d061      	beq.n	8009240 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	441a      	add	r2, r3
 8009184:	2300      	movs	r3, #0
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	2300      	movs	r3, #0
 800918a:	2100      	movs	r1, #0
 800918c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800918e:	f7ff fe03 	bl	8008d98 <xTimerGenericCommand>
 8009192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009194:	6a3b      	ldr	r3, [r7, #32]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d152      	bne.n	8009240 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	61bb      	str	r3, [r7, #24]
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b8:	f023 0301 	bic.w	r3, r3, #1
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80091c4:	e03d      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	617b      	str	r3, [r7, #20]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	18d1      	adds	r1, r2, r3
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800920c:	f7ff ff04 	bl	8009018 <prvInsertTimerInActiveList>
					break;
 8009210:	e017      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009222:	f000 fb8b 	bl	800993c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009226:	e00c      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800923a:	e002      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <prvProcessReceivedCommands+0x1a6>
					break;
 8009240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009242:	4b08      	ldr	r3, [pc, #32]	@ (8009264 <prvProcessReceivedCommands+0x1c8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1d39      	adds	r1, r7, #4
 8009248:	2200      	movs	r2, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe f8be 	bl	80073cc <xQueueReceive>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	f47f af26 	bne.w	80090a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	3730      	adds	r7, #48	@ 0x30
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20001080 	.word	0x20001080

08009268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b088      	sub	sp, #32
 800926c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800926e:	e049      	b.n	8009304 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009270:	4b2e      	ldr	r3, [pc, #184]	@ (800932c <prvSwitchTimerLists+0xc4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800927a:	4b2c      	ldr	r3, [pc, #176]	@ (800932c <prvSwitchTimerLists+0xc4>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3304      	adds	r3, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f7fd fbd9 	bl	8006a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d02f      	beq.n	8009304 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d90e      	bls.n	80092d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092c2:	4b1a      	ldr	r3, [pc, #104]	@ (800932c <prvSwitchTimerLists+0xc4>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3304      	adds	r3, #4
 80092ca:	4619      	mov	r1, r3
 80092cc:	4610      	mov	r0, r2
 80092ce:	f7fd fb7f 	bl	80069d0 <vListInsert>
 80092d2:	e017      	b.n	8009304 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d4:	2300      	movs	r3, #0
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fd5a 	bl	8008d98 <xTimerGenericCommand>
 80092e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10b      	bne.n	8009304 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	603b      	str	r3, [r7, #0]
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	e7fd      	b.n	8009300 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009304:	4b09      	ldr	r3, [pc, #36]	@ (800932c <prvSwitchTimerLists+0xc4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1b0      	bne.n	8009270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800930e:	4b07      	ldr	r3, [pc, #28]	@ (800932c <prvSwitchTimerLists+0xc4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009314:	4b06      	ldr	r3, [pc, #24]	@ (8009330 <prvSwitchTimerLists+0xc8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a04      	ldr	r2, [pc, #16]	@ (800932c <prvSwitchTimerLists+0xc4>)
 800931a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800931c:	4a04      	ldr	r2, [pc, #16]	@ (8009330 <prvSwitchTimerLists+0xc8>)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	6013      	str	r3, [r2, #0]
}
 8009322:	bf00      	nop
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20001078 	.word	0x20001078
 8009330:	2000107c 	.word	0x2000107c

08009334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800933a:	f000 f92f 	bl	800959c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800933e:	4b15      	ldr	r3, [pc, #84]	@ (8009394 <prvCheckForValidListAndQueue+0x60>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d120      	bne.n	8009388 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009346:	4814      	ldr	r0, [pc, #80]	@ (8009398 <prvCheckForValidListAndQueue+0x64>)
 8009348:	f7fd faf4 	bl	8006934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800934c:	4813      	ldr	r0, [pc, #76]	@ (800939c <prvCheckForValidListAndQueue+0x68>)
 800934e:	f7fd faf1 	bl	8006934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009352:	4b13      	ldr	r3, [pc, #76]	@ (80093a0 <prvCheckForValidListAndQueue+0x6c>)
 8009354:	4a10      	ldr	r2, [pc, #64]	@ (8009398 <prvCheckForValidListAndQueue+0x64>)
 8009356:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009358:	4b12      	ldr	r3, [pc, #72]	@ (80093a4 <prvCheckForValidListAndQueue+0x70>)
 800935a:	4a10      	ldr	r2, [pc, #64]	@ (800939c <prvCheckForValidListAndQueue+0x68>)
 800935c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800935e:	2300      	movs	r3, #0
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	4b11      	ldr	r3, [pc, #68]	@ (80093a8 <prvCheckForValidListAndQueue+0x74>)
 8009364:	4a11      	ldr	r2, [pc, #68]	@ (80093ac <prvCheckForValidListAndQueue+0x78>)
 8009366:	2110      	movs	r1, #16
 8009368:	200a      	movs	r0, #10
 800936a:	f7fd fbfd 	bl	8006b68 <xQueueGenericCreateStatic>
 800936e:	4603      	mov	r3, r0
 8009370:	4a08      	ldr	r2, [pc, #32]	@ (8009394 <prvCheckForValidListAndQueue+0x60>)
 8009372:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009374:	4b07      	ldr	r3, [pc, #28]	@ (8009394 <prvCheckForValidListAndQueue+0x60>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800937c:	4b05      	ldr	r3, [pc, #20]	@ (8009394 <prvCheckForValidListAndQueue+0x60>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	490b      	ldr	r1, [pc, #44]	@ (80093b0 <prvCheckForValidListAndQueue+0x7c>)
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fbe2 	bl	8007b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009388:	f000 f938 	bl	80095fc <vPortExitCritical>
}
 800938c:	bf00      	nop
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20001080 	.word	0x20001080
 8009398:	20001050 	.word	0x20001050
 800939c:	20001064 	.word	0x20001064
 80093a0:	20001078 	.word	0x20001078
 80093a4:	2000107c 	.word	0x2000107c
 80093a8:	2000112c 	.word	0x2000112c
 80093ac:	2000108c 	.word	0x2000108c
 80093b0:	0800e028 	.word	0x0800e028

080093b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3b04      	subs	r3, #4
 80093c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80093cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3b04      	subs	r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f023 0201 	bic.w	r2, r3, #1
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3b04      	subs	r3, #4
 80093e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093e4:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <pxPortInitialiseStack+0x54>)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3b14      	subs	r3, #20
 80093ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3b20      	subs	r3, #32
 80093fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093fc:	68fb      	ldr	r3, [r7, #12]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr
 8009408:	0800940d 	.word	0x0800940d

0800940c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009412:	2300      	movs	r3, #0
 8009414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009416:	4b12      	ldr	r3, [pc, #72]	@ (8009460 <prvTaskExitError+0x54>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800941e:	d00b      	beq.n	8009438 <prvTaskExitError+0x2c>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	e7fd      	b.n	8009434 <prvTaskExitError+0x28>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	60bb      	str	r3, [r7, #8]
}
 800944a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800944c:	bf00      	nop
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0fc      	beq.n	800944e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr
 8009460:	2000000c 	.word	0x2000000c
	...

08009470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009470:	4b07      	ldr	r3, [pc, #28]	@ (8009490 <pxCurrentTCBConst2>)
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	6808      	ldr	r0, [r1, #0]
 8009476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800947a:	f380 8809 	msr	PSP, r0
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	f04e 0e0d 	orr.w	lr, lr, #13
 800948e:	4770      	bx	lr

08009490 <pxCurrentTCBConst2>:
 8009490:	20000b50 	.word	0x20000b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop

08009498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009498:	4806      	ldr	r0, [pc, #24]	@ (80094b4 <prvPortStartFirstTask+0x1c>)
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	6800      	ldr	r0, [r0, #0]
 800949e:	f380 8808 	msr	MSP, r0
 80094a2:	b662      	cpsie	i
 80094a4:	b661      	cpsie	f
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	f3bf 8f6f 	isb	sy
 80094ae:	df00      	svc	0
 80094b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094b2:	bf00      	nop
 80094b4:	e000ed08 	.word	0xe000ed08

080094b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094be:	4b32      	ldr	r3, [pc, #200]	@ (8009588 <xPortStartScheduler+0xd0>)
 80094c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	22ff      	movs	r2, #255	@ 0xff
 80094ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	4b2a      	ldr	r3, [pc, #168]	@ (800958c <xPortStartScheduler+0xd4>)
 80094e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094e6:	4b2a      	ldr	r3, [pc, #168]	@ (8009590 <xPortStartScheduler+0xd8>)
 80094e8:	2207      	movs	r2, #7
 80094ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094ec:	e009      	b.n	8009502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80094ee:	4b28      	ldr	r3, [pc, #160]	@ (8009590 <xPortStartScheduler+0xd8>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	4a26      	ldr	r2, [pc, #152]	@ (8009590 <xPortStartScheduler+0xd8>)
 80094f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800950a:	2b80      	cmp	r3, #128	@ 0x80
 800950c:	d0ef      	beq.n	80094ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800950e:	4b20      	ldr	r3, [pc, #128]	@ (8009590 <xPortStartScheduler+0xd8>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f1c3 0307 	rsb	r3, r3, #7
 8009516:	2b04      	cmp	r3, #4
 8009518:	d00b      	beq.n	8009532 <xPortStartScheduler+0x7a>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	60bb      	str	r3, [r7, #8]
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	e7fd      	b.n	800952e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009532:	4b17      	ldr	r3, [pc, #92]	@ (8009590 <xPortStartScheduler+0xd8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	4a15      	ldr	r2, [pc, #84]	@ (8009590 <xPortStartScheduler+0xd8>)
 800953a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800953c:	4b14      	ldr	r3, [pc, #80]	@ (8009590 <xPortStartScheduler+0xd8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009544:	4a12      	ldr	r2, [pc, #72]	@ (8009590 <xPortStartScheduler+0xd8>)
 8009546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009550:	4b10      	ldr	r3, [pc, #64]	@ (8009594 <xPortStartScheduler+0xdc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a0f      	ldr	r2, [pc, #60]	@ (8009594 <xPortStartScheduler+0xdc>)
 8009556:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800955a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <xPortStartScheduler+0xdc>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0c      	ldr	r2, [pc, #48]	@ (8009594 <xPortStartScheduler+0xdc>)
 8009562:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009568:	f000 f8b8 	bl	80096dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800956c:	4b0a      	ldr	r3, [pc, #40]	@ (8009598 <xPortStartScheduler+0xe0>)
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009572:	f7ff ff91 	bl	8009498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009576:	f7fe ff59 	bl	800842c <vTaskSwitchContext>
	prvTaskExitError();
 800957a:	f7ff ff47 	bl	800940c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000e400 	.word	0xe000e400
 800958c:	2000117c 	.word	0x2000117c
 8009590:	20001180 	.word	0x20001180
 8009594:	e000ed20 	.word	0xe000ed20
 8009598:	2000000c 	.word	0x2000000c

0800959c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	607b      	str	r3, [r7, #4]
}
 80095b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095b6:	4b0f      	ldr	r3, [pc, #60]	@ (80095f4 <vPortEnterCritical+0x58>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a0d      	ldr	r2, [pc, #52]	@ (80095f4 <vPortEnterCritical+0x58>)
 80095be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <vPortEnterCritical+0x58>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d110      	bne.n	80095ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095c8:	4b0b      	ldr	r3, [pc, #44]	@ (80095f8 <vPortEnterCritical+0x5c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00b      	beq.n	80095ea <vPortEnterCritical+0x4e>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	603b      	str	r3, [r7, #0]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <vPortEnterCritical+0x4a>
	}
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr
 80095f4:	2000000c 	.word	0x2000000c
 80095f8:	e000ed04 	.word	0xe000ed04

080095fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009602:	4b12      	ldr	r3, [pc, #72]	@ (800964c <vPortExitCritical+0x50>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <vPortExitCritical+0x26>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	607b      	str	r3, [r7, #4]
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	e7fd      	b.n	800961e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009622:	4b0a      	ldr	r3, [pc, #40]	@ (800964c <vPortExitCritical+0x50>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3b01      	subs	r3, #1
 8009628:	4a08      	ldr	r2, [pc, #32]	@ (800964c <vPortExitCritical+0x50>)
 800962a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800962c:	4b07      	ldr	r3, [pc, #28]	@ (800964c <vPortExitCritical+0x50>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d105      	bne.n	8009640 <vPortExitCritical+0x44>
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f383 8811 	msr	BASEPRI, r3
}
 800963e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	2000000c 	.word	0x2000000c

08009650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009650:	f3ef 8009 	mrs	r0, PSP
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	4b0d      	ldr	r3, [pc, #52]	@ (8009690 <pxCurrentTCBConst>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009660:	6010      	str	r0, [r2, #0]
 8009662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009666:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800966a:	f380 8811 	msr	BASEPRI, r0
 800966e:	f7fe fedd 	bl	800842c <vTaskSwitchContext>
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f380 8811 	msr	BASEPRI, r0
 800967a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800967e:	6819      	ldr	r1, [r3, #0]
 8009680:	6808      	ldr	r0, [r1, #0]
 8009682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009686:	f380 8809 	msr	PSP, r0
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	4770      	bx	lr

08009690 <pxCurrentTCBConst>:
 8009690:	20000b50 	.word	0x20000b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096b2:	f7fe fe01 	bl	80082b8 <xTaskIncrementTick>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096bc:	4b06      	ldr	r3, [pc, #24]	@ (80096d8 <xPortSysTickHandler+0x40>)
 80096be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	2300      	movs	r3, #0
 80096c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f383 8811 	msr	BASEPRI, r3
}
 80096ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000ed04 	.word	0xe000ed04

080096dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096e0:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <vPortSetupTimerInterrupt+0x30>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <vPortSetupTimerInterrupt+0x34>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096ec:	4b09      	ldr	r3, [pc, #36]	@ (8009714 <vPortSetupTimerInterrupt+0x38>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a09      	ldr	r2, [pc, #36]	@ (8009718 <vPortSetupTimerInterrupt+0x3c>)
 80096f2:	fba2 2303 	umull	r2, r3, r2, r3
 80096f6:	099b      	lsrs	r3, r3, #6
 80096f8:	4a08      	ldr	r2, [pc, #32]	@ (800971c <vPortSetupTimerInterrupt+0x40>)
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096fe:	4b03      	ldr	r3, [pc, #12]	@ (800970c <vPortSetupTimerInterrupt+0x30>)
 8009700:	2207      	movs	r2, #7
 8009702:	601a      	str	r2, [r3, #0]
}
 8009704:	bf00      	nop
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr
 800970c:	e000e010 	.word	0xe000e010
 8009710:	e000e018 	.word	0xe000e018
 8009714:	20000000 	.word	0x20000000
 8009718:	10624dd3 	.word	0x10624dd3
 800971c:	e000e014 	.word	0xe000e014

08009720 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009726:	f3ef 8305 	mrs	r3, IPSR
 800972a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b0f      	cmp	r3, #15
 8009730:	d915      	bls.n	800975e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009732:	4a17      	ldr	r2, [pc, #92]	@ (8009790 <vPortValidateInterruptPriority+0x70>)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800973c:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <vPortValidateInterruptPriority+0x74>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	7afa      	ldrb	r2, [r7, #11]
 8009742:	429a      	cmp	r2, r3
 8009744:	d20b      	bcs.n	800975e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	607b      	str	r3, [r7, #4]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800975e:	4b0e      	ldr	r3, [pc, #56]	@ (8009798 <vPortValidateInterruptPriority+0x78>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009766:	4b0d      	ldr	r3, [pc, #52]	@ (800979c <vPortValidateInterruptPriority+0x7c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d90b      	bls.n	8009786 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	603b      	str	r3, [r7, #0]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <vPortValidateInterruptPriority+0x62>
	}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr
 8009790:	e000e3f0 	.word	0xe000e3f0
 8009794:	2000117c 	.word	0x2000117c
 8009798:	e000ed0c 	.word	0xe000ed0c
 800979c:	20001180 	.word	0x20001180

080097a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	@ 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097ac:	f7fe fcb8 	bl	8008120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097b0:	4b5c      	ldr	r3, [pc, #368]	@ (8009924 <pvPortMalloc+0x184>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b8:	f000 f924 	bl	8009a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097bc:	4b5a      	ldr	r3, [pc, #360]	@ (8009928 <pvPortMalloc+0x188>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4013      	ands	r3, r2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 8095 	bne.w	80098f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01e      	beq.n	800980e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80097d0:	2208      	movs	r2, #8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d015      	beq.n	800980e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f023 0307 	bic.w	r3, r3, #7
 80097e8:	3308      	adds	r3, #8
 80097ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00b      	beq.n	800980e <pvPortMalloc+0x6e>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	617b      	str	r3, [r7, #20]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d06f      	beq.n	80098f4 <pvPortMalloc+0x154>
 8009814:	4b45      	ldr	r3, [pc, #276]	@ (800992c <pvPortMalloc+0x18c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d86a      	bhi.n	80098f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800981e:	4b44      	ldr	r3, [pc, #272]	@ (8009930 <pvPortMalloc+0x190>)
 8009820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009822:	4b43      	ldr	r3, [pc, #268]	@ (8009930 <pvPortMalloc+0x190>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009828:	e004      	b.n	8009834 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d903      	bls.n	8009846 <pvPortMalloc+0xa6>
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1f1      	bne.n	800982a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009846:	4b37      	ldr	r3, [pc, #220]	@ (8009924 <pvPortMalloc+0x184>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984c:	429a      	cmp	r2, r3
 800984e:	d051      	beq.n	80098f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2208      	movs	r2, #8
 8009856:	4413      	add	r3, r2
 8009858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	1ad2      	subs	r2, r2, r3
 800986a:	2308      	movs	r3, #8
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	d920      	bls.n	80098b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4413      	add	r3, r2
 8009878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <pvPortMalloc+0xfc>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	613b      	str	r3, [r7, #16]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	1ad2      	subs	r2, r2, r3
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098ae:	69b8      	ldr	r0, [r7, #24]
 80098b0:	f000 f90a 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098b4:	4b1d      	ldr	r3, [pc, #116]	@ (800992c <pvPortMalloc+0x18c>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	4a1b      	ldr	r2, [pc, #108]	@ (800992c <pvPortMalloc+0x18c>)
 80098c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098c2:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <pvPortMalloc+0x18c>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009934 <pvPortMalloc+0x194>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d203      	bcs.n	80098d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098ce:	4b17      	ldr	r3, [pc, #92]	@ (800992c <pvPortMalloc+0x18c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a18      	ldr	r2, [pc, #96]	@ (8009934 <pvPortMalloc+0x194>)
 80098d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	4b13      	ldr	r3, [pc, #76]	@ (8009928 <pvPortMalloc+0x188>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	431a      	orrs	r2, r3
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098ea:	4b13      	ldr	r3, [pc, #76]	@ (8009938 <pvPortMalloc+0x198>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	4a11      	ldr	r2, [pc, #68]	@ (8009938 <pvPortMalloc+0x198>)
 80098f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098f4:	f7fe fc22 	bl	800813c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	f003 0307 	and.w	r3, r3, #7
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <pvPortMalloc+0x17a>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <pvPortMalloc+0x176>
	return pvReturn;
 800991a:	69fb      	ldr	r3, [r7, #28]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3728      	adds	r7, #40	@ 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	2000398c 	.word	0x2000398c
 8009928:	200039a0 	.word	0x200039a0
 800992c:	20003990 	.word	0x20003990
 8009930:	20003984 	.word	0x20003984
 8009934:	20003994 	.word	0x20003994
 8009938:	20003998 	.word	0x20003998

0800993c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d04f      	beq.n	80099ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800994e:	2308      	movs	r3, #8
 8009950:	425b      	negs	r3, r3
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4413      	add	r3, r2
 8009956:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	4b25      	ldr	r3, [pc, #148]	@ (80099f8 <vPortFree+0xbc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4013      	ands	r3, r2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <vPortFree+0x46>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	60fb      	str	r3, [r7, #12]
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	e7fd      	b.n	800997e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <vPortFree+0x66>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	60bb      	str	r3, [r7, #8]
}
 800999c:	bf00      	nop
 800999e:	bf00      	nop
 80099a0:	e7fd      	b.n	800999e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b14      	ldr	r3, [pc, #80]	@ (80099f8 <vPortFree+0xbc>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01e      	beq.n	80099ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11a      	bne.n	80099ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	4b0e      	ldr	r3, [pc, #56]	@ (80099f8 <vPortFree+0xbc>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	401a      	ands	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099c8:	f7fe fbaa 	bl	8008120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4b0a      	ldr	r3, [pc, #40]	@ (80099fc <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4413      	add	r3, r2
 80099d6:	4a09      	ldr	r2, [pc, #36]	@ (80099fc <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099da:	6938      	ldr	r0, [r7, #16]
 80099dc:	f000 f874 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099e0:	4b07      	ldr	r3, [pc, #28]	@ (8009a00 <vPortFree+0xc4>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	4a06      	ldr	r2, [pc, #24]	@ (8009a00 <vPortFree+0xc4>)
 80099e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099ea:	f7fe fba7 	bl	800813c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ee:	bf00      	nop
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	200039a0 	.word	0x200039a0
 80099fc:	20003990 	.word	0x20003990
 8009a00:	2000399c 	.word	0x2000399c

08009a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a0a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8009a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a10:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <prvHeapInit+0xac>)
 8009a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3307      	adds	r3, #7
 8009a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1f      	ldr	r2, [pc, #124]	@ (8009ab0 <prvHeapInit+0xac>)
 8009a34:	4413      	add	r3, r2
 8009a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ab4 <prvHeapInit+0xb0>)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a42:	4b1c      	ldr	r3, [pc, #112]	@ (8009ab4 <prvHeapInit+0xb0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a50:	2208      	movs	r2, #8
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0307 	bic.w	r3, r3, #7
 8009a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a15      	ldr	r2, [pc, #84]	@ (8009ab8 <prvHeapInit+0xb4>)
 8009a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a66:	4b14      	ldr	r3, [pc, #80]	@ (8009ab8 <prvHeapInit+0xb4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a6e:	4b12      	ldr	r3, [pc, #72]	@ (8009ab8 <prvHeapInit+0xb4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a84:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab8 <prvHeapInit+0xb4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4a0a      	ldr	r2, [pc, #40]	@ (8009abc <prvHeapInit+0xb8>)
 8009a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	4a09      	ldr	r2, [pc, #36]	@ (8009ac0 <prvHeapInit+0xbc>)
 8009a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a9c:	4b09      	ldr	r3, [pc, #36]	@ (8009ac4 <prvHeapInit+0xc0>)
 8009a9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	20001184 	.word	0x20001184
 8009ab4:	20003984 	.word	0x20003984
 8009ab8:	2000398c 	.word	0x2000398c
 8009abc:	20003994 	.word	0x20003994
 8009ac0:	20003990 	.word	0x20003990
 8009ac4:	200039a0 	.word	0x200039a0

08009ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ad0:	4b27      	ldr	r3, [pc, #156]	@ (8009b70 <prvInsertBlockIntoFreeList+0xa8>)
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e002      	b.n	8009adc <prvInsertBlockIntoFreeList+0x14>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d8f7      	bhi.n	8009ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d108      	bne.n	8009b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	441a      	add	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d118      	bne.n	8009b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b14      	ldr	r3, [pc, #80]	@ (8009b74 <prvInsertBlockIntoFreeList+0xac>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d00d      	beq.n	8009b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e008      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	@ (8009b74 <prvInsertBlockIntoFreeList+0xac>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e003      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d002      	beq.n	8009b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr
 8009b70:	20003984 	.word	0x20003984
 8009b74:	2000398c 	.word	0x2000398c

08009b78 <atan2>:
 8009b78:	f000 b96a 	b.w	8009e50 <__ieee754_atan2>

08009b7c <pow>:
 8009b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	4614      	mov	r4, r2
 8009b82:	461d      	mov	r5, r3
 8009b84:	4680      	mov	r8, r0
 8009b86:	4689      	mov	r9, r1
 8009b88:	f000 fa36 	bl	8009ff8 <__ieee754_pow>
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	462b      	mov	r3, r5
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 ff38 	bl	8000a0c <__aeabi_dcmpun>
 8009b9c:	bbc8      	cbnz	r0, 8009c12 <pow+0x96>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 feff 	bl	80009a8 <__aeabi_dcmpeq>
 8009baa:	b1b8      	cbz	r0, 8009bdc <pow+0x60>
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 fef8 	bl	80009a8 <__aeabi_dcmpeq>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d141      	bne.n	8009c40 <pow+0xc4>
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f000 f868 	bl	8009c94 <finite>
 8009bc4:	b328      	cbz	r0, 8009c12 <pow+0x96>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fef5 	bl	80009bc <__aeabi_dcmplt>
 8009bd2:	b1f0      	cbz	r0, 8009c12 <pow+0x96>
 8009bd4:	f002 f9ba 	bl	800bf4c <__errno>
 8009bd8:	2322      	movs	r3, #34	@ 0x22
 8009bda:	e019      	b.n	8009c10 <pow+0x94>
 8009bdc:	4630      	mov	r0, r6
 8009bde:	4639      	mov	r1, r7
 8009be0:	f000 f858 	bl	8009c94 <finite>
 8009be4:	b9c8      	cbnz	r0, 8009c1a <pow+0x9e>
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f000 f853 	bl	8009c94 <finite>
 8009bee:	b1a0      	cbz	r0, 8009c1a <pow+0x9e>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f000 f84e 	bl	8009c94 <finite>
 8009bf8:	b178      	cbz	r0, 8009c1a <pow+0x9e>
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 ff03 	bl	8000a0c <__aeabi_dcmpun>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d0e4      	beq.n	8009bd4 <pow+0x58>
 8009c0a:	f002 f99f 	bl	800bf4c <__errno>
 8009c0e:	2321      	movs	r3, #33	@ 0x21
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	4630      	mov	r0, r6
 8009c14:	4639      	mov	r1, r7
 8009c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0f3      	beq.n	8009c12 <pow+0x96>
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f000 f831 	bl	8009c94 <finite>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0ed      	beq.n	8009c12 <pow+0x96>
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f000 f82b 	bl	8009c94 <finite>
 8009c3e:	e7c8      	b.n	8009bd2 <pow+0x56>
 8009c40:	2600      	movs	r6, #0
 8009c42:	4f01      	ldr	r7, [pc, #4]	@ (8009c48 <pow+0xcc>)
 8009c44:	e7e5      	b.n	8009c12 <pow+0x96>
 8009c46:	bf00      	nop
 8009c48:	3ff00000 	.word	0x3ff00000

08009c4c <sqrt>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	4606      	mov	r6, r0
 8009c50:	460f      	mov	r7, r1
 8009c52:	f000 f825 	bl	8009ca0 <__ieee754_sqrt>
 8009c56:	4632      	mov	r2, r6
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	f7f6 fed3 	bl	8000a0c <__aeabi_dcmpun>
 8009c66:	b990      	cbnz	r0, 8009c8e <sqrt+0x42>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f7f6 fea4 	bl	80009bc <__aeabi_dcmplt>
 8009c74:	b158      	cbz	r0, 8009c8e <sqrt+0x42>
 8009c76:	f002 f969 	bl	800bf4c <__errno>
 8009c7a:	2321      	movs	r3, #33	@ 0x21
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	6003      	str	r3, [r0, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	4610      	mov	r0, r2
 8009c84:	4619      	mov	r1, r3
 8009c86:	f7f6 fd51 	bl	800072c <__aeabi_ddiv>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	460d      	mov	r5, r1
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c94 <finite>:
 8009c94:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009c98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009c9c:	0fc0      	lsrs	r0, r0, #31
 8009c9e:	4770      	bx	lr

08009ca0 <__ieee754_sqrt>:
 8009ca0:	4a67      	ldr	r2, [pc, #412]	@ (8009e40 <__ieee754_sqrt+0x1a0>)
 8009ca2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca6:	438a      	bics	r2, r1
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	460b      	mov	r3, r1
 8009cae:	4604      	mov	r4, r0
 8009cb0:	d10e      	bne.n	8009cd0 <__ieee754_sqrt+0x30>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f7f6 fc10 	bl	80004d8 <__aeabi_dmul>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 fa54 	bl	800016c <__adddf3>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	dc0c      	bgt.n	8009cee <__ieee754_sqrt+0x4e>
 8009cd4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009cd8:	4302      	orrs	r2, r0
 8009cda:	d0f5      	beq.n	8009cc8 <__ieee754_sqrt+0x28>
 8009cdc:	b189      	cbz	r1, 8009d02 <__ieee754_sqrt+0x62>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	f7f6 fa42 	bl	8000168 <__aeabi_dsub>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	f7f6 fd20 	bl	800072c <__aeabi_ddiv>
 8009cec:	e7ea      	b.n	8009cc4 <__ieee754_sqrt+0x24>
 8009cee:	150a      	asrs	r2, r1, #20
 8009cf0:	d115      	bne.n	8009d1e <__ieee754_sqrt+0x7e>
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	e009      	b.n	8009d0a <__ieee754_sqrt+0x6a>
 8009cf6:	0ae3      	lsrs	r3, r4, #11
 8009cf8:	3a15      	subs	r2, #21
 8009cfa:	0564      	lsls	r4, r4, #21
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0fa      	beq.n	8009cf6 <__ieee754_sqrt+0x56>
 8009d00:	e7f7      	b.n	8009cf2 <__ieee754_sqrt+0x52>
 8009d02:	460a      	mov	r2, r1
 8009d04:	e7fa      	b.n	8009cfc <__ieee754_sqrt+0x5c>
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	3101      	adds	r1, #1
 8009d0a:	02d8      	lsls	r0, r3, #11
 8009d0c:	d5fb      	bpl.n	8009d06 <__ieee754_sqrt+0x66>
 8009d0e:	1e48      	subs	r0, r1, #1
 8009d10:	1a12      	subs	r2, r2, r0
 8009d12:	f1c1 0020 	rsb	r0, r1, #32
 8009d16:	fa24 f000 	lsr.w	r0, r4, r0
 8009d1a:	4303      	orrs	r3, r0
 8009d1c:	408c      	lsls	r4, r1
 8009d1e:	2600      	movs	r6, #0
 8009d20:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009d24:	2116      	movs	r1, #22
 8009d26:	07d2      	lsls	r2, r2, #31
 8009d28:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d36:	bf5c      	itt	pl
 8009d38:	005b      	lslpl	r3, r3, #1
 8009d3a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009d3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d42:	bf58      	it	pl
 8009d44:	0064      	lslpl	r4, r4, #1
 8009d46:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009d4a:	107f      	asrs	r7, r7, #1
 8009d4c:	0064      	lsls	r4, r4, #1
 8009d4e:	1815      	adds	r5, r2, r0
 8009d50:	429d      	cmp	r5, r3
 8009d52:	bfde      	ittt	le
 8009d54:	182a      	addle	r2, r5, r0
 8009d56:	1b5b      	suble	r3, r3, r5
 8009d58:	1836      	addle	r6, r6, r0
 8009d5a:	0fe5      	lsrs	r5, r4, #31
 8009d5c:	3901      	subs	r1, #1
 8009d5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009d62:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009d66:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009d6a:	d1f0      	bne.n	8009d4e <__ieee754_sqrt+0xae>
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	f04f 0a20 	mov.w	sl, #32
 8009d72:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009d76:	429a      	cmp	r2, r3
 8009d78:	eb01 0c00 	add.w	ip, r1, r0
 8009d7c:	db02      	blt.n	8009d84 <__ieee754_sqrt+0xe4>
 8009d7e:	d113      	bne.n	8009da8 <__ieee754_sqrt+0x108>
 8009d80:	45a4      	cmp	ip, r4
 8009d82:	d811      	bhi.n	8009da8 <__ieee754_sqrt+0x108>
 8009d84:	f1bc 0f00 	cmp.w	ip, #0
 8009d88:	eb0c 0100 	add.w	r1, ip, r0
 8009d8c:	da42      	bge.n	8009e14 <__ieee754_sqrt+0x174>
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	db40      	blt.n	8009e14 <__ieee754_sqrt+0x174>
 8009d92:	f102 0e01 	add.w	lr, r2, #1
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	4672      	mov	r2, lr
 8009d9a:	45a4      	cmp	ip, r4
 8009d9c:	bf88      	it	hi
 8009d9e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009da2:	eba4 040c 	sub.w	r4, r4, ip
 8009da6:	4405      	add	r5, r0
 8009da8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009dac:	f1ba 0a01 	subs.w	sl, sl, #1
 8009db0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009db4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009db8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009dbc:	d1db      	bne.n	8009d76 <__ieee754_sqrt+0xd6>
 8009dbe:	431c      	orrs	r4, r3
 8009dc0:	d01a      	beq.n	8009df8 <__ieee754_sqrt+0x158>
 8009dc2:	4c20      	ldr	r4, [pc, #128]	@ (8009e44 <__ieee754_sqrt+0x1a4>)
 8009dc4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009e48 <__ieee754_sqrt+0x1a8>
 8009dc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009dcc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dd0:	f7f6 f9ca 	bl	8000168 <__aeabi_dsub>
 8009dd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fdf6 	bl	80009d0 <__aeabi_dcmple>
 8009de4:	b140      	cbz	r0, 8009df8 <__ieee754_sqrt+0x158>
 8009de6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009dea:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dee:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8009df2:	d111      	bne.n	8009e18 <__ieee754_sqrt+0x178>
 8009df4:	4655      	mov	r5, sl
 8009df6:	3601      	adds	r6, #1
 8009df8:	1072      	asrs	r2, r6, #1
 8009dfa:	086b      	lsrs	r3, r5, #1
 8009dfc:	07f1      	lsls	r1, r6, #31
 8009dfe:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009e02:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009e06:	bf48      	it	mi
 8009e08:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009e12:	e757      	b.n	8009cc4 <__ieee754_sqrt+0x24>
 8009e14:	4696      	mov	lr, r2
 8009e16:	e7be      	b.n	8009d96 <__ieee754_sqrt+0xf6>
 8009e18:	f7f6 f9a8 	bl	800016c <__adddf3>
 8009e1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	f7f6 fdc8 	bl	80009bc <__aeabi_dcmplt>
 8009e2c:	b120      	cbz	r0, 8009e38 <__ieee754_sqrt+0x198>
 8009e2e:	1ca8      	adds	r0, r5, #2
 8009e30:	bf08      	it	eq
 8009e32:	3601      	addeq	r6, #1
 8009e34:	3502      	adds	r5, #2
 8009e36:	e7df      	b.n	8009df8 <__ieee754_sqrt+0x158>
 8009e38:	1c6b      	adds	r3, r5, #1
 8009e3a:	f023 0501 	bic.w	r5, r3, #1
 8009e3e:	e7db      	b.n	8009df8 <__ieee754_sqrt+0x158>
 8009e40:	7ff00000 	.word	0x7ff00000
 8009e44:	20000018 	.word	0x20000018
 8009e48:	20000010 	.word	0x20000010
 8009e4c:	00000000 	.word	0x00000000

08009e50 <__ieee754_atan2>:
 8009e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	4617      	mov	r7, r2
 8009e56:	4690      	mov	r8, r2
 8009e58:	4699      	mov	r9, r3
 8009e5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e5e:	427b      	negs	r3, r7
 8009e60:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009fe8 <__ieee754_atan2+0x198>
 8009e64:	433b      	orrs	r3, r7
 8009e66:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009e6a:	4553      	cmp	r3, sl
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	460d      	mov	r5, r1
 8009e70:	d809      	bhi.n	8009e86 <__ieee754_atan2+0x36>
 8009e72:	4246      	negs	r6, r0
 8009e74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009e78:	4306      	orrs	r6, r0
 8009e7a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009e7e:	4556      	cmp	r6, sl
 8009e80:	468e      	mov	lr, r1
 8009e82:	4683      	mov	fp, r0
 8009e84:	d908      	bls.n	8009e98 <__ieee754_atan2+0x48>
 8009e86:	4642      	mov	r2, r8
 8009e88:	464b      	mov	r3, r9
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	f7f6 f96d 	bl	800016c <__adddf3>
 8009e92:	4604      	mov	r4, r0
 8009e94:	460d      	mov	r5, r1
 8009e96:	e016      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009e98:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009e9c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ea0:	433e      	orrs	r6, r7
 8009ea2:	d103      	bne.n	8009eac <__ieee754_atan2+0x5c>
 8009ea4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea8:	f000 bdce 	b.w	800aa48 <atan>
 8009eac:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009eb0:	f006 0602 	and.w	r6, r6, #2
 8009eb4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009eb8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009ebc:	d107      	bne.n	8009ece <__ieee754_atan2+0x7e>
 8009ebe:	2e02      	cmp	r6, #2
 8009ec0:	d064      	beq.n	8009f8c <__ieee754_atan2+0x13c>
 8009ec2:	2e03      	cmp	r6, #3
 8009ec4:	d066      	beq.n	8009f94 <__ieee754_atan2+0x144>
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	4317      	orrs	r7, r2
 8009ed0:	d106      	bne.n	8009ee0 <__ieee754_atan2+0x90>
 8009ed2:	f1be 0f00 	cmp.w	lr, #0
 8009ed6:	da68      	bge.n	8009faa <__ieee754_atan2+0x15a>
 8009ed8:	a537      	add	r5, pc, #220	@ (adr r5, 8009fb8 <__ieee754_atan2+0x168>)
 8009eda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ede:	e7f2      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009ee0:	4552      	cmp	r2, sl
 8009ee2:	d10f      	bne.n	8009f04 <__ieee754_atan2+0xb4>
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8009eea:	d107      	bne.n	8009efc <__ieee754_atan2+0xac>
 8009eec:	2e02      	cmp	r6, #2
 8009eee:	d855      	bhi.n	8009f9c <__ieee754_atan2+0x14c>
 8009ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8009fec <__ieee754_atan2+0x19c>)
 8009ef2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ef6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009efa:	e7e4      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009efc:	2e02      	cmp	r6, #2
 8009efe:	d851      	bhi.n	8009fa4 <__ieee754_atan2+0x154>
 8009f00:	4b3b      	ldr	r3, [pc, #236]	@ (8009ff0 <__ieee754_atan2+0x1a0>)
 8009f02:	e7f6      	b.n	8009ef2 <__ieee754_atan2+0xa2>
 8009f04:	4553      	cmp	r3, sl
 8009f06:	d0e4      	beq.n	8009ed2 <__ieee754_atan2+0x82>
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009f0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f12:	da21      	bge.n	8009f58 <__ieee754_atan2+0x108>
 8009f14:	f1b9 0f00 	cmp.w	r9, #0
 8009f18:	da01      	bge.n	8009f1e <__ieee754_atan2+0xce>
 8009f1a:	323c      	adds	r2, #60	@ 0x3c
 8009f1c:	db20      	blt.n	8009f60 <__ieee754_atan2+0x110>
 8009f1e:	4642      	mov	r2, r8
 8009f20:	464b      	mov	r3, r9
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7f6 fc01 	bl	800072c <__aeabi_ddiv>
 8009f2a:	f000 ff1d 	bl	800ad68 <fabs>
 8009f2e:	f000 fd8b 	bl	800aa48 <atan>
 8009f32:	4604      	mov	r4, r0
 8009f34:	460d      	mov	r5, r1
 8009f36:	2e01      	cmp	r6, #1
 8009f38:	d015      	beq.n	8009f66 <__ieee754_atan2+0x116>
 8009f3a:	2e02      	cmp	r6, #2
 8009f3c:	d017      	beq.n	8009f6e <__ieee754_atan2+0x11e>
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	d0c1      	beq.n	8009ec6 <__ieee754_atan2+0x76>
 8009f42:	a31f      	add	r3, pc, #124	@ (adr r3, 8009fc0 <__ieee754_atan2+0x170>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	f7f6 f90c 	bl	8000168 <__aeabi_dsub>
 8009f50:	a31d      	add	r3, pc, #116	@ (adr r3, 8009fc8 <__ieee754_atan2+0x178>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	e016      	b.n	8009f86 <__ieee754_atan2+0x136>
 8009f58:	a51d      	add	r5, pc, #116	@ (adr r5, 8009fd0 <__ieee754_atan2+0x180>)
 8009f5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f5e:	e7ea      	b.n	8009f36 <__ieee754_atan2+0xe6>
 8009f60:	2400      	movs	r4, #0
 8009f62:	2500      	movs	r5, #0
 8009f64:	e7e7      	b.n	8009f36 <__ieee754_atan2+0xe6>
 8009f66:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009f6a:	461d      	mov	r5, r3
 8009f6c:	e7ab      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009f6e:	a314      	add	r3, pc, #80	@ (adr r3, 8009fc0 <__ieee754_atan2+0x170>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 f8f6 	bl	8000168 <__aeabi_dsub>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	a111      	add	r1, pc, #68	@ (adr r1, 8009fc8 <__ieee754_atan2+0x178>)
 8009f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f86:	f7f6 f8ef 	bl	8000168 <__aeabi_dsub>
 8009f8a:	e782      	b.n	8009e92 <__ieee754_atan2+0x42>
 8009f8c:	a50e      	add	r5, pc, #56	@ (adr r5, 8009fc8 <__ieee754_atan2+0x178>)
 8009f8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f92:	e798      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009f94:	a510      	add	r5, pc, #64	@ (adr r5, 8009fd8 <__ieee754_atan2+0x188>)
 8009f96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f9a:	e794      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009f9c:	a510      	add	r5, pc, #64	@ (adr r5, 8009fe0 <__ieee754_atan2+0x190>)
 8009f9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fa2:	e790      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009fa4:	2400      	movs	r4, #0
 8009fa6:	2500      	movs	r5, #0
 8009fa8:	e78d      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009faa:	a509      	add	r5, pc, #36	@ (adr r5, 8009fd0 <__ieee754_atan2+0x180>)
 8009fac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fb0:	e789      	b.n	8009ec6 <__ieee754_atan2+0x76>
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	54442d18 	.word	0x54442d18
 8009fbc:	bff921fb 	.word	0xbff921fb
 8009fc0:	33145c07 	.word	0x33145c07
 8009fc4:	3ca1a626 	.word	0x3ca1a626
 8009fc8:	54442d18 	.word	0x54442d18
 8009fcc:	400921fb 	.word	0x400921fb
 8009fd0:	54442d18 	.word	0x54442d18
 8009fd4:	3ff921fb 	.word	0x3ff921fb
 8009fd8:	54442d18 	.word	0x54442d18
 8009fdc:	c00921fb 	.word	0xc00921fb
 8009fe0:	54442d18 	.word	0x54442d18
 8009fe4:	3fe921fb 	.word	0x3fe921fb
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	0800e078 	.word	0x0800e078
 8009ff0:	0800e060 	.word	0x0800e060
 8009ff4:	00000000 	.word	0x00000000

08009ff8 <__ieee754_pow>:
 8009ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	b091      	sub	sp, #68	@ 0x44
 8009ffe:	e9cd 2300 	strd	r2, r3, [sp]
 800a002:	468b      	mov	fp, r1
 800a004:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a008:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a00c:	4682      	mov	sl, r0
 800a00e:	ea57 0001 	orrs.w	r0, r7, r1
 800a012:	d112      	bne.n	800a03a <__ieee754_pow+0x42>
 800a014:	4653      	mov	r3, sl
 800a016:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a01a:	18db      	adds	r3, r3, r3
 800a01c:	4152      	adcs	r2, r2
 800a01e:	4298      	cmp	r0, r3
 800a020:	4b91      	ldr	r3, [pc, #580]	@ (800a268 <__ieee754_pow+0x270>)
 800a022:	4193      	sbcs	r3, r2
 800a024:	f080 84ce 	bcs.w	800a9c4 <__ieee754_pow+0x9cc>
 800a028:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a02c:	4650      	mov	r0, sl
 800a02e:	4659      	mov	r1, fp
 800a030:	f7f6 f89c 	bl	800016c <__adddf3>
 800a034:	b011      	add	sp, #68	@ 0x44
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	4b8c      	ldr	r3, [pc, #560]	@ (800a26c <__ieee754_pow+0x274>)
 800a03c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a040:	429e      	cmp	r6, r3
 800a042:	465d      	mov	r5, fp
 800a044:	46d1      	mov	r9, sl
 800a046:	d807      	bhi.n	800a058 <__ieee754_pow+0x60>
 800a048:	d102      	bne.n	800a050 <__ieee754_pow+0x58>
 800a04a:	f1ba 0f00 	cmp.w	sl, #0
 800a04e:	d1eb      	bne.n	800a028 <__ieee754_pow+0x30>
 800a050:	429f      	cmp	r7, r3
 800a052:	d801      	bhi.n	800a058 <__ieee754_pow+0x60>
 800a054:	d10f      	bne.n	800a076 <__ieee754_pow+0x7e>
 800a056:	b171      	cbz	r1, 800a076 <__ieee754_pow+0x7e>
 800a058:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a05c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a060:	ea55 0509 	orrs.w	r5, r5, r9
 800a064:	d1e0      	bne.n	800a028 <__ieee754_pow+0x30>
 800a066:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a06a:	18db      	adds	r3, r3, r3
 800a06c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a070:	4152      	adcs	r2, r2
 800a072:	429d      	cmp	r5, r3
 800a074:	e7d4      	b.n	800a020 <__ieee754_pow+0x28>
 800a076:	2d00      	cmp	r5, #0
 800a078:	4633      	mov	r3, r6
 800a07a:	da39      	bge.n	800a0f0 <__ieee754_pow+0xf8>
 800a07c:	4a7c      	ldr	r2, [pc, #496]	@ (800a270 <__ieee754_pow+0x278>)
 800a07e:	4297      	cmp	r7, r2
 800a080:	d84e      	bhi.n	800a120 <__ieee754_pow+0x128>
 800a082:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a086:	4297      	cmp	r7, r2
 800a088:	f240 84ab 	bls.w	800a9e2 <__ieee754_pow+0x9ea>
 800a08c:	153a      	asrs	r2, r7, #20
 800a08e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a092:	2a14      	cmp	r2, #20
 800a094:	dd0f      	ble.n	800a0b6 <__ieee754_pow+0xbe>
 800a096:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a09a:	fa21 f402 	lsr.w	r4, r1, r2
 800a09e:	fa04 f202 	lsl.w	r2, r4, r2
 800a0a2:	428a      	cmp	r2, r1
 800a0a4:	f040 849d 	bne.w	800a9e2 <__ieee754_pow+0x9ea>
 800a0a8:	f004 0401 	and.w	r4, r4, #1
 800a0ac:	f1c4 0402 	rsb	r4, r4, #2
 800a0b0:	2900      	cmp	r1, #0
 800a0b2:	d15a      	bne.n	800a16a <__ieee754_pow+0x172>
 800a0b4:	e00e      	b.n	800a0d4 <__ieee754_pow+0xdc>
 800a0b6:	2900      	cmp	r1, #0
 800a0b8:	d156      	bne.n	800a168 <__ieee754_pow+0x170>
 800a0ba:	f1c2 0214 	rsb	r2, r2, #20
 800a0be:	fa47 f402 	asr.w	r4, r7, r2
 800a0c2:	fa04 f202 	lsl.w	r2, r4, r2
 800a0c6:	42ba      	cmp	r2, r7
 800a0c8:	f040 8488 	bne.w	800a9dc <__ieee754_pow+0x9e4>
 800a0cc:	f004 0401 	and.w	r4, r4, #1
 800a0d0:	f1c4 0402 	rsb	r4, r4, #2
 800a0d4:	4a67      	ldr	r2, [pc, #412]	@ (800a274 <__ieee754_pow+0x27c>)
 800a0d6:	4297      	cmp	r7, r2
 800a0d8:	d130      	bne.n	800a13c <__ieee754_pow+0x144>
 800a0da:	f1b8 0f00 	cmp.w	r8, #0
 800a0de:	f280 8479 	bge.w	800a9d4 <__ieee754_pow+0x9dc>
 800a0e2:	4652      	mov	r2, sl
 800a0e4:	465b      	mov	r3, fp
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	4962      	ldr	r1, [pc, #392]	@ (800a274 <__ieee754_pow+0x27c>)
 800a0ea:	f7f6 fb1f 	bl	800072c <__aeabi_ddiv>
 800a0ee:	e7a1      	b.n	800a034 <__ieee754_pow+0x3c>
 800a0f0:	2400      	movs	r4, #0
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d139      	bne.n	800a16a <__ieee754_pow+0x172>
 800a0f6:	4a5d      	ldr	r2, [pc, #372]	@ (800a26c <__ieee754_pow+0x274>)
 800a0f8:	4297      	cmp	r7, r2
 800a0fa:	d1eb      	bne.n	800a0d4 <__ieee754_pow+0xdc>
 800a0fc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a100:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a104:	ea53 0309 	orrs.w	r3, r3, r9
 800a108:	f000 845c 	beq.w	800a9c4 <__ieee754_pow+0x9cc>
 800a10c:	4b5a      	ldr	r3, [pc, #360]	@ (800a278 <__ieee754_pow+0x280>)
 800a10e:	429e      	cmp	r6, r3
 800a110:	d908      	bls.n	800a124 <__ieee754_pow+0x12c>
 800a112:	f1b8 0f00 	cmp.w	r8, #0
 800a116:	f2c0 8459 	blt.w	800a9cc <__ieee754_pow+0x9d4>
 800a11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a11e:	e789      	b.n	800a034 <__ieee754_pow+0x3c>
 800a120:	2402      	movs	r4, #2
 800a122:	e7e6      	b.n	800a0f2 <__ieee754_pow+0xfa>
 800a124:	f1b8 0f00 	cmp.w	r8, #0
 800a128:	f04f 0000 	mov.w	r0, #0
 800a12c:	f04f 0100 	mov.w	r1, #0
 800a130:	da80      	bge.n	800a034 <__ieee754_pow+0x3c>
 800a132:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a136:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a13a:	e77b      	b.n	800a034 <__ieee754_pow+0x3c>
 800a13c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a140:	d106      	bne.n	800a150 <__ieee754_pow+0x158>
 800a142:	4652      	mov	r2, sl
 800a144:	465b      	mov	r3, fp
 800a146:	4650      	mov	r0, sl
 800a148:	4659      	mov	r1, fp
 800a14a:	f7f6 f9c5 	bl	80004d8 <__aeabi_dmul>
 800a14e:	e771      	b.n	800a034 <__ieee754_pow+0x3c>
 800a150:	4a4a      	ldr	r2, [pc, #296]	@ (800a27c <__ieee754_pow+0x284>)
 800a152:	4590      	cmp	r8, r2
 800a154:	d109      	bne.n	800a16a <__ieee754_pow+0x172>
 800a156:	2d00      	cmp	r5, #0
 800a158:	db07      	blt.n	800a16a <__ieee754_pow+0x172>
 800a15a:	4650      	mov	r0, sl
 800a15c:	4659      	mov	r1, fp
 800a15e:	b011      	add	sp, #68	@ 0x44
 800a160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	f7ff bd9c 	b.w	8009ca0 <__ieee754_sqrt>
 800a168:	2400      	movs	r4, #0
 800a16a:	4650      	mov	r0, sl
 800a16c:	4659      	mov	r1, fp
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	f000 fdfa 	bl	800ad68 <fabs>
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	f1b9 0f00 	cmp.w	r9, #0
 800a17a:	d127      	bne.n	800a1cc <__ieee754_pow+0x1d4>
 800a17c:	4a3d      	ldr	r2, [pc, #244]	@ (800a274 <__ieee754_pow+0x27c>)
 800a17e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a182:	4594      	cmp	ip, r2
 800a184:	d000      	beq.n	800a188 <__ieee754_pow+0x190>
 800a186:	bb0e      	cbnz	r6, 800a1cc <__ieee754_pow+0x1d4>
 800a188:	f1b8 0f00 	cmp.w	r8, #0
 800a18c:	da05      	bge.n	800a19a <__ieee754_pow+0x1a2>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	2000      	movs	r0, #0
 800a194:	4937      	ldr	r1, [pc, #220]	@ (800a274 <__ieee754_pow+0x27c>)
 800a196:	f7f6 fac9 	bl	800072c <__aeabi_ddiv>
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	f6bf af4a 	bge.w	800a034 <__ieee754_pow+0x3c>
 800a1a0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a1a4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a1a8:	4326      	orrs	r6, r4
 800a1aa:	d108      	bne.n	800a1be <__ieee754_pow+0x1c6>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	f7f5 ffd8 	bl	8000168 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	e795      	b.n	800a0ea <__ieee754_pow+0xf2>
 800a1be:	2c01      	cmp	r4, #1
 800a1c0:	f47f af38 	bne.w	800a034 <__ieee754_pow+0x3c>
 800a1c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	e733      	b.n	800a034 <__ieee754_pow+0x3c>
 800a1cc:	0fea      	lsrs	r2, r5, #31
 800a1ce:	3a01      	subs	r2, #1
 800a1d0:	ea52 0c04 	orrs.w	ip, r2, r4
 800a1d4:	d102      	bne.n	800a1dc <__ieee754_pow+0x1e4>
 800a1d6:	4652      	mov	r2, sl
 800a1d8:	465b      	mov	r3, fp
 800a1da:	e7e9      	b.n	800a1b0 <__ieee754_pow+0x1b8>
 800a1dc:	f04f 0900 	mov.w	r9, #0
 800a1e0:	3c01      	subs	r4, #1
 800a1e2:	4314      	orrs	r4, r2
 800a1e4:	bf14      	ite	ne
 800a1e6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a274 <__ieee754_pow+0x27c>
 800a1ea:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a280 <__ieee754_pow+0x288>
 800a1ee:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a1f2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a1f6:	f240 8107 	bls.w	800a408 <__ieee754_pow+0x410>
 800a1fa:	4b22      	ldr	r3, [pc, #136]	@ (800a284 <__ieee754_pow+0x28c>)
 800a1fc:	429f      	cmp	r7, r3
 800a1fe:	4b1e      	ldr	r3, [pc, #120]	@ (800a278 <__ieee754_pow+0x280>)
 800a200:	d913      	bls.n	800a22a <__ieee754_pow+0x232>
 800a202:	429e      	cmp	r6, r3
 800a204:	d808      	bhi.n	800a218 <__ieee754_pow+0x220>
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	da08      	bge.n	800a21e <__ieee754_pow+0x226>
 800a20c:	2000      	movs	r0, #0
 800a20e:	b011      	add	sp, #68	@ 0x44
 800a210:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	f000 be44 	b.w	800aea0 <__math_oflow>
 800a218:	f1b8 0f00 	cmp.w	r8, #0
 800a21c:	dcf6      	bgt.n	800a20c <__ieee754_pow+0x214>
 800a21e:	2000      	movs	r0, #0
 800a220:	b011      	add	sp, #68	@ 0x44
 800a222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a226:	f000 be36 	b.w	800ae96 <__math_uflow>
 800a22a:	429e      	cmp	r6, r3
 800a22c:	d20c      	bcs.n	800a248 <__ieee754_pow+0x250>
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	2200      	movs	r2, #0
 800a234:	2300      	movs	r3, #0
 800a236:	f7f6 fbc1 	bl	80009bc <__aeabi_dcmplt>
 800a23a:	3800      	subs	r0, #0
 800a23c:	bf18      	it	ne
 800a23e:	2001      	movne	r0, #1
 800a240:	f1b8 0f00 	cmp.w	r8, #0
 800a244:	daec      	bge.n	800a220 <__ieee754_pow+0x228>
 800a246:	e7e2      	b.n	800a20e <__ieee754_pow+0x216>
 800a248:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <__ieee754_pow+0x27c>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	429e      	cmp	r6, r3
 800a24e:	d91b      	bls.n	800a288 <__ieee754_pow+0x290>
 800a250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a254:	2300      	movs	r3, #0
 800a256:	f7f6 fbb1 	bl	80009bc <__aeabi_dcmplt>
 800a25a:	3800      	subs	r0, #0
 800a25c:	bf18      	it	ne
 800a25e:	2001      	movne	r0, #1
 800a260:	f1b8 0f00 	cmp.w	r8, #0
 800a264:	dcd3      	bgt.n	800a20e <__ieee754_pow+0x216>
 800a266:	e7db      	b.n	800a220 <__ieee754_pow+0x228>
 800a268:	fff00000 	.word	0xfff00000
 800a26c:	7ff00000 	.word	0x7ff00000
 800a270:	433fffff 	.word	0x433fffff
 800a274:	3ff00000 	.word	0x3ff00000
 800a278:	3fefffff 	.word	0x3fefffff
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	bff00000 	.word	0xbff00000
 800a284:	43f00000 	.word	0x43f00000
 800a288:	4b5b      	ldr	r3, [pc, #364]	@ (800a3f8 <__ieee754_pow+0x400>)
 800a28a:	f7f5 ff6d 	bl	8000168 <__aeabi_dsub>
 800a28e:	a352      	add	r3, pc, #328	@ (adr r3, 800a3d8 <__ieee754_pow+0x3e0>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	f7f6 f91e 	bl	80004d8 <__aeabi_dmul>
 800a29c:	a350      	add	r3, pc, #320	@ (adr r3, 800a3e0 <__ieee754_pow+0x3e8>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	460f      	mov	r7, r1
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 f915 	bl	80004d8 <__aeabi_dmul>
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	468b      	mov	fp, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4b50      	ldr	r3, [pc, #320]	@ (800a3fc <__ieee754_pow+0x404>)
 800a2ba:	f7f6 f90d 	bl	80004d8 <__aeabi_dmul>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	a149      	add	r1, pc, #292	@ (adr r1, 800a3e8 <__ieee754_pow+0x3f0>)
 800a2c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c8:	f7f5 ff4e 	bl	8000168 <__aeabi_dsub>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	f7f6 f902 	bl	80004d8 <__aeabi_dmul>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	2000      	movs	r0, #0
 800a2da:	4949      	ldr	r1, [pc, #292]	@ (800a400 <__ieee754_pow+0x408>)
 800a2dc:	f7f5 ff44 	bl	8000168 <__aeabi_dsub>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4689      	mov	r9, r1
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f6 f8f4 	bl	80004d8 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	a33c      	add	r3, pc, #240	@ (adr r3, 800a3f0 <__ieee754_pow+0x3f8>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f6 f8e9 	bl	80004d8 <__aeabi_dmul>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4650      	mov	r0, sl
 800a30c:	4659      	mov	r1, fp
 800a30e:	f7f5 ff2b 	bl	8000168 <__aeabi_dsub>
 800a312:	2400      	movs	r4, #0
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4680      	mov	r8, r0
 800a31a:	4689      	mov	r9, r1
 800a31c:	4630      	mov	r0, r6
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f5 ff24 	bl	800016c <__adddf3>
 800a324:	4632      	mov	r2, r6
 800a326:	463b      	mov	r3, r7
 800a328:	4620      	mov	r0, r4
 800a32a:	460d      	mov	r5, r1
 800a32c:	f7f5 ff1c 	bl	8000168 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f5 ff16 	bl	8000168 <__aeabi_dsub>
 800a33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a344:	2300      	movs	r3, #0
 800a346:	9304      	str	r3, [sp, #16]
 800a348:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a34c:	4606      	mov	r6, r0
 800a34e:	460f      	mov	r7, r1
 800a350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a354:	4652      	mov	r2, sl
 800a356:	465b      	mov	r3, fp
 800a358:	f7f5 ff06 	bl	8000168 <__aeabi_dsub>
 800a35c:	4622      	mov	r2, r4
 800a35e:	462b      	mov	r3, r5
 800a360:	f7f6 f8ba 	bl	80004d8 <__aeabi_dmul>
 800a364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a368:	4680      	mov	r8, r0
 800a36a:	4689      	mov	r9, r1
 800a36c:	4630      	mov	r0, r6
 800a36e:	4639      	mov	r1, r7
 800a370:	f7f6 f8b2 	bl	80004d8 <__aeabi_dmul>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f5 fef6 	bl	800016c <__adddf3>
 800a380:	4652      	mov	r2, sl
 800a382:	465b      	mov	r3, fp
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f6 f8a4 	bl	80004d8 <__aeabi_dmul>
 800a390:	460b      	mov	r3, r1
 800a392:	4602      	mov	r2, r0
 800a394:	4680      	mov	r8, r0
 800a396:	4689      	mov	r9, r1
 800a398:	4630      	mov	r0, r6
 800a39a:	4639      	mov	r1, r7
 800a39c:	f7f5 fee6 	bl	800016c <__adddf3>
 800a3a0:	4b18      	ldr	r3, [pc, #96]	@ (800a404 <__ieee754_pow+0x40c>)
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4299      	cmp	r1, r3
 800a3a6:	460d      	mov	r5, r1
 800a3a8:	468a      	mov	sl, r1
 800a3aa:	468b      	mov	fp, r1
 800a3ac:	f340 82e0 	ble.w	800a970 <__ieee754_pow+0x978>
 800a3b0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a3b4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a3b8:	4303      	orrs	r3, r0
 800a3ba:	f000 81df 	beq.w	800a77c <__ieee754_pow+0x784>
 800a3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f7f6 faf9 	bl	80009bc <__aeabi_dcmplt>
 800a3ca:	3800      	subs	r0, #0
 800a3cc:	bf18      	it	ne
 800a3ce:	2001      	movne	r0, #1
 800a3d0:	e71d      	b.n	800a20e <__ieee754_pow+0x216>
 800a3d2:	bf00      	nop
 800a3d4:	f3af 8000 	nop.w
 800a3d8:	60000000 	.word	0x60000000
 800a3dc:	3ff71547 	.word	0x3ff71547
 800a3e0:	f85ddf44 	.word	0xf85ddf44
 800a3e4:	3e54ae0b 	.word	0x3e54ae0b
 800a3e8:	55555555 	.word	0x55555555
 800a3ec:	3fd55555 	.word	0x3fd55555
 800a3f0:	652b82fe 	.word	0x652b82fe
 800a3f4:	3ff71547 	.word	0x3ff71547
 800a3f8:	3ff00000 	.word	0x3ff00000
 800a3fc:	3fd00000 	.word	0x3fd00000
 800a400:	3fe00000 	.word	0x3fe00000
 800a404:	408fffff 	.word	0x408fffff
 800a408:	4ad3      	ldr	r2, [pc, #844]	@ (800a758 <__ieee754_pow+0x760>)
 800a40a:	402a      	ands	r2, r5
 800a40c:	2a00      	cmp	r2, #0
 800a40e:	f040 817a 	bne.w	800a706 <__ieee754_pow+0x70e>
 800a412:	4bd2      	ldr	r3, [pc, #840]	@ (800a75c <__ieee754_pow+0x764>)
 800a414:	2200      	movs	r2, #0
 800a416:	f7f6 f85f 	bl	80004d8 <__aeabi_dmul>
 800a41a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a41e:	460b      	mov	r3, r1
 800a420:	151a      	asrs	r2, r3, #20
 800a422:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a426:	4422      	add	r2, r4
 800a428:	920a      	str	r2, [sp, #40]	@ 0x28
 800a42a:	4acd      	ldr	r2, [pc, #820]	@ (800a760 <__ieee754_pow+0x768>)
 800a42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a430:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a434:	4293      	cmp	r3, r2
 800a436:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a43a:	dd08      	ble.n	800a44e <__ieee754_pow+0x456>
 800a43c:	4ac9      	ldr	r2, [pc, #804]	@ (800a764 <__ieee754_pow+0x76c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f340 8163 	ble.w	800a70a <__ieee754_pow+0x712>
 800a444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a446:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a44a:	3301      	adds	r3, #1
 800a44c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a44e:	2600      	movs	r6, #0
 800a450:	00f3      	lsls	r3, r6, #3
 800a452:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a454:	4bc4      	ldr	r3, [pc, #784]	@ (800a768 <__ieee754_pow+0x770>)
 800a456:	4629      	mov	r1, r5
 800a458:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a45c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a460:	461a      	mov	r2, r3
 800a462:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a466:	4623      	mov	r3, r4
 800a468:	4682      	mov	sl, r0
 800a46a:	f7f5 fe7d 	bl	8000168 <__aeabi_dsub>
 800a46e:	4652      	mov	r2, sl
 800a470:	462b      	mov	r3, r5
 800a472:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a476:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a47a:	f7f5 fe77 	bl	800016c <__adddf3>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	2000      	movs	r0, #0
 800a484:	49b9      	ldr	r1, [pc, #740]	@ (800a76c <__ieee754_pow+0x774>)
 800a486:	f7f6 f951 	bl	800072c <__aeabi_ddiv>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a496:	f7f6 f81f 	bl	80004d8 <__aeabi_dmul>
 800a49a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a49e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a4a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	46ab      	mov	fp, r5
 800a4ac:	106d      	asrs	r5, r5, #1
 800a4ae:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a4b2:	9304      	str	r3, [sp, #16]
 800a4b4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a4b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a4bc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	f7f6 f806 	bl	80004d8 <__aeabi_dmul>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4d4:	f7f5 fe48 	bl	8000168 <__aeabi_dsub>
 800a4d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	f7f5 fe40 	bl	8000168 <__aeabi_dsub>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 fe3a 	bl	8000168 <__aeabi_dsub>
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f5 fe30 	bl	8000168 <__aeabi_dsub>
 800a508:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a50c:	f7f5 ffe4 	bl	80004d8 <__aeabi_dmul>
 800a510:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a514:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a518:	4610      	mov	r0, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	f7f5 ffdc 	bl	80004d8 <__aeabi_dmul>
 800a520:	a37b      	add	r3, pc, #492	@ (adr r3, 800a710 <__ieee754_pow+0x718>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	f7f5 ffd5 	bl	80004d8 <__aeabi_dmul>
 800a52e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a718 <__ieee754_pow+0x720>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 fe1a 	bl	800016c <__adddf3>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	f7f5 ffcc 	bl	80004d8 <__aeabi_dmul>
 800a540:	a377      	add	r3, pc, #476	@ (adr r3, 800a720 <__ieee754_pow+0x728>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f5 fe11 	bl	800016c <__adddf3>
 800a54a:	4622      	mov	r2, r4
 800a54c:	462b      	mov	r3, r5
 800a54e:	f7f5 ffc3 	bl	80004d8 <__aeabi_dmul>
 800a552:	a375      	add	r3, pc, #468	@ (adr r3, 800a728 <__ieee754_pow+0x730>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f5 fe08 	bl	800016c <__adddf3>
 800a55c:	4622      	mov	r2, r4
 800a55e:	462b      	mov	r3, r5
 800a560:	f7f5 ffba 	bl	80004d8 <__aeabi_dmul>
 800a564:	a372      	add	r3, pc, #456	@ (adr r3, 800a730 <__ieee754_pow+0x738>)
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	f7f5 fdff 	bl	800016c <__adddf3>
 800a56e:	4622      	mov	r2, r4
 800a570:	462b      	mov	r3, r5
 800a572:	f7f5 ffb1 	bl	80004d8 <__aeabi_dmul>
 800a576:	a370      	add	r3, pc, #448	@ (adr r3, 800a738 <__ieee754_pow+0x740>)
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f7f5 fdf6 	bl	800016c <__adddf3>
 800a580:	4622      	mov	r2, r4
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	462b      	mov	r3, r5
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f5 ffa4 	bl	80004d8 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4630      	mov	r0, r6
 800a596:	4639      	mov	r1, r7
 800a598:	f7f5 ff9e 	bl	80004d8 <__aeabi_dmul>
 800a59c:	4604      	mov	r4, r0
 800a59e:	460d      	mov	r5, r1
 800a5a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	f7f5 fde0 	bl	800016c <__adddf3>
 800a5ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5b0:	f7f5 ff92 	bl	80004d8 <__aeabi_dmul>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f5 fdd8 	bl	800016c <__adddf3>
 800a5bc:	4642      	mov	r2, r8
 800a5be:	4682      	mov	sl, r0
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f5 ff86 	bl	80004d8 <__aeabi_dmul>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4b68      	ldr	r3, [pc, #416]	@ (800a770 <__ieee754_pow+0x778>)
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	460f      	mov	r7, r1
 800a5d4:	f7f5 fdca 	bl	800016c <__adddf3>
 800a5d8:	4652      	mov	r2, sl
 800a5da:	465b      	mov	r3, fp
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	2400      	movs	r4, #0
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	f7f5 ff74 	bl	80004d8 <__aeabi_dmul>
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4689      	mov	r9, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4b5d      	ldr	r3, [pc, #372]	@ (800a770 <__ieee754_pow+0x778>)
 800a5fc:	f7f5 fdb4 	bl	8000168 <__aeabi_dsub>
 800a600:	4632      	mov	r2, r6
 800a602:	463b      	mov	r3, r7
 800a604:	f7f5 fdb0 	bl	8000168 <__aeabi_dsub>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4650      	mov	r0, sl
 800a60e:	4659      	mov	r1, fp
 800a610:	f7f5 fdaa 	bl	8000168 <__aeabi_dsub>
 800a614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a618:	f7f5 ff5e 	bl	80004d8 <__aeabi_dmul>
 800a61c:	4622      	mov	r2, r4
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a626:	462b      	mov	r3, r5
 800a628:	f7f5 ff56 	bl	80004d8 <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f5 fd9a 	bl	800016c <__adddf3>
 800a638:	2400      	movs	r4, #0
 800a63a:	4606      	mov	r6, r0
 800a63c:	460f      	mov	r7, r1
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4640      	mov	r0, r8
 800a644:	4649      	mov	r1, r9
 800a646:	f7f5 fd91 	bl	800016c <__adddf3>
 800a64a:	a33d      	add	r3, pc, #244	@ (adr r3, 800a740 <__ieee754_pow+0x748>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	4620      	mov	r0, r4
 800a652:	460d      	mov	r5, r1
 800a654:	f7f5 ff40 	bl	80004d8 <__aeabi_dmul>
 800a658:	4642      	mov	r2, r8
 800a65a:	464b      	mov	r3, r9
 800a65c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a660:	4620      	mov	r0, r4
 800a662:	4629      	mov	r1, r5
 800a664:	f7f5 fd80 	bl	8000168 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f5 fd7a 	bl	8000168 <__aeabi_dsub>
 800a674:	a334      	add	r3, pc, #208	@ (adr r3, 800a748 <__ieee754_pow+0x750>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 ff2d 	bl	80004d8 <__aeabi_dmul>
 800a67e:	a334      	add	r3, pc, #208	@ (adr r3, 800a750 <__ieee754_pow+0x758>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 ff24 	bl	80004d8 <__aeabi_dmul>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	f7f5 fd68 	bl	800016c <__adddf3>
 800a69c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a69e:	4b35      	ldr	r3, [pc, #212]	@ (800a774 <__ieee754_pow+0x77c>)
 800a6a0:	2400      	movs	r4, #0
 800a6a2:	4413      	add	r3, r2
 800a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a8:	f7f5 fd60 	bl	800016c <__adddf3>
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	f7f5 fea7 	bl	8000404 <__aeabi_i2d>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800a778 <__ieee754_pow+0x780>)
 800a6be:	4413      	add	r3, r2
 800a6c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6c4:	4652      	mov	r2, sl
 800a6c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ca:	465b      	mov	r3, fp
 800a6cc:	f7f5 fd4e 	bl	800016c <__adddf3>
 800a6d0:	4642      	mov	r2, r8
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	f7f5 fd4a 	bl	800016c <__adddf3>
 800a6d8:	4632      	mov	r2, r6
 800a6da:	463b      	mov	r3, r7
 800a6dc:	f7f5 fd46 	bl	800016c <__adddf3>
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	463b      	mov	r3, r7
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	f7f5 fd3e 	bl	8000168 <__aeabi_dsub>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 fd3a 	bl	8000168 <__aeabi_dsub>
 800a6f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6f8:	f7f5 fd36 	bl	8000168 <__aeabi_dsub>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	e618      	b.n	800a338 <__ieee754_pow+0x340>
 800a706:	2400      	movs	r4, #0
 800a708:	e68a      	b.n	800a420 <__ieee754_pow+0x428>
 800a70a:	2601      	movs	r6, #1
 800a70c:	e6a0      	b.n	800a450 <__ieee754_pow+0x458>
 800a70e:	bf00      	nop
 800a710:	4a454eef 	.word	0x4a454eef
 800a714:	3fca7e28 	.word	0x3fca7e28
 800a718:	93c9db65 	.word	0x93c9db65
 800a71c:	3fcd864a 	.word	0x3fcd864a
 800a720:	a91d4101 	.word	0xa91d4101
 800a724:	3fd17460 	.word	0x3fd17460
 800a728:	518f264d 	.word	0x518f264d
 800a72c:	3fd55555 	.word	0x3fd55555
 800a730:	db6fabff 	.word	0xdb6fabff
 800a734:	3fdb6db6 	.word	0x3fdb6db6
 800a738:	33333303 	.word	0x33333303
 800a73c:	3fe33333 	.word	0x3fe33333
 800a740:	e0000000 	.word	0xe0000000
 800a744:	3feec709 	.word	0x3feec709
 800a748:	dc3a03fd 	.word	0xdc3a03fd
 800a74c:	3feec709 	.word	0x3feec709
 800a750:	145b01f5 	.word	0x145b01f5
 800a754:	be3e2fe0 	.word	0xbe3e2fe0
 800a758:	7ff00000 	.word	0x7ff00000
 800a75c:	43400000 	.word	0x43400000
 800a760:	0003988e 	.word	0x0003988e
 800a764:	000bb679 	.word	0x000bb679
 800a768:	0800e0b0 	.word	0x0800e0b0
 800a76c:	3ff00000 	.word	0x3ff00000
 800a770:	40080000 	.word	0x40080000
 800a774:	0800e090 	.word	0x0800e090
 800a778:	0800e0a0 	.word	0x0800e0a0
 800a77c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a9e8 <__ieee754_pow+0x9f0>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	4630      	mov	r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	f7f5 fcf1 	bl	800016c <__adddf3>
 800a78a:	4642      	mov	r2, r8
 800a78c:	e9cd 0100 	strd	r0, r1, [sp]
 800a790:	464b      	mov	r3, r9
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 fce7 	bl	8000168 <__aeabi_dsub>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7a2:	f7f6 f929 	bl	80009f8 <__aeabi_dcmpgt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f47f ae09 	bne.w	800a3be <__ieee754_pow+0x3c6>
 800a7ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a7b0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a7b4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a7b8:	fa43 fa0a 	asr.w	sl, r3, sl
 800a7bc:	44da      	add	sl, fp
 800a7be:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a7c2:	489b      	ldr	r0, [pc, #620]	@ (800aa30 <__ieee754_pow+0xa38>)
 800a7c4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a7c8:	4108      	asrs	r0, r1
 800a7ca:	ea00 030a 	and.w	r3, r0, sl
 800a7ce:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a7d2:	f1c1 0114 	rsb	r1, r1, #20
 800a7d6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a7da:	4640      	mov	r0, r8
 800a7dc:	fa4a fa01 	asr.w	sl, sl, r1
 800a7e0:	f1bb 0f00 	cmp.w	fp, #0
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	f04f 0200 	mov.w	r2, #0
 800a7ea:	bfb8      	it	lt
 800a7ec:	f1ca 0a00 	rsblt	sl, sl, #0
 800a7f0:	f7f5 fcba 	bl	8000168 <__aeabi_dsub>
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	2400      	movs	r4, #0
 800a7fa:	4632      	mov	r2, r6
 800a7fc:	463b      	mov	r3, r7
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 fcb3 	bl	800016c <__adddf3>
 800a806:	a37a      	add	r3, pc, #488	@ (adr r3, 800a9f0 <__ieee754_pow+0x9f8>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	4620      	mov	r0, r4
 800a80e:	460d      	mov	r5, r1
 800a810:	f7f5 fe62 	bl	80004d8 <__aeabi_dmul>
 800a814:	4642      	mov	r2, r8
 800a816:	464b      	mov	r3, r9
 800a818:	e9cd 0100 	strd	r0, r1, [sp]
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f7f5 fca2 	bl	8000168 <__aeabi_dsub>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fc9c 	bl	8000168 <__aeabi_dsub>
 800a830:	a371      	add	r3, pc, #452	@ (adr r3, 800a9f8 <__ieee754_pow+0xa00>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fe4f 	bl	80004d8 <__aeabi_dmul>
 800a83a:	a371      	add	r3, pc, #452	@ (adr r3, 800aa00 <__ieee754_pow+0xa08>)
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	4680      	mov	r8, r0
 800a842:	4689      	mov	r9, r1
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f5 fe46 	bl	80004d8 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	4604      	mov	r4, r0
 800a85a:	460d      	mov	r5, r1
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a864:	f7f5 fc82 	bl	800016c <__adddf3>
 800a868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	f7f5 fc7a 	bl	8000168 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4620      	mov	r0, r4
 800a87a:	4629      	mov	r1, r5
 800a87c:	f7f5 fc74 	bl	8000168 <__aeabi_dsub>
 800a880:	4642      	mov	r2, r8
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	464b      	mov	r3, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f5 fe24 	bl	80004d8 <__aeabi_dmul>
 800a890:	a35d      	add	r3, pc, #372	@ (adr r3, 800aa08 <__ieee754_pow+0xa10>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	4604      	mov	r4, r0
 800a898:	460d      	mov	r5, r1
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	a35c      	add	r3, pc, #368	@ (adr r3, 800aa10 <__ieee754_pow+0xa18>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f7f5 fc60 	bl	8000168 <__aeabi_dsub>
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	f7f5 fe14 	bl	80004d8 <__aeabi_dmul>
 800a8b0:	a359      	add	r3, pc, #356	@ (adr r3, 800aa18 <__ieee754_pow+0xa20>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f7f5 fc59 	bl	800016c <__adddf3>
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	f7f5 fe0b 	bl	80004d8 <__aeabi_dmul>
 800a8c2:	a357      	add	r3, pc, #348	@ (adr r3, 800aa20 <__ieee754_pow+0xa28>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fc4e 	bl	8000168 <__aeabi_dsub>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	f7f5 fe02 	bl	80004d8 <__aeabi_dmul>
 800a8d4:	a354      	add	r3, pc, #336	@ (adr r3, 800aa28 <__ieee754_pow+0xa30>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fc47 	bl	800016c <__adddf3>
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	f7f5 fdf9 	bl	80004d8 <__aeabi_dmul>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	4649      	mov	r1, r9
 800a8ee:	f7f5 fc3b 	bl	8000168 <__aeabi_dsub>
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	f7f5 fdeb 	bl	80004d8 <__aeabi_dmul>
 800a902:	2200      	movs	r2, #0
 800a904:	e9cd 0100 	strd	r0, r1, [sp]
 800a908:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	f7f5 fc2a 	bl	8000168 <__aeabi_dsub>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a91c:	f7f5 ff06 	bl	800072c <__aeabi_ddiv>
 800a920:	4632      	mov	r2, r6
 800a922:	4604      	mov	r4, r0
 800a924:	460d      	mov	r5, r1
 800a926:	463b      	mov	r3, r7
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f5 fdd4 	bl	80004d8 <__aeabi_dmul>
 800a930:	4632      	mov	r2, r6
 800a932:	463b      	mov	r3, r7
 800a934:	f7f5 fc1a 	bl	800016c <__adddf3>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fc12 	bl	8000168 <__aeabi_dsub>
 800a944:	4642      	mov	r2, r8
 800a946:	464b      	mov	r3, r9
 800a948:	f7f5 fc0e 	bl	8000168 <__aeabi_dsub>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	2000      	movs	r0, #0
 800a952:	4938      	ldr	r1, [pc, #224]	@ (800aa34 <__ieee754_pow+0xa3c>)
 800a954:	f7f5 fc08 	bl	8000168 <__aeabi_dsub>
 800a958:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a95c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a960:	da2e      	bge.n	800a9c0 <__ieee754_pow+0x9c8>
 800a962:	4652      	mov	r2, sl
 800a964:	f000 fa04 	bl	800ad70 <scalbn>
 800a968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a96c:	f7ff bbed 	b.w	800a14a <__ieee754_pow+0x152>
 800a970:	4c31      	ldr	r4, [pc, #196]	@ (800aa38 <__ieee754_pow+0xa40>)
 800a972:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a976:	42a3      	cmp	r3, r4
 800a978:	d91a      	bls.n	800a9b0 <__ieee754_pow+0x9b8>
 800a97a:	4b30      	ldr	r3, [pc, #192]	@ (800aa3c <__ieee754_pow+0xa44>)
 800a97c:	440b      	add	r3, r1
 800a97e:	4303      	orrs	r3, r0
 800a980:	d009      	beq.n	800a996 <__ieee754_pow+0x99e>
 800a982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a986:	2200      	movs	r2, #0
 800a988:	2300      	movs	r3, #0
 800a98a:	f7f6 f817 	bl	80009bc <__aeabi_dcmplt>
 800a98e:	3800      	subs	r0, #0
 800a990:	bf18      	it	ne
 800a992:	2001      	movne	r0, #1
 800a994:	e444      	b.n	800a220 <__ieee754_pow+0x228>
 800a996:	4642      	mov	r2, r8
 800a998:	464b      	mov	r3, r9
 800a99a:	f7f5 fbe5 	bl	8000168 <__aeabi_dsub>
 800a99e:	4632      	mov	r2, r6
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	f7f6 f81f 	bl	80009e4 <__aeabi_dcmpge>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d1eb      	bne.n	800a982 <__ieee754_pow+0x98a>
 800a9aa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800aa40 <__ieee754_pow+0xa48>
 800a9ae:	e6fd      	b.n	800a7ac <__ieee754_pow+0x7b4>
 800a9b0:	469a      	mov	sl, r3
 800a9b2:	4b24      	ldr	r3, [pc, #144]	@ (800aa44 <__ieee754_pow+0xa4c>)
 800a9b4:	459a      	cmp	sl, r3
 800a9b6:	f63f aef9 	bhi.w	800a7ac <__ieee754_pow+0x7b4>
 800a9ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a9be:	e71b      	b.n	800a7f8 <__ieee754_pow+0x800>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	e7d1      	b.n	800a968 <__ieee754_pow+0x970>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	491b      	ldr	r1, [pc, #108]	@ (800aa34 <__ieee754_pow+0xa3c>)
 800a9c8:	f7ff bb34 	b.w	800a034 <__ieee754_pow+0x3c>
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	f7ff bb30 	b.w	800a034 <__ieee754_pow+0x3c>
 800a9d4:	4650      	mov	r0, sl
 800a9d6:	4659      	mov	r1, fp
 800a9d8:	f7ff bb2c 	b.w	800a034 <__ieee754_pow+0x3c>
 800a9dc:	460c      	mov	r4, r1
 800a9de:	f7ff bb79 	b.w	800a0d4 <__ieee754_pow+0xdc>
 800a9e2:	2400      	movs	r4, #0
 800a9e4:	f7ff bb64 	b.w	800a0b0 <__ieee754_pow+0xb8>
 800a9e8:	652b82fe 	.word	0x652b82fe
 800a9ec:	3c971547 	.word	0x3c971547
 800a9f0:	00000000 	.word	0x00000000
 800a9f4:	3fe62e43 	.word	0x3fe62e43
 800a9f8:	fefa39ef 	.word	0xfefa39ef
 800a9fc:	3fe62e42 	.word	0x3fe62e42
 800aa00:	0ca86c39 	.word	0x0ca86c39
 800aa04:	be205c61 	.word	0xbe205c61
 800aa08:	72bea4d0 	.word	0x72bea4d0
 800aa0c:	3e663769 	.word	0x3e663769
 800aa10:	c5d26bf1 	.word	0xc5d26bf1
 800aa14:	3ebbbd41 	.word	0x3ebbbd41
 800aa18:	af25de2c 	.word	0xaf25de2c
 800aa1c:	3f11566a 	.word	0x3f11566a
 800aa20:	16bebd93 	.word	0x16bebd93
 800aa24:	3f66c16c 	.word	0x3f66c16c
 800aa28:	5555553e 	.word	0x5555553e
 800aa2c:	3fc55555 	.word	0x3fc55555
 800aa30:	fff00000 	.word	0xfff00000
 800aa34:	3ff00000 	.word	0x3ff00000
 800aa38:	4090cbff 	.word	0x4090cbff
 800aa3c:	3f6f3400 	.word	0x3f6f3400
 800aa40:	4090cc00 	.word	0x4090cc00
 800aa44:	3fe00000 	.word	0x3fe00000

0800aa48 <atan>:
 800aa48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4bbc      	ldr	r3, [pc, #752]	@ (800ad40 <atan+0x2f8>)
 800aa4e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800aa52:	429e      	cmp	r6, r3
 800aa54:	4604      	mov	r4, r0
 800aa56:	460d      	mov	r5, r1
 800aa58:	468b      	mov	fp, r1
 800aa5a:	d918      	bls.n	800aa8e <atan+0x46>
 800aa5c:	4bb9      	ldr	r3, [pc, #740]	@ (800ad44 <atan+0x2fc>)
 800aa5e:	429e      	cmp	r6, r3
 800aa60:	d801      	bhi.n	800aa66 <atan+0x1e>
 800aa62:	d109      	bne.n	800aa78 <atan+0x30>
 800aa64:	b140      	cbz	r0, 800aa78 <atan+0x30>
 800aa66:	4622      	mov	r2, r4
 800aa68:	462b      	mov	r3, r5
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f5 fb7d 	bl	800016c <__adddf3>
 800aa72:	4604      	mov	r4, r0
 800aa74:	460d      	mov	r5, r1
 800aa76:	e006      	b.n	800aa86 <atan+0x3e>
 800aa78:	f1bb 0f00 	cmp.w	fp, #0
 800aa7c:	f340 8123 	ble.w	800acc6 <atan+0x27e>
 800aa80:	a593      	add	r5, pc, #588	@ (adr r5, 800acd0 <atan+0x288>)
 800aa82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	4bae      	ldr	r3, [pc, #696]	@ (800ad48 <atan+0x300>)
 800aa90:	429e      	cmp	r6, r3
 800aa92:	d811      	bhi.n	800aab8 <atan+0x70>
 800aa94:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800aa98:	429e      	cmp	r6, r3
 800aa9a:	d80a      	bhi.n	800aab2 <atan+0x6a>
 800aa9c:	a38e      	add	r3, pc, #568	@ (adr r3, 800acd8 <atan+0x290>)
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	f7f5 fb63 	bl	800016c <__adddf3>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	4ba8      	ldr	r3, [pc, #672]	@ (800ad4c <atan+0x304>)
 800aaaa:	f7f5 ffa5 	bl	80009f8 <__aeabi_dcmpgt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d1e9      	bne.n	800aa86 <atan+0x3e>
 800aab2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aab6:	e027      	b.n	800ab08 <atan+0xc0>
 800aab8:	f000 f956 	bl	800ad68 <fabs>
 800aabc:	4ba4      	ldr	r3, [pc, #656]	@ (800ad50 <atan+0x308>)
 800aabe:	4604      	mov	r4, r0
 800aac0:	429e      	cmp	r6, r3
 800aac2:	460d      	mov	r5, r1
 800aac4:	f200 80b8 	bhi.w	800ac38 <atan+0x1f0>
 800aac8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800aacc:	429e      	cmp	r6, r3
 800aace:	f200 809c 	bhi.w	800ac0a <atan+0x1c2>
 800aad2:	4602      	mov	r2, r0
 800aad4:	460b      	mov	r3, r1
 800aad6:	f7f5 fb49 	bl	800016c <__adddf3>
 800aada:	2200      	movs	r2, #0
 800aadc:	4b9b      	ldr	r3, [pc, #620]	@ (800ad4c <atan+0x304>)
 800aade:	f7f5 fb43 	bl	8000168 <__aeabi_dsub>
 800aae2:	2200      	movs	r2, #0
 800aae4:	4606      	mov	r6, r0
 800aae6:	460f      	mov	r7, r1
 800aae8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aaec:	4620      	mov	r0, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7f5 fb3c 	bl	800016c <__adddf3>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 fe16 	bl	800072c <__aeabi_ddiv>
 800ab00:	f04f 0a00 	mov.w	sl, #0
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	4622      	mov	r2, r4
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fce2 	bl	80004d8 <__aeabi_dmul>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4689      	mov	r9, r1
 800ab1c:	f7f5 fcdc 	bl	80004d8 <__aeabi_dmul>
 800ab20:	a36f      	add	r3, pc, #444	@ (adr r3, 800ace0 <atan+0x298>)
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	4606      	mov	r6, r0
 800ab28:	460f      	mov	r7, r1
 800ab2a:	f7f5 fcd5 	bl	80004d8 <__aeabi_dmul>
 800ab2e:	a36e      	add	r3, pc, #440	@ (adr r3, 800ace8 <atan+0x2a0>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 fb1a 	bl	800016c <__adddf3>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	f7f5 fccc 	bl	80004d8 <__aeabi_dmul>
 800ab40:	a36b      	add	r3, pc, #428	@ (adr r3, 800acf0 <atan+0x2a8>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f7f5 fb11 	bl	800016c <__adddf3>
 800ab4a:	4632      	mov	r2, r6
 800ab4c:	463b      	mov	r3, r7
 800ab4e:	f7f5 fcc3 	bl	80004d8 <__aeabi_dmul>
 800ab52:	a369      	add	r3, pc, #420	@ (adr r3, 800acf8 <atan+0x2b0>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	f7f5 fb08 	bl	800016c <__adddf3>
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	463b      	mov	r3, r7
 800ab60:	f7f5 fcba 	bl	80004d8 <__aeabi_dmul>
 800ab64:	a366      	add	r3, pc, #408	@ (adr r3, 800ad00 <atan+0x2b8>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	f7f5 faff 	bl	800016c <__adddf3>
 800ab6e:	4632      	mov	r2, r6
 800ab70:	463b      	mov	r3, r7
 800ab72:	f7f5 fcb1 	bl	80004d8 <__aeabi_dmul>
 800ab76:	a364      	add	r3, pc, #400	@ (adr r3, 800ad08 <atan+0x2c0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 faf6 	bl	800016c <__adddf3>
 800ab80:	4642      	mov	r2, r8
 800ab82:	464b      	mov	r3, r9
 800ab84:	f7f5 fca8 	bl	80004d8 <__aeabi_dmul>
 800ab88:	a361      	add	r3, pc, #388	@ (adr r3, 800ad10 <atan+0x2c8>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	4680      	mov	r8, r0
 800ab90:	4689      	mov	r9, r1
 800ab92:	4630      	mov	r0, r6
 800ab94:	4639      	mov	r1, r7
 800ab96:	f7f5 fc9f 	bl	80004d8 <__aeabi_dmul>
 800ab9a:	a35f      	add	r3, pc, #380	@ (adr r3, 800ad18 <atan+0x2d0>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fae2 	bl	8000168 <__aeabi_dsub>
 800aba4:	4632      	mov	r2, r6
 800aba6:	463b      	mov	r3, r7
 800aba8:	f7f5 fc96 	bl	80004d8 <__aeabi_dmul>
 800abac:	a35c      	add	r3, pc, #368	@ (adr r3, 800ad20 <atan+0x2d8>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fad9 	bl	8000168 <__aeabi_dsub>
 800abb6:	4632      	mov	r2, r6
 800abb8:	463b      	mov	r3, r7
 800abba:	f7f5 fc8d 	bl	80004d8 <__aeabi_dmul>
 800abbe:	a35a      	add	r3, pc, #360	@ (adr r3, 800ad28 <atan+0x2e0>)
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f7f5 fad0 	bl	8000168 <__aeabi_dsub>
 800abc8:	4632      	mov	r2, r6
 800abca:	463b      	mov	r3, r7
 800abcc:	f7f5 fc84 	bl	80004d8 <__aeabi_dmul>
 800abd0:	a357      	add	r3, pc, #348	@ (adr r3, 800ad30 <atan+0x2e8>)
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f7f5 fac7 	bl	8000168 <__aeabi_dsub>
 800abda:	4632      	mov	r2, r6
 800abdc:	463b      	mov	r3, r7
 800abde:	f7f5 fc7b 	bl	80004d8 <__aeabi_dmul>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	4640      	mov	r0, r8
 800abe8:	4649      	mov	r1, r9
 800abea:	f7f5 fabf 	bl	800016c <__adddf3>
 800abee:	4622      	mov	r2, r4
 800abf0:	462b      	mov	r3, r5
 800abf2:	f7f5 fc71 	bl	80004d8 <__aeabi_dmul>
 800abf6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	d144      	bne.n	800ac8a <atan+0x242>
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 fab0 	bl	8000168 <__aeabi_dsub>
 800ac08:	e733      	b.n	800aa72 <atan+0x2a>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	4b4f      	ldr	r3, [pc, #316]	@ (800ad4c <atan+0x304>)
 800ac0e:	f7f5 faab 	bl	8000168 <__aeabi_dsub>
 800ac12:	2200      	movs	r2, #0
 800ac14:	4606      	mov	r6, r0
 800ac16:	460f      	mov	r7, r1
 800ac18:	4620      	mov	r0, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4b4b      	ldr	r3, [pc, #300]	@ (800ad4c <atan+0x304>)
 800ac1e:	f7f5 faa5 	bl	800016c <__adddf3>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 fd7f 	bl	800072c <__aeabi_ddiv>
 800ac2e:	f04f 0a01 	mov.w	sl, #1
 800ac32:	4604      	mov	r4, r0
 800ac34:	460d      	mov	r5, r1
 800ac36:	e767      	b.n	800ab08 <atan+0xc0>
 800ac38:	4b46      	ldr	r3, [pc, #280]	@ (800ad54 <atan+0x30c>)
 800ac3a:	429e      	cmp	r6, r3
 800ac3c:	d21a      	bcs.n	800ac74 <atan+0x22c>
 800ac3e:	2200      	movs	r2, #0
 800ac40:	4b45      	ldr	r3, [pc, #276]	@ (800ad58 <atan+0x310>)
 800ac42:	f7f5 fa91 	bl	8000168 <__aeabi_dsub>
 800ac46:	2200      	movs	r2, #0
 800ac48:	4606      	mov	r6, r0
 800ac4a:	460f      	mov	r7, r1
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4b41      	ldr	r3, [pc, #260]	@ (800ad58 <atan+0x310>)
 800ac52:	f7f5 fc41 	bl	80004d8 <__aeabi_dmul>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4b3c      	ldr	r3, [pc, #240]	@ (800ad4c <atan+0x304>)
 800ac5a:	f7f5 fa87 	bl	800016c <__adddf3>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4630      	mov	r0, r6
 800ac64:	4639      	mov	r1, r7
 800ac66:	f7f5 fd61 	bl	800072c <__aeabi_ddiv>
 800ac6a:	f04f 0a02 	mov.w	sl, #2
 800ac6e:	4604      	mov	r4, r0
 800ac70:	460d      	mov	r5, r1
 800ac72:	e749      	b.n	800ab08 <atan+0xc0>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	2000      	movs	r0, #0
 800ac7a:	4938      	ldr	r1, [pc, #224]	@ (800ad5c <atan+0x314>)
 800ac7c:	f7f5 fd56 	bl	800072c <__aeabi_ddiv>
 800ac80:	f04f 0a03 	mov.w	sl, #3
 800ac84:	4604      	mov	r4, r0
 800ac86:	460d      	mov	r5, r1
 800ac88:	e73e      	b.n	800ab08 <atan+0xc0>
 800ac8a:	4b35      	ldr	r3, [pc, #212]	@ (800ad60 <atan+0x318>)
 800ac8c:	4e35      	ldr	r6, [pc, #212]	@ (800ad64 <atan+0x31c>)
 800ac8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	f7f5 fa67 	bl	8000168 <__aeabi_dsub>
 800ac9a:	4622      	mov	r2, r4
 800ac9c:	462b      	mov	r3, r5
 800ac9e:	f7f5 fa63 	bl	8000168 <__aeabi_dsub>
 800aca2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800acae:	f7f5 fa5b 	bl	8000168 <__aeabi_dsub>
 800acb2:	f1bb 0f00 	cmp.w	fp, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	f6bf aee4 	bge.w	800aa86 <atan+0x3e>
 800acbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acc2:	461d      	mov	r5, r3
 800acc4:	e6df      	b.n	800aa86 <atan+0x3e>
 800acc6:	a51c      	add	r5, pc, #112	@ (adr r5, 800ad38 <atan+0x2f0>)
 800acc8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800accc:	e6db      	b.n	800aa86 <atan+0x3e>
 800acce:	bf00      	nop
 800acd0:	54442d18 	.word	0x54442d18
 800acd4:	3ff921fb 	.word	0x3ff921fb
 800acd8:	8800759c 	.word	0x8800759c
 800acdc:	7e37e43c 	.word	0x7e37e43c
 800ace0:	e322da11 	.word	0xe322da11
 800ace4:	3f90ad3a 	.word	0x3f90ad3a
 800ace8:	24760deb 	.word	0x24760deb
 800acec:	3fa97b4b 	.word	0x3fa97b4b
 800acf0:	a0d03d51 	.word	0xa0d03d51
 800acf4:	3fb10d66 	.word	0x3fb10d66
 800acf8:	c54c206e 	.word	0xc54c206e
 800acfc:	3fb745cd 	.word	0x3fb745cd
 800ad00:	920083ff 	.word	0x920083ff
 800ad04:	3fc24924 	.word	0x3fc24924
 800ad08:	5555550d 	.word	0x5555550d
 800ad0c:	3fd55555 	.word	0x3fd55555
 800ad10:	2c6a6c2f 	.word	0x2c6a6c2f
 800ad14:	bfa2b444 	.word	0xbfa2b444
 800ad18:	52defd9a 	.word	0x52defd9a
 800ad1c:	3fadde2d 	.word	0x3fadde2d
 800ad20:	af749a6d 	.word	0xaf749a6d
 800ad24:	3fb3b0f2 	.word	0x3fb3b0f2
 800ad28:	fe231671 	.word	0xfe231671
 800ad2c:	3fbc71c6 	.word	0x3fbc71c6
 800ad30:	9998ebc4 	.word	0x9998ebc4
 800ad34:	3fc99999 	.word	0x3fc99999
 800ad38:	54442d18 	.word	0x54442d18
 800ad3c:	bff921fb 	.word	0xbff921fb
 800ad40:	440fffff 	.word	0x440fffff
 800ad44:	7ff00000 	.word	0x7ff00000
 800ad48:	3fdbffff 	.word	0x3fdbffff
 800ad4c:	3ff00000 	.word	0x3ff00000
 800ad50:	3ff2ffff 	.word	0x3ff2ffff
 800ad54:	40038000 	.word	0x40038000
 800ad58:	3ff80000 	.word	0x3ff80000
 800ad5c:	bff00000 	.word	0xbff00000
 800ad60:	0800e0c0 	.word	0x0800e0c0
 800ad64:	0800e0e0 	.word	0x0800e0e0

0800ad68 <fabs>:
 800ad68:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4770      	bx	lr

0800ad70 <scalbn>:
 800ad70:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800ad74:	4616      	mov	r6, r2
 800ad76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad7a:	4683      	mov	fp, r0
 800ad7c:	468c      	mov	ip, r1
 800ad7e:	460b      	mov	r3, r1
 800ad80:	b982      	cbnz	r2, 800ada4 <scalbn+0x34>
 800ad82:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad86:	4303      	orrs	r3, r0
 800ad88:	d039      	beq.n	800adfe <scalbn+0x8e>
 800ad8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ae48 <scalbn+0xd8>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f7f5 fba3 	bl	80004d8 <__aeabi_dmul>
 800ad92:	4b2e      	ldr	r3, [pc, #184]	@ (800ae4c <scalbn+0xdc>)
 800ad94:	4683      	mov	fp, r0
 800ad96:	429e      	cmp	r6, r3
 800ad98:	468c      	mov	ip, r1
 800ad9a:	da0d      	bge.n	800adb8 <scalbn+0x48>
 800ad9c:	a326      	add	r3, pc, #152	@ (adr r3, 800ae38 <scalbn+0xc8>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	e01b      	b.n	800addc <scalbn+0x6c>
 800ada4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ada8:	42ba      	cmp	r2, r7
 800adaa:	d109      	bne.n	800adc0 <scalbn+0x50>
 800adac:	4602      	mov	r2, r0
 800adae:	f7f5 f9dd 	bl	800016c <__adddf3>
 800adb2:	4683      	mov	fp, r0
 800adb4:	468c      	mov	ip, r1
 800adb6:	e022      	b.n	800adfe <scalbn+0x8e>
 800adb8:	460b      	mov	r3, r1
 800adba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adbe:	3a36      	subs	r2, #54	@ 0x36
 800adc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800adc4:	428e      	cmp	r6, r1
 800adc6:	dd0c      	ble.n	800ade2 <scalbn+0x72>
 800adc8:	a31d      	add	r3, pc, #116	@ (adr r3, 800ae40 <scalbn+0xd0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	461c      	mov	r4, r3
 800add0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800add4:	f361 74df 	bfi	r4, r1, #31, #1
 800add8:	4621      	mov	r1, r4
 800adda:	481d      	ldr	r0, [pc, #116]	@ (800ae50 <scalbn+0xe0>)
 800addc:	f7f5 fb7c 	bl	80004d8 <__aeabi_dmul>
 800ade0:	e7e7      	b.n	800adb2 <scalbn+0x42>
 800ade2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ade6:	4432      	add	r2, r6
 800ade8:	428a      	cmp	r2, r1
 800adea:	dced      	bgt.n	800adc8 <scalbn+0x58>
 800adec:	2a00      	cmp	r2, #0
 800adee:	dd0a      	ble.n	800ae06 <scalbn+0x96>
 800adf0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800adf4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800adf8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800adfc:	46ac      	mov	ip, r5
 800adfe:	4658      	mov	r0, fp
 800ae00:	4661      	mov	r1, ip
 800ae02:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ae06:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ae0a:	da09      	bge.n	800ae20 <scalbn+0xb0>
 800ae0c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ae10:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ae14:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ae18:	480e      	ldr	r0, [pc, #56]	@ (800ae54 <scalbn+0xe4>)
 800ae1a:	f041 011f 	orr.w	r1, r1, #31
 800ae1e:	e7bd      	b.n	800ad9c <scalbn+0x2c>
 800ae20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae24:	3236      	adds	r2, #54	@ 0x36
 800ae26:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae2e:	4658      	mov	r0, fp
 800ae30:	4629      	mov	r1, r5
 800ae32:	2200      	movs	r2, #0
 800ae34:	4b08      	ldr	r3, [pc, #32]	@ (800ae58 <scalbn+0xe8>)
 800ae36:	e7d1      	b.n	800addc <scalbn+0x6c>
 800ae38:	c2f8f359 	.word	0xc2f8f359
 800ae3c:	01a56e1f 	.word	0x01a56e1f
 800ae40:	8800759c 	.word	0x8800759c
 800ae44:	7e37e43c 	.word	0x7e37e43c
 800ae48:	43500000 	.word	0x43500000
 800ae4c:	ffff3cb0 	.word	0xffff3cb0
 800ae50:	8800759c 	.word	0x8800759c
 800ae54:	c2f8f359 	.word	0xc2f8f359
 800ae58:	3c900000 	.word	0x3c900000

0800ae5c <with_errno>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	4616      	mov	r6, r2
 800ae64:	f001 f872 	bl	800bf4c <__errno>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	6006      	str	r6, [r0, #0]
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}

0800ae70 <xflow>:
 800ae70:	b513      	push	{r0, r1, r4, lr}
 800ae72:	4604      	mov	r4, r0
 800ae74:	4619      	mov	r1, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	b10c      	cbz	r4, 800ae7e <xflow+0xe>
 800ae7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ae7e:	e9cd 2300 	strd	r2, r3, [sp]
 800ae82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae86:	f7f5 fb27 	bl	80004d8 <__aeabi_dmul>
 800ae8a:	2222      	movs	r2, #34	@ 0x22
 800ae8c:	b002      	add	sp, #8
 800ae8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae92:	f7ff bfe3 	b.w	800ae5c <with_errno>

0800ae96 <__math_uflow>:
 800ae96:	2200      	movs	r2, #0
 800ae98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae9c:	f7ff bfe8 	b.w	800ae70 <xflow>

0800aea0 <__math_oflow>:
 800aea0:	2200      	movs	r2, #0
 800aea2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800aea6:	f7ff bfe3 	b.w	800ae70 <xflow>
	...

0800aeac <_free_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4605      	mov	r5, r0
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	d040      	beq.n	800af36 <_free_r+0x8a>
 800aeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb8:	1f0c      	subs	r4, r1, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfb8      	it	lt
 800aebe:	18e4      	addlt	r4, r4, r3
 800aec0:	f000 f8e6 	bl	800b090 <__malloc_lock>
 800aec4:	4a1c      	ldr	r2, [pc, #112]	@ (800af38 <_free_r+0x8c>)
 800aec6:	6813      	ldr	r3, [r2, #0]
 800aec8:	b933      	cbnz	r3, 800aed8 <_free_r+0x2c>
 800aeca:	6063      	str	r3, [r4, #4]
 800aecc:	6014      	str	r4, [r2, #0]
 800aece:	4628      	mov	r0, r5
 800aed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aed4:	f000 b8e2 	b.w	800b09c <__malloc_unlock>
 800aed8:	42a3      	cmp	r3, r4
 800aeda:	d908      	bls.n	800aeee <_free_r+0x42>
 800aedc:	6820      	ldr	r0, [r4, #0]
 800aede:	1821      	adds	r1, r4, r0
 800aee0:	428b      	cmp	r3, r1
 800aee2:	bf01      	itttt	eq
 800aee4:	6819      	ldreq	r1, [r3, #0]
 800aee6:	685b      	ldreq	r3, [r3, #4]
 800aee8:	1809      	addeq	r1, r1, r0
 800aeea:	6021      	streq	r1, [r4, #0]
 800aeec:	e7ed      	b.n	800aeca <_free_r+0x1e>
 800aeee:	461a      	mov	r2, r3
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	b10b      	cbz	r3, 800aef8 <_free_r+0x4c>
 800aef4:	42a3      	cmp	r3, r4
 800aef6:	d9fa      	bls.n	800aeee <_free_r+0x42>
 800aef8:	6811      	ldr	r1, [r2, #0]
 800aefa:	1850      	adds	r0, r2, r1
 800aefc:	42a0      	cmp	r0, r4
 800aefe:	d10b      	bne.n	800af18 <_free_r+0x6c>
 800af00:	6820      	ldr	r0, [r4, #0]
 800af02:	4401      	add	r1, r0
 800af04:	1850      	adds	r0, r2, r1
 800af06:	4283      	cmp	r3, r0
 800af08:	6011      	str	r1, [r2, #0]
 800af0a:	d1e0      	bne.n	800aece <_free_r+0x22>
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	4408      	add	r0, r1
 800af12:	6010      	str	r0, [r2, #0]
 800af14:	6053      	str	r3, [r2, #4]
 800af16:	e7da      	b.n	800aece <_free_r+0x22>
 800af18:	d902      	bls.n	800af20 <_free_r+0x74>
 800af1a:	230c      	movs	r3, #12
 800af1c:	602b      	str	r3, [r5, #0]
 800af1e:	e7d6      	b.n	800aece <_free_r+0x22>
 800af20:	6820      	ldr	r0, [r4, #0]
 800af22:	1821      	adds	r1, r4, r0
 800af24:	428b      	cmp	r3, r1
 800af26:	bf01      	itttt	eq
 800af28:	6819      	ldreq	r1, [r3, #0]
 800af2a:	685b      	ldreq	r3, [r3, #4]
 800af2c:	1809      	addeq	r1, r1, r0
 800af2e:	6021      	streq	r1, [r4, #0]
 800af30:	6063      	str	r3, [r4, #4]
 800af32:	6054      	str	r4, [r2, #4]
 800af34:	e7cb      	b.n	800aece <_free_r+0x22>
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	200039a8 	.word	0x200039a8

0800af3c <malloc>:
 800af3c:	4b02      	ldr	r3, [pc, #8]	@ (800af48 <malloc+0xc>)
 800af3e:	4601      	mov	r1, r0
 800af40:	6818      	ldr	r0, [r3, #0]
 800af42:	f000 b825 	b.w	800af90 <_malloc_r>
 800af46:	bf00      	nop
 800af48:	2000002c 	.word	0x2000002c

0800af4c <sbrk_aligned>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4e0f      	ldr	r6, [pc, #60]	@ (800af8c <sbrk_aligned+0x40>)
 800af50:	460c      	mov	r4, r1
 800af52:	6831      	ldr	r1, [r6, #0]
 800af54:	4605      	mov	r5, r0
 800af56:	b911      	cbnz	r1, 800af5e <sbrk_aligned+0x12>
 800af58:	f000 ffd6 	bl	800bf08 <_sbrk_r>
 800af5c:	6030      	str	r0, [r6, #0]
 800af5e:	4621      	mov	r1, r4
 800af60:	4628      	mov	r0, r5
 800af62:	f000 ffd1 	bl	800bf08 <_sbrk_r>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d103      	bne.n	800af72 <sbrk_aligned+0x26>
 800af6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800af6e:	4620      	mov	r0, r4
 800af70:	bd70      	pop	{r4, r5, r6, pc}
 800af72:	1cc4      	adds	r4, r0, #3
 800af74:	f024 0403 	bic.w	r4, r4, #3
 800af78:	42a0      	cmp	r0, r4
 800af7a:	d0f8      	beq.n	800af6e <sbrk_aligned+0x22>
 800af7c:	1a21      	subs	r1, r4, r0
 800af7e:	4628      	mov	r0, r5
 800af80:	f000 ffc2 	bl	800bf08 <_sbrk_r>
 800af84:	3001      	adds	r0, #1
 800af86:	d1f2      	bne.n	800af6e <sbrk_aligned+0x22>
 800af88:	e7ef      	b.n	800af6a <sbrk_aligned+0x1e>
 800af8a:	bf00      	nop
 800af8c:	200039a4 	.word	0x200039a4

0800af90 <_malloc_r>:
 800af90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af94:	1ccd      	adds	r5, r1, #3
 800af96:	f025 0503 	bic.w	r5, r5, #3
 800af9a:	3508      	adds	r5, #8
 800af9c:	2d0c      	cmp	r5, #12
 800af9e:	bf38      	it	cc
 800afa0:	250c      	movcc	r5, #12
 800afa2:	2d00      	cmp	r5, #0
 800afa4:	4606      	mov	r6, r0
 800afa6:	db01      	blt.n	800afac <_malloc_r+0x1c>
 800afa8:	42a9      	cmp	r1, r5
 800afaa:	d904      	bls.n	800afb6 <_malloc_r+0x26>
 800afac:	230c      	movs	r3, #12
 800afae:	6033      	str	r3, [r6, #0]
 800afb0:	2000      	movs	r0, #0
 800afb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b08c <_malloc_r+0xfc>
 800afba:	f000 f869 	bl	800b090 <__malloc_lock>
 800afbe:	f8d8 3000 	ldr.w	r3, [r8]
 800afc2:	461c      	mov	r4, r3
 800afc4:	bb44      	cbnz	r4, 800b018 <_malloc_r+0x88>
 800afc6:	4629      	mov	r1, r5
 800afc8:	4630      	mov	r0, r6
 800afca:	f7ff ffbf 	bl	800af4c <sbrk_aligned>
 800afce:	1c43      	adds	r3, r0, #1
 800afd0:	4604      	mov	r4, r0
 800afd2:	d158      	bne.n	800b086 <_malloc_r+0xf6>
 800afd4:	f8d8 4000 	ldr.w	r4, [r8]
 800afd8:	4627      	mov	r7, r4
 800afda:	2f00      	cmp	r7, #0
 800afdc:	d143      	bne.n	800b066 <_malloc_r+0xd6>
 800afde:	2c00      	cmp	r4, #0
 800afe0:	d04b      	beq.n	800b07a <_malloc_r+0xea>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	4639      	mov	r1, r7
 800afe6:	4630      	mov	r0, r6
 800afe8:	eb04 0903 	add.w	r9, r4, r3
 800afec:	f000 ff8c 	bl	800bf08 <_sbrk_r>
 800aff0:	4581      	cmp	r9, r0
 800aff2:	d142      	bne.n	800b07a <_malloc_r+0xea>
 800aff4:	6821      	ldr	r1, [r4, #0]
 800aff6:	4630      	mov	r0, r6
 800aff8:	1a6d      	subs	r5, r5, r1
 800affa:	4629      	mov	r1, r5
 800affc:	f7ff ffa6 	bl	800af4c <sbrk_aligned>
 800b000:	3001      	adds	r0, #1
 800b002:	d03a      	beq.n	800b07a <_malloc_r+0xea>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	442b      	add	r3, r5
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	f8d8 3000 	ldr.w	r3, [r8]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	bb62      	cbnz	r2, 800b06c <_malloc_r+0xdc>
 800b012:	f8c8 7000 	str.w	r7, [r8]
 800b016:	e00f      	b.n	800b038 <_malloc_r+0xa8>
 800b018:	6822      	ldr	r2, [r4, #0]
 800b01a:	1b52      	subs	r2, r2, r5
 800b01c:	d420      	bmi.n	800b060 <_malloc_r+0xd0>
 800b01e:	2a0b      	cmp	r2, #11
 800b020:	d917      	bls.n	800b052 <_malloc_r+0xc2>
 800b022:	1961      	adds	r1, r4, r5
 800b024:	42a3      	cmp	r3, r4
 800b026:	6025      	str	r5, [r4, #0]
 800b028:	bf18      	it	ne
 800b02a:	6059      	strne	r1, [r3, #4]
 800b02c:	6863      	ldr	r3, [r4, #4]
 800b02e:	bf08      	it	eq
 800b030:	f8c8 1000 	streq.w	r1, [r8]
 800b034:	5162      	str	r2, [r4, r5]
 800b036:	604b      	str	r3, [r1, #4]
 800b038:	4630      	mov	r0, r6
 800b03a:	f000 f82f 	bl	800b09c <__malloc_unlock>
 800b03e:	f104 000b 	add.w	r0, r4, #11
 800b042:	1d23      	adds	r3, r4, #4
 800b044:	f020 0007 	bic.w	r0, r0, #7
 800b048:	1ac2      	subs	r2, r0, r3
 800b04a:	bf1c      	itt	ne
 800b04c:	1a1b      	subne	r3, r3, r0
 800b04e:	50a3      	strne	r3, [r4, r2]
 800b050:	e7af      	b.n	800afb2 <_malloc_r+0x22>
 800b052:	6862      	ldr	r2, [r4, #4]
 800b054:	42a3      	cmp	r3, r4
 800b056:	bf0c      	ite	eq
 800b058:	f8c8 2000 	streq.w	r2, [r8]
 800b05c:	605a      	strne	r2, [r3, #4]
 800b05e:	e7eb      	b.n	800b038 <_malloc_r+0xa8>
 800b060:	4623      	mov	r3, r4
 800b062:	6864      	ldr	r4, [r4, #4]
 800b064:	e7ae      	b.n	800afc4 <_malloc_r+0x34>
 800b066:	463c      	mov	r4, r7
 800b068:	687f      	ldr	r7, [r7, #4]
 800b06a:	e7b6      	b.n	800afda <_malloc_r+0x4a>
 800b06c:	461a      	mov	r2, r3
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	42a3      	cmp	r3, r4
 800b072:	d1fb      	bne.n	800b06c <_malloc_r+0xdc>
 800b074:	2300      	movs	r3, #0
 800b076:	6053      	str	r3, [r2, #4]
 800b078:	e7de      	b.n	800b038 <_malloc_r+0xa8>
 800b07a:	230c      	movs	r3, #12
 800b07c:	4630      	mov	r0, r6
 800b07e:	6033      	str	r3, [r6, #0]
 800b080:	f000 f80c 	bl	800b09c <__malloc_unlock>
 800b084:	e794      	b.n	800afb0 <_malloc_r+0x20>
 800b086:	6005      	str	r5, [r0, #0]
 800b088:	e7d6      	b.n	800b038 <_malloc_r+0xa8>
 800b08a:	bf00      	nop
 800b08c:	200039a8 	.word	0x200039a8

0800b090 <__malloc_lock>:
 800b090:	4801      	ldr	r0, [pc, #4]	@ (800b098 <__malloc_lock+0x8>)
 800b092:	f7f7 b9f1 	b.w	8002478 <__retarget_lock_acquire_recursive>
 800b096:	bf00      	nop
 800b098:	200003ac 	.word	0x200003ac

0800b09c <__malloc_unlock>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__malloc_unlock+0x8>)
 800b09e:	f7f7 ba00 	b.w	80024a2 <__retarget_lock_release_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	200003ac 	.word	0x200003ac

0800b0a8 <__cvt>:
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ae:	461d      	mov	r5, r3
 800b0b0:	bfbb      	ittet	lt
 800b0b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b0b6:	461d      	movlt	r5, r3
 800b0b8:	2300      	movge	r3, #0
 800b0ba:	232d      	movlt	r3, #45	@ 0x2d
 800b0bc:	b088      	sub	sp, #32
 800b0be:	4614      	mov	r4, r2
 800b0c0:	bfb8      	it	lt
 800b0c2:	4614      	movlt	r4, r2
 800b0c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b0c8:	7013      	strb	r3, [r2, #0]
 800b0ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b0d0:	f023 0820 	bic.w	r8, r3, #32
 800b0d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0d8:	d005      	beq.n	800b0e6 <__cvt+0x3e>
 800b0da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b0de:	d100      	bne.n	800b0e2 <__cvt+0x3a>
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e000      	b.n	800b0e8 <__cvt+0x40>
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	aa07      	add	r2, sp, #28
 800b0ea:	9204      	str	r2, [sp, #16]
 800b0ec:	aa06      	add	r2, sp, #24
 800b0ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b0f2:	e9cd 3600 	strd	r3, r6, [sp]
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	462b      	mov	r3, r5
 800b0fa:	f000 fff5 	bl	800c0e8 <_dtoa_r>
 800b0fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b102:	4607      	mov	r7, r0
 800b104:	d119      	bne.n	800b13a <__cvt+0x92>
 800b106:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b108:	07db      	lsls	r3, r3, #31
 800b10a:	d50e      	bpl.n	800b12a <__cvt+0x82>
 800b10c:	eb00 0906 	add.w	r9, r0, r6
 800b110:	2200      	movs	r2, #0
 800b112:	2300      	movs	r3, #0
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800b11c:	b108      	cbz	r0, 800b122 <__cvt+0x7a>
 800b11e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b122:	2230      	movs	r2, #48	@ 0x30
 800b124:	9b07      	ldr	r3, [sp, #28]
 800b126:	454b      	cmp	r3, r9
 800b128:	d31e      	bcc.n	800b168 <__cvt+0xc0>
 800b12a:	4638      	mov	r0, r7
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b130:	1bdb      	subs	r3, r3, r7
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	b008      	add	sp, #32
 800b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b13e:	eb00 0906 	add.w	r9, r0, r6
 800b142:	d1e5      	bne.n	800b110 <__cvt+0x68>
 800b144:	7803      	ldrb	r3, [r0, #0]
 800b146:	2b30      	cmp	r3, #48	@ 0x30
 800b148:	d10a      	bne.n	800b160 <__cvt+0xb8>
 800b14a:	2200      	movs	r2, #0
 800b14c:	2300      	movs	r3, #0
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fc29 	bl	80009a8 <__aeabi_dcmpeq>
 800b156:	b918      	cbnz	r0, 800b160 <__cvt+0xb8>
 800b158:	f1c6 0601 	rsb	r6, r6, #1
 800b15c:	f8ca 6000 	str.w	r6, [sl]
 800b160:	f8da 3000 	ldr.w	r3, [sl]
 800b164:	4499      	add	r9, r3
 800b166:	e7d3      	b.n	800b110 <__cvt+0x68>
 800b168:	1c59      	adds	r1, r3, #1
 800b16a:	9107      	str	r1, [sp, #28]
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	e7d9      	b.n	800b124 <__cvt+0x7c>

0800b170 <__exponent>:
 800b170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b172:	2900      	cmp	r1, #0
 800b174:	bfb6      	itet	lt
 800b176:	232d      	movlt	r3, #45	@ 0x2d
 800b178:	232b      	movge	r3, #43	@ 0x2b
 800b17a:	4249      	neglt	r1, r1
 800b17c:	2909      	cmp	r1, #9
 800b17e:	7002      	strb	r2, [r0, #0]
 800b180:	7043      	strb	r3, [r0, #1]
 800b182:	dd29      	ble.n	800b1d8 <__exponent+0x68>
 800b184:	f10d 0307 	add.w	r3, sp, #7
 800b188:	461d      	mov	r5, r3
 800b18a:	270a      	movs	r7, #10
 800b18c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b190:	461a      	mov	r2, r3
 800b192:	fb07 1416 	mls	r4, r7, r6, r1
 800b196:	3430      	adds	r4, #48	@ 0x30
 800b198:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b19c:	460c      	mov	r4, r1
 800b19e:	2c63      	cmp	r4, #99	@ 0x63
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b1a6:	dcf1      	bgt.n	800b18c <__exponent+0x1c>
 800b1a8:	3130      	adds	r1, #48	@ 0x30
 800b1aa:	1e94      	subs	r4, r2, #2
 800b1ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	1c41      	adds	r1, r0, #1
 800b1b4:	42ab      	cmp	r3, r5
 800b1b6:	d30a      	bcc.n	800b1ce <__exponent+0x5e>
 800b1b8:	f10d 0309 	add.w	r3, sp, #9
 800b1bc:	1a9b      	subs	r3, r3, r2
 800b1be:	42ac      	cmp	r4, r5
 800b1c0:	bf88      	it	hi
 800b1c2:	2300      	movhi	r3, #0
 800b1c4:	3302      	adds	r3, #2
 800b1c6:	4403      	add	r3, r0
 800b1c8:	1a18      	subs	r0, r3, r0
 800b1ca:	b003      	add	sp, #12
 800b1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b1d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b1d6:	e7ed      	b.n	800b1b4 <__exponent+0x44>
 800b1d8:	2330      	movs	r3, #48	@ 0x30
 800b1da:	3130      	adds	r1, #48	@ 0x30
 800b1dc:	7083      	strb	r3, [r0, #2]
 800b1de:	70c1      	strb	r1, [r0, #3]
 800b1e0:	1d03      	adds	r3, r0, #4
 800b1e2:	e7f1      	b.n	800b1c8 <__exponent+0x58>

0800b1e4 <_printf_float>:
 800b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	b091      	sub	sp, #68	@ 0x44
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	461f      	mov	r7, r3
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	f000 fdf9 	bl	800bdec <_localeconv_r>
 800b1fa:	6803      	ldr	r3, [r0, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	f7f4 ffa6 	bl	8000150 <strlen>
 800b204:	2300      	movs	r3, #0
 800b206:	930e      	str	r3, [sp, #56]	@ 0x38
 800b208:	f8d8 3000 	ldr.w	r3, [r8]
 800b20c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b20e:	3307      	adds	r3, #7
 800b210:	f023 0307 	bic.w	r3, r3, #7
 800b214:	f103 0208 	add.w	r2, r3, #8
 800b218:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b21c:	f8d4 b000 	ldr.w	fp, [r4]
 800b220:	f8c8 2000 	str.w	r2, [r8]
 800b224:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b228:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b22c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b22e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b232:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b23a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b23e:	4b9c      	ldr	r3, [pc, #624]	@ (800b4b0 <_printf_float+0x2cc>)
 800b240:	f7f5 fbe4 	bl	8000a0c <__aeabi_dcmpun>
 800b244:	bb70      	cbnz	r0, 800b2a4 <_printf_float+0xc0>
 800b246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b24e:	4b98      	ldr	r3, [pc, #608]	@ (800b4b0 <_printf_float+0x2cc>)
 800b250:	f7f5 fbbe 	bl	80009d0 <__aeabi_dcmple>
 800b254:	bb30      	cbnz	r0, 800b2a4 <_printf_float+0xc0>
 800b256:	2200      	movs	r2, #0
 800b258:	2300      	movs	r3, #0
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	f7f5 fbad 	bl	80009bc <__aeabi_dcmplt>
 800b262:	b110      	cbz	r0, 800b26a <_printf_float+0x86>
 800b264:	232d      	movs	r3, #45	@ 0x2d
 800b266:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b26a:	4a92      	ldr	r2, [pc, #584]	@ (800b4b4 <_printf_float+0x2d0>)
 800b26c:	4b92      	ldr	r3, [pc, #584]	@ (800b4b8 <_printf_float+0x2d4>)
 800b26e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b272:	bf94      	ite	ls
 800b274:	4690      	movls	r8, r2
 800b276:	4698      	movhi	r8, r3
 800b278:	2303      	movs	r3, #3
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	f02b 0304 	bic.w	r3, fp, #4
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	4633      	mov	r3, r6
 800b288:	4621      	mov	r1, r4
 800b28a:	4628      	mov	r0, r5
 800b28c:	9700      	str	r7, [sp, #0]
 800b28e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b290:	f000 f9d4 	bl	800b63c <_printf_common>
 800b294:	3001      	adds	r0, #1
 800b296:	f040 8090 	bne.w	800b3ba <_printf_float+0x1d6>
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b29e:	b011      	add	sp, #68	@ 0x44
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f5 fbae 	bl	8000a0c <__aeabi_dcmpun>
 800b2b0:	b148      	cbz	r0, 800b2c6 <_printf_float+0xe2>
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bfb8      	it	lt
 800b2b8:	232d      	movlt	r3, #45	@ 0x2d
 800b2ba:	4a80      	ldr	r2, [pc, #512]	@ (800b4bc <_printf_float+0x2d8>)
 800b2bc:	bfb8      	it	lt
 800b2be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b2c2:	4b7f      	ldr	r3, [pc, #508]	@ (800b4c0 <_printf_float+0x2dc>)
 800b2c4:	e7d3      	b.n	800b26e <_printf_float+0x8a>
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	d13f      	bne.n	800b350 <_printf_float+0x16c>
 800b2d0:	2306      	movs	r3, #6
 800b2d2:	6063      	str	r3, [r4, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b2da:	6023      	str	r3, [r4, #0]
 800b2dc:	9206      	str	r2, [sp, #24]
 800b2de:	aa0e      	add	r2, sp, #56	@ 0x38
 800b2e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b2e4:	aa0d      	add	r2, sp, #52	@ 0x34
 800b2e6:	9203      	str	r2, [sp, #12]
 800b2e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b2ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	4642      	mov	r2, r8
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800b2fc:	f7ff fed4 	bl	800b0a8 <__cvt>
 800b300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b302:	4680      	mov	r8, r0
 800b304:	2947      	cmp	r1, #71	@ 0x47
 800b306:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b308:	d128      	bne.n	800b35c <_printf_float+0x178>
 800b30a:	1cc8      	adds	r0, r1, #3
 800b30c:	db02      	blt.n	800b314 <_printf_float+0x130>
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	4299      	cmp	r1, r3
 800b312:	dd40      	ble.n	800b396 <_printf_float+0x1b2>
 800b314:	f1aa 0a02 	sub.w	sl, sl, #2
 800b318:	fa5f fa8a 	uxtb.w	sl, sl
 800b31c:	4652      	mov	r2, sl
 800b31e:	3901      	subs	r1, #1
 800b320:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b324:	910d      	str	r1, [sp, #52]	@ 0x34
 800b326:	f7ff ff23 	bl	800b170 <__exponent>
 800b32a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b32c:	4681      	mov	r9, r0
 800b32e:	1813      	adds	r3, r2, r0
 800b330:	2a01      	cmp	r2, #1
 800b332:	6123      	str	r3, [r4, #16]
 800b334:	dc02      	bgt.n	800b33c <_printf_float+0x158>
 800b336:	6822      	ldr	r2, [r4, #0]
 800b338:	07d2      	lsls	r2, r2, #31
 800b33a:	d501      	bpl.n	800b340 <_printf_float+0x15c>
 800b33c:	3301      	adds	r3, #1
 800b33e:	6123      	str	r3, [r4, #16]
 800b340:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b344:	2b00      	cmp	r3, #0
 800b346:	d09e      	beq.n	800b286 <_printf_float+0xa2>
 800b348:	232d      	movs	r3, #45	@ 0x2d
 800b34a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b34e:	e79a      	b.n	800b286 <_printf_float+0xa2>
 800b350:	2947      	cmp	r1, #71	@ 0x47
 800b352:	d1bf      	bne.n	800b2d4 <_printf_float+0xf0>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1bd      	bne.n	800b2d4 <_printf_float+0xf0>
 800b358:	2301      	movs	r3, #1
 800b35a:	e7ba      	b.n	800b2d2 <_printf_float+0xee>
 800b35c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b360:	d9dc      	bls.n	800b31c <_printf_float+0x138>
 800b362:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b366:	d118      	bne.n	800b39a <_printf_float+0x1b6>
 800b368:	2900      	cmp	r1, #0
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	dd0b      	ble.n	800b386 <_printf_float+0x1a2>
 800b36e:	6121      	str	r1, [r4, #16]
 800b370:	b913      	cbnz	r3, 800b378 <_printf_float+0x194>
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	07d0      	lsls	r0, r2, #31
 800b376:	d502      	bpl.n	800b37e <_printf_float+0x19a>
 800b378:	3301      	adds	r3, #1
 800b37a:	440b      	add	r3, r1
 800b37c:	6123      	str	r3, [r4, #16]
 800b37e:	f04f 0900 	mov.w	r9, #0
 800b382:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b384:	e7dc      	b.n	800b340 <_printf_float+0x15c>
 800b386:	b913      	cbnz	r3, 800b38e <_printf_float+0x1aa>
 800b388:	6822      	ldr	r2, [r4, #0]
 800b38a:	07d2      	lsls	r2, r2, #31
 800b38c:	d501      	bpl.n	800b392 <_printf_float+0x1ae>
 800b38e:	3302      	adds	r3, #2
 800b390:	e7f4      	b.n	800b37c <_printf_float+0x198>
 800b392:	2301      	movs	r3, #1
 800b394:	e7f2      	b.n	800b37c <_printf_float+0x198>
 800b396:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b39c:	4299      	cmp	r1, r3
 800b39e:	db05      	blt.n	800b3ac <_printf_float+0x1c8>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	6121      	str	r1, [r4, #16]
 800b3a4:	07d8      	lsls	r0, r3, #31
 800b3a6:	d5ea      	bpl.n	800b37e <_printf_float+0x19a>
 800b3a8:	1c4b      	adds	r3, r1, #1
 800b3aa:	e7e7      	b.n	800b37c <_printf_float+0x198>
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	bfcc      	ite	gt
 800b3b0:	2201      	movgt	r2, #1
 800b3b2:	f1c1 0202 	rsble	r2, r1, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	e7e0      	b.n	800b37c <_printf_float+0x198>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	055a      	lsls	r2, r3, #21
 800b3be:	d407      	bmi.n	800b3d0 <_printf_float+0x1ec>
 800b3c0:	6923      	ldr	r3, [r4, #16]
 800b3c2:	4642      	mov	r2, r8
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d12b      	bne.n	800b426 <_printf_float+0x242>
 800b3ce:	e764      	b.n	800b29a <_printf_float+0xb6>
 800b3d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3d4:	f240 80dc 	bls.w	800b590 <_printf_float+0x3ac>
 800b3d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f7f5 fae2 	bl	80009a8 <__aeabi_dcmpeq>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d033      	beq.n	800b450 <_printf_float+0x26c>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	4a35      	ldr	r2, [pc, #212]	@ (800b4c4 <_printf_float+0x2e0>)
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af51 	beq.w	800b29a <_printf_float+0xb6>
 800b3f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b3fc:	4543      	cmp	r3, r8
 800b3fe:	db02      	blt.n	800b406 <_printf_float+0x222>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	07d8      	lsls	r0, r3, #31
 800b404:	d50f      	bpl.n	800b426 <_printf_float+0x242>
 800b406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f af42 	beq.w	800b29a <_printf_float+0xb6>
 800b416:	f04f 0900 	mov.w	r9, #0
 800b41a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b41e:	f104 0a1a 	add.w	sl, r4, #26
 800b422:	45c8      	cmp	r8, r9
 800b424:	dc09      	bgt.n	800b43a <_printf_float+0x256>
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	079b      	lsls	r3, r3, #30
 800b42a:	f100 8102 	bmi.w	800b632 <_printf_float+0x44e>
 800b42e:	68e0      	ldr	r0, [r4, #12]
 800b430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b432:	4298      	cmp	r0, r3
 800b434:	bfb8      	it	lt
 800b436:	4618      	movlt	r0, r3
 800b438:	e731      	b.n	800b29e <_printf_float+0xba>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4652      	mov	r2, sl
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f af28 	beq.w	800b29a <_printf_float+0xb6>
 800b44a:	f109 0901 	add.w	r9, r9, #1
 800b44e:	e7e8      	b.n	800b422 <_printf_float+0x23e>
 800b450:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b452:	2b00      	cmp	r3, #0
 800b454:	dc38      	bgt.n	800b4c8 <_printf_float+0x2e4>
 800b456:	2301      	movs	r3, #1
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	4a19      	ldr	r2, [pc, #100]	@ (800b4c4 <_printf_float+0x2e0>)
 800b45e:	47b8      	blx	r7
 800b460:	3001      	adds	r0, #1
 800b462:	f43f af1a 	beq.w	800b29a <_printf_float+0xb6>
 800b466:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b46a:	ea59 0303 	orrs.w	r3, r9, r3
 800b46e:	d102      	bne.n	800b476 <_printf_float+0x292>
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	07d9      	lsls	r1, r3, #31
 800b474:	d5d7      	bpl.n	800b426 <_printf_float+0x242>
 800b476:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	f43f af0a 	beq.w	800b29a <_printf_float+0xb6>
 800b486:	f04f 0a00 	mov.w	sl, #0
 800b48a:	f104 0b1a 	add.w	fp, r4, #26
 800b48e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b490:	425b      	negs	r3, r3
 800b492:	4553      	cmp	r3, sl
 800b494:	dc01      	bgt.n	800b49a <_printf_float+0x2b6>
 800b496:	464b      	mov	r3, r9
 800b498:	e793      	b.n	800b3c2 <_printf_float+0x1de>
 800b49a:	2301      	movs	r3, #1
 800b49c:	465a      	mov	r2, fp
 800b49e:	4631      	mov	r1, r6
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	47b8      	blx	r7
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	f43f aef8 	beq.w	800b29a <_printf_float+0xb6>
 800b4aa:	f10a 0a01 	add.w	sl, sl, #1
 800b4ae:	e7ee      	b.n	800b48e <_printf_float+0x2aa>
 800b4b0:	7fefffff 	.word	0x7fefffff
 800b4b4:	0800e100 	.word	0x0800e100
 800b4b8:	0800e104 	.word	0x0800e104
 800b4bc:	0800e108 	.word	0x0800e108
 800b4c0:	0800e10c 	.word	0x0800e10c
 800b4c4:	0800e110 	.word	0x0800e110
 800b4c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b4ce:	4553      	cmp	r3, sl
 800b4d0:	bfa8      	it	ge
 800b4d2:	4653      	movge	r3, sl
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	4699      	mov	r9, r3
 800b4d8:	dc36      	bgt.n	800b548 <_printf_float+0x364>
 800b4da:	f04f 0b00 	mov.w	fp, #0
 800b4de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4e2:	f104 021a 	add.w	r2, r4, #26
 800b4e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4ea:	eba3 0309 	sub.w	r3, r3, r9
 800b4ee:	455b      	cmp	r3, fp
 800b4f0:	dc31      	bgt.n	800b556 <_printf_float+0x372>
 800b4f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4f4:	459a      	cmp	sl, r3
 800b4f6:	dc3a      	bgt.n	800b56e <_printf_float+0x38a>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	07da      	lsls	r2, r3, #31
 800b4fc:	d437      	bmi.n	800b56e <_printf_float+0x38a>
 800b4fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b500:	ebaa 0903 	sub.w	r9, sl, r3
 800b504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b506:	ebaa 0303 	sub.w	r3, sl, r3
 800b50a:	4599      	cmp	r9, r3
 800b50c:	bfa8      	it	ge
 800b50e:	4699      	movge	r9, r3
 800b510:	f1b9 0f00 	cmp.w	r9, #0
 800b514:	dc33      	bgt.n	800b57e <_printf_float+0x39a>
 800b516:	f04f 0800 	mov.w	r8, #0
 800b51a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b51e:	f104 0b1a 	add.w	fp, r4, #26
 800b522:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b524:	ebaa 0303 	sub.w	r3, sl, r3
 800b528:	eba3 0309 	sub.w	r3, r3, r9
 800b52c:	4543      	cmp	r3, r8
 800b52e:	f77f af7a 	ble.w	800b426 <_printf_float+0x242>
 800b532:	2301      	movs	r3, #1
 800b534:	465a      	mov	r2, fp
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f aeac 	beq.w	800b29a <_printf_float+0xb6>
 800b542:	f108 0801 	add.w	r8, r8, #1
 800b546:	e7ec      	b.n	800b522 <_printf_float+0x33e>
 800b548:	4642      	mov	r2, r8
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	d1c2      	bne.n	800b4da <_printf_float+0x2f6>
 800b554:	e6a1      	b.n	800b29a <_printf_float+0xb6>
 800b556:	2301      	movs	r3, #1
 800b558:	4631      	mov	r1, r6
 800b55a:	4628      	mov	r0, r5
 800b55c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b55e:	47b8      	blx	r7
 800b560:	3001      	adds	r0, #1
 800b562:	f43f ae9a 	beq.w	800b29a <_printf_float+0xb6>
 800b566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b568:	f10b 0b01 	add.w	fp, fp, #1
 800b56c:	e7bb      	b.n	800b4e6 <_printf_float+0x302>
 800b56e:	4631      	mov	r1, r6
 800b570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b574:	4628      	mov	r0, r5
 800b576:	47b8      	blx	r7
 800b578:	3001      	adds	r0, #1
 800b57a:	d1c0      	bne.n	800b4fe <_printf_float+0x31a>
 800b57c:	e68d      	b.n	800b29a <_printf_float+0xb6>
 800b57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b580:	464b      	mov	r3, r9
 800b582:	4631      	mov	r1, r6
 800b584:	4628      	mov	r0, r5
 800b586:	4442      	add	r2, r8
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	d1c3      	bne.n	800b516 <_printf_float+0x332>
 800b58e:	e684      	b.n	800b29a <_printf_float+0xb6>
 800b590:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b594:	f1ba 0f01 	cmp.w	sl, #1
 800b598:	dc01      	bgt.n	800b59e <_printf_float+0x3ba>
 800b59a:	07db      	lsls	r3, r3, #31
 800b59c:	d536      	bpl.n	800b60c <_printf_float+0x428>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4642      	mov	r2, r8
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f ae76 	beq.w	800b29a <_printf_float+0xb6>
 800b5ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b8      	blx	r7
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f43f ae6e 	beq.w	800b29a <_printf_float+0xb6>
 800b5be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b5ca:	f7f5 f9ed 	bl	80009a8 <__aeabi_dcmpeq>
 800b5ce:	b9c0      	cbnz	r0, 800b602 <_printf_float+0x41e>
 800b5d0:	4653      	mov	r3, sl
 800b5d2:	f108 0201 	add.w	r2, r8, #1
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d10c      	bne.n	800b5fa <_printf_float+0x416>
 800b5e0:	e65b      	b.n	800b29a <_printf_float+0xb6>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	465a      	mov	r2, fp
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	47b8      	blx	r7
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f43f ae54 	beq.w	800b29a <_printf_float+0xb6>
 800b5f2:	f108 0801 	add.w	r8, r8, #1
 800b5f6:	45d0      	cmp	r8, sl
 800b5f8:	dbf3      	blt.n	800b5e2 <_printf_float+0x3fe>
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b600:	e6e0      	b.n	800b3c4 <_printf_float+0x1e0>
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	f104 0b1a 	add.w	fp, r4, #26
 800b60a:	e7f4      	b.n	800b5f6 <_printf_float+0x412>
 800b60c:	2301      	movs	r3, #1
 800b60e:	4642      	mov	r2, r8
 800b610:	e7e1      	b.n	800b5d6 <_printf_float+0x3f2>
 800b612:	2301      	movs	r3, #1
 800b614:	464a      	mov	r2, r9
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	f43f ae3c 	beq.w	800b29a <_printf_float+0xb6>
 800b622:	f108 0801 	add.w	r8, r8, #1
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b62a:	1a5b      	subs	r3, r3, r1
 800b62c:	4543      	cmp	r3, r8
 800b62e:	dcf0      	bgt.n	800b612 <_printf_float+0x42e>
 800b630:	e6fd      	b.n	800b42e <_printf_float+0x24a>
 800b632:	f04f 0800 	mov.w	r8, #0
 800b636:	f104 0919 	add.w	r9, r4, #25
 800b63a:	e7f4      	b.n	800b626 <_printf_float+0x442>

0800b63c <_printf_common>:
 800b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b640:	4616      	mov	r6, r2
 800b642:	4698      	mov	r8, r3
 800b644:	688a      	ldr	r2, [r1, #8]
 800b646:	690b      	ldr	r3, [r1, #16]
 800b648:	4607      	mov	r7, r0
 800b64a:	4293      	cmp	r3, r2
 800b64c:	bfb8      	it	lt
 800b64e:	4613      	movlt	r3, r2
 800b650:	6033      	str	r3, [r6, #0]
 800b652:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b656:	460c      	mov	r4, r1
 800b658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b65c:	b10a      	cbz	r2, 800b662 <_printf_common+0x26>
 800b65e:	3301      	adds	r3, #1
 800b660:	6033      	str	r3, [r6, #0]
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	0699      	lsls	r1, r3, #26
 800b666:	bf42      	ittt	mi
 800b668:	6833      	ldrmi	r3, [r6, #0]
 800b66a:	3302      	addmi	r3, #2
 800b66c:	6033      	strmi	r3, [r6, #0]
 800b66e:	6825      	ldr	r5, [r4, #0]
 800b670:	f015 0506 	ands.w	r5, r5, #6
 800b674:	d106      	bne.n	800b684 <_printf_common+0x48>
 800b676:	f104 0a19 	add.w	sl, r4, #25
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	6832      	ldr	r2, [r6, #0]
 800b67e:	1a9b      	subs	r3, r3, r2
 800b680:	42ab      	cmp	r3, r5
 800b682:	dc2b      	bgt.n	800b6dc <_printf_common+0xa0>
 800b684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b688:	6822      	ldr	r2, [r4, #0]
 800b68a:	3b00      	subs	r3, #0
 800b68c:	bf18      	it	ne
 800b68e:	2301      	movne	r3, #1
 800b690:	0692      	lsls	r2, r2, #26
 800b692:	d430      	bmi.n	800b6f6 <_printf_common+0xba>
 800b694:	4641      	mov	r1, r8
 800b696:	4638      	mov	r0, r7
 800b698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b69c:	47c8      	blx	r9
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d023      	beq.n	800b6ea <_printf_common+0xae>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	6922      	ldr	r2, [r4, #16]
 800b6a6:	f003 0306 	and.w	r3, r3, #6
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	bf14      	ite	ne
 800b6ae:	2500      	movne	r5, #0
 800b6b0:	6833      	ldreq	r3, [r6, #0]
 800b6b2:	f04f 0600 	mov.w	r6, #0
 800b6b6:	bf08      	it	eq
 800b6b8:	68e5      	ldreq	r5, [r4, #12]
 800b6ba:	f104 041a 	add.w	r4, r4, #26
 800b6be:	bf08      	it	eq
 800b6c0:	1aed      	subeq	r5, r5, r3
 800b6c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b6c6:	bf08      	it	eq
 800b6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	bfc4      	itt	gt
 800b6d0:	1a9b      	subgt	r3, r3, r2
 800b6d2:	18ed      	addgt	r5, r5, r3
 800b6d4:	42b5      	cmp	r5, r6
 800b6d6:	d11a      	bne.n	800b70e <_printf_common+0xd2>
 800b6d8:	2000      	movs	r0, #0
 800b6da:	e008      	b.n	800b6ee <_printf_common+0xb2>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	4652      	mov	r2, sl
 800b6e0:	4641      	mov	r1, r8
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	47c8      	blx	r9
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d103      	bne.n	800b6f2 <_printf_common+0xb6>
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	3501      	adds	r5, #1
 800b6f4:	e7c1      	b.n	800b67a <_printf_common+0x3e>
 800b6f6:	2030      	movs	r0, #48	@ 0x30
 800b6f8:	18e1      	adds	r1, r4, r3
 800b6fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b704:	4422      	add	r2, r4
 800b706:	3302      	adds	r3, #2
 800b708:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b70c:	e7c2      	b.n	800b694 <_printf_common+0x58>
 800b70e:	2301      	movs	r3, #1
 800b710:	4622      	mov	r2, r4
 800b712:	4641      	mov	r1, r8
 800b714:	4638      	mov	r0, r7
 800b716:	47c8      	blx	r9
 800b718:	3001      	adds	r0, #1
 800b71a:	d0e6      	beq.n	800b6ea <_printf_common+0xae>
 800b71c:	3601      	adds	r6, #1
 800b71e:	e7d9      	b.n	800b6d4 <_printf_common+0x98>

0800b720 <_printf_i>:
 800b720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b724:	7e0f      	ldrb	r7, [r1, #24]
 800b726:	4691      	mov	r9, r2
 800b728:	2f78      	cmp	r7, #120	@ 0x78
 800b72a:	4680      	mov	r8, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	469a      	mov	sl, r3
 800b730:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b736:	d807      	bhi.n	800b748 <_printf_i+0x28>
 800b738:	2f62      	cmp	r7, #98	@ 0x62
 800b73a:	d80a      	bhi.n	800b752 <_printf_i+0x32>
 800b73c:	2f00      	cmp	r7, #0
 800b73e:	f000 80d3 	beq.w	800b8e8 <_printf_i+0x1c8>
 800b742:	2f58      	cmp	r7, #88	@ 0x58
 800b744:	f000 80ba 	beq.w	800b8bc <_printf_i+0x19c>
 800b748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b74c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b750:	e03a      	b.n	800b7c8 <_printf_i+0xa8>
 800b752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b756:	2b15      	cmp	r3, #21
 800b758:	d8f6      	bhi.n	800b748 <_printf_i+0x28>
 800b75a:	a101      	add	r1, pc, #4	@ (adr r1, 800b760 <_printf_i+0x40>)
 800b75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b760:	0800b7b9 	.word	0x0800b7b9
 800b764:	0800b7cd 	.word	0x0800b7cd
 800b768:	0800b749 	.word	0x0800b749
 800b76c:	0800b749 	.word	0x0800b749
 800b770:	0800b749 	.word	0x0800b749
 800b774:	0800b749 	.word	0x0800b749
 800b778:	0800b7cd 	.word	0x0800b7cd
 800b77c:	0800b749 	.word	0x0800b749
 800b780:	0800b749 	.word	0x0800b749
 800b784:	0800b749 	.word	0x0800b749
 800b788:	0800b749 	.word	0x0800b749
 800b78c:	0800b8cf 	.word	0x0800b8cf
 800b790:	0800b7f7 	.word	0x0800b7f7
 800b794:	0800b889 	.word	0x0800b889
 800b798:	0800b749 	.word	0x0800b749
 800b79c:	0800b749 	.word	0x0800b749
 800b7a0:	0800b8f1 	.word	0x0800b8f1
 800b7a4:	0800b749 	.word	0x0800b749
 800b7a8:	0800b7f7 	.word	0x0800b7f7
 800b7ac:	0800b749 	.word	0x0800b749
 800b7b0:	0800b749 	.word	0x0800b749
 800b7b4:	0800b891 	.word	0x0800b891
 800b7b8:	6833      	ldr	r3, [r6, #0]
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6032      	str	r2, [r6, #0]
 800b7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e09e      	b.n	800b90a <_printf_i+0x1ea>
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	1d19      	adds	r1, r3, #4
 800b7d2:	6031      	str	r1, [r6, #0]
 800b7d4:	0606      	lsls	r6, r0, #24
 800b7d6:	d501      	bpl.n	800b7dc <_printf_i+0xbc>
 800b7d8:	681d      	ldr	r5, [r3, #0]
 800b7da:	e003      	b.n	800b7e4 <_printf_i+0xc4>
 800b7dc:	0645      	lsls	r5, r0, #25
 800b7de:	d5fb      	bpl.n	800b7d8 <_printf_i+0xb8>
 800b7e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	da03      	bge.n	800b7f0 <_printf_i+0xd0>
 800b7e8:	232d      	movs	r3, #45	@ 0x2d
 800b7ea:	426d      	negs	r5, r5
 800b7ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7f0:	230a      	movs	r3, #10
 800b7f2:	4859      	ldr	r0, [pc, #356]	@ (800b958 <_printf_i+0x238>)
 800b7f4:	e011      	b.n	800b81a <_printf_i+0xfa>
 800b7f6:	6821      	ldr	r1, [r4, #0]
 800b7f8:	6833      	ldr	r3, [r6, #0]
 800b7fa:	0608      	lsls	r0, r1, #24
 800b7fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b800:	d402      	bmi.n	800b808 <_printf_i+0xe8>
 800b802:	0649      	lsls	r1, r1, #25
 800b804:	bf48      	it	mi
 800b806:	b2ad      	uxthmi	r5, r5
 800b808:	2f6f      	cmp	r7, #111	@ 0x6f
 800b80a:	6033      	str	r3, [r6, #0]
 800b80c:	bf14      	ite	ne
 800b80e:	230a      	movne	r3, #10
 800b810:	2308      	moveq	r3, #8
 800b812:	4851      	ldr	r0, [pc, #324]	@ (800b958 <_printf_i+0x238>)
 800b814:	2100      	movs	r1, #0
 800b816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b81a:	6866      	ldr	r6, [r4, #4]
 800b81c:	2e00      	cmp	r6, #0
 800b81e:	bfa8      	it	ge
 800b820:	6821      	ldrge	r1, [r4, #0]
 800b822:	60a6      	str	r6, [r4, #8]
 800b824:	bfa4      	itt	ge
 800b826:	f021 0104 	bicge.w	r1, r1, #4
 800b82a:	6021      	strge	r1, [r4, #0]
 800b82c:	b90d      	cbnz	r5, 800b832 <_printf_i+0x112>
 800b82e:	2e00      	cmp	r6, #0
 800b830:	d04b      	beq.n	800b8ca <_printf_i+0x1aa>
 800b832:	4616      	mov	r6, r2
 800b834:	fbb5 f1f3 	udiv	r1, r5, r3
 800b838:	fb03 5711 	mls	r7, r3, r1, r5
 800b83c:	5dc7      	ldrb	r7, [r0, r7]
 800b83e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b842:	462f      	mov	r7, r5
 800b844:	42bb      	cmp	r3, r7
 800b846:	460d      	mov	r5, r1
 800b848:	d9f4      	bls.n	800b834 <_printf_i+0x114>
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	d10b      	bne.n	800b866 <_printf_i+0x146>
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	07df      	lsls	r7, r3, #31
 800b852:	d508      	bpl.n	800b866 <_printf_i+0x146>
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	6861      	ldr	r1, [r4, #4]
 800b858:	4299      	cmp	r1, r3
 800b85a:	bfde      	ittt	le
 800b85c:	2330      	movle	r3, #48	@ 0x30
 800b85e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b862:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b866:	1b92      	subs	r2, r2, r6
 800b868:	6122      	str	r2, [r4, #16]
 800b86a:	464b      	mov	r3, r9
 800b86c:	4621      	mov	r1, r4
 800b86e:	4640      	mov	r0, r8
 800b870:	f8cd a000 	str.w	sl, [sp]
 800b874:	aa03      	add	r2, sp, #12
 800b876:	f7ff fee1 	bl	800b63c <_printf_common>
 800b87a:	3001      	adds	r0, #1
 800b87c:	d14a      	bne.n	800b914 <_printf_i+0x1f4>
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b882:	b004      	add	sp, #16
 800b884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	f043 0320 	orr.w	r3, r3, #32
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	2778      	movs	r7, #120	@ 0x78
 800b892:	4832      	ldr	r0, [pc, #200]	@ (800b95c <_printf_i+0x23c>)
 800b894:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	6831      	ldr	r1, [r6, #0]
 800b89c:	061f      	lsls	r7, r3, #24
 800b89e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b8a2:	d402      	bmi.n	800b8aa <_printf_i+0x18a>
 800b8a4:	065f      	lsls	r7, r3, #25
 800b8a6:	bf48      	it	mi
 800b8a8:	b2ad      	uxthmi	r5, r5
 800b8aa:	6031      	str	r1, [r6, #0]
 800b8ac:	07d9      	lsls	r1, r3, #31
 800b8ae:	bf44      	itt	mi
 800b8b0:	f043 0320 	orrmi.w	r3, r3, #32
 800b8b4:	6023      	strmi	r3, [r4, #0]
 800b8b6:	b11d      	cbz	r5, 800b8c0 <_printf_i+0x1a0>
 800b8b8:	2310      	movs	r3, #16
 800b8ba:	e7ab      	b.n	800b814 <_printf_i+0xf4>
 800b8bc:	4826      	ldr	r0, [pc, #152]	@ (800b958 <_printf_i+0x238>)
 800b8be:	e7e9      	b.n	800b894 <_printf_i+0x174>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	f023 0320 	bic.w	r3, r3, #32
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	e7f6      	b.n	800b8b8 <_printf_i+0x198>
 800b8ca:	4616      	mov	r6, r2
 800b8cc:	e7bd      	b.n	800b84a <_printf_i+0x12a>
 800b8ce:	6833      	ldr	r3, [r6, #0]
 800b8d0:	6825      	ldr	r5, [r4, #0]
 800b8d2:	1d18      	adds	r0, r3, #4
 800b8d4:	6961      	ldr	r1, [r4, #20]
 800b8d6:	6030      	str	r0, [r6, #0]
 800b8d8:	062e      	lsls	r6, r5, #24
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	d501      	bpl.n	800b8e2 <_printf_i+0x1c2>
 800b8de:	6019      	str	r1, [r3, #0]
 800b8e0:	e002      	b.n	800b8e8 <_printf_i+0x1c8>
 800b8e2:	0668      	lsls	r0, r5, #25
 800b8e4:	d5fb      	bpl.n	800b8de <_printf_i+0x1be>
 800b8e6:	8019      	strh	r1, [r3, #0]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4616      	mov	r6, r2
 800b8ec:	6123      	str	r3, [r4, #16]
 800b8ee:	e7bc      	b.n	800b86a <_printf_i+0x14a>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	1d1a      	adds	r2, r3, #4
 800b8f6:	6032      	str	r2, [r6, #0]
 800b8f8:	681e      	ldr	r6, [r3, #0]
 800b8fa:	6862      	ldr	r2, [r4, #4]
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f000 fb4f 	bl	800bfa0 <memchr>
 800b902:	b108      	cbz	r0, 800b908 <_printf_i+0x1e8>
 800b904:	1b80      	subs	r0, r0, r6
 800b906:	6060      	str	r0, [r4, #4]
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	2300      	movs	r3, #0
 800b90e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b912:	e7aa      	b.n	800b86a <_printf_i+0x14a>
 800b914:	4632      	mov	r2, r6
 800b916:	4649      	mov	r1, r9
 800b918:	4640      	mov	r0, r8
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	47d0      	blx	sl
 800b91e:	3001      	adds	r0, #1
 800b920:	d0ad      	beq.n	800b87e <_printf_i+0x15e>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	079b      	lsls	r3, r3, #30
 800b926:	d413      	bmi.n	800b950 <_printf_i+0x230>
 800b928:	68e0      	ldr	r0, [r4, #12]
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	4298      	cmp	r0, r3
 800b92e:	bfb8      	it	lt
 800b930:	4618      	movlt	r0, r3
 800b932:	e7a6      	b.n	800b882 <_printf_i+0x162>
 800b934:	2301      	movs	r3, #1
 800b936:	4632      	mov	r2, r6
 800b938:	4649      	mov	r1, r9
 800b93a:	4640      	mov	r0, r8
 800b93c:	47d0      	blx	sl
 800b93e:	3001      	adds	r0, #1
 800b940:	d09d      	beq.n	800b87e <_printf_i+0x15e>
 800b942:	3501      	adds	r5, #1
 800b944:	68e3      	ldr	r3, [r4, #12]
 800b946:	9903      	ldr	r1, [sp, #12]
 800b948:	1a5b      	subs	r3, r3, r1
 800b94a:	42ab      	cmp	r3, r5
 800b94c:	dcf2      	bgt.n	800b934 <_printf_i+0x214>
 800b94e:	e7eb      	b.n	800b928 <_printf_i+0x208>
 800b950:	2500      	movs	r5, #0
 800b952:	f104 0619 	add.w	r6, r4, #25
 800b956:	e7f5      	b.n	800b944 <_printf_i+0x224>
 800b958:	0800e112 	.word	0x0800e112
 800b95c:	0800e123 	.word	0x0800e123

0800b960 <std>:
 800b960:	2300      	movs	r3, #0
 800b962:	b510      	push	{r4, lr}
 800b964:	4604      	mov	r4, r0
 800b966:	e9c0 3300 	strd	r3, r3, [r0]
 800b96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b96e:	6083      	str	r3, [r0, #8]
 800b970:	8181      	strh	r1, [r0, #12]
 800b972:	6643      	str	r3, [r0, #100]	@ 0x64
 800b974:	81c2      	strh	r2, [r0, #14]
 800b976:	6183      	str	r3, [r0, #24]
 800b978:	4619      	mov	r1, r3
 800b97a:	2208      	movs	r2, #8
 800b97c:	305c      	adds	r0, #92	@ 0x5c
 800b97e:	f000 fa2d 	bl	800bddc <memset>
 800b982:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b8 <std+0x58>)
 800b984:	6224      	str	r4, [r4, #32]
 800b986:	6263      	str	r3, [r4, #36]	@ 0x24
 800b988:	4b0c      	ldr	r3, [pc, #48]	@ (800b9bc <std+0x5c>)
 800b98a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b98c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c0 <std+0x60>)
 800b98e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b990:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c4 <std+0x64>)
 800b992:	6323      	str	r3, [r4, #48]	@ 0x30
 800b994:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c8 <std+0x68>)
 800b996:	429c      	cmp	r4, r3
 800b998:	d006      	beq.n	800b9a8 <std+0x48>
 800b99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b99e:	4294      	cmp	r4, r2
 800b9a0:	d002      	beq.n	800b9a8 <std+0x48>
 800b9a2:	33d0      	adds	r3, #208	@ 0xd0
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	d105      	bne.n	800b9b4 <std+0x54>
 800b9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b0:	f7f6 bd3b 	b.w	800242a <__retarget_lock_init_recursive>
 800b9b4:	bd10      	pop	{r4, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0800bc2d 	.word	0x0800bc2d
 800b9bc:	0800bc4f 	.word	0x0800bc4f
 800b9c0:	0800bc87 	.word	0x0800bc87
 800b9c4:	0800bcab 	.word	0x0800bcab
 800b9c8:	200039ac 	.word	0x200039ac

0800b9cc <stdio_exit_handler>:
 800b9cc:	4a02      	ldr	r2, [pc, #8]	@ (800b9d8 <stdio_exit_handler+0xc>)
 800b9ce:	4903      	ldr	r1, [pc, #12]	@ (800b9dc <stdio_exit_handler+0x10>)
 800b9d0:	4803      	ldr	r0, [pc, #12]	@ (800b9e0 <stdio_exit_handler+0x14>)
 800b9d2:	f000 b869 	b.w	800baa8 <_fwalk_sglue>
 800b9d6:	bf00      	nop
 800b9d8:	20000020 	.word	0x20000020
 800b9dc:	0800d9a9 	.word	0x0800d9a9
 800b9e0:	20000030 	.word	0x20000030

0800b9e4 <cleanup_stdio>:
 800b9e4:	6841      	ldr	r1, [r0, #4]
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ba18 <cleanup_stdio+0x34>)
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	4299      	cmp	r1, r3
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	d001      	beq.n	800b9f4 <cleanup_stdio+0x10>
 800b9f0:	f001 ffda 	bl	800d9a8 <_fflush_r>
 800b9f4:	68a1      	ldr	r1, [r4, #8]
 800b9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ba1c <cleanup_stdio+0x38>)
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <cleanup_stdio+0x1e>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f001 ffd3 	bl	800d9a8 <_fflush_r>
 800ba02:	68e1      	ldr	r1, [r4, #12]
 800ba04:	4b06      	ldr	r3, [pc, #24]	@ (800ba20 <cleanup_stdio+0x3c>)
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d004      	beq.n	800ba14 <cleanup_stdio+0x30>
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba10:	f001 bfca 	b.w	800d9a8 <_fflush_r>
 800ba14:	bd10      	pop	{r4, pc}
 800ba16:	bf00      	nop
 800ba18:	200039ac 	.word	0x200039ac
 800ba1c:	20003a14 	.word	0x20003a14
 800ba20:	20003a7c 	.word	0x20003a7c

0800ba24 <global_stdio_init.part.0>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	4b0b      	ldr	r3, [pc, #44]	@ (800ba54 <global_stdio_init.part.0+0x30>)
 800ba28:	4c0b      	ldr	r4, [pc, #44]	@ (800ba58 <global_stdio_init.part.0+0x34>)
 800ba2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba5c <global_stdio_init.part.0+0x38>)
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	2104      	movs	r1, #4
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7ff ff94 	bl	800b960 <std>
 800ba38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	2109      	movs	r1, #9
 800ba40:	f7ff ff8e 	bl	800b960 <std>
 800ba44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba48:	2202      	movs	r2, #2
 800ba4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba4e:	2112      	movs	r1, #18
 800ba50:	f7ff bf86 	b.w	800b960 <std>
 800ba54:	20003ae4 	.word	0x20003ae4
 800ba58:	200039ac 	.word	0x200039ac
 800ba5c:	0800b9cd 	.word	0x0800b9cd

0800ba60 <__sfp_lock_acquire>:
 800ba60:	4801      	ldr	r0, [pc, #4]	@ (800ba68 <__sfp_lock_acquire+0x8>)
 800ba62:	f7f6 bd09 	b.w	8002478 <__retarget_lock_acquire_recursive>
 800ba66:	bf00      	nop
 800ba68:	200003a0 	.word	0x200003a0

0800ba6c <__sfp_lock_release>:
 800ba6c:	4801      	ldr	r0, [pc, #4]	@ (800ba74 <__sfp_lock_release+0x8>)
 800ba6e:	f7f6 bd18 	b.w	80024a2 <__retarget_lock_release_recursive>
 800ba72:	bf00      	nop
 800ba74:	200003a0 	.word	0x200003a0

0800ba78 <__sinit>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f7ff fff0 	bl	800ba60 <__sfp_lock_acquire>
 800ba80:	6a23      	ldr	r3, [r4, #32]
 800ba82:	b11b      	cbz	r3, 800ba8c <__sinit+0x14>
 800ba84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba88:	f7ff bff0 	b.w	800ba6c <__sfp_lock_release>
 800ba8c:	4b04      	ldr	r3, [pc, #16]	@ (800baa0 <__sinit+0x28>)
 800ba8e:	6223      	str	r3, [r4, #32]
 800ba90:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <__sinit+0x2c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1f5      	bne.n	800ba84 <__sinit+0xc>
 800ba98:	f7ff ffc4 	bl	800ba24 <global_stdio_init.part.0>
 800ba9c:	e7f2      	b.n	800ba84 <__sinit+0xc>
 800ba9e:	bf00      	nop
 800baa0:	0800b9e5 	.word	0x0800b9e5
 800baa4:	20003ae4 	.word	0x20003ae4

0800baa8 <_fwalk_sglue>:
 800baa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baac:	4607      	mov	r7, r0
 800baae:	4688      	mov	r8, r1
 800bab0:	4614      	mov	r4, r2
 800bab2:	2600      	movs	r6, #0
 800bab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab8:	f1b9 0901 	subs.w	r9, r9, #1
 800babc:	d505      	bpl.n	800baca <_fwalk_sglue+0x22>
 800babe:	6824      	ldr	r4, [r4, #0]
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d1f7      	bne.n	800bab4 <_fwalk_sglue+0xc>
 800bac4:	4630      	mov	r0, r6
 800bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baca:	89ab      	ldrh	r3, [r5, #12]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d907      	bls.n	800bae0 <_fwalk_sglue+0x38>
 800bad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bad4:	3301      	adds	r3, #1
 800bad6:	d003      	beq.n	800bae0 <_fwalk_sglue+0x38>
 800bad8:	4629      	mov	r1, r5
 800bada:	4638      	mov	r0, r7
 800badc:	47c0      	blx	r8
 800bade:	4306      	orrs	r6, r0
 800bae0:	3568      	adds	r5, #104	@ 0x68
 800bae2:	e7e9      	b.n	800bab8 <_fwalk_sglue+0x10>

0800bae4 <iprintf>:
 800bae4:	b40f      	push	{r0, r1, r2, r3}
 800bae6:	b507      	push	{r0, r1, r2, lr}
 800bae8:	4906      	ldr	r1, [pc, #24]	@ (800bb04 <iprintf+0x20>)
 800baea:	ab04      	add	r3, sp, #16
 800baec:	6808      	ldr	r0, [r1, #0]
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	6881      	ldr	r1, [r0, #8]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f001 fdbf 	bl	800d678 <_vfiprintf_r>
 800bafa:	b003      	add	sp, #12
 800bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb00:	b004      	add	sp, #16
 800bb02:	4770      	bx	lr
 800bb04:	2000002c 	.word	0x2000002c

0800bb08 <_puts_r>:
 800bb08:	6a03      	ldr	r3, [r0, #32]
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	460e      	mov	r6, r1
 800bb10:	6884      	ldr	r4, [r0, #8]
 800bb12:	b90b      	cbnz	r3, 800bb18 <_puts_r+0x10>
 800bb14:	f7ff ffb0 	bl	800ba78 <__sinit>
 800bb18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb1a:	07db      	lsls	r3, r3, #31
 800bb1c:	d405      	bmi.n	800bb2a <_puts_r+0x22>
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	0598      	lsls	r0, r3, #22
 800bb22:	d402      	bmi.n	800bb2a <_puts_r+0x22>
 800bb24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb26:	f7f6 fca7 	bl	8002478 <__retarget_lock_acquire_recursive>
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	0719      	lsls	r1, r3, #28
 800bb2e:	d502      	bpl.n	800bb36 <_puts_r+0x2e>
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d135      	bne.n	800bba2 <_puts_r+0x9a>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4628      	mov	r0, r5
 800bb3a:	f000 f8f9 	bl	800bd30 <__swsetup_r>
 800bb3e:	b380      	cbz	r0, 800bba2 <_puts_r+0x9a>
 800bb40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bb44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb46:	07da      	lsls	r2, r3, #31
 800bb48:	d405      	bmi.n	800bb56 <_puts_r+0x4e>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	059b      	lsls	r3, r3, #22
 800bb4e:	d402      	bmi.n	800bb56 <_puts_r+0x4e>
 800bb50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb52:	f7f6 fca6 	bl	80024a2 <__retarget_lock_release_recursive>
 800bb56:	4628      	mov	r0, r5
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da04      	bge.n	800bb68 <_puts_r+0x60>
 800bb5e:	69a2      	ldr	r2, [r4, #24]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	dc17      	bgt.n	800bb94 <_puts_r+0x8c>
 800bb64:	290a      	cmp	r1, #10
 800bb66:	d015      	beq.n	800bb94 <_puts_r+0x8c>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	6022      	str	r2, [r4, #0]
 800bb6e:	7019      	strb	r1, [r3, #0]
 800bb70:	68a3      	ldr	r3, [r4, #8]
 800bb72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb76:	3b01      	subs	r3, #1
 800bb78:	60a3      	str	r3, [r4, #8]
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d1ed      	bne.n	800bb5a <_puts_r+0x52>
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	da11      	bge.n	800bba6 <_puts_r+0x9e>
 800bb82:	4622      	mov	r2, r4
 800bb84:	210a      	movs	r1, #10
 800bb86:	4628      	mov	r0, r5
 800bb88:	f000 f893 	bl	800bcb2 <__swbuf_r>
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d0d7      	beq.n	800bb40 <_puts_r+0x38>
 800bb90:	250a      	movs	r5, #10
 800bb92:	e7d7      	b.n	800bb44 <_puts_r+0x3c>
 800bb94:	4622      	mov	r2, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f88b 	bl	800bcb2 <__swbuf_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d1e7      	bne.n	800bb70 <_puts_r+0x68>
 800bba0:	e7ce      	b.n	800bb40 <_puts_r+0x38>
 800bba2:	3e01      	subs	r6, #1
 800bba4:	e7e4      	b.n	800bb70 <_puts_r+0x68>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	1c5a      	adds	r2, r3, #1
 800bbaa:	6022      	str	r2, [r4, #0]
 800bbac:	220a      	movs	r2, #10
 800bbae:	701a      	strb	r2, [r3, #0]
 800bbb0:	e7ee      	b.n	800bb90 <_puts_r+0x88>
	...

0800bbb4 <puts>:
 800bbb4:	4b02      	ldr	r3, [pc, #8]	@ (800bbc0 <puts+0xc>)
 800bbb6:	4601      	mov	r1, r0
 800bbb8:	6818      	ldr	r0, [r3, #0]
 800bbba:	f7ff bfa5 	b.w	800bb08 <_puts_r>
 800bbbe:	bf00      	nop
 800bbc0:	2000002c 	.word	0x2000002c

0800bbc4 <sniprintf>:
 800bbc4:	b40c      	push	{r2, r3}
 800bbc6:	b530      	push	{r4, r5, lr}
 800bbc8:	4b17      	ldr	r3, [pc, #92]	@ (800bc28 <sniprintf+0x64>)
 800bbca:	1e0c      	subs	r4, r1, #0
 800bbcc:	681d      	ldr	r5, [r3, #0]
 800bbce:	b09d      	sub	sp, #116	@ 0x74
 800bbd0:	da08      	bge.n	800bbe4 <sniprintf+0x20>
 800bbd2:	238b      	movs	r3, #139	@ 0x8b
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbd8:	602b      	str	r3, [r5, #0]
 800bbda:	b01d      	add	sp, #116	@ 0x74
 800bbdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbe0:	b002      	add	sp, #8
 800bbe2:	4770      	bx	lr
 800bbe4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bbe8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bbec:	bf0c      	ite	eq
 800bbee:	4623      	moveq	r3, r4
 800bbf0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	9307      	str	r3, [sp, #28]
 800bbf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bbfc:	9002      	str	r0, [sp, #8]
 800bbfe:	9006      	str	r0, [sp, #24]
 800bc00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc04:	4628      	mov	r0, r5
 800bc06:	ab21      	add	r3, sp, #132	@ 0x84
 800bc08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc0a:	a902      	add	r1, sp, #8
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	f001 fc0f 	bl	800d430 <_svfiprintf_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	bfbc      	itt	lt
 800bc16:	238b      	movlt	r3, #139	@ 0x8b
 800bc18:	602b      	strlt	r3, [r5, #0]
 800bc1a:	2c00      	cmp	r4, #0
 800bc1c:	d0dd      	beq.n	800bbda <sniprintf+0x16>
 800bc1e:	2200      	movs	r2, #0
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	701a      	strb	r2, [r3, #0]
 800bc24:	e7d9      	b.n	800bbda <sniprintf+0x16>
 800bc26:	bf00      	nop
 800bc28:	2000002c 	.word	0x2000002c

0800bc2c <__sread>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc34:	f000 f956 	bl	800bee4 <_read_r>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	bfab      	itete	ge
 800bc3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc3e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc40:	181b      	addge	r3, r3, r0
 800bc42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc46:	bfac      	ite	ge
 800bc48:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc4a:	81a3      	strhlt	r3, [r4, #12]
 800bc4c:	bd10      	pop	{r4, pc}

0800bc4e <__swrite>:
 800bc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc52:	461f      	mov	r7, r3
 800bc54:	898b      	ldrh	r3, [r1, #12]
 800bc56:	4605      	mov	r5, r0
 800bc58:	05db      	lsls	r3, r3, #23
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	d505      	bpl.n	800bc6c <__swrite+0x1e>
 800bc60:	2302      	movs	r3, #2
 800bc62:	2200      	movs	r2, #0
 800bc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc68:	f000 f92a 	bl	800bec0 <_lseek_r>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	4632      	mov	r2, r6
 800bc70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	4628      	mov	r0, r5
 800bc78:	463b      	mov	r3, r7
 800bc7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	f000 b951 	b.w	800bf28 <_write_r>

0800bc86 <__sseek>:
 800bc86:	b510      	push	{r4, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8e:	f000 f917 	bl	800bec0 <_lseek_r>
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	bf15      	itete	ne
 800bc98:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bca2:	81a3      	strheq	r3, [r4, #12]
 800bca4:	bf18      	it	ne
 800bca6:	81a3      	strhne	r3, [r4, #12]
 800bca8:	bd10      	pop	{r4, pc}

0800bcaa <__sclose>:
 800bcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcae:	f000 b8a1 	b.w	800bdf4 <_close_r>

0800bcb2 <__swbuf_r>:
 800bcb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb4:	460e      	mov	r6, r1
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	4605      	mov	r5, r0
 800bcba:	b118      	cbz	r0, 800bcc4 <__swbuf_r+0x12>
 800bcbc:	6a03      	ldr	r3, [r0, #32]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <__swbuf_r+0x12>
 800bcc0:	f7ff feda 	bl	800ba78 <__sinit>
 800bcc4:	69a3      	ldr	r3, [r4, #24]
 800bcc6:	60a3      	str	r3, [r4, #8]
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	071a      	lsls	r2, r3, #28
 800bccc:	d501      	bpl.n	800bcd2 <__swbuf_r+0x20>
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	b943      	cbnz	r3, 800bce4 <__swbuf_r+0x32>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f82b 	bl	800bd30 <__swsetup_r>
 800bcda:	b118      	cbz	r0, 800bce4 <__swbuf_r+0x32>
 800bcdc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bce0:	4638      	mov	r0, r7
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	6922      	ldr	r2, [r4, #16]
 800bce8:	b2f6      	uxtb	r6, r6
 800bcea:	1a98      	subs	r0, r3, r2
 800bcec:	6963      	ldr	r3, [r4, #20]
 800bcee:	4637      	mov	r7, r6
 800bcf0:	4283      	cmp	r3, r0
 800bcf2:	dc05      	bgt.n	800bd00 <__swbuf_r+0x4e>
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f001 fe56 	bl	800d9a8 <_fflush_r>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1ed      	bne.n	800bcdc <__swbuf_r+0x2a>
 800bd00:	68a3      	ldr	r3, [r4, #8]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	60a3      	str	r3, [r4, #8]
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	6022      	str	r2, [r4, #0]
 800bd0c:	701e      	strb	r6, [r3, #0]
 800bd0e:	6962      	ldr	r2, [r4, #20]
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d004      	beq.n	800bd20 <__swbuf_r+0x6e>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	07db      	lsls	r3, r3, #31
 800bd1a:	d5e1      	bpl.n	800bce0 <__swbuf_r+0x2e>
 800bd1c:	2e0a      	cmp	r6, #10
 800bd1e:	d1df      	bne.n	800bce0 <__swbuf_r+0x2e>
 800bd20:	4621      	mov	r1, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	f001 fe40 	bl	800d9a8 <_fflush_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0d9      	beq.n	800bce0 <__swbuf_r+0x2e>
 800bd2c:	e7d6      	b.n	800bcdc <__swbuf_r+0x2a>
	...

0800bd30 <__swsetup_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	4b29      	ldr	r3, [pc, #164]	@ (800bdd8 <__swsetup_r+0xa8>)
 800bd34:	4605      	mov	r5, r0
 800bd36:	6818      	ldr	r0, [r3, #0]
 800bd38:	460c      	mov	r4, r1
 800bd3a:	b118      	cbz	r0, 800bd44 <__swsetup_r+0x14>
 800bd3c:	6a03      	ldr	r3, [r0, #32]
 800bd3e:	b90b      	cbnz	r3, 800bd44 <__swsetup_r+0x14>
 800bd40:	f7ff fe9a 	bl	800ba78 <__sinit>
 800bd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd48:	0719      	lsls	r1, r3, #28
 800bd4a:	d422      	bmi.n	800bd92 <__swsetup_r+0x62>
 800bd4c:	06da      	lsls	r2, r3, #27
 800bd4e:	d407      	bmi.n	800bd60 <__swsetup_r+0x30>
 800bd50:	2209      	movs	r2, #9
 800bd52:	602a      	str	r2, [r5, #0]
 800bd54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	e033      	b.n	800bdc8 <__swsetup_r+0x98>
 800bd60:	0758      	lsls	r0, r3, #29
 800bd62:	d512      	bpl.n	800bd8a <__swsetup_r+0x5a>
 800bd64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd66:	b141      	cbz	r1, 800bd7a <__swsetup_r+0x4a>
 800bd68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd6c:	4299      	cmp	r1, r3
 800bd6e:	d002      	beq.n	800bd76 <__swsetup_r+0x46>
 800bd70:	4628      	mov	r0, r5
 800bd72:	f7ff f89b 	bl	800aeac <_free_r>
 800bd76:	2300      	movs	r3, #0
 800bd78:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd80:	81a3      	strh	r3, [r4, #12]
 800bd82:	2300      	movs	r3, #0
 800bd84:	6063      	str	r3, [r4, #4]
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	89a3      	ldrh	r3, [r4, #12]
 800bd8c:	f043 0308 	orr.w	r3, r3, #8
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	6923      	ldr	r3, [r4, #16]
 800bd94:	b94b      	cbnz	r3, 800bdaa <__swsetup_r+0x7a>
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bda0:	d003      	beq.n	800bdaa <__swsetup_r+0x7a>
 800bda2:	4621      	mov	r1, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f001 fe4c 	bl	800da42 <__smakebuf_r>
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	f013 0201 	ands.w	r2, r3, #1
 800bdb2:	d00a      	beq.n	800bdca <__swsetup_r+0x9a>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	60a2      	str	r2, [r4, #8]
 800bdb8:	6962      	ldr	r2, [r4, #20]
 800bdba:	4252      	negs	r2, r2
 800bdbc:	61a2      	str	r2, [r4, #24]
 800bdbe:	6922      	ldr	r2, [r4, #16]
 800bdc0:	b942      	cbnz	r2, 800bdd4 <__swsetup_r+0xa4>
 800bdc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdc6:	d1c5      	bne.n	800bd54 <__swsetup_r+0x24>
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	0799      	lsls	r1, r3, #30
 800bdcc:	bf58      	it	pl
 800bdce:	6962      	ldrpl	r2, [r4, #20]
 800bdd0:	60a2      	str	r2, [r4, #8]
 800bdd2:	e7f4      	b.n	800bdbe <__swsetup_r+0x8e>
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	e7f7      	b.n	800bdc8 <__swsetup_r+0x98>
 800bdd8:	2000002c 	.word	0x2000002c

0800bddc <memset>:
 800bddc:	4603      	mov	r3, r0
 800bdde:	4402      	add	r2, r0
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d100      	bne.n	800bde6 <memset+0xa>
 800bde4:	4770      	bx	lr
 800bde6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdea:	e7f9      	b.n	800bde0 <memset+0x4>

0800bdec <_localeconv_r>:
 800bdec:	4800      	ldr	r0, [pc, #0]	@ (800bdf0 <_localeconv_r+0x4>)
 800bdee:	4770      	bx	lr
 800bdf0:	2000016c 	.word	0x2000016c

0800bdf4 <_close_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4d05      	ldr	r5, [pc, #20]	@ (800be10 <_close_r+0x1c>)
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	602b      	str	r3, [r5, #0]
 800be00:	f7f6 f927 	bl	8002052 <_close>
 800be04:	1c43      	adds	r3, r0, #1
 800be06:	d102      	bne.n	800be0e <_close_r+0x1a>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	b103      	cbz	r3, 800be0e <_close_r+0x1a>
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	20003ae8 	.word	0x20003ae8

0800be14 <_reclaim_reent>:
 800be14:	4b29      	ldr	r3, [pc, #164]	@ (800bebc <_reclaim_reent+0xa8>)
 800be16:	b570      	push	{r4, r5, r6, lr}
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4604      	mov	r4, r0
 800be1c:	4283      	cmp	r3, r0
 800be1e:	d04b      	beq.n	800beb8 <_reclaim_reent+0xa4>
 800be20:	69c3      	ldr	r3, [r0, #28]
 800be22:	b1ab      	cbz	r3, 800be50 <_reclaim_reent+0x3c>
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	b16b      	cbz	r3, 800be44 <_reclaim_reent+0x30>
 800be28:	2500      	movs	r5, #0
 800be2a:	69e3      	ldr	r3, [r4, #28]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	5959      	ldr	r1, [r3, r5]
 800be30:	2900      	cmp	r1, #0
 800be32:	d13b      	bne.n	800beac <_reclaim_reent+0x98>
 800be34:	3504      	adds	r5, #4
 800be36:	2d80      	cmp	r5, #128	@ 0x80
 800be38:	d1f7      	bne.n	800be2a <_reclaim_reent+0x16>
 800be3a:	69e3      	ldr	r3, [r4, #28]
 800be3c:	4620      	mov	r0, r4
 800be3e:	68d9      	ldr	r1, [r3, #12]
 800be40:	f7ff f834 	bl	800aeac <_free_r>
 800be44:	69e3      	ldr	r3, [r4, #28]
 800be46:	6819      	ldr	r1, [r3, #0]
 800be48:	b111      	cbz	r1, 800be50 <_reclaim_reent+0x3c>
 800be4a:	4620      	mov	r0, r4
 800be4c:	f7ff f82e 	bl	800aeac <_free_r>
 800be50:	6961      	ldr	r1, [r4, #20]
 800be52:	b111      	cbz	r1, 800be5a <_reclaim_reent+0x46>
 800be54:	4620      	mov	r0, r4
 800be56:	f7ff f829 	bl	800aeac <_free_r>
 800be5a:	69e1      	ldr	r1, [r4, #28]
 800be5c:	b111      	cbz	r1, 800be64 <_reclaim_reent+0x50>
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff f824 	bl	800aeac <_free_r>
 800be64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be66:	b111      	cbz	r1, 800be6e <_reclaim_reent+0x5a>
 800be68:	4620      	mov	r0, r4
 800be6a:	f7ff f81f 	bl	800aeac <_free_r>
 800be6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be70:	b111      	cbz	r1, 800be78 <_reclaim_reent+0x64>
 800be72:	4620      	mov	r0, r4
 800be74:	f7ff f81a 	bl	800aeac <_free_r>
 800be78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800be7a:	b111      	cbz	r1, 800be82 <_reclaim_reent+0x6e>
 800be7c:	4620      	mov	r0, r4
 800be7e:	f7ff f815 	bl	800aeac <_free_r>
 800be82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800be84:	b111      	cbz	r1, 800be8c <_reclaim_reent+0x78>
 800be86:	4620      	mov	r0, r4
 800be88:	f7ff f810 	bl	800aeac <_free_r>
 800be8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800be8e:	b111      	cbz	r1, 800be96 <_reclaim_reent+0x82>
 800be90:	4620      	mov	r0, r4
 800be92:	f7ff f80b 	bl	800aeac <_free_r>
 800be96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800be98:	b111      	cbz	r1, 800bea0 <_reclaim_reent+0x8c>
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff f806 	bl	800aeac <_free_r>
 800bea0:	6a23      	ldr	r3, [r4, #32]
 800bea2:	b14b      	cbz	r3, 800beb8 <_reclaim_reent+0xa4>
 800bea4:	4620      	mov	r0, r4
 800bea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800beaa:	4718      	bx	r3
 800beac:	680e      	ldr	r6, [r1, #0]
 800beae:	4620      	mov	r0, r4
 800beb0:	f7fe fffc 	bl	800aeac <_free_r>
 800beb4:	4631      	mov	r1, r6
 800beb6:	e7bb      	b.n	800be30 <_reclaim_reent+0x1c>
 800beb8:	bd70      	pop	{r4, r5, r6, pc}
 800beba:	bf00      	nop
 800bebc:	2000002c 	.word	0x2000002c

0800bec0 <_lseek_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	2200      	movs	r2, #0
 800beca:	4d05      	ldr	r5, [pc, #20]	@ (800bee0 <_lseek_r+0x20>)
 800becc:	602a      	str	r2, [r5, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	f7f6 f8e3 	bl	800209a <_lseek>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	d102      	bne.n	800bede <_lseek_r+0x1e>
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	b103      	cbz	r3, 800bede <_lseek_r+0x1e>
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	bd38      	pop	{r3, r4, r5, pc}
 800bee0:	20003ae8 	.word	0x20003ae8

0800bee4 <_read_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	4611      	mov	r1, r2
 800beec:	2200      	movs	r2, #0
 800beee:	4d05      	ldr	r5, [pc, #20]	@ (800bf04 <_read_r+0x20>)
 800bef0:	602a      	str	r2, [r5, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	f7f6 f890 	bl	8002018 <_read>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_read_r+0x1e>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_read_r+0x1e>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20003ae8 	.word	0x20003ae8

0800bf08 <_sbrk_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	4d05      	ldr	r5, [pc, #20]	@ (800bf24 <_sbrk_r+0x1c>)
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f6 f8ce 	bl	80020b4 <_sbrk>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_sbrk_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_sbrk_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20003ae8 	.word	0x20003ae8

0800bf28 <_write_r>:
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	4611      	mov	r1, r2
 800bf30:	2200      	movs	r2, #0
 800bf32:	4d05      	ldr	r5, [pc, #20]	@ (800bf48 <_write_r+0x20>)
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	f7f6 f9bc 	bl	80022b4 <_write>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	d102      	bne.n	800bf46 <_write_r+0x1e>
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	b103      	cbz	r3, 800bf46 <_write_r+0x1e>
 800bf44:	6023      	str	r3, [r4, #0]
 800bf46:	bd38      	pop	{r3, r4, r5, pc}
 800bf48:	20003ae8 	.word	0x20003ae8

0800bf4c <__errno>:
 800bf4c:	4b01      	ldr	r3, [pc, #4]	@ (800bf54 <__errno+0x8>)
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	2000002c 	.word	0x2000002c

0800bf58 <__libc_init_array>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	4d0c      	ldr	r5, [pc, #48]	@ (800bf90 <__libc_init_array+0x38>)
 800bf5e:	4c0d      	ldr	r4, [pc, #52]	@ (800bf94 <__libc_init_array+0x3c>)
 800bf60:	1b64      	subs	r4, r4, r5
 800bf62:	10a4      	asrs	r4, r4, #2
 800bf64:	42a6      	cmp	r6, r4
 800bf66:	d109      	bne.n	800bf7c <__libc_init_array+0x24>
 800bf68:	f001 feca 	bl	800dd00 <_init>
 800bf6c:	2600      	movs	r6, #0
 800bf6e:	4d0a      	ldr	r5, [pc, #40]	@ (800bf98 <__libc_init_array+0x40>)
 800bf70:	4c0a      	ldr	r4, [pc, #40]	@ (800bf9c <__libc_init_array+0x44>)
 800bf72:	1b64      	subs	r4, r4, r5
 800bf74:	10a4      	asrs	r4, r4, #2
 800bf76:	42a6      	cmp	r6, r4
 800bf78:	d105      	bne.n	800bf86 <__libc_init_array+0x2e>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf80:	4798      	blx	r3
 800bf82:	3601      	adds	r6, #1
 800bf84:	e7ee      	b.n	800bf64 <__libc_init_array+0xc>
 800bf86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf8a:	4798      	blx	r3
 800bf8c:	3601      	adds	r6, #1
 800bf8e:	e7f2      	b.n	800bf76 <__libc_init_array+0x1e>
 800bf90:	0800e478 	.word	0x0800e478
 800bf94:	0800e478 	.word	0x0800e478
 800bf98:	0800e478 	.word	0x0800e478
 800bf9c:	0800e47c 	.word	0x0800e47c

0800bfa0 <memchr>:
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	b2c9      	uxtb	r1, r1
 800bfa6:	4402      	add	r2, r0
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	d101      	bne.n	800bfb2 <memchr+0x12>
 800bfae:	2000      	movs	r0, #0
 800bfb0:	e003      	b.n	800bfba <memchr+0x1a>
 800bfb2:	7804      	ldrb	r4, [r0, #0]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	428c      	cmp	r4, r1
 800bfb8:	d1f6      	bne.n	800bfa8 <memchr+0x8>
 800bfba:	bd10      	pop	{r4, pc}

0800bfbc <memcpy>:
 800bfbc:	440a      	add	r2, r1
 800bfbe:	4291      	cmp	r1, r2
 800bfc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bfc4:	d100      	bne.n	800bfc8 <memcpy+0xc>
 800bfc6:	4770      	bx	lr
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfce:	4291      	cmp	r1, r2
 800bfd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfd4:	d1f9      	bne.n	800bfca <memcpy+0xe>
 800bfd6:	bd10      	pop	{r4, pc}

0800bfd8 <quorem>:
 800bfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	6903      	ldr	r3, [r0, #16]
 800bfde:	690c      	ldr	r4, [r1, #16]
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	42a3      	cmp	r3, r4
 800bfe4:	db7e      	blt.n	800c0e4 <quorem+0x10c>
 800bfe6:	3c01      	subs	r4, #1
 800bfe8:	00a3      	lsls	r3, r4, #2
 800bfea:	f100 0514 	add.w	r5, r0, #20
 800bfee:	f101 0814 	add.w	r8, r1, #20
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c002:	3301      	adds	r3, #1
 800c004:	429a      	cmp	r2, r3
 800c006:	fbb2 f6f3 	udiv	r6, r2, r3
 800c00a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c00e:	d32e      	bcc.n	800c06e <quorem+0x96>
 800c010:	f04f 0a00 	mov.w	sl, #0
 800c014:	46c4      	mov	ip, r8
 800c016:	46ae      	mov	lr, r5
 800c018:	46d3      	mov	fp, sl
 800c01a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c01e:	b298      	uxth	r0, r3
 800c020:	fb06 a000 	mla	r0, r6, r0, sl
 800c024:	0c1b      	lsrs	r3, r3, #16
 800c026:	0c02      	lsrs	r2, r0, #16
 800c028:	fb06 2303 	mla	r3, r6, r3, r2
 800c02c:	f8de 2000 	ldr.w	r2, [lr]
 800c030:	b280      	uxth	r0, r0
 800c032:	b292      	uxth	r2, r2
 800c034:	1a12      	subs	r2, r2, r0
 800c036:	445a      	add	r2, fp
 800c038:	f8de 0000 	ldr.w	r0, [lr]
 800c03c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c040:	b29b      	uxth	r3, r3
 800c042:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c046:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c04a:	b292      	uxth	r2, r2
 800c04c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c050:	45e1      	cmp	r9, ip
 800c052:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c056:	f84e 2b04 	str.w	r2, [lr], #4
 800c05a:	d2de      	bcs.n	800c01a <quorem+0x42>
 800c05c:	9b00      	ldr	r3, [sp, #0]
 800c05e:	58eb      	ldr	r3, [r5, r3]
 800c060:	b92b      	cbnz	r3, 800c06e <quorem+0x96>
 800c062:	9b01      	ldr	r3, [sp, #4]
 800c064:	3b04      	subs	r3, #4
 800c066:	429d      	cmp	r5, r3
 800c068:	461a      	mov	r2, r3
 800c06a:	d32f      	bcc.n	800c0cc <quorem+0xf4>
 800c06c:	613c      	str	r4, [r7, #16]
 800c06e:	4638      	mov	r0, r7
 800c070:	f001 f87a 	bl	800d168 <__mcmp>
 800c074:	2800      	cmp	r0, #0
 800c076:	db25      	blt.n	800c0c4 <quorem+0xec>
 800c078:	4629      	mov	r1, r5
 800c07a:	2000      	movs	r0, #0
 800c07c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c080:	f8d1 c000 	ldr.w	ip, [r1]
 800c084:	fa1f fe82 	uxth.w	lr, r2
 800c088:	fa1f f38c 	uxth.w	r3, ip
 800c08c:	eba3 030e 	sub.w	r3, r3, lr
 800c090:	4403      	add	r3, r0
 800c092:	0c12      	lsrs	r2, r2, #16
 800c094:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c098:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a2:	45c1      	cmp	r9, r8
 800c0a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0a8:	f841 3b04 	str.w	r3, [r1], #4
 800c0ac:	d2e6      	bcs.n	800c07c <quorem+0xa4>
 800c0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0b6:	b922      	cbnz	r2, 800c0c2 <quorem+0xea>
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	461a      	mov	r2, r3
 800c0be:	d30b      	bcc.n	800c0d8 <quorem+0x100>
 800c0c0:	613c      	str	r4, [r7, #16]
 800c0c2:	3601      	adds	r6, #1
 800c0c4:	4630      	mov	r0, r6
 800c0c6:	b003      	add	sp, #12
 800c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	3b04      	subs	r3, #4
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d1cb      	bne.n	800c06c <quorem+0x94>
 800c0d4:	3c01      	subs	r4, #1
 800c0d6:	e7c6      	b.n	800c066 <quorem+0x8e>
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	3b04      	subs	r3, #4
 800c0dc:	2a00      	cmp	r2, #0
 800c0de:	d1ef      	bne.n	800c0c0 <quorem+0xe8>
 800c0e0:	3c01      	subs	r4, #1
 800c0e2:	e7ea      	b.n	800c0ba <quorem+0xe2>
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	e7ee      	b.n	800c0c6 <quorem+0xee>

0800c0e8 <_dtoa_r>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	461d      	mov	r5, r3
 800c0f0:	69c7      	ldr	r7, [r0, #28]
 800c0f2:	b097      	sub	sp, #92	@ 0x5c
 800c0f4:	4683      	mov	fp, r0
 800c0f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c0fc:	b97f      	cbnz	r7, 800c11e <_dtoa_r+0x36>
 800c0fe:	2010      	movs	r0, #16
 800c100:	f7fe ff1c 	bl	800af3c <malloc>
 800c104:	4602      	mov	r2, r0
 800c106:	f8cb 001c 	str.w	r0, [fp, #28]
 800c10a:	b920      	cbnz	r0, 800c116 <_dtoa_r+0x2e>
 800c10c:	21ef      	movs	r1, #239	@ 0xef
 800c10e:	4ba8      	ldr	r3, [pc, #672]	@ (800c3b0 <_dtoa_r+0x2c8>)
 800c110:	48a8      	ldr	r0, [pc, #672]	@ (800c3b4 <_dtoa_r+0x2cc>)
 800c112:	f001 fd0f 	bl	800db34 <__assert_func>
 800c116:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c11a:	6007      	str	r7, [r0, #0]
 800c11c:	60c7      	str	r7, [r0, #12]
 800c11e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c122:	6819      	ldr	r1, [r3, #0]
 800c124:	b159      	cbz	r1, 800c13e <_dtoa_r+0x56>
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	2301      	movs	r3, #1
 800c12a:	4093      	lsls	r3, r2
 800c12c:	604a      	str	r2, [r1, #4]
 800c12e:	608b      	str	r3, [r1, #8]
 800c130:	4658      	mov	r0, fp
 800c132:	f000 fde1 	bl	800ccf8 <_Bfree>
 800c136:	2200      	movs	r2, #0
 800c138:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	1e2b      	subs	r3, r5, #0
 800c140:	bfaf      	iteee	ge
 800c142:	2300      	movge	r3, #0
 800c144:	2201      	movlt	r2, #1
 800c146:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c14a:	9303      	strlt	r3, [sp, #12]
 800c14c:	bfa8      	it	ge
 800c14e:	6033      	strge	r3, [r6, #0]
 800c150:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c154:	4b98      	ldr	r3, [pc, #608]	@ (800c3b8 <_dtoa_r+0x2d0>)
 800c156:	bfb8      	it	lt
 800c158:	6032      	strlt	r2, [r6, #0]
 800c15a:	ea33 0308 	bics.w	r3, r3, r8
 800c15e:	d112      	bne.n	800c186 <_dtoa_r+0x9e>
 800c160:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c164:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c16c:	4323      	orrs	r3, r4
 800c16e:	f000 8550 	beq.w	800cc12 <_dtoa_r+0xb2a>
 800c172:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c174:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c3bc <_dtoa_r+0x2d4>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 8552 	beq.w	800cc22 <_dtoa_r+0xb3a>
 800c17e:	f10a 0303 	add.w	r3, sl, #3
 800c182:	f000 bd4c 	b.w	800cc1e <_dtoa_r+0xb36>
 800c186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c18a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	f7f4 fc07 	bl	80009a8 <__aeabi_dcmpeq>
 800c19a:	4607      	mov	r7, r0
 800c19c:	b158      	cbz	r0, 800c1b6 <_dtoa_r+0xce>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1a6:	b113      	cbz	r3, 800c1ae <_dtoa_r+0xc6>
 800c1a8:	4b85      	ldr	r3, [pc, #532]	@ (800c3c0 <_dtoa_r+0x2d8>)
 800c1aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c3c4 <_dtoa_r+0x2dc>
 800c1b2:	f000 bd36 	b.w	800cc22 <_dtoa_r+0xb3a>
 800c1b6:	ab14      	add	r3, sp, #80	@ 0x50
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	ab15      	add	r3, sp, #84	@ 0x54
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	4658      	mov	r0, fp
 800c1c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c1c4:	f001 f880 	bl	800d2c8 <__d2b>
 800c1c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c1cc:	4681      	mov	r9, r0
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	d077      	beq.n	800c2c2 <_dtoa_r+0x1da>
 800c1d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c1e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c1e8:	9712      	str	r7, [sp, #72]	@ 0x48
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4b76      	ldr	r3, [pc, #472]	@ (800c3c8 <_dtoa_r+0x2e0>)
 800c1f0:	f7f3 ffba 	bl	8000168 <__aeabi_dsub>
 800c1f4:	a368      	add	r3, pc, #416	@ (adr r3, 800c398 <_dtoa_r+0x2b0>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f96d 	bl	80004d8 <__aeabi_dmul>
 800c1fe:	a368      	add	r3, pc, #416	@ (adr r3, 800c3a0 <_dtoa_r+0x2b8>)
 800c200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c204:	f7f3 ffb2 	bl	800016c <__adddf3>
 800c208:	4604      	mov	r4, r0
 800c20a:	4630      	mov	r0, r6
 800c20c:	460d      	mov	r5, r1
 800c20e:	f7f4 f8f9 	bl	8000404 <__aeabi_i2d>
 800c212:	a365      	add	r3, pc, #404	@ (adr r3, 800c3a8 <_dtoa_r+0x2c0>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f7f4 f95e 	bl	80004d8 <__aeabi_dmul>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4620      	mov	r0, r4
 800c222:	4629      	mov	r1, r5
 800c224:	f7f3 ffa2 	bl	800016c <__adddf3>
 800c228:	4604      	mov	r4, r0
 800c22a:	460d      	mov	r5, r1
 800c22c:	f7f4 fc04 	bl	8000a38 <__aeabi_d2iz>
 800c230:	2200      	movs	r2, #0
 800c232:	4607      	mov	r7, r0
 800c234:	2300      	movs	r3, #0
 800c236:	4620      	mov	r0, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	f7f4 fbbf 	bl	80009bc <__aeabi_dcmplt>
 800c23e:	b140      	cbz	r0, 800c252 <_dtoa_r+0x16a>
 800c240:	4638      	mov	r0, r7
 800c242:	f7f4 f8df 	bl	8000404 <__aeabi_i2d>
 800c246:	4622      	mov	r2, r4
 800c248:	462b      	mov	r3, r5
 800c24a:	f7f4 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800c24e:	b900      	cbnz	r0, 800c252 <_dtoa_r+0x16a>
 800c250:	3f01      	subs	r7, #1
 800c252:	2f16      	cmp	r7, #22
 800c254:	d853      	bhi.n	800c2fe <_dtoa_r+0x216>
 800c256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c25a:	4b5c      	ldr	r3, [pc, #368]	@ (800c3cc <_dtoa_r+0x2e4>)
 800c25c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c264:	f7f4 fbaa 	bl	80009bc <__aeabi_dcmplt>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d04a      	beq.n	800c302 <_dtoa_r+0x21a>
 800c26c:	2300      	movs	r3, #0
 800c26e:	3f01      	subs	r7, #1
 800c270:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c272:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c274:	1b9b      	subs	r3, r3, r6
 800c276:	1e5a      	subs	r2, r3, #1
 800c278:	bf46      	itte	mi
 800c27a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c27e:	2300      	movmi	r3, #0
 800c280:	f04f 0800 	movpl.w	r8, #0
 800c284:	9209      	str	r2, [sp, #36]	@ 0x24
 800c286:	bf48      	it	mi
 800c288:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c28a:	2f00      	cmp	r7, #0
 800c28c:	db3b      	blt.n	800c306 <_dtoa_r+0x21e>
 800c28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c290:	970e      	str	r7, [sp, #56]	@ 0x38
 800c292:	443b      	add	r3, r7
 800c294:	9309      	str	r3, [sp, #36]	@ 0x24
 800c296:	2300      	movs	r3, #0
 800c298:	930a      	str	r3, [sp, #40]	@ 0x28
 800c29a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c29c:	2b09      	cmp	r3, #9
 800c29e:	d866      	bhi.n	800c36e <_dtoa_r+0x286>
 800c2a0:	2b05      	cmp	r3, #5
 800c2a2:	bfc4      	itt	gt
 800c2a4:	3b04      	subgt	r3, #4
 800c2a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c2a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2aa:	bfc8      	it	gt
 800c2ac:	2400      	movgt	r4, #0
 800c2ae:	f1a3 0302 	sub.w	r3, r3, #2
 800c2b2:	bfd8      	it	le
 800c2b4:	2401      	movle	r4, #1
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d864      	bhi.n	800c384 <_dtoa_r+0x29c>
 800c2ba:	e8df f003 	tbb	[pc, r3]
 800c2be:	382b      	.short	0x382b
 800c2c0:	5636      	.short	0x5636
 800c2c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c2c6:	441e      	add	r6, r3
 800c2c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c2cc:	2b20      	cmp	r3, #32
 800c2ce:	bfc1      	itttt	gt
 800c2d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c2d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c2d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c2dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c2e0:	bfd6      	itet	le
 800c2e2:	f1c3 0320 	rsble	r3, r3, #32
 800c2e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c2ea:	fa04 f003 	lslle.w	r0, r4, r3
 800c2ee:	f7f4 f879 	bl	80003e4 <__aeabi_ui2d>
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2f8:	3e01      	subs	r6, #1
 800c2fa:	9212      	str	r2, [sp, #72]	@ 0x48
 800c2fc:	e775      	b.n	800c1ea <_dtoa_r+0x102>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e7b6      	b.n	800c270 <_dtoa_r+0x188>
 800c302:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c304:	e7b5      	b.n	800c272 <_dtoa_r+0x18a>
 800c306:	427b      	negs	r3, r7
 800c308:	930a      	str	r3, [sp, #40]	@ 0x28
 800c30a:	2300      	movs	r3, #0
 800c30c:	eba8 0807 	sub.w	r8, r8, r7
 800c310:	930e      	str	r3, [sp, #56]	@ 0x38
 800c312:	e7c2      	b.n	800c29a <_dtoa_r+0x1b2>
 800c314:	2300      	movs	r3, #0
 800c316:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dc35      	bgt.n	800c38a <_dtoa_r+0x2a2>
 800c31e:	2301      	movs	r3, #1
 800c320:	461a      	mov	r2, r3
 800c322:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c326:	9221      	str	r2, [sp, #132]	@ 0x84
 800c328:	e00b      	b.n	800c342 <_dtoa_r+0x25a>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e7f3      	b.n	800c316 <_dtoa_r+0x22e>
 800c32e:	2300      	movs	r3, #0
 800c330:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c332:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c334:	18fb      	adds	r3, r7, r3
 800c336:	9308      	str	r3, [sp, #32]
 800c338:	3301      	adds	r3, #1
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	9307      	str	r3, [sp, #28]
 800c33e:	bfb8      	it	lt
 800c340:	2301      	movlt	r3, #1
 800c342:	2100      	movs	r1, #0
 800c344:	2204      	movs	r2, #4
 800c346:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c34a:	f102 0514 	add.w	r5, r2, #20
 800c34e:	429d      	cmp	r5, r3
 800c350:	d91f      	bls.n	800c392 <_dtoa_r+0x2aa>
 800c352:	6041      	str	r1, [r0, #4]
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fc8f 	bl	800cc78 <_Balloc>
 800c35a:	4682      	mov	sl, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d139      	bne.n	800c3d4 <_dtoa_r+0x2ec>
 800c360:	4602      	mov	r2, r0
 800c362:	f240 11af 	movw	r1, #431	@ 0x1af
 800c366:	4b1a      	ldr	r3, [pc, #104]	@ (800c3d0 <_dtoa_r+0x2e8>)
 800c368:	e6d2      	b.n	800c110 <_dtoa_r+0x28>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e7e0      	b.n	800c330 <_dtoa_r+0x248>
 800c36e:	2401      	movs	r4, #1
 800c370:	2300      	movs	r3, #0
 800c372:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c374:	9320      	str	r3, [sp, #128]	@ 0x80
 800c376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c37a:	2200      	movs	r2, #0
 800c37c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c380:	2312      	movs	r3, #18
 800c382:	e7d0      	b.n	800c326 <_dtoa_r+0x23e>
 800c384:	2301      	movs	r3, #1
 800c386:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c388:	e7f5      	b.n	800c376 <_dtoa_r+0x28e>
 800c38a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c38c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c390:	e7d7      	b.n	800c342 <_dtoa_r+0x25a>
 800c392:	3101      	adds	r1, #1
 800c394:	0052      	lsls	r2, r2, #1
 800c396:	e7d8      	b.n	800c34a <_dtoa_r+0x262>
 800c398:	636f4361 	.word	0x636f4361
 800c39c:	3fd287a7 	.word	0x3fd287a7
 800c3a0:	8b60c8b3 	.word	0x8b60c8b3
 800c3a4:	3fc68a28 	.word	0x3fc68a28
 800c3a8:	509f79fb 	.word	0x509f79fb
 800c3ac:	3fd34413 	.word	0x3fd34413
 800c3b0:	0800e141 	.word	0x0800e141
 800c3b4:	0800e158 	.word	0x0800e158
 800c3b8:	7ff00000 	.word	0x7ff00000
 800c3bc:	0800e13d 	.word	0x0800e13d
 800c3c0:	0800e111 	.word	0x0800e111
 800c3c4:	0800e110 	.word	0x0800e110
 800c3c8:	3ff80000 	.word	0x3ff80000
 800c3cc:	0800e250 	.word	0x0800e250
 800c3d0:	0800e1b0 	.word	0x0800e1b0
 800c3d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3d8:	6018      	str	r0, [r3, #0]
 800c3da:	9b07      	ldr	r3, [sp, #28]
 800c3dc:	2b0e      	cmp	r3, #14
 800c3de:	f200 80a4 	bhi.w	800c52a <_dtoa_r+0x442>
 800c3e2:	2c00      	cmp	r4, #0
 800c3e4:	f000 80a1 	beq.w	800c52a <_dtoa_r+0x442>
 800c3e8:	2f00      	cmp	r7, #0
 800c3ea:	dd33      	ble.n	800c454 <_dtoa_r+0x36c>
 800c3ec:	4b86      	ldr	r3, [pc, #536]	@ (800c608 <_dtoa_r+0x520>)
 800c3ee:	f007 020f 	and.w	r2, r7, #15
 800c3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3f6:	05f8      	lsls	r0, r7, #23
 800c3f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c3fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c400:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c404:	d516      	bpl.n	800c434 <_dtoa_r+0x34c>
 800c406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c40a:	4b80      	ldr	r3, [pc, #512]	@ (800c60c <_dtoa_r+0x524>)
 800c40c:	2603      	movs	r6, #3
 800c40e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c412:	f7f4 f98b 	bl	800072c <__aeabi_ddiv>
 800c416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c41a:	f004 040f 	and.w	r4, r4, #15
 800c41e:	4d7b      	ldr	r5, [pc, #492]	@ (800c60c <_dtoa_r+0x524>)
 800c420:	b954      	cbnz	r4, 800c438 <_dtoa_r+0x350>
 800c422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42a:	f7f4 f97f 	bl	800072c <__aeabi_ddiv>
 800c42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c432:	e028      	b.n	800c486 <_dtoa_r+0x39e>
 800c434:	2602      	movs	r6, #2
 800c436:	e7f2      	b.n	800c41e <_dtoa_r+0x336>
 800c438:	07e1      	lsls	r1, r4, #31
 800c43a:	d508      	bpl.n	800c44e <_dtoa_r+0x366>
 800c43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c440:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c444:	f7f4 f848 	bl	80004d8 <__aeabi_dmul>
 800c448:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c44c:	3601      	adds	r6, #1
 800c44e:	1064      	asrs	r4, r4, #1
 800c450:	3508      	adds	r5, #8
 800c452:	e7e5      	b.n	800c420 <_dtoa_r+0x338>
 800c454:	f000 80d2 	beq.w	800c5fc <_dtoa_r+0x514>
 800c458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c45c:	427c      	negs	r4, r7
 800c45e:	4b6a      	ldr	r3, [pc, #424]	@ (800c608 <_dtoa_r+0x520>)
 800c460:	f004 020f 	and.w	r2, r4, #15
 800c464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f4 f834 	bl	80004d8 <__aeabi_dmul>
 800c470:	2602      	movs	r6, #2
 800c472:	2300      	movs	r3, #0
 800c474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c478:	4d64      	ldr	r5, [pc, #400]	@ (800c60c <_dtoa_r+0x524>)
 800c47a:	1124      	asrs	r4, r4, #4
 800c47c:	2c00      	cmp	r4, #0
 800c47e:	f040 80b2 	bne.w	800c5e6 <_dtoa_r+0x4fe>
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1d3      	bne.n	800c42e <_dtoa_r+0x346>
 800c486:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 80b7 	beq.w	800c600 <_dtoa_r+0x518>
 800c492:	2200      	movs	r2, #0
 800c494:	4620      	mov	r0, r4
 800c496:	4629      	mov	r1, r5
 800c498:	4b5d      	ldr	r3, [pc, #372]	@ (800c610 <_dtoa_r+0x528>)
 800c49a:	f7f4 fa8f 	bl	80009bc <__aeabi_dcmplt>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f000 80ae 	beq.w	800c600 <_dtoa_r+0x518>
 800c4a4:	9b07      	ldr	r3, [sp, #28]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 80aa 	beq.w	800c600 <_dtoa_r+0x518>
 800c4ac:	9b08      	ldr	r3, [sp, #32]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dd37      	ble.n	800c522 <_dtoa_r+0x43a>
 800c4b2:	1e7b      	subs	r3, r7, #1
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	4b55      	ldr	r3, [pc, #340]	@ (800c614 <_dtoa_r+0x52c>)
 800c4be:	f7f4 f80b 	bl	80004d8 <__aeabi_dmul>
 800c4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4c6:	9c08      	ldr	r4, [sp, #32]
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f7f3 ff9a 	bl	8000404 <__aeabi_i2d>
 800c4d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4d4:	f7f4 f800 	bl	80004d8 <__aeabi_dmul>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4b4f      	ldr	r3, [pc, #316]	@ (800c618 <_dtoa_r+0x530>)
 800c4dc:	f7f3 fe46 	bl	800016c <__adddf3>
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c4e6:	2c00      	cmp	r4, #0
 800c4e8:	f040 809a 	bne.w	800c620 <_dtoa_r+0x538>
 800c4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4b4a      	ldr	r3, [pc, #296]	@ (800c61c <_dtoa_r+0x534>)
 800c4f4:	f7f3 fe38 	bl	8000168 <__aeabi_dsub>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c500:	462a      	mov	r2, r5
 800c502:	4633      	mov	r3, r6
 800c504:	f7f4 fa78 	bl	80009f8 <__aeabi_dcmpgt>
 800c508:	2800      	cmp	r0, #0
 800c50a:	f040 828e 	bne.w	800ca2a <_dtoa_r+0x942>
 800c50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c512:	462a      	mov	r2, r5
 800c514:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c518:	f7f4 fa50 	bl	80009bc <__aeabi_dcmplt>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f040 8127 	bne.w	800c770 <_dtoa_r+0x688>
 800c522:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c526:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c52a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f2c0 8163 	blt.w	800c7f8 <_dtoa_r+0x710>
 800c532:	2f0e      	cmp	r7, #14
 800c534:	f300 8160 	bgt.w	800c7f8 <_dtoa_r+0x710>
 800c538:	4b33      	ldr	r3, [pc, #204]	@ (800c608 <_dtoa_r+0x520>)
 800c53a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c53e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c542:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c548:	2b00      	cmp	r3, #0
 800c54a:	da03      	bge.n	800c554 <_dtoa_r+0x46c>
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f340 8100 	ble.w	800c754 <_dtoa_r+0x66c>
 800c554:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c558:	4656      	mov	r6, sl
 800c55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 f8e3 	bl	800072c <__aeabi_ddiv>
 800c566:	f7f4 fa67 	bl	8000a38 <__aeabi_d2iz>
 800c56a:	4680      	mov	r8, r0
 800c56c:	f7f3 ff4a 	bl	8000404 <__aeabi_i2d>
 800c570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c574:	f7f3 ffb0 	bl	80004d8 <__aeabi_dmul>
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f3 fdf2 	bl	8000168 <__aeabi_dsub>
 800c584:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c588:	9d07      	ldr	r5, [sp, #28]
 800c58a:	f806 4b01 	strb.w	r4, [r6], #1
 800c58e:	eba6 040a 	sub.w	r4, r6, sl
 800c592:	42a5      	cmp	r5, r4
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	f040 8116 	bne.w	800c7c8 <_dtoa_r+0x6e0>
 800c59c:	f7f3 fde6 	bl	800016c <__adddf3>
 800c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	f7f4 fa26 	bl	80009f8 <__aeabi_dcmpgt>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f040 80f8 	bne.w	800c7a2 <_dtoa_r+0x6ba>
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7f4 f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 800c5be:	b118      	cbz	r0, 800c5c8 <_dtoa_r+0x4e0>
 800c5c0:	f018 0f01 	tst.w	r8, #1
 800c5c4:	f040 80ed 	bne.w	800c7a2 <_dtoa_r+0x6ba>
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	4658      	mov	r0, fp
 800c5cc:	f000 fb94 	bl	800ccf8 <_Bfree>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	7033      	strb	r3, [r6, #0]
 800c5d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c5d6:	3701      	adds	r7, #1
 800c5d8:	601f      	str	r7, [r3, #0]
 800c5da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8320 	beq.w	800cc22 <_dtoa_r+0xb3a>
 800c5e2:	601e      	str	r6, [r3, #0]
 800c5e4:	e31d      	b.n	800cc22 <_dtoa_r+0xb3a>
 800c5e6:	07e2      	lsls	r2, r4, #31
 800c5e8:	d505      	bpl.n	800c5f6 <_dtoa_r+0x50e>
 800c5ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5ee:	f7f3 ff73 	bl	80004d8 <__aeabi_dmul>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	1064      	asrs	r4, r4, #1
 800c5f8:	3508      	adds	r5, #8
 800c5fa:	e73f      	b.n	800c47c <_dtoa_r+0x394>
 800c5fc:	2602      	movs	r6, #2
 800c5fe:	e742      	b.n	800c486 <_dtoa_r+0x39e>
 800c600:	9c07      	ldr	r4, [sp, #28]
 800c602:	9704      	str	r7, [sp, #16]
 800c604:	e761      	b.n	800c4ca <_dtoa_r+0x3e2>
 800c606:	bf00      	nop
 800c608:	0800e250 	.word	0x0800e250
 800c60c:	0800e228 	.word	0x0800e228
 800c610:	3ff00000 	.word	0x3ff00000
 800c614:	40240000 	.word	0x40240000
 800c618:	401c0000 	.word	0x401c0000
 800c61c:	40140000 	.word	0x40140000
 800c620:	4b70      	ldr	r3, [pc, #448]	@ (800c7e4 <_dtoa_r+0x6fc>)
 800c622:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c62c:	4454      	add	r4, sl
 800c62e:	2900      	cmp	r1, #0
 800c630:	d045      	beq.n	800c6be <_dtoa_r+0x5d6>
 800c632:	2000      	movs	r0, #0
 800c634:	496c      	ldr	r1, [pc, #432]	@ (800c7e8 <_dtoa_r+0x700>)
 800c636:	f7f4 f879 	bl	800072c <__aeabi_ddiv>
 800c63a:	4633      	mov	r3, r6
 800c63c:	462a      	mov	r2, r5
 800c63e:	f7f3 fd93 	bl	8000168 <__aeabi_dsub>
 800c642:	4656      	mov	r6, sl
 800c644:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64c:	f7f4 f9f4 	bl	8000a38 <__aeabi_d2iz>
 800c650:	4605      	mov	r5, r0
 800c652:	f7f3 fed7 	bl	8000404 <__aeabi_i2d>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65e:	f7f3 fd83 	bl	8000168 <__aeabi_dsub>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	3530      	adds	r5, #48	@ 0x30
 800c668:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c66c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c670:	f806 5b01 	strb.w	r5, [r6], #1
 800c674:	f7f4 f9a2 	bl	80009bc <__aeabi_dcmplt>
 800c678:	2800      	cmp	r0, #0
 800c67a:	d163      	bne.n	800c744 <_dtoa_r+0x65c>
 800c67c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c680:	2000      	movs	r0, #0
 800c682:	495a      	ldr	r1, [pc, #360]	@ (800c7ec <_dtoa_r+0x704>)
 800c684:	f7f3 fd70 	bl	8000168 <__aeabi_dsub>
 800c688:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c68c:	f7f4 f996 	bl	80009bc <__aeabi_dcmplt>
 800c690:	2800      	cmp	r0, #0
 800c692:	f040 8087 	bne.w	800c7a4 <_dtoa_r+0x6bc>
 800c696:	42a6      	cmp	r6, r4
 800c698:	f43f af43 	beq.w	800c522 <_dtoa_r+0x43a>
 800c69c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	4b53      	ldr	r3, [pc, #332]	@ (800c7f0 <_dtoa_r+0x708>)
 800c6a4:	f7f3 ff18 	bl	80004d8 <__aeabi_dmul>
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b2:	4b4f      	ldr	r3, [pc, #316]	@ (800c7f0 <_dtoa_r+0x708>)
 800c6b4:	f7f3 ff10 	bl	80004d8 <__aeabi_dmul>
 800c6b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6bc:	e7c4      	b.n	800c648 <_dtoa_r+0x560>
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f7f3 ff09 	bl	80004d8 <__aeabi_dmul>
 800c6c6:	4656      	mov	r6, sl
 800c6c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6d2:	f7f4 f9b1 	bl	8000a38 <__aeabi_d2iz>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	f7f3 fe94 	bl	8000404 <__aeabi_i2d>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6e4:	f7f3 fd40 	bl	8000168 <__aeabi_dsub>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	3530      	adds	r5, #48	@ 0x30
 800c6ee:	f806 5b01 	strb.w	r5, [r6], #1
 800c6f2:	42a6      	cmp	r6, r4
 800c6f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6f8:	f04f 0200 	mov.w	r2, #0
 800c6fc:	d124      	bne.n	800c748 <_dtoa_r+0x660>
 800c6fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c702:	4b39      	ldr	r3, [pc, #228]	@ (800c7e8 <_dtoa_r+0x700>)
 800c704:	f7f3 fd32 	bl	800016c <__adddf3>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c710:	f7f4 f972 	bl	80009f8 <__aeabi_dcmpgt>
 800c714:	2800      	cmp	r0, #0
 800c716:	d145      	bne.n	800c7a4 <_dtoa_r+0x6bc>
 800c718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c71c:	2000      	movs	r0, #0
 800c71e:	4932      	ldr	r1, [pc, #200]	@ (800c7e8 <_dtoa_r+0x700>)
 800c720:	f7f3 fd22 	bl	8000168 <__aeabi_dsub>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c72c:	f7f4 f946 	bl	80009bc <__aeabi_dcmplt>
 800c730:	2800      	cmp	r0, #0
 800c732:	f43f aef6 	beq.w	800c522 <_dtoa_r+0x43a>
 800c736:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c738:	1e73      	subs	r3, r6, #1
 800c73a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c73c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c740:	2b30      	cmp	r3, #48	@ 0x30
 800c742:	d0f8      	beq.n	800c736 <_dtoa_r+0x64e>
 800c744:	9f04      	ldr	r7, [sp, #16]
 800c746:	e73f      	b.n	800c5c8 <_dtoa_r+0x4e0>
 800c748:	4b29      	ldr	r3, [pc, #164]	@ (800c7f0 <_dtoa_r+0x708>)
 800c74a:	f7f3 fec5 	bl	80004d8 <__aeabi_dmul>
 800c74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c752:	e7bc      	b.n	800c6ce <_dtoa_r+0x5e6>
 800c754:	d10c      	bne.n	800c770 <_dtoa_r+0x688>
 800c756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c75a:	2200      	movs	r2, #0
 800c75c:	4b25      	ldr	r3, [pc, #148]	@ (800c7f4 <_dtoa_r+0x70c>)
 800c75e:	f7f3 febb 	bl	80004d8 <__aeabi_dmul>
 800c762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c766:	f7f4 f93d 	bl	80009e4 <__aeabi_dcmpge>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f000 815b 	beq.w	800ca26 <_dtoa_r+0x93e>
 800c770:	2400      	movs	r4, #0
 800c772:	4625      	mov	r5, r4
 800c774:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c776:	4656      	mov	r6, sl
 800c778:	43db      	mvns	r3, r3
 800c77a:	9304      	str	r3, [sp, #16]
 800c77c:	2700      	movs	r7, #0
 800c77e:	4621      	mov	r1, r4
 800c780:	4658      	mov	r0, fp
 800c782:	f000 fab9 	bl	800ccf8 <_Bfree>
 800c786:	2d00      	cmp	r5, #0
 800c788:	d0dc      	beq.n	800c744 <_dtoa_r+0x65c>
 800c78a:	b12f      	cbz	r7, 800c798 <_dtoa_r+0x6b0>
 800c78c:	42af      	cmp	r7, r5
 800c78e:	d003      	beq.n	800c798 <_dtoa_r+0x6b0>
 800c790:	4639      	mov	r1, r7
 800c792:	4658      	mov	r0, fp
 800c794:	f000 fab0 	bl	800ccf8 <_Bfree>
 800c798:	4629      	mov	r1, r5
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 faac 	bl	800ccf8 <_Bfree>
 800c7a0:	e7d0      	b.n	800c744 <_dtoa_r+0x65c>
 800c7a2:	9704      	str	r7, [sp, #16]
 800c7a4:	4633      	mov	r3, r6
 800c7a6:	461e      	mov	r6, r3
 800c7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7ac:	2a39      	cmp	r2, #57	@ 0x39
 800c7ae:	d107      	bne.n	800c7c0 <_dtoa_r+0x6d8>
 800c7b0:	459a      	cmp	sl, r3
 800c7b2:	d1f8      	bne.n	800c7a6 <_dtoa_r+0x6be>
 800c7b4:	9a04      	ldr	r2, [sp, #16]
 800c7b6:	3201      	adds	r2, #1
 800c7b8:	9204      	str	r2, [sp, #16]
 800c7ba:	2230      	movs	r2, #48	@ 0x30
 800c7bc:	f88a 2000 	strb.w	r2, [sl]
 800c7c0:	781a      	ldrb	r2, [r3, #0]
 800c7c2:	3201      	adds	r2, #1
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e7bd      	b.n	800c744 <_dtoa_r+0x65c>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	4b09      	ldr	r3, [pc, #36]	@ (800c7f0 <_dtoa_r+0x708>)
 800c7cc:	f7f3 fe84 	bl	80004d8 <__aeabi_dmul>
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	f7f4 f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f43f aebc 	beq.w	800c55a <_dtoa_r+0x472>
 800c7e2:	e6f1      	b.n	800c5c8 <_dtoa_r+0x4e0>
 800c7e4:	0800e250 	.word	0x0800e250
 800c7e8:	3fe00000 	.word	0x3fe00000
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	40240000 	.word	0x40240000
 800c7f4:	40140000 	.word	0x40140000
 800c7f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7fa:	2a00      	cmp	r2, #0
 800c7fc:	f000 80db 	beq.w	800c9b6 <_dtoa_r+0x8ce>
 800c800:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c802:	2a01      	cmp	r2, #1
 800c804:	f300 80bf 	bgt.w	800c986 <_dtoa_r+0x89e>
 800c808:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c80a:	2a00      	cmp	r2, #0
 800c80c:	f000 80b7 	beq.w	800c97e <_dtoa_r+0x896>
 800c810:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c814:	4646      	mov	r6, r8
 800c816:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c81a:	2101      	movs	r1, #1
 800c81c:	441a      	add	r2, r3
 800c81e:	4658      	mov	r0, fp
 800c820:	4498      	add	r8, r3
 800c822:	9209      	str	r2, [sp, #36]	@ 0x24
 800c824:	f000 fb1c 	bl	800ce60 <__i2b>
 800c828:	4605      	mov	r5, r0
 800c82a:	b15e      	cbz	r6, 800c844 <_dtoa_r+0x75c>
 800c82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c82e:	2b00      	cmp	r3, #0
 800c830:	dd08      	ble.n	800c844 <_dtoa_r+0x75c>
 800c832:	42b3      	cmp	r3, r6
 800c834:	bfa8      	it	ge
 800c836:	4633      	movge	r3, r6
 800c838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c83a:	eba8 0803 	sub.w	r8, r8, r3
 800c83e:	1af6      	subs	r6, r6, r3
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	9309      	str	r3, [sp, #36]	@ 0x24
 800c844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c846:	b1f3      	cbz	r3, 800c886 <_dtoa_r+0x79e>
 800c848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80b7 	beq.w	800c9be <_dtoa_r+0x8d6>
 800c850:	b18c      	cbz	r4, 800c876 <_dtoa_r+0x78e>
 800c852:	4629      	mov	r1, r5
 800c854:	4622      	mov	r2, r4
 800c856:	4658      	mov	r0, fp
 800c858:	f000 fbc0 	bl	800cfdc <__pow5mult>
 800c85c:	464a      	mov	r2, r9
 800c85e:	4601      	mov	r1, r0
 800c860:	4605      	mov	r5, r0
 800c862:	4658      	mov	r0, fp
 800c864:	f000 fb12 	bl	800ce8c <__multiply>
 800c868:	4649      	mov	r1, r9
 800c86a:	9004      	str	r0, [sp, #16]
 800c86c:	4658      	mov	r0, fp
 800c86e:	f000 fa43 	bl	800ccf8 <_Bfree>
 800c872:	9b04      	ldr	r3, [sp, #16]
 800c874:	4699      	mov	r9, r3
 800c876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c878:	1b1a      	subs	r2, r3, r4
 800c87a:	d004      	beq.n	800c886 <_dtoa_r+0x79e>
 800c87c:	4649      	mov	r1, r9
 800c87e:	4658      	mov	r0, fp
 800c880:	f000 fbac 	bl	800cfdc <__pow5mult>
 800c884:	4681      	mov	r9, r0
 800c886:	2101      	movs	r1, #1
 800c888:	4658      	mov	r0, fp
 800c88a:	f000 fae9 	bl	800ce60 <__i2b>
 800c88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c890:	4604      	mov	r4, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 81c9 	beq.w	800cc2a <_dtoa_r+0xb42>
 800c898:	461a      	mov	r2, r3
 800c89a:	4601      	mov	r1, r0
 800c89c:	4658      	mov	r0, fp
 800c89e:	f000 fb9d 	bl	800cfdc <__pow5mult>
 800c8a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	f300 808f 	bgt.w	800c9ca <_dtoa_r+0x8e2>
 800c8ac:	9b02      	ldr	r3, [sp, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f040 8087 	bne.w	800c9c2 <_dtoa_r+0x8da>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f040 8083 	bne.w	800c9c6 <_dtoa_r+0x8de>
 800c8c0:	9b03      	ldr	r3, [sp, #12]
 800c8c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8c6:	0d1b      	lsrs	r3, r3, #20
 800c8c8:	051b      	lsls	r3, r3, #20
 800c8ca:	b12b      	cbz	r3, 800c8d8 <_dtoa_r+0x7f0>
 800c8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ce:	f108 0801 	add.w	r8, r8, #1
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 81aa 	beq.w	800cc36 <_dtoa_r+0xb4e>
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c8e8:	6918      	ldr	r0, [r3, #16]
 800c8ea:	f000 fa6d 	bl	800cdc8 <__hi0bits>
 800c8ee:	f1c0 0020 	rsb	r0, r0, #32
 800c8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f4:	4418      	add	r0, r3
 800c8f6:	f010 001f 	ands.w	r0, r0, #31
 800c8fa:	d071      	beq.n	800c9e0 <_dtoa_r+0x8f8>
 800c8fc:	f1c0 0320 	rsb	r3, r0, #32
 800c900:	2b04      	cmp	r3, #4
 800c902:	dd65      	ble.n	800c9d0 <_dtoa_r+0x8e8>
 800c904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c906:	f1c0 001c 	rsb	r0, r0, #28
 800c90a:	4403      	add	r3, r0
 800c90c:	4480      	add	r8, r0
 800c90e:	4406      	add	r6, r0
 800c910:	9309      	str	r3, [sp, #36]	@ 0x24
 800c912:	f1b8 0f00 	cmp.w	r8, #0
 800c916:	dd05      	ble.n	800c924 <_dtoa_r+0x83c>
 800c918:	4649      	mov	r1, r9
 800c91a:	4642      	mov	r2, r8
 800c91c:	4658      	mov	r0, fp
 800c91e:	f000 fbb7 	bl	800d090 <__lshift>
 800c922:	4681      	mov	r9, r0
 800c924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	dd05      	ble.n	800c936 <_dtoa_r+0x84e>
 800c92a:	4621      	mov	r1, r4
 800c92c:	461a      	mov	r2, r3
 800c92e:	4658      	mov	r0, fp
 800c930:	f000 fbae 	bl	800d090 <__lshift>
 800c934:	4604      	mov	r4, r0
 800c936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d053      	beq.n	800c9e4 <_dtoa_r+0x8fc>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4648      	mov	r0, r9
 800c940:	f000 fc12 	bl	800d168 <__mcmp>
 800c944:	2800      	cmp	r0, #0
 800c946:	da4d      	bge.n	800c9e4 <_dtoa_r+0x8fc>
 800c948:	1e7b      	subs	r3, r7, #1
 800c94a:	4649      	mov	r1, r9
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	220a      	movs	r2, #10
 800c950:	2300      	movs	r3, #0
 800c952:	4658      	mov	r0, fp
 800c954:	f000 f9f2 	bl	800cd3c <__multadd>
 800c958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c95a:	4681      	mov	r9, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 816c 	beq.w	800cc3a <_dtoa_r+0xb52>
 800c962:	2300      	movs	r3, #0
 800c964:	4629      	mov	r1, r5
 800c966:	220a      	movs	r2, #10
 800c968:	4658      	mov	r0, fp
 800c96a:	f000 f9e7 	bl	800cd3c <__multadd>
 800c96e:	9b08      	ldr	r3, [sp, #32]
 800c970:	4605      	mov	r5, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	dc61      	bgt.n	800ca3a <_dtoa_r+0x952>
 800c976:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c978:	2b02      	cmp	r3, #2
 800c97a:	dc3b      	bgt.n	800c9f4 <_dtoa_r+0x90c>
 800c97c:	e05d      	b.n	800ca3a <_dtoa_r+0x952>
 800c97e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c980:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c984:	e746      	b.n	800c814 <_dtoa_r+0x72c>
 800c986:	9b07      	ldr	r3, [sp, #28]
 800c988:	1e5c      	subs	r4, r3, #1
 800c98a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	bfbf      	itttt	lt
 800c990:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c992:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c994:	1ae3      	sublt	r3, r4, r3
 800c996:	18d2      	addlt	r2, r2, r3
 800c998:	bfa8      	it	ge
 800c99a:	1b1c      	subge	r4, r3, r4
 800c99c:	9b07      	ldr	r3, [sp, #28]
 800c99e:	bfbe      	ittt	lt
 800c9a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c9a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c9a4:	2400      	movlt	r4, #0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	bfb5      	itete	lt
 800c9aa:	eba8 0603 	sublt.w	r6, r8, r3
 800c9ae:	4646      	movge	r6, r8
 800c9b0:	2300      	movlt	r3, #0
 800c9b2:	9b07      	ldrge	r3, [sp, #28]
 800c9b4:	e730      	b.n	800c818 <_dtoa_r+0x730>
 800c9b6:	4646      	mov	r6, r8
 800c9b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c9bc:	e735      	b.n	800c82a <_dtoa_r+0x742>
 800c9be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c9c0:	e75c      	b.n	800c87c <_dtoa_r+0x794>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e788      	b.n	800c8d8 <_dtoa_r+0x7f0>
 800c9c6:	9b02      	ldr	r3, [sp, #8]
 800c9c8:	e786      	b.n	800c8d8 <_dtoa_r+0x7f0>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9ce:	e788      	b.n	800c8e2 <_dtoa_r+0x7fa>
 800c9d0:	d09f      	beq.n	800c912 <_dtoa_r+0x82a>
 800c9d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9d4:	331c      	adds	r3, #28
 800c9d6:	441a      	add	r2, r3
 800c9d8:	4498      	add	r8, r3
 800c9da:	441e      	add	r6, r3
 800c9dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9de:	e798      	b.n	800c912 <_dtoa_r+0x82a>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	e7f6      	b.n	800c9d2 <_dtoa_r+0x8ea>
 800c9e4:	9b07      	ldr	r3, [sp, #28]
 800c9e6:	9704      	str	r7, [sp, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	dc20      	bgt.n	800ca2e <_dtoa_r+0x946>
 800c9ec:	9308      	str	r3, [sp, #32]
 800c9ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	dd1e      	ble.n	800ca32 <_dtoa_r+0x94a>
 800c9f4:	9b08      	ldr	r3, [sp, #32]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f47f aebc 	bne.w	800c774 <_dtoa_r+0x68c>
 800c9fc:	4621      	mov	r1, r4
 800c9fe:	2205      	movs	r2, #5
 800ca00:	4658      	mov	r0, fp
 800ca02:	f000 f99b 	bl	800cd3c <__multadd>
 800ca06:	4601      	mov	r1, r0
 800ca08:	4604      	mov	r4, r0
 800ca0a:	4648      	mov	r0, r9
 800ca0c:	f000 fbac 	bl	800d168 <__mcmp>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	f77f aeaf 	ble.w	800c774 <_dtoa_r+0x68c>
 800ca16:	2331      	movs	r3, #49	@ 0x31
 800ca18:	4656      	mov	r6, sl
 800ca1a:	f806 3b01 	strb.w	r3, [r6], #1
 800ca1e:	9b04      	ldr	r3, [sp, #16]
 800ca20:	3301      	adds	r3, #1
 800ca22:	9304      	str	r3, [sp, #16]
 800ca24:	e6aa      	b.n	800c77c <_dtoa_r+0x694>
 800ca26:	9c07      	ldr	r4, [sp, #28]
 800ca28:	9704      	str	r7, [sp, #16]
 800ca2a:	4625      	mov	r5, r4
 800ca2c:	e7f3      	b.n	800ca16 <_dtoa_r+0x92e>
 800ca2e:	9b07      	ldr	r3, [sp, #28]
 800ca30:	9308      	str	r3, [sp, #32]
 800ca32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 8104 	beq.w	800cc42 <_dtoa_r+0xb5a>
 800ca3a:	2e00      	cmp	r6, #0
 800ca3c:	dd05      	ble.n	800ca4a <_dtoa_r+0x962>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	4632      	mov	r2, r6
 800ca42:	4658      	mov	r0, fp
 800ca44:	f000 fb24 	bl	800d090 <__lshift>
 800ca48:	4605      	mov	r5, r0
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d05a      	beq.n	800cb06 <_dtoa_r+0xa1e>
 800ca50:	4658      	mov	r0, fp
 800ca52:	6869      	ldr	r1, [r5, #4]
 800ca54:	f000 f910 	bl	800cc78 <_Balloc>
 800ca58:	4606      	mov	r6, r0
 800ca5a:	b928      	cbnz	r0, 800ca68 <_dtoa_r+0x980>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca62:	4b83      	ldr	r3, [pc, #524]	@ (800cc70 <_dtoa_r+0xb88>)
 800ca64:	f7ff bb54 	b.w	800c110 <_dtoa_r+0x28>
 800ca68:	692a      	ldr	r2, [r5, #16]
 800ca6a:	f105 010c 	add.w	r1, r5, #12
 800ca6e:	3202      	adds	r2, #2
 800ca70:	0092      	lsls	r2, r2, #2
 800ca72:	300c      	adds	r0, #12
 800ca74:	f7ff faa2 	bl	800bfbc <memcpy>
 800ca78:	2201      	movs	r2, #1
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	4658      	mov	r0, fp
 800ca7e:	f000 fb07 	bl	800d090 <__lshift>
 800ca82:	462f      	mov	r7, r5
 800ca84:	4605      	mov	r5, r0
 800ca86:	f10a 0301 	add.w	r3, sl, #1
 800ca8a:	9307      	str	r3, [sp, #28]
 800ca8c:	9b08      	ldr	r3, [sp, #32]
 800ca8e:	4453      	add	r3, sl
 800ca90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca92:	9b02      	ldr	r3, [sp, #8]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca9a:	9b07      	ldr	r3, [sp, #28]
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	4648      	mov	r0, r9
 800caa2:	9302      	str	r3, [sp, #8]
 800caa4:	f7ff fa98 	bl	800bfd8 <quorem>
 800caa8:	4639      	mov	r1, r7
 800caaa:	9008      	str	r0, [sp, #32]
 800caac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cab0:	4648      	mov	r0, r9
 800cab2:	f000 fb59 	bl	800d168 <__mcmp>
 800cab6:	462a      	mov	r2, r5
 800cab8:	9009      	str	r0, [sp, #36]	@ 0x24
 800caba:	4621      	mov	r1, r4
 800cabc:	4658      	mov	r0, fp
 800cabe:	f000 fb6f 	bl	800d1a0 <__mdiff>
 800cac2:	68c2      	ldr	r2, [r0, #12]
 800cac4:	4606      	mov	r6, r0
 800cac6:	bb02      	cbnz	r2, 800cb0a <_dtoa_r+0xa22>
 800cac8:	4601      	mov	r1, r0
 800caca:	4648      	mov	r0, r9
 800cacc:	f000 fb4c 	bl	800d168 <__mcmp>
 800cad0:	4602      	mov	r2, r0
 800cad2:	4631      	mov	r1, r6
 800cad4:	4658      	mov	r0, fp
 800cad6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cad8:	f000 f90e 	bl	800ccf8 <_Bfree>
 800cadc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cade:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cae0:	9e07      	ldr	r6, [sp, #28]
 800cae2:	ea43 0102 	orr.w	r1, r3, r2
 800cae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cae8:	4319      	orrs	r1, r3
 800caea:	d110      	bne.n	800cb0e <_dtoa_r+0xa26>
 800caec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caf0:	d029      	beq.n	800cb46 <_dtoa_r+0xa5e>
 800caf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dd02      	ble.n	800cafe <_dtoa_r+0xa16>
 800caf8:	9b08      	ldr	r3, [sp, #32]
 800cafa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cafe:	9b02      	ldr	r3, [sp, #8]
 800cb00:	f883 8000 	strb.w	r8, [r3]
 800cb04:	e63b      	b.n	800c77e <_dtoa_r+0x696>
 800cb06:	4628      	mov	r0, r5
 800cb08:	e7bb      	b.n	800ca82 <_dtoa_r+0x99a>
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	e7e1      	b.n	800cad2 <_dtoa_r+0x9ea>
 800cb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	db04      	blt.n	800cb1e <_dtoa_r+0xa36>
 800cb14:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cb16:	430b      	orrs	r3, r1
 800cb18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	d120      	bne.n	800cb60 <_dtoa_r+0xa78>
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	dded      	ble.n	800cafe <_dtoa_r+0xa16>
 800cb22:	4649      	mov	r1, r9
 800cb24:	2201      	movs	r2, #1
 800cb26:	4658      	mov	r0, fp
 800cb28:	f000 fab2 	bl	800d090 <__lshift>
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4681      	mov	r9, r0
 800cb30:	f000 fb1a 	bl	800d168 <__mcmp>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	dc03      	bgt.n	800cb40 <_dtoa_r+0xa58>
 800cb38:	d1e1      	bne.n	800cafe <_dtoa_r+0xa16>
 800cb3a:	f018 0f01 	tst.w	r8, #1
 800cb3e:	d0de      	beq.n	800cafe <_dtoa_r+0xa16>
 800cb40:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb44:	d1d8      	bne.n	800caf8 <_dtoa_r+0xa10>
 800cb46:	2339      	movs	r3, #57	@ 0x39
 800cb48:	9a02      	ldr	r2, [sp, #8]
 800cb4a:	7013      	strb	r3, [r2, #0]
 800cb4c:	4633      	mov	r3, r6
 800cb4e:	461e      	mov	r6, r3
 800cb50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	2a39      	cmp	r2, #57	@ 0x39
 800cb58:	d052      	beq.n	800cc00 <_dtoa_r+0xb18>
 800cb5a:	3201      	adds	r2, #1
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	e60e      	b.n	800c77e <_dtoa_r+0x696>
 800cb60:	2a00      	cmp	r2, #0
 800cb62:	dd07      	ble.n	800cb74 <_dtoa_r+0xa8c>
 800cb64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb68:	d0ed      	beq.n	800cb46 <_dtoa_r+0xa5e>
 800cb6a:	9a02      	ldr	r2, [sp, #8]
 800cb6c:	f108 0301 	add.w	r3, r8, #1
 800cb70:	7013      	strb	r3, [r2, #0]
 800cb72:	e604      	b.n	800c77e <_dtoa_r+0x696>
 800cb74:	9b07      	ldr	r3, [sp, #28]
 800cb76:	9a07      	ldr	r2, [sp, #28]
 800cb78:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d028      	beq.n	800cbd4 <_dtoa_r+0xaec>
 800cb82:	4649      	mov	r1, r9
 800cb84:	2300      	movs	r3, #0
 800cb86:	220a      	movs	r2, #10
 800cb88:	4658      	mov	r0, fp
 800cb8a:	f000 f8d7 	bl	800cd3c <__multadd>
 800cb8e:	42af      	cmp	r7, r5
 800cb90:	4681      	mov	r9, r0
 800cb92:	f04f 0300 	mov.w	r3, #0
 800cb96:	f04f 020a 	mov.w	r2, #10
 800cb9a:	4639      	mov	r1, r7
 800cb9c:	4658      	mov	r0, fp
 800cb9e:	d107      	bne.n	800cbb0 <_dtoa_r+0xac8>
 800cba0:	f000 f8cc 	bl	800cd3c <__multadd>
 800cba4:	4607      	mov	r7, r0
 800cba6:	4605      	mov	r5, r0
 800cba8:	9b07      	ldr	r3, [sp, #28]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	e774      	b.n	800ca9a <_dtoa_r+0x9b2>
 800cbb0:	f000 f8c4 	bl	800cd3c <__multadd>
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	4607      	mov	r7, r0
 800cbb8:	2300      	movs	r3, #0
 800cbba:	220a      	movs	r2, #10
 800cbbc:	4658      	mov	r0, fp
 800cbbe:	f000 f8bd 	bl	800cd3c <__multadd>
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	e7f0      	b.n	800cba8 <_dtoa_r+0xac0>
 800cbc6:	9b08      	ldr	r3, [sp, #32]
 800cbc8:	2700      	movs	r7, #0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	bfcc      	ite	gt
 800cbce:	461e      	movgt	r6, r3
 800cbd0:	2601      	movle	r6, #1
 800cbd2:	4456      	add	r6, sl
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4658      	mov	r0, fp
 800cbda:	f000 fa59 	bl	800d090 <__lshift>
 800cbde:	4621      	mov	r1, r4
 800cbe0:	4681      	mov	r9, r0
 800cbe2:	f000 fac1 	bl	800d168 <__mcmp>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	dcb0      	bgt.n	800cb4c <_dtoa_r+0xa64>
 800cbea:	d102      	bne.n	800cbf2 <_dtoa_r+0xb0a>
 800cbec:	f018 0f01 	tst.w	r8, #1
 800cbf0:	d1ac      	bne.n	800cb4c <_dtoa_r+0xa64>
 800cbf2:	4633      	mov	r3, r6
 800cbf4:	461e      	mov	r6, r3
 800cbf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbfa:	2a30      	cmp	r2, #48	@ 0x30
 800cbfc:	d0fa      	beq.n	800cbf4 <_dtoa_r+0xb0c>
 800cbfe:	e5be      	b.n	800c77e <_dtoa_r+0x696>
 800cc00:	459a      	cmp	sl, r3
 800cc02:	d1a4      	bne.n	800cb4e <_dtoa_r+0xa66>
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	3301      	adds	r3, #1
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	2331      	movs	r3, #49	@ 0x31
 800cc0c:	f88a 3000 	strb.w	r3, [sl]
 800cc10:	e5b5      	b.n	800c77e <_dtoa_r+0x696>
 800cc12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cc14:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc74 <_dtoa_r+0xb8c>
 800cc18:	b11b      	cbz	r3, 800cc22 <_dtoa_r+0xb3a>
 800cc1a:	f10a 0308 	add.w	r3, sl, #8
 800cc1e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	4650      	mov	r0, sl
 800cc24:	b017      	add	sp, #92	@ 0x5c
 800cc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	f77f ae3d 	ble.w	800c8ac <_dtoa_r+0x7c4>
 800cc32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc34:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc36:	2001      	movs	r0, #1
 800cc38:	e65b      	b.n	800c8f2 <_dtoa_r+0x80a>
 800cc3a:	9b08      	ldr	r3, [sp, #32]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f77f aed6 	ble.w	800c9ee <_dtoa_r+0x906>
 800cc42:	4656      	mov	r6, sl
 800cc44:	4621      	mov	r1, r4
 800cc46:	4648      	mov	r0, r9
 800cc48:	f7ff f9c6 	bl	800bfd8 <quorem>
 800cc4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	f806 8b01 	strb.w	r8, [r6], #1
 800cc56:	eba6 020a 	sub.w	r2, r6, sl
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	ddb3      	ble.n	800cbc6 <_dtoa_r+0xade>
 800cc5e:	4649      	mov	r1, r9
 800cc60:	2300      	movs	r3, #0
 800cc62:	220a      	movs	r2, #10
 800cc64:	4658      	mov	r0, fp
 800cc66:	f000 f869 	bl	800cd3c <__multadd>
 800cc6a:	4681      	mov	r9, r0
 800cc6c:	e7ea      	b.n	800cc44 <_dtoa_r+0xb5c>
 800cc6e:	bf00      	nop
 800cc70:	0800e1b0 	.word	0x0800e1b0
 800cc74:	0800e134 	.word	0x0800e134

0800cc78 <_Balloc>:
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	69c6      	ldr	r6, [r0, #28]
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	460d      	mov	r5, r1
 800cc80:	b976      	cbnz	r6, 800cca0 <_Balloc+0x28>
 800cc82:	2010      	movs	r0, #16
 800cc84:	f7fe f95a 	bl	800af3c <malloc>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	61e0      	str	r0, [r4, #28]
 800cc8c:	b920      	cbnz	r0, 800cc98 <_Balloc+0x20>
 800cc8e:	216b      	movs	r1, #107	@ 0x6b
 800cc90:	4b17      	ldr	r3, [pc, #92]	@ (800ccf0 <_Balloc+0x78>)
 800cc92:	4818      	ldr	r0, [pc, #96]	@ (800ccf4 <_Balloc+0x7c>)
 800cc94:	f000 ff4e 	bl	800db34 <__assert_func>
 800cc98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc9c:	6006      	str	r6, [r0, #0]
 800cc9e:	60c6      	str	r6, [r0, #12]
 800cca0:	69e6      	ldr	r6, [r4, #28]
 800cca2:	68f3      	ldr	r3, [r6, #12]
 800cca4:	b183      	cbz	r3, 800ccc8 <_Balloc+0x50>
 800cca6:	69e3      	ldr	r3, [r4, #28]
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccae:	b9b8      	cbnz	r0, 800cce0 <_Balloc+0x68>
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	fa01 f605 	lsl.w	r6, r1, r5
 800ccb6:	1d72      	adds	r2, r6, #5
 800ccb8:	4620      	mov	r0, r4
 800ccba:	0092      	lsls	r2, r2, #2
 800ccbc:	f000 ff58 	bl	800db70 <_calloc_r>
 800ccc0:	b160      	cbz	r0, 800ccdc <_Balloc+0x64>
 800ccc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccc6:	e00e      	b.n	800cce6 <_Balloc+0x6e>
 800ccc8:	2221      	movs	r2, #33	@ 0x21
 800ccca:	2104      	movs	r1, #4
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 ff4f 	bl	800db70 <_calloc_r>
 800ccd2:	69e3      	ldr	r3, [r4, #28]
 800ccd4:	60f0      	str	r0, [r6, #12]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1e4      	bne.n	800cca6 <_Balloc+0x2e>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	6802      	ldr	r2, [r0, #0]
 800cce2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cce6:	2300      	movs	r3, #0
 800cce8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccec:	e7f7      	b.n	800ccde <_Balloc+0x66>
 800ccee:	bf00      	nop
 800ccf0:	0800e141 	.word	0x0800e141
 800ccf4:	0800e1c1 	.word	0x0800e1c1

0800ccf8 <_Bfree>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	69c6      	ldr	r6, [r0, #28]
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b976      	cbnz	r6, 800cd20 <_Bfree+0x28>
 800cd02:	2010      	movs	r0, #16
 800cd04:	f7fe f91a 	bl	800af3c <malloc>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	61e8      	str	r0, [r5, #28]
 800cd0c:	b920      	cbnz	r0, 800cd18 <_Bfree+0x20>
 800cd0e:	218f      	movs	r1, #143	@ 0x8f
 800cd10:	4b08      	ldr	r3, [pc, #32]	@ (800cd34 <_Bfree+0x3c>)
 800cd12:	4809      	ldr	r0, [pc, #36]	@ (800cd38 <_Bfree+0x40>)
 800cd14:	f000 ff0e 	bl	800db34 <__assert_func>
 800cd18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd1c:	6006      	str	r6, [r0, #0]
 800cd1e:	60c6      	str	r6, [r0, #12]
 800cd20:	b13c      	cbz	r4, 800cd32 <_Bfree+0x3a>
 800cd22:	69eb      	ldr	r3, [r5, #28]
 800cd24:	6862      	ldr	r2, [r4, #4]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd2c:	6021      	str	r1, [r4, #0]
 800cd2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	0800e141 	.word	0x0800e141
 800cd38:	0800e1c1 	.word	0x0800e1c1

0800cd3c <__multadd>:
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	4607      	mov	r7, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	461e      	mov	r6, r3
 800cd46:	2000      	movs	r0, #0
 800cd48:	690d      	ldr	r5, [r1, #16]
 800cd4a:	f101 0c14 	add.w	ip, r1, #20
 800cd4e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd52:	3001      	adds	r0, #1
 800cd54:	b299      	uxth	r1, r3
 800cd56:	fb02 6101 	mla	r1, r2, r1, r6
 800cd5a:	0c1e      	lsrs	r6, r3, #16
 800cd5c:	0c0b      	lsrs	r3, r1, #16
 800cd5e:	fb02 3306 	mla	r3, r2, r6, r3
 800cd62:	b289      	uxth	r1, r1
 800cd64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd68:	4285      	cmp	r5, r0
 800cd6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd6e:	f84c 1b04 	str.w	r1, [ip], #4
 800cd72:	dcec      	bgt.n	800cd4e <__multadd+0x12>
 800cd74:	b30e      	cbz	r6, 800cdba <__multadd+0x7e>
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	42ab      	cmp	r3, r5
 800cd7a:	dc19      	bgt.n	800cdb0 <__multadd+0x74>
 800cd7c:	6861      	ldr	r1, [r4, #4]
 800cd7e:	4638      	mov	r0, r7
 800cd80:	3101      	adds	r1, #1
 800cd82:	f7ff ff79 	bl	800cc78 <_Balloc>
 800cd86:	4680      	mov	r8, r0
 800cd88:	b928      	cbnz	r0, 800cd96 <__multadd+0x5a>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	21ba      	movs	r1, #186	@ 0xba
 800cd8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc0 <__multadd+0x84>)
 800cd90:	480c      	ldr	r0, [pc, #48]	@ (800cdc4 <__multadd+0x88>)
 800cd92:	f000 fecf 	bl	800db34 <__assert_func>
 800cd96:	6922      	ldr	r2, [r4, #16]
 800cd98:	f104 010c 	add.w	r1, r4, #12
 800cd9c:	3202      	adds	r2, #2
 800cd9e:	0092      	lsls	r2, r2, #2
 800cda0:	300c      	adds	r0, #12
 800cda2:	f7ff f90b 	bl	800bfbc <memcpy>
 800cda6:	4621      	mov	r1, r4
 800cda8:	4638      	mov	r0, r7
 800cdaa:	f7ff ffa5 	bl	800ccf8 <_Bfree>
 800cdae:	4644      	mov	r4, r8
 800cdb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdb4:	3501      	adds	r5, #1
 800cdb6:	615e      	str	r6, [r3, #20]
 800cdb8:	6125      	str	r5, [r4, #16]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc0:	0800e1b0 	.word	0x0800e1b0
 800cdc4:	0800e1c1 	.word	0x0800e1c1

0800cdc8 <__hi0bits>:
 800cdc8:	4603      	mov	r3, r0
 800cdca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cdce:	bf3a      	itte	cc
 800cdd0:	0403      	lslcc	r3, r0, #16
 800cdd2:	2010      	movcc	r0, #16
 800cdd4:	2000      	movcs	r0, #0
 800cdd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cdda:	bf3c      	itt	cc
 800cddc:	021b      	lslcc	r3, r3, #8
 800cdde:	3008      	addcc	r0, #8
 800cde0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cde4:	bf3c      	itt	cc
 800cde6:	011b      	lslcc	r3, r3, #4
 800cde8:	3004      	addcc	r0, #4
 800cdea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdee:	bf3c      	itt	cc
 800cdf0:	009b      	lslcc	r3, r3, #2
 800cdf2:	3002      	addcc	r0, #2
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db05      	blt.n	800ce04 <__hi0bits+0x3c>
 800cdf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cdfc:	f100 0001 	add.w	r0, r0, #1
 800ce00:	bf08      	it	eq
 800ce02:	2020      	moveq	r0, #32
 800ce04:	4770      	bx	lr

0800ce06 <__lo0bits>:
 800ce06:	6803      	ldr	r3, [r0, #0]
 800ce08:	4602      	mov	r2, r0
 800ce0a:	f013 0007 	ands.w	r0, r3, #7
 800ce0e:	d00b      	beq.n	800ce28 <__lo0bits+0x22>
 800ce10:	07d9      	lsls	r1, r3, #31
 800ce12:	d421      	bmi.n	800ce58 <__lo0bits+0x52>
 800ce14:	0798      	lsls	r0, r3, #30
 800ce16:	bf49      	itett	mi
 800ce18:	085b      	lsrmi	r3, r3, #1
 800ce1a:	089b      	lsrpl	r3, r3, #2
 800ce1c:	2001      	movmi	r0, #1
 800ce1e:	6013      	strmi	r3, [r2, #0]
 800ce20:	bf5c      	itt	pl
 800ce22:	2002      	movpl	r0, #2
 800ce24:	6013      	strpl	r3, [r2, #0]
 800ce26:	4770      	bx	lr
 800ce28:	b299      	uxth	r1, r3
 800ce2a:	b909      	cbnz	r1, 800ce30 <__lo0bits+0x2a>
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	0c1b      	lsrs	r3, r3, #16
 800ce30:	b2d9      	uxtb	r1, r3
 800ce32:	b909      	cbnz	r1, 800ce38 <__lo0bits+0x32>
 800ce34:	3008      	adds	r0, #8
 800ce36:	0a1b      	lsrs	r3, r3, #8
 800ce38:	0719      	lsls	r1, r3, #28
 800ce3a:	bf04      	itt	eq
 800ce3c:	091b      	lsreq	r3, r3, #4
 800ce3e:	3004      	addeq	r0, #4
 800ce40:	0799      	lsls	r1, r3, #30
 800ce42:	bf04      	itt	eq
 800ce44:	089b      	lsreq	r3, r3, #2
 800ce46:	3002      	addeq	r0, #2
 800ce48:	07d9      	lsls	r1, r3, #31
 800ce4a:	d403      	bmi.n	800ce54 <__lo0bits+0x4e>
 800ce4c:	085b      	lsrs	r3, r3, #1
 800ce4e:	f100 0001 	add.w	r0, r0, #1
 800ce52:	d003      	beq.n	800ce5c <__lo0bits+0x56>
 800ce54:	6013      	str	r3, [r2, #0]
 800ce56:	4770      	bx	lr
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4770      	bx	lr
 800ce5c:	2020      	movs	r0, #32
 800ce5e:	4770      	bx	lr

0800ce60 <__i2b>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	460c      	mov	r4, r1
 800ce64:	2101      	movs	r1, #1
 800ce66:	f7ff ff07 	bl	800cc78 <_Balloc>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	b928      	cbnz	r0, 800ce7a <__i2b+0x1a>
 800ce6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ce72:	4b04      	ldr	r3, [pc, #16]	@ (800ce84 <__i2b+0x24>)
 800ce74:	4804      	ldr	r0, [pc, #16]	@ (800ce88 <__i2b+0x28>)
 800ce76:	f000 fe5d 	bl	800db34 <__assert_func>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	6144      	str	r4, [r0, #20]
 800ce7e:	6103      	str	r3, [r0, #16]
 800ce80:	bd10      	pop	{r4, pc}
 800ce82:	bf00      	nop
 800ce84:	0800e1b0 	.word	0x0800e1b0
 800ce88:	0800e1c1 	.word	0x0800e1c1

0800ce8c <__multiply>:
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	4614      	mov	r4, r2
 800ce92:	690a      	ldr	r2, [r1, #16]
 800ce94:	6923      	ldr	r3, [r4, #16]
 800ce96:	460f      	mov	r7, r1
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	bfa2      	ittt	ge
 800ce9c:	4623      	movge	r3, r4
 800ce9e:	460c      	movge	r4, r1
 800cea0:	461f      	movge	r7, r3
 800cea2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cea6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ceaa:	68a3      	ldr	r3, [r4, #8]
 800ceac:	6861      	ldr	r1, [r4, #4]
 800ceae:	eb0a 0609 	add.w	r6, sl, r9
 800ceb2:	42b3      	cmp	r3, r6
 800ceb4:	b085      	sub	sp, #20
 800ceb6:	bfb8      	it	lt
 800ceb8:	3101      	addlt	r1, #1
 800ceba:	f7ff fedd 	bl	800cc78 <_Balloc>
 800cebe:	b930      	cbnz	r0, 800cece <__multiply+0x42>
 800cec0:	4602      	mov	r2, r0
 800cec2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cec6:	4b43      	ldr	r3, [pc, #268]	@ (800cfd4 <__multiply+0x148>)
 800cec8:	4843      	ldr	r0, [pc, #268]	@ (800cfd8 <__multiply+0x14c>)
 800ceca:	f000 fe33 	bl	800db34 <__assert_func>
 800cece:	f100 0514 	add.w	r5, r0, #20
 800ced2:	462b      	mov	r3, r5
 800ced4:	2200      	movs	r2, #0
 800ced6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ceda:	4543      	cmp	r3, r8
 800cedc:	d321      	bcc.n	800cf22 <__multiply+0x96>
 800cede:	f107 0114 	add.w	r1, r7, #20
 800cee2:	f104 0214 	add.w	r2, r4, #20
 800cee6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ceea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ceee:	9302      	str	r3, [sp, #8]
 800cef0:	1b13      	subs	r3, r2, r4
 800cef2:	3b15      	subs	r3, #21
 800cef4:	f023 0303 	bic.w	r3, r3, #3
 800cef8:	3304      	adds	r3, #4
 800cefa:	f104 0715 	add.w	r7, r4, #21
 800cefe:	42ba      	cmp	r2, r7
 800cf00:	bf38      	it	cc
 800cf02:	2304      	movcc	r3, #4
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	9b02      	ldr	r3, [sp, #8]
 800cf08:	9103      	str	r1, [sp, #12]
 800cf0a:	428b      	cmp	r3, r1
 800cf0c:	d80c      	bhi.n	800cf28 <__multiply+0x9c>
 800cf0e:	2e00      	cmp	r6, #0
 800cf10:	dd03      	ble.n	800cf1a <__multiply+0x8e>
 800cf12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d05a      	beq.n	800cfd0 <__multiply+0x144>
 800cf1a:	6106      	str	r6, [r0, #16]
 800cf1c:	b005      	add	sp, #20
 800cf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf22:	f843 2b04 	str.w	r2, [r3], #4
 800cf26:	e7d8      	b.n	800ceda <__multiply+0x4e>
 800cf28:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf2c:	f1ba 0f00 	cmp.w	sl, #0
 800cf30:	d023      	beq.n	800cf7a <__multiply+0xee>
 800cf32:	46a9      	mov	r9, r5
 800cf34:	f04f 0c00 	mov.w	ip, #0
 800cf38:	f104 0e14 	add.w	lr, r4, #20
 800cf3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf40:	f8d9 3000 	ldr.w	r3, [r9]
 800cf44:	fa1f fb87 	uxth.w	fp, r7
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf4e:	4463      	add	r3, ip
 800cf50:	f8d9 c000 	ldr.w	ip, [r9]
 800cf54:	0c3f      	lsrs	r7, r7, #16
 800cf56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cf5a:	fb0a c707 	mla	r7, sl, r7, ip
 800cf5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf68:	4572      	cmp	r2, lr
 800cf6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf6e:	f849 3b04 	str.w	r3, [r9], #4
 800cf72:	d8e3      	bhi.n	800cf3c <__multiply+0xb0>
 800cf74:	9b01      	ldr	r3, [sp, #4]
 800cf76:	f845 c003 	str.w	ip, [r5, r3]
 800cf7a:	9b03      	ldr	r3, [sp, #12]
 800cf7c:	3104      	adds	r1, #4
 800cf7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf82:	f1b9 0f00 	cmp.w	r9, #0
 800cf86:	d021      	beq.n	800cfcc <__multiply+0x140>
 800cf88:	46ae      	mov	lr, r5
 800cf8a:	f04f 0a00 	mov.w	sl, #0
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	f104 0c14 	add.w	ip, r4, #20
 800cf94:	f8bc b000 	ldrh.w	fp, [ip]
 800cf98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	fb09 770b 	mla	r7, r9, fp, r7
 800cfa2:	4457      	add	r7, sl
 800cfa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cfa8:	f84e 3b04 	str.w	r3, [lr], #4
 800cfac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfb4:	f8be 3000 	ldrh.w	r3, [lr]
 800cfb8:	4562      	cmp	r2, ip
 800cfba:	fb09 330a 	mla	r3, r9, sl, r3
 800cfbe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cfc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfc6:	d8e5      	bhi.n	800cf94 <__multiply+0x108>
 800cfc8:	9f01      	ldr	r7, [sp, #4]
 800cfca:	51eb      	str	r3, [r5, r7]
 800cfcc:	3504      	adds	r5, #4
 800cfce:	e79a      	b.n	800cf06 <__multiply+0x7a>
 800cfd0:	3e01      	subs	r6, #1
 800cfd2:	e79c      	b.n	800cf0e <__multiply+0x82>
 800cfd4:	0800e1b0 	.word	0x0800e1b0
 800cfd8:	0800e1c1 	.word	0x0800e1c1

0800cfdc <__pow5mult>:
 800cfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe0:	4615      	mov	r5, r2
 800cfe2:	f012 0203 	ands.w	r2, r2, #3
 800cfe6:	4607      	mov	r7, r0
 800cfe8:	460e      	mov	r6, r1
 800cfea:	d007      	beq.n	800cffc <__pow5mult+0x20>
 800cfec:	4c25      	ldr	r4, [pc, #148]	@ (800d084 <__pow5mult+0xa8>)
 800cfee:	3a01      	subs	r2, #1
 800cff0:	2300      	movs	r3, #0
 800cff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cff6:	f7ff fea1 	bl	800cd3c <__multadd>
 800cffa:	4606      	mov	r6, r0
 800cffc:	10ad      	asrs	r5, r5, #2
 800cffe:	d03d      	beq.n	800d07c <__pow5mult+0xa0>
 800d000:	69fc      	ldr	r4, [r7, #28]
 800d002:	b97c      	cbnz	r4, 800d024 <__pow5mult+0x48>
 800d004:	2010      	movs	r0, #16
 800d006:	f7fd ff99 	bl	800af3c <malloc>
 800d00a:	4602      	mov	r2, r0
 800d00c:	61f8      	str	r0, [r7, #28]
 800d00e:	b928      	cbnz	r0, 800d01c <__pow5mult+0x40>
 800d010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d014:	4b1c      	ldr	r3, [pc, #112]	@ (800d088 <__pow5mult+0xac>)
 800d016:	481d      	ldr	r0, [pc, #116]	@ (800d08c <__pow5mult+0xb0>)
 800d018:	f000 fd8c 	bl	800db34 <__assert_func>
 800d01c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d020:	6004      	str	r4, [r0, #0]
 800d022:	60c4      	str	r4, [r0, #12]
 800d024:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d02c:	b94c      	cbnz	r4, 800d042 <__pow5mult+0x66>
 800d02e:	f240 2171 	movw	r1, #625	@ 0x271
 800d032:	4638      	mov	r0, r7
 800d034:	f7ff ff14 	bl	800ce60 <__i2b>
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d040:	6003      	str	r3, [r0, #0]
 800d042:	f04f 0900 	mov.w	r9, #0
 800d046:	07eb      	lsls	r3, r5, #31
 800d048:	d50a      	bpl.n	800d060 <__pow5mult+0x84>
 800d04a:	4631      	mov	r1, r6
 800d04c:	4622      	mov	r2, r4
 800d04e:	4638      	mov	r0, r7
 800d050:	f7ff ff1c 	bl	800ce8c <__multiply>
 800d054:	4680      	mov	r8, r0
 800d056:	4631      	mov	r1, r6
 800d058:	4638      	mov	r0, r7
 800d05a:	f7ff fe4d 	bl	800ccf8 <_Bfree>
 800d05e:	4646      	mov	r6, r8
 800d060:	106d      	asrs	r5, r5, #1
 800d062:	d00b      	beq.n	800d07c <__pow5mult+0xa0>
 800d064:	6820      	ldr	r0, [r4, #0]
 800d066:	b938      	cbnz	r0, 800d078 <__pow5mult+0x9c>
 800d068:	4622      	mov	r2, r4
 800d06a:	4621      	mov	r1, r4
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7ff ff0d 	bl	800ce8c <__multiply>
 800d072:	6020      	str	r0, [r4, #0]
 800d074:	f8c0 9000 	str.w	r9, [r0]
 800d078:	4604      	mov	r4, r0
 800d07a:	e7e4      	b.n	800d046 <__pow5mult+0x6a>
 800d07c:	4630      	mov	r0, r6
 800d07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d082:	bf00      	nop
 800d084:	0800e21c 	.word	0x0800e21c
 800d088:	0800e141 	.word	0x0800e141
 800d08c:	0800e1c1 	.word	0x0800e1c1

0800d090 <__lshift>:
 800d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	460c      	mov	r4, r1
 800d096:	4607      	mov	r7, r0
 800d098:	4691      	mov	r9, r2
 800d09a:	6923      	ldr	r3, [r4, #16]
 800d09c:	6849      	ldr	r1, [r1, #4]
 800d09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0a2:	68a3      	ldr	r3, [r4, #8]
 800d0a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0a8:	f108 0601 	add.w	r6, r8, #1
 800d0ac:	42b3      	cmp	r3, r6
 800d0ae:	db0b      	blt.n	800d0c8 <__lshift+0x38>
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f7ff fde1 	bl	800cc78 <_Balloc>
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	b948      	cbnz	r0, 800d0ce <__lshift+0x3e>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0c0:	4b27      	ldr	r3, [pc, #156]	@ (800d160 <__lshift+0xd0>)
 800d0c2:	4828      	ldr	r0, [pc, #160]	@ (800d164 <__lshift+0xd4>)
 800d0c4:	f000 fd36 	bl	800db34 <__assert_func>
 800d0c8:	3101      	adds	r1, #1
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	e7ee      	b.n	800d0ac <__lshift+0x1c>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f100 0114 	add.w	r1, r0, #20
 800d0d4:	f100 0210 	add.w	r2, r0, #16
 800d0d8:	4618      	mov	r0, r3
 800d0da:	4553      	cmp	r3, sl
 800d0dc:	db33      	blt.n	800d146 <__lshift+0xb6>
 800d0de:	6920      	ldr	r0, [r4, #16]
 800d0e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0e4:	f104 0314 	add.w	r3, r4, #20
 800d0e8:	f019 091f 	ands.w	r9, r9, #31
 800d0ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0f4:	d02b      	beq.n	800d14e <__lshift+0xbe>
 800d0f6:	468a      	mov	sl, r1
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f1c9 0e20 	rsb	lr, r9, #32
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	fa00 f009 	lsl.w	r0, r0, r9
 800d104:	4310      	orrs	r0, r2
 800d106:	f84a 0b04 	str.w	r0, [sl], #4
 800d10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d10e:	459c      	cmp	ip, r3
 800d110:	fa22 f20e 	lsr.w	r2, r2, lr
 800d114:	d8f3      	bhi.n	800d0fe <__lshift+0x6e>
 800d116:	ebac 0304 	sub.w	r3, ip, r4
 800d11a:	3b15      	subs	r3, #21
 800d11c:	f023 0303 	bic.w	r3, r3, #3
 800d120:	3304      	adds	r3, #4
 800d122:	f104 0015 	add.w	r0, r4, #21
 800d126:	4584      	cmp	ip, r0
 800d128:	bf38      	it	cc
 800d12a:	2304      	movcc	r3, #4
 800d12c:	50ca      	str	r2, [r1, r3]
 800d12e:	b10a      	cbz	r2, 800d134 <__lshift+0xa4>
 800d130:	f108 0602 	add.w	r6, r8, #2
 800d134:	3e01      	subs	r6, #1
 800d136:	4638      	mov	r0, r7
 800d138:	4621      	mov	r1, r4
 800d13a:	612e      	str	r6, [r5, #16]
 800d13c:	f7ff fddc 	bl	800ccf8 <_Bfree>
 800d140:	4628      	mov	r0, r5
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d146:	f842 0f04 	str.w	r0, [r2, #4]!
 800d14a:	3301      	adds	r3, #1
 800d14c:	e7c5      	b.n	800d0da <__lshift+0x4a>
 800d14e:	3904      	subs	r1, #4
 800d150:	f853 2b04 	ldr.w	r2, [r3], #4
 800d154:	459c      	cmp	ip, r3
 800d156:	f841 2f04 	str.w	r2, [r1, #4]!
 800d15a:	d8f9      	bhi.n	800d150 <__lshift+0xc0>
 800d15c:	e7ea      	b.n	800d134 <__lshift+0xa4>
 800d15e:	bf00      	nop
 800d160:	0800e1b0 	.word	0x0800e1b0
 800d164:	0800e1c1 	.word	0x0800e1c1

0800d168 <__mcmp>:
 800d168:	4603      	mov	r3, r0
 800d16a:	690a      	ldr	r2, [r1, #16]
 800d16c:	6900      	ldr	r0, [r0, #16]
 800d16e:	b530      	push	{r4, r5, lr}
 800d170:	1a80      	subs	r0, r0, r2
 800d172:	d10e      	bne.n	800d192 <__mcmp+0x2a>
 800d174:	3314      	adds	r3, #20
 800d176:	3114      	adds	r1, #20
 800d178:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d17c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d180:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d184:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d188:	4295      	cmp	r5, r2
 800d18a:	d003      	beq.n	800d194 <__mcmp+0x2c>
 800d18c:	d205      	bcs.n	800d19a <__mcmp+0x32>
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d192:	bd30      	pop	{r4, r5, pc}
 800d194:	42a3      	cmp	r3, r4
 800d196:	d3f3      	bcc.n	800d180 <__mcmp+0x18>
 800d198:	e7fb      	b.n	800d192 <__mcmp+0x2a>
 800d19a:	2001      	movs	r0, #1
 800d19c:	e7f9      	b.n	800d192 <__mcmp+0x2a>
	...

0800d1a0 <__mdiff>:
 800d1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	4689      	mov	r9, r1
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4648      	mov	r0, r9
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	f7ff ffdb 	bl	800d168 <__mcmp>
 800d1b2:	1e05      	subs	r5, r0, #0
 800d1b4:	d112      	bne.n	800d1dc <__mdiff+0x3c>
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff fd5d 	bl	800cc78 <_Balloc>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	b928      	cbnz	r0, 800d1ce <__mdiff+0x2e>
 800d1c2:	f240 2137 	movw	r1, #567	@ 0x237
 800d1c6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2c0 <__mdiff+0x120>)
 800d1c8:	483e      	ldr	r0, [pc, #248]	@ (800d2c4 <__mdiff+0x124>)
 800d1ca:	f000 fcb3 	bl	800db34 <__assert_func>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	b003      	add	sp, #12
 800d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	bfbc      	itt	lt
 800d1de:	464b      	movlt	r3, r9
 800d1e0:	46a1      	movlt	r9, r4
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d1e8:	bfba      	itte	lt
 800d1ea:	461c      	movlt	r4, r3
 800d1ec:	2501      	movlt	r5, #1
 800d1ee:	2500      	movge	r5, #0
 800d1f0:	f7ff fd42 	bl	800cc78 <_Balloc>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	b918      	cbnz	r0, 800d200 <__mdiff+0x60>
 800d1f8:	f240 2145 	movw	r1, #581	@ 0x245
 800d1fc:	4b30      	ldr	r3, [pc, #192]	@ (800d2c0 <__mdiff+0x120>)
 800d1fe:	e7e3      	b.n	800d1c8 <__mdiff+0x28>
 800d200:	f100 0b14 	add.w	fp, r0, #20
 800d204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d208:	f109 0310 	add.w	r3, r9, #16
 800d20c:	60c5      	str	r5, [r0, #12]
 800d20e:	f04f 0c00 	mov.w	ip, #0
 800d212:	f109 0514 	add.w	r5, r9, #20
 800d216:	46d9      	mov	r9, fp
 800d218:	6926      	ldr	r6, [r4, #16]
 800d21a:	f104 0e14 	add.w	lr, r4, #20
 800d21e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d222:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	9b01      	ldr	r3, [sp, #4]
 800d22a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d22e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d232:	b281      	uxth	r1, r0
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	fa1f f38a 	uxth.w	r3, sl
 800d23a:	1a5b      	subs	r3, r3, r1
 800d23c:	0c00      	lsrs	r0, r0, #16
 800d23e:	4463      	add	r3, ip
 800d240:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d244:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d248:	b29b      	uxth	r3, r3
 800d24a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d24e:	4576      	cmp	r6, lr
 800d250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d254:	f849 3b04 	str.w	r3, [r9], #4
 800d258:	d8e6      	bhi.n	800d228 <__mdiff+0x88>
 800d25a:	1b33      	subs	r3, r6, r4
 800d25c:	3b15      	subs	r3, #21
 800d25e:	f023 0303 	bic.w	r3, r3, #3
 800d262:	3415      	adds	r4, #21
 800d264:	3304      	adds	r3, #4
 800d266:	42a6      	cmp	r6, r4
 800d268:	bf38      	it	cc
 800d26a:	2304      	movcc	r3, #4
 800d26c:	441d      	add	r5, r3
 800d26e:	445b      	add	r3, fp
 800d270:	461e      	mov	r6, r3
 800d272:	462c      	mov	r4, r5
 800d274:	4544      	cmp	r4, r8
 800d276:	d30e      	bcc.n	800d296 <__mdiff+0xf6>
 800d278:	f108 0103 	add.w	r1, r8, #3
 800d27c:	1b49      	subs	r1, r1, r5
 800d27e:	f021 0103 	bic.w	r1, r1, #3
 800d282:	3d03      	subs	r5, #3
 800d284:	45a8      	cmp	r8, r5
 800d286:	bf38      	it	cc
 800d288:	2100      	movcc	r1, #0
 800d28a:	440b      	add	r3, r1
 800d28c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d290:	b199      	cbz	r1, 800d2ba <__mdiff+0x11a>
 800d292:	6117      	str	r7, [r2, #16]
 800d294:	e79e      	b.n	800d1d4 <__mdiff+0x34>
 800d296:	46e6      	mov	lr, ip
 800d298:	f854 1b04 	ldr.w	r1, [r4], #4
 800d29c:	fa1f fc81 	uxth.w	ip, r1
 800d2a0:	44f4      	add	ip, lr
 800d2a2:	0c08      	lsrs	r0, r1, #16
 800d2a4:	4471      	add	r1, lr
 800d2a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d2aa:	b289      	uxth	r1, r1
 800d2ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2b4:	f846 1b04 	str.w	r1, [r6], #4
 800d2b8:	e7dc      	b.n	800d274 <__mdiff+0xd4>
 800d2ba:	3f01      	subs	r7, #1
 800d2bc:	e7e6      	b.n	800d28c <__mdiff+0xec>
 800d2be:	bf00      	nop
 800d2c0:	0800e1b0 	.word	0x0800e1b0
 800d2c4:	0800e1c1 	.word	0x0800e1c1

0800d2c8 <__d2b>:
 800d2c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	4690      	mov	r8, r2
 800d2d0:	4699      	mov	r9, r3
 800d2d2:	9e08      	ldr	r6, [sp, #32]
 800d2d4:	f7ff fcd0 	bl	800cc78 <_Balloc>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	b930      	cbnz	r0, 800d2ea <__d2b+0x22>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2e2:	4b23      	ldr	r3, [pc, #140]	@ (800d370 <__d2b+0xa8>)
 800d2e4:	4823      	ldr	r0, [pc, #140]	@ (800d374 <__d2b+0xac>)
 800d2e6:	f000 fc25 	bl	800db34 <__assert_func>
 800d2ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2f2:	b10d      	cbz	r5, 800d2f8 <__d2b+0x30>
 800d2f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	f1b8 0300 	subs.w	r3, r8, #0
 800d2fe:	d024      	beq.n	800d34a <__d2b+0x82>
 800d300:	4668      	mov	r0, sp
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	f7ff fd7f 	bl	800ce06 <__lo0bits>
 800d308:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d30c:	b1d8      	cbz	r0, 800d346 <__d2b+0x7e>
 800d30e:	f1c0 0320 	rsb	r3, r0, #32
 800d312:	fa02 f303 	lsl.w	r3, r2, r3
 800d316:	430b      	orrs	r3, r1
 800d318:	40c2      	lsrs	r2, r0
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	9201      	str	r2, [sp, #4]
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	bf0c      	ite	eq
 800d324:	2201      	moveq	r2, #1
 800d326:	2202      	movne	r2, #2
 800d328:	61a3      	str	r3, [r4, #24]
 800d32a:	6122      	str	r2, [r4, #16]
 800d32c:	b1ad      	cbz	r5, 800d35a <__d2b+0x92>
 800d32e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d332:	4405      	add	r5, r0
 800d334:	6035      	str	r5, [r6, #0]
 800d336:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	6018      	str	r0, [r3, #0]
 800d33e:	4620      	mov	r0, r4
 800d340:	b002      	add	sp, #8
 800d342:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d346:	6161      	str	r1, [r4, #20]
 800d348:	e7e9      	b.n	800d31e <__d2b+0x56>
 800d34a:	a801      	add	r0, sp, #4
 800d34c:	f7ff fd5b 	bl	800ce06 <__lo0bits>
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	6163      	str	r3, [r4, #20]
 800d356:	3020      	adds	r0, #32
 800d358:	e7e7      	b.n	800d32a <__d2b+0x62>
 800d35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d35e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d362:	6030      	str	r0, [r6, #0]
 800d364:	6918      	ldr	r0, [r3, #16]
 800d366:	f7ff fd2f 	bl	800cdc8 <__hi0bits>
 800d36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d36e:	e7e4      	b.n	800d33a <__d2b+0x72>
 800d370:	0800e1b0 	.word	0x0800e1b0
 800d374:	0800e1c1 	.word	0x0800e1c1

0800d378 <__ssputs_r>:
 800d378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d37c:	461f      	mov	r7, r3
 800d37e:	688e      	ldr	r6, [r1, #8]
 800d380:	4682      	mov	sl, r0
 800d382:	42be      	cmp	r6, r7
 800d384:	460c      	mov	r4, r1
 800d386:	4690      	mov	r8, r2
 800d388:	680b      	ldr	r3, [r1, #0]
 800d38a:	d82d      	bhi.n	800d3e8 <__ssputs_r+0x70>
 800d38c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d390:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d394:	d026      	beq.n	800d3e4 <__ssputs_r+0x6c>
 800d396:	6965      	ldr	r5, [r4, #20]
 800d398:	6909      	ldr	r1, [r1, #16]
 800d39a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d39e:	eba3 0901 	sub.w	r9, r3, r1
 800d3a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3a6:	1c7b      	adds	r3, r7, #1
 800d3a8:	444b      	add	r3, r9
 800d3aa:	106d      	asrs	r5, r5, #1
 800d3ac:	429d      	cmp	r5, r3
 800d3ae:	bf38      	it	cc
 800d3b0:	461d      	movcc	r5, r3
 800d3b2:	0553      	lsls	r3, r2, #21
 800d3b4:	d527      	bpl.n	800d406 <__ssputs_r+0x8e>
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	f7fd fdea 	bl	800af90 <_malloc_r>
 800d3bc:	4606      	mov	r6, r0
 800d3be:	b360      	cbz	r0, 800d41a <__ssputs_r+0xa2>
 800d3c0:	464a      	mov	r2, r9
 800d3c2:	6921      	ldr	r1, [r4, #16]
 800d3c4:	f7fe fdfa 	bl	800bfbc <memcpy>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	6126      	str	r6, [r4, #16]
 800d3d6:	444e      	add	r6, r9
 800d3d8:	6026      	str	r6, [r4, #0]
 800d3da:	463e      	mov	r6, r7
 800d3dc:	6165      	str	r5, [r4, #20]
 800d3de:	eba5 0509 	sub.w	r5, r5, r9
 800d3e2:	60a5      	str	r5, [r4, #8]
 800d3e4:	42be      	cmp	r6, r7
 800d3e6:	d900      	bls.n	800d3ea <__ssputs_r+0x72>
 800d3e8:	463e      	mov	r6, r7
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	4641      	mov	r1, r8
 800d3ee:	6820      	ldr	r0, [r4, #0]
 800d3f0:	f000 fb63 	bl	800daba <memmove>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	1b9b      	subs	r3, r3, r6
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	4433      	add	r3, r6
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d406:	462a      	mov	r2, r5
 800d408:	f000 fbd8 	bl	800dbbc <_realloc_r>
 800d40c:	4606      	mov	r6, r0
 800d40e:	2800      	cmp	r0, #0
 800d410:	d1e0      	bne.n	800d3d4 <__ssputs_r+0x5c>
 800d412:	4650      	mov	r0, sl
 800d414:	6921      	ldr	r1, [r4, #16]
 800d416:	f7fd fd49 	bl	800aeac <_free_r>
 800d41a:	230c      	movs	r3, #12
 800d41c:	f8ca 3000 	str.w	r3, [sl]
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	e7e9      	b.n	800d402 <__ssputs_r+0x8a>
	...

0800d430 <_svfiprintf_r>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	4698      	mov	r8, r3
 800d436:	898b      	ldrh	r3, [r1, #12]
 800d438:	4607      	mov	r7, r0
 800d43a:	061b      	lsls	r3, r3, #24
 800d43c:	460d      	mov	r5, r1
 800d43e:	4614      	mov	r4, r2
 800d440:	b09d      	sub	sp, #116	@ 0x74
 800d442:	d510      	bpl.n	800d466 <_svfiprintf_r+0x36>
 800d444:	690b      	ldr	r3, [r1, #16]
 800d446:	b973      	cbnz	r3, 800d466 <_svfiprintf_r+0x36>
 800d448:	2140      	movs	r1, #64	@ 0x40
 800d44a:	f7fd fda1 	bl	800af90 <_malloc_r>
 800d44e:	6028      	str	r0, [r5, #0]
 800d450:	6128      	str	r0, [r5, #16]
 800d452:	b930      	cbnz	r0, 800d462 <_svfiprintf_r+0x32>
 800d454:	230c      	movs	r3, #12
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d45c:	b01d      	add	sp, #116	@ 0x74
 800d45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d462:	2340      	movs	r3, #64	@ 0x40
 800d464:	616b      	str	r3, [r5, #20]
 800d466:	2300      	movs	r3, #0
 800d468:	9309      	str	r3, [sp, #36]	@ 0x24
 800d46a:	2320      	movs	r3, #32
 800d46c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d470:	2330      	movs	r3, #48	@ 0x30
 800d472:	f04f 0901 	mov.w	r9, #1
 800d476:	f8cd 800c 	str.w	r8, [sp, #12]
 800d47a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d614 <_svfiprintf_r+0x1e4>
 800d47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d482:	4623      	mov	r3, r4
 800d484:	469a      	mov	sl, r3
 800d486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d48a:	b10a      	cbz	r2, 800d490 <_svfiprintf_r+0x60>
 800d48c:	2a25      	cmp	r2, #37	@ 0x25
 800d48e:	d1f9      	bne.n	800d484 <_svfiprintf_r+0x54>
 800d490:	ebba 0b04 	subs.w	fp, sl, r4
 800d494:	d00b      	beq.n	800d4ae <_svfiprintf_r+0x7e>
 800d496:	465b      	mov	r3, fp
 800d498:	4622      	mov	r2, r4
 800d49a:	4629      	mov	r1, r5
 800d49c:	4638      	mov	r0, r7
 800d49e:	f7ff ff6b 	bl	800d378 <__ssputs_r>
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	f000 80a7 	beq.w	800d5f6 <_svfiprintf_r+0x1c6>
 800d4a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4aa:	445a      	add	r2, fp
 800d4ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f000 809f 	beq.w	800d5f6 <_svfiprintf_r+0x1c6>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c2:	f10a 0a01 	add.w	sl, sl, #1
 800d4c6:	9304      	str	r3, [sp, #16]
 800d4c8:	9307      	str	r3, [sp, #28]
 800d4ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4d0:	4654      	mov	r4, sl
 800d4d2:	2205      	movs	r2, #5
 800d4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d8:	484e      	ldr	r0, [pc, #312]	@ (800d614 <_svfiprintf_r+0x1e4>)
 800d4da:	f7fe fd61 	bl	800bfa0 <memchr>
 800d4de:	9a04      	ldr	r2, [sp, #16]
 800d4e0:	b9d8      	cbnz	r0, 800d51a <_svfiprintf_r+0xea>
 800d4e2:	06d0      	lsls	r0, r2, #27
 800d4e4:	bf44      	itt	mi
 800d4e6:	2320      	movmi	r3, #32
 800d4e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ec:	0711      	lsls	r1, r2, #28
 800d4ee:	bf44      	itt	mi
 800d4f0:	232b      	movmi	r3, #43	@ 0x2b
 800d4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4fc:	d015      	beq.n	800d52a <_svfiprintf_r+0xfa>
 800d4fe:	4654      	mov	r4, sl
 800d500:	2000      	movs	r0, #0
 800d502:	f04f 0c0a 	mov.w	ip, #10
 800d506:	9a07      	ldr	r2, [sp, #28]
 800d508:	4621      	mov	r1, r4
 800d50a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d50e:	3b30      	subs	r3, #48	@ 0x30
 800d510:	2b09      	cmp	r3, #9
 800d512:	d94b      	bls.n	800d5ac <_svfiprintf_r+0x17c>
 800d514:	b1b0      	cbz	r0, 800d544 <_svfiprintf_r+0x114>
 800d516:	9207      	str	r2, [sp, #28]
 800d518:	e014      	b.n	800d544 <_svfiprintf_r+0x114>
 800d51a:	eba0 0308 	sub.w	r3, r0, r8
 800d51e:	fa09 f303 	lsl.w	r3, r9, r3
 800d522:	4313      	orrs	r3, r2
 800d524:	46a2      	mov	sl, r4
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	e7d2      	b.n	800d4d0 <_svfiprintf_r+0xa0>
 800d52a:	9b03      	ldr	r3, [sp, #12]
 800d52c:	1d19      	adds	r1, r3, #4
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	9103      	str	r1, [sp, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	bfbb      	ittet	lt
 800d536:	425b      	neglt	r3, r3
 800d538:	f042 0202 	orrlt.w	r2, r2, #2
 800d53c:	9307      	strge	r3, [sp, #28]
 800d53e:	9307      	strlt	r3, [sp, #28]
 800d540:	bfb8      	it	lt
 800d542:	9204      	strlt	r2, [sp, #16]
 800d544:	7823      	ldrb	r3, [r4, #0]
 800d546:	2b2e      	cmp	r3, #46	@ 0x2e
 800d548:	d10a      	bne.n	800d560 <_svfiprintf_r+0x130>
 800d54a:	7863      	ldrb	r3, [r4, #1]
 800d54c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d54e:	d132      	bne.n	800d5b6 <_svfiprintf_r+0x186>
 800d550:	9b03      	ldr	r3, [sp, #12]
 800d552:	3402      	adds	r4, #2
 800d554:	1d1a      	adds	r2, r3, #4
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	9203      	str	r2, [sp, #12]
 800d55a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d55e:	9305      	str	r3, [sp, #20]
 800d560:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d618 <_svfiprintf_r+0x1e8>
 800d564:	2203      	movs	r2, #3
 800d566:	4650      	mov	r0, sl
 800d568:	7821      	ldrb	r1, [r4, #0]
 800d56a:	f7fe fd19 	bl	800bfa0 <memchr>
 800d56e:	b138      	cbz	r0, 800d580 <_svfiprintf_r+0x150>
 800d570:	2240      	movs	r2, #64	@ 0x40
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	eba0 000a 	sub.w	r0, r0, sl
 800d578:	4082      	lsls	r2, r0
 800d57a:	4313      	orrs	r3, r2
 800d57c:	3401      	adds	r4, #1
 800d57e:	9304      	str	r3, [sp, #16]
 800d580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d584:	2206      	movs	r2, #6
 800d586:	4825      	ldr	r0, [pc, #148]	@ (800d61c <_svfiprintf_r+0x1ec>)
 800d588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d58c:	f7fe fd08 	bl	800bfa0 <memchr>
 800d590:	2800      	cmp	r0, #0
 800d592:	d036      	beq.n	800d602 <_svfiprintf_r+0x1d2>
 800d594:	4b22      	ldr	r3, [pc, #136]	@ (800d620 <_svfiprintf_r+0x1f0>)
 800d596:	bb1b      	cbnz	r3, 800d5e0 <_svfiprintf_r+0x1b0>
 800d598:	9b03      	ldr	r3, [sp, #12]
 800d59a:	3307      	adds	r3, #7
 800d59c:	f023 0307 	bic.w	r3, r3, #7
 800d5a0:	3308      	adds	r3, #8
 800d5a2:	9303      	str	r3, [sp, #12]
 800d5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a6:	4433      	add	r3, r6
 800d5a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5aa:	e76a      	b.n	800d482 <_svfiprintf_r+0x52>
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b4:	e7a8      	b.n	800d508 <_svfiprintf_r+0xd8>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	f04f 0c0a 	mov.w	ip, #10
 800d5bc:	4619      	mov	r1, r3
 800d5be:	3401      	adds	r4, #1
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c8:	3a30      	subs	r2, #48	@ 0x30
 800d5ca:	2a09      	cmp	r2, #9
 800d5cc:	d903      	bls.n	800d5d6 <_svfiprintf_r+0x1a6>
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d0c6      	beq.n	800d560 <_svfiprintf_r+0x130>
 800d5d2:	9105      	str	r1, [sp, #20]
 800d5d4:	e7c4      	b.n	800d560 <_svfiprintf_r+0x130>
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	2301      	movs	r3, #1
 800d5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5de:	e7f0      	b.n	800d5c2 <_svfiprintf_r+0x192>
 800d5e0:	ab03      	add	r3, sp, #12
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	@ (800d624 <_svfiprintf_r+0x1f4>)
 800d5ea:	a904      	add	r1, sp, #16
 800d5ec:	f7fd fdfa 	bl	800b1e4 <_printf_float>
 800d5f0:	1c42      	adds	r2, r0, #1
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	d1d6      	bne.n	800d5a4 <_svfiprintf_r+0x174>
 800d5f6:	89ab      	ldrh	r3, [r5, #12]
 800d5f8:	065b      	lsls	r3, r3, #25
 800d5fa:	f53f af2d 	bmi.w	800d458 <_svfiprintf_r+0x28>
 800d5fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d600:	e72c      	b.n	800d45c <_svfiprintf_r+0x2c>
 800d602:	ab03      	add	r3, sp, #12
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	462a      	mov	r2, r5
 800d608:	4638      	mov	r0, r7
 800d60a:	4b06      	ldr	r3, [pc, #24]	@ (800d624 <_svfiprintf_r+0x1f4>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	f7fe f887 	bl	800b720 <_printf_i>
 800d612:	e7ed      	b.n	800d5f0 <_svfiprintf_r+0x1c0>
 800d614:	0800e318 	.word	0x0800e318
 800d618:	0800e31e 	.word	0x0800e31e
 800d61c:	0800e322 	.word	0x0800e322
 800d620:	0800b1e5 	.word	0x0800b1e5
 800d624:	0800d379 	.word	0x0800d379

0800d628 <__sfputc_r>:
 800d628:	6893      	ldr	r3, [r2, #8]
 800d62a:	b410      	push	{r4}
 800d62c:	3b01      	subs	r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	6093      	str	r3, [r2, #8]
 800d632:	da07      	bge.n	800d644 <__sfputc_r+0x1c>
 800d634:	6994      	ldr	r4, [r2, #24]
 800d636:	42a3      	cmp	r3, r4
 800d638:	db01      	blt.n	800d63e <__sfputc_r+0x16>
 800d63a:	290a      	cmp	r1, #10
 800d63c:	d102      	bne.n	800d644 <__sfputc_r+0x1c>
 800d63e:	bc10      	pop	{r4}
 800d640:	f7fe bb37 	b.w	800bcb2 <__swbuf_r>
 800d644:	6813      	ldr	r3, [r2, #0]
 800d646:	1c58      	adds	r0, r3, #1
 800d648:	6010      	str	r0, [r2, #0]
 800d64a:	7019      	strb	r1, [r3, #0]
 800d64c:	4608      	mov	r0, r1
 800d64e:	bc10      	pop	{r4}
 800d650:	4770      	bx	lr

0800d652 <__sfputs_r>:
 800d652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d654:	4606      	mov	r6, r0
 800d656:	460f      	mov	r7, r1
 800d658:	4614      	mov	r4, r2
 800d65a:	18d5      	adds	r5, r2, r3
 800d65c:	42ac      	cmp	r4, r5
 800d65e:	d101      	bne.n	800d664 <__sfputs_r+0x12>
 800d660:	2000      	movs	r0, #0
 800d662:	e007      	b.n	800d674 <__sfputs_r+0x22>
 800d664:	463a      	mov	r2, r7
 800d666:	4630      	mov	r0, r6
 800d668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66c:	f7ff ffdc 	bl	800d628 <__sfputc_r>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d1f3      	bne.n	800d65c <__sfputs_r+0xa>
 800d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d678 <_vfiprintf_r>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	460d      	mov	r5, r1
 800d67e:	4614      	mov	r4, r2
 800d680:	4698      	mov	r8, r3
 800d682:	4606      	mov	r6, r0
 800d684:	b09d      	sub	sp, #116	@ 0x74
 800d686:	b118      	cbz	r0, 800d690 <_vfiprintf_r+0x18>
 800d688:	6a03      	ldr	r3, [r0, #32]
 800d68a:	b90b      	cbnz	r3, 800d690 <_vfiprintf_r+0x18>
 800d68c:	f7fe f9f4 	bl	800ba78 <__sinit>
 800d690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d692:	07d9      	lsls	r1, r3, #31
 800d694:	d405      	bmi.n	800d6a2 <_vfiprintf_r+0x2a>
 800d696:	89ab      	ldrh	r3, [r5, #12]
 800d698:	059a      	lsls	r2, r3, #22
 800d69a:	d402      	bmi.n	800d6a2 <_vfiprintf_r+0x2a>
 800d69c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d69e:	f7f4 feeb 	bl	8002478 <__retarget_lock_acquire_recursive>
 800d6a2:	89ab      	ldrh	r3, [r5, #12]
 800d6a4:	071b      	lsls	r3, r3, #28
 800d6a6:	d501      	bpl.n	800d6ac <_vfiprintf_r+0x34>
 800d6a8:	692b      	ldr	r3, [r5, #16]
 800d6aa:	b99b      	cbnz	r3, 800d6d4 <_vfiprintf_r+0x5c>
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f7fe fb3e 	bl	800bd30 <__swsetup_r>
 800d6b4:	b170      	cbz	r0, 800d6d4 <_vfiprintf_r+0x5c>
 800d6b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6b8:	07dc      	lsls	r4, r3, #31
 800d6ba:	d504      	bpl.n	800d6c6 <_vfiprintf_r+0x4e>
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6c0:	b01d      	add	sp, #116	@ 0x74
 800d6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	0598      	lsls	r0, r3, #22
 800d6ca:	d4f7      	bmi.n	800d6bc <_vfiprintf_r+0x44>
 800d6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ce:	f7f4 fee8 	bl	80024a2 <__retarget_lock_release_recursive>
 800d6d2:	e7f3      	b.n	800d6bc <_vfiprintf_r+0x44>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d8:	2320      	movs	r3, #32
 800d6da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6de:	2330      	movs	r3, #48	@ 0x30
 800d6e0:	f04f 0901 	mov.w	r9, #1
 800d6e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d894 <_vfiprintf_r+0x21c>
 800d6ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6f0:	4623      	mov	r3, r4
 800d6f2:	469a      	mov	sl, r3
 800d6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f8:	b10a      	cbz	r2, 800d6fe <_vfiprintf_r+0x86>
 800d6fa:	2a25      	cmp	r2, #37	@ 0x25
 800d6fc:	d1f9      	bne.n	800d6f2 <_vfiprintf_r+0x7a>
 800d6fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d702:	d00b      	beq.n	800d71c <_vfiprintf_r+0xa4>
 800d704:	465b      	mov	r3, fp
 800d706:	4622      	mov	r2, r4
 800d708:	4629      	mov	r1, r5
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ffa1 	bl	800d652 <__sfputs_r>
 800d710:	3001      	adds	r0, #1
 800d712:	f000 80a7 	beq.w	800d864 <_vfiprintf_r+0x1ec>
 800d716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d718:	445a      	add	r2, fp
 800d71a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d71c:	f89a 3000 	ldrb.w	r3, [sl]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 809f 	beq.w	800d864 <_vfiprintf_r+0x1ec>
 800d726:	2300      	movs	r3, #0
 800d728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d730:	f10a 0a01 	add.w	sl, sl, #1
 800d734:	9304      	str	r3, [sp, #16]
 800d736:	9307      	str	r3, [sp, #28]
 800d738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d73c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d73e:	4654      	mov	r4, sl
 800d740:	2205      	movs	r2, #5
 800d742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d746:	4853      	ldr	r0, [pc, #332]	@ (800d894 <_vfiprintf_r+0x21c>)
 800d748:	f7fe fc2a 	bl	800bfa0 <memchr>
 800d74c:	9a04      	ldr	r2, [sp, #16]
 800d74e:	b9d8      	cbnz	r0, 800d788 <_vfiprintf_r+0x110>
 800d750:	06d1      	lsls	r1, r2, #27
 800d752:	bf44      	itt	mi
 800d754:	2320      	movmi	r3, #32
 800d756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d75a:	0713      	lsls	r3, r2, #28
 800d75c:	bf44      	itt	mi
 800d75e:	232b      	movmi	r3, #43	@ 0x2b
 800d760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d764:	f89a 3000 	ldrb.w	r3, [sl]
 800d768:	2b2a      	cmp	r3, #42	@ 0x2a
 800d76a:	d015      	beq.n	800d798 <_vfiprintf_r+0x120>
 800d76c:	4654      	mov	r4, sl
 800d76e:	2000      	movs	r0, #0
 800d770:	f04f 0c0a 	mov.w	ip, #10
 800d774:	9a07      	ldr	r2, [sp, #28]
 800d776:	4621      	mov	r1, r4
 800d778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d77c:	3b30      	subs	r3, #48	@ 0x30
 800d77e:	2b09      	cmp	r3, #9
 800d780:	d94b      	bls.n	800d81a <_vfiprintf_r+0x1a2>
 800d782:	b1b0      	cbz	r0, 800d7b2 <_vfiprintf_r+0x13a>
 800d784:	9207      	str	r2, [sp, #28]
 800d786:	e014      	b.n	800d7b2 <_vfiprintf_r+0x13a>
 800d788:	eba0 0308 	sub.w	r3, r0, r8
 800d78c:	fa09 f303 	lsl.w	r3, r9, r3
 800d790:	4313      	orrs	r3, r2
 800d792:	46a2      	mov	sl, r4
 800d794:	9304      	str	r3, [sp, #16]
 800d796:	e7d2      	b.n	800d73e <_vfiprintf_r+0xc6>
 800d798:	9b03      	ldr	r3, [sp, #12]
 800d79a:	1d19      	adds	r1, r3, #4
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	9103      	str	r1, [sp, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	bfbb      	ittet	lt
 800d7a4:	425b      	neglt	r3, r3
 800d7a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7aa:	9307      	strge	r3, [sp, #28]
 800d7ac:	9307      	strlt	r3, [sp, #28]
 800d7ae:	bfb8      	it	lt
 800d7b0:	9204      	strlt	r2, [sp, #16]
 800d7b2:	7823      	ldrb	r3, [r4, #0]
 800d7b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7b6:	d10a      	bne.n	800d7ce <_vfiprintf_r+0x156>
 800d7b8:	7863      	ldrb	r3, [r4, #1]
 800d7ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7bc:	d132      	bne.n	800d824 <_vfiprintf_r+0x1ac>
 800d7be:	9b03      	ldr	r3, [sp, #12]
 800d7c0:	3402      	adds	r4, #2
 800d7c2:	1d1a      	adds	r2, r3, #4
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	9203      	str	r2, [sp, #12]
 800d7c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7cc:	9305      	str	r3, [sp, #20]
 800d7ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d898 <_vfiprintf_r+0x220>
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	4650      	mov	r0, sl
 800d7d6:	7821      	ldrb	r1, [r4, #0]
 800d7d8:	f7fe fbe2 	bl	800bfa0 <memchr>
 800d7dc:	b138      	cbz	r0, 800d7ee <_vfiprintf_r+0x176>
 800d7de:	2240      	movs	r2, #64	@ 0x40
 800d7e0:	9b04      	ldr	r3, [sp, #16]
 800d7e2:	eba0 000a 	sub.w	r0, r0, sl
 800d7e6:	4082      	lsls	r2, r0
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f2:	2206      	movs	r2, #6
 800d7f4:	4829      	ldr	r0, [pc, #164]	@ (800d89c <_vfiprintf_r+0x224>)
 800d7f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7fa:	f7fe fbd1 	bl	800bfa0 <memchr>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d03f      	beq.n	800d882 <_vfiprintf_r+0x20a>
 800d802:	4b27      	ldr	r3, [pc, #156]	@ (800d8a0 <_vfiprintf_r+0x228>)
 800d804:	bb1b      	cbnz	r3, 800d84e <_vfiprintf_r+0x1d6>
 800d806:	9b03      	ldr	r3, [sp, #12]
 800d808:	3307      	adds	r3, #7
 800d80a:	f023 0307 	bic.w	r3, r3, #7
 800d80e:	3308      	adds	r3, #8
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d814:	443b      	add	r3, r7
 800d816:	9309      	str	r3, [sp, #36]	@ 0x24
 800d818:	e76a      	b.n	800d6f0 <_vfiprintf_r+0x78>
 800d81a:	460c      	mov	r4, r1
 800d81c:	2001      	movs	r0, #1
 800d81e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d822:	e7a8      	b.n	800d776 <_vfiprintf_r+0xfe>
 800d824:	2300      	movs	r3, #0
 800d826:	f04f 0c0a 	mov.w	ip, #10
 800d82a:	4619      	mov	r1, r3
 800d82c:	3401      	adds	r4, #1
 800d82e:	9305      	str	r3, [sp, #20]
 800d830:	4620      	mov	r0, r4
 800d832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d836:	3a30      	subs	r2, #48	@ 0x30
 800d838:	2a09      	cmp	r2, #9
 800d83a:	d903      	bls.n	800d844 <_vfiprintf_r+0x1cc>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0c6      	beq.n	800d7ce <_vfiprintf_r+0x156>
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	e7c4      	b.n	800d7ce <_vfiprintf_r+0x156>
 800d844:	4604      	mov	r4, r0
 800d846:	2301      	movs	r3, #1
 800d848:	fb0c 2101 	mla	r1, ip, r1, r2
 800d84c:	e7f0      	b.n	800d830 <_vfiprintf_r+0x1b8>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4630      	mov	r0, r6
 800d856:	4b13      	ldr	r3, [pc, #76]	@ (800d8a4 <_vfiprintf_r+0x22c>)
 800d858:	a904      	add	r1, sp, #16
 800d85a:	f7fd fcc3 	bl	800b1e4 <_printf_float>
 800d85e:	4607      	mov	r7, r0
 800d860:	1c78      	adds	r0, r7, #1
 800d862:	d1d6      	bne.n	800d812 <_vfiprintf_r+0x19a>
 800d864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d866:	07d9      	lsls	r1, r3, #31
 800d868:	d405      	bmi.n	800d876 <_vfiprintf_r+0x1fe>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	059a      	lsls	r2, r3, #22
 800d86e:	d402      	bmi.n	800d876 <_vfiprintf_r+0x1fe>
 800d870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d872:	f7f4 fe16 	bl	80024a2 <__retarget_lock_release_recursive>
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	065b      	lsls	r3, r3, #25
 800d87a:	f53f af1f 	bmi.w	800d6bc <_vfiprintf_r+0x44>
 800d87e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d880:	e71e      	b.n	800d6c0 <_vfiprintf_r+0x48>
 800d882:	ab03      	add	r3, sp, #12
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	462a      	mov	r2, r5
 800d888:	4630      	mov	r0, r6
 800d88a:	4b06      	ldr	r3, [pc, #24]	@ (800d8a4 <_vfiprintf_r+0x22c>)
 800d88c:	a904      	add	r1, sp, #16
 800d88e:	f7fd ff47 	bl	800b720 <_printf_i>
 800d892:	e7e4      	b.n	800d85e <_vfiprintf_r+0x1e6>
 800d894:	0800e318 	.word	0x0800e318
 800d898:	0800e31e 	.word	0x0800e31e
 800d89c:	0800e322 	.word	0x0800e322
 800d8a0:	0800b1e5 	.word	0x0800b1e5
 800d8a4:	0800d653 	.word	0x0800d653

0800d8a8 <__sflush_r>:
 800d8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	0716      	lsls	r6, r2, #28
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	d454      	bmi.n	800d960 <__sflush_r+0xb8>
 800d8b6:	684b      	ldr	r3, [r1, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	dc02      	bgt.n	800d8c2 <__sflush_r+0x1a>
 800d8bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	dd48      	ble.n	800d954 <__sflush_r+0xac>
 800d8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8c4:	2e00      	cmp	r6, #0
 800d8c6:	d045      	beq.n	800d954 <__sflush_r+0xac>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8ce:	682f      	ldr	r7, [r5, #0]
 800d8d0:	6a21      	ldr	r1, [r4, #32]
 800d8d2:	602b      	str	r3, [r5, #0]
 800d8d4:	d030      	beq.n	800d938 <__sflush_r+0x90>
 800d8d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	0759      	lsls	r1, r3, #29
 800d8dc:	d505      	bpl.n	800d8ea <__sflush_r+0x42>
 800d8de:	6863      	ldr	r3, [r4, #4]
 800d8e0:	1ad2      	subs	r2, r2, r3
 800d8e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8e4:	b10b      	cbz	r3, 800d8ea <__sflush_r+0x42>
 800d8e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8e8:	1ad2      	subs	r2, r2, r3
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8f0:	6a21      	ldr	r1, [r4, #32]
 800d8f2:	47b0      	blx	r6
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	d106      	bne.n	800d908 <__sflush_r+0x60>
 800d8fa:	6829      	ldr	r1, [r5, #0]
 800d8fc:	291d      	cmp	r1, #29
 800d8fe:	d82b      	bhi.n	800d958 <__sflush_r+0xb0>
 800d900:	4a28      	ldr	r2, [pc, #160]	@ (800d9a4 <__sflush_r+0xfc>)
 800d902:	410a      	asrs	r2, r1
 800d904:	07d6      	lsls	r6, r2, #31
 800d906:	d427      	bmi.n	800d958 <__sflush_r+0xb0>
 800d908:	2200      	movs	r2, #0
 800d90a:	6062      	str	r2, [r4, #4]
 800d90c:	6922      	ldr	r2, [r4, #16]
 800d90e:	04d9      	lsls	r1, r3, #19
 800d910:	6022      	str	r2, [r4, #0]
 800d912:	d504      	bpl.n	800d91e <__sflush_r+0x76>
 800d914:	1c42      	adds	r2, r0, #1
 800d916:	d101      	bne.n	800d91c <__sflush_r+0x74>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b903      	cbnz	r3, 800d91e <__sflush_r+0x76>
 800d91c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d91e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d920:	602f      	str	r7, [r5, #0]
 800d922:	b1b9      	cbz	r1, 800d954 <__sflush_r+0xac>
 800d924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d928:	4299      	cmp	r1, r3
 800d92a:	d002      	beq.n	800d932 <__sflush_r+0x8a>
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7fd fabd 	bl	800aeac <_free_r>
 800d932:	2300      	movs	r3, #0
 800d934:	6363      	str	r3, [r4, #52]	@ 0x34
 800d936:	e00d      	b.n	800d954 <__sflush_r+0xac>
 800d938:	2301      	movs	r3, #1
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b0      	blx	r6
 800d93e:	4602      	mov	r2, r0
 800d940:	1c50      	adds	r0, r2, #1
 800d942:	d1c9      	bne.n	800d8d8 <__sflush_r+0x30>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d0c6      	beq.n	800d8d8 <__sflush_r+0x30>
 800d94a:	2b1d      	cmp	r3, #29
 800d94c:	d001      	beq.n	800d952 <__sflush_r+0xaa>
 800d94e:	2b16      	cmp	r3, #22
 800d950:	d11d      	bne.n	800d98e <__sflush_r+0xe6>
 800d952:	602f      	str	r7, [r5, #0]
 800d954:	2000      	movs	r0, #0
 800d956:	e021      	b.n	800d99c <__sflush_r+0xf4>
 800d958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	e01a      	b.n	800d996 <__sflush_r+0xee>
 800d960:	690f      	ldr	r7, [r1, #16]
 800d962:	2f00      	cmp	r7, #0
 800d964:	d0f6      	beq.n	800d954 <__sflush_r+0xac>
 800d966:	0793      	lsls	r3, r2, #30
 800d968:	bf18      	it	ne
 800d96a:	2300      	movne	r3, #0
 800d96c:	680e      	ldr	r6, [r1, #0]
 800d96e:	bf08      	it	eq
 800d970:	694b      	ldreq	r3, [r1, #20]
 800d972:	1bf6      	subs	r6, r6, r7
 800d974:	600f      	str	r7, [r1, #0]
 800d976:	608b      	str	r3, [r1, #8]
 800d978:	2e00      	cmp	r6, #0
 800d97a:	ddeb      	ble.n	800d954 <__sflush_r+0xac>
 800d97c:	4633      	mov	r3, r6
 800d97e:	463a      	mov	r2, r7
 800d980:	4628      	mov	r0, r5
 800d982:	6a21      	ldr	r1, [r4, #32]
 800d984:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d988:	47e0      	blx	ip
 800d98a:	2800      	cmp	r0, #0
 800d98c:	dc07      	bgt.n	800d99e <__sflush_r+0xf6>
 800d98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d99e:	4407      	add	r7, r0
 800d9a0:	1a36      	subs	r6, r6, r0
 800d9a2:	e7e9      	b.n	800d978 <__sflush_r+0xd0>
 800d9a4:	dfbffffe 	.word	0xdfbffffe

0800d9a8 <_fflush_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	690b      	ldr	r3, [r1, #16]
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	b913      	cbnz	r3, 800d9b8 <_fflush_r+0x10>
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	b118      	cbz	r0, 800d9c2 <_fflush_r+0x1a>
 800d9ba:	6a03      	ldr	r3, [r0, #32]
 800d9bc:	b90b      	cbnz	r3, 800d9c2 <_fflush_r+0x1a>
 800d9be:	f7fe f85b 	bl	800ba78 <__sinit>
 800d9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d0f3      	beq.n	800d9b2 <_fflush_r+0xa>
 800d9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9cc:	07d0      	lsls	r0, r2, #31
 800d9ce:	d404      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d0:	0599      	lsls	r1, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_fflush_r+0x32>
 800d9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9d6:	f7f4 fd4f 	bl	8002478 <__retarget_lock_acquire_recursive>
 800d9da:	4628      	mov	r0, r5
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f7ff ff63 	bl	800d8a8 <__sflush_r>
 800d9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	07da      	lsls	r2, r3, #31
 800d9e8:	d4e4      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	059b      	lsls	r3, r3, #22
 800d9ee:	d4e1      	bmi.n	800d9b4 <_fflush_r+0xc>
 800d9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9f2:	f7f4 fd56 	bl	80024a2 <__retarget_lock_release_recursive>
 800d9f6:	e7dd      	b.n	800d9b4 <_fflush_r+0xc>

0800d9f8 <__swhatbuf_r>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da00:	4615      	mov	r5, r2
 800da02:	2900      	cmp	r1, #0
 800da04:	461e      	mov	r6, r3
 800da06:	b096      	sub	sp, #88	@ 0x58
 800da08:	da0c      	bge.n	800da24 <__swhatbuf_r+0x2c>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	2100      	movs	r1, #0
 800da0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da12:	bf14      	ite	ne
 800da14:	2340      	movne	r3, #64	@ 0x40
 800da16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da1a:	2000      	movs	r0, #0
 800da1c:	6031      	str	r1, [r6, #0]
 800da1e:	602b      	str	r3, [r5, #0]
 800da20:	b016      	add	sp, #88	@ 0x58
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	466a      	mov	r2, sp
 800da26:	f000 f863 	bl	800daf0 <_fstat_r>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	dbed      	blt.n	800da0a <__swhatbuf_r+0x12>
 800da2e:	9901      	ldr	r1, [sp, #4]
 800da30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da38:	4259      	negs	r1, r3
 800da3a:	4159      	adcs	r1, r3
 800da3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da40:	e7eb      	b.n	800da1a <__swhatbuf_r+0x22>

0800da42 <__smakebuf_r>:
 800da42:	898b      	ldrh	r3, [r1, #12]
 800da44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da46:	079d      	lsls	r5, r3, #30
 800da48:	4606      	mov	r6, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	d507      	bpl.n	800da5e <__smakebuf_r+0x1c>
 800da4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da52:	6023      	str	r3, [r4, #0]
 800da54:	6123      	str	r3, [r4, #16]
 800da56:	2301      	movs	r3, #1
 800da58:	6163      	str	r3, [r4, #20]
 800da5a:	b003      	add	sp, #12
 800da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5e:	466a      	mov	r2, sp
 800da60:	ab01      	add	r3, sp, #4
 800da62:	f7ff ffc9 	bl	800d9f8 <__swhatbuf_r>
 800da66:	9f00      	ldr	r7, [sp, #0]
 800da68:	4605      	mov	r5, r0
 800da6a:	4639      	mov	r1, r7
 800da6c:	4630      	mov	r0, r6
 800da6e:	f7fd fa8f 	bl	800af90 <_malloc_r>
 800da72:	b948      	cbnz	r0, 800da88 <__smakebuf_r+0x46>
 800da74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da78:	059a      	lsls	r2, r3, #22
 800da7a:	d4ee      	bmi.n	800da5a <__smakebuf_r+0x18>
 800da7c:	f023 0303 	bic.w	r3, r3, #3
 800da80:	f043 0302 	orr.w	r3, r3, #2
 800da84:	81a3      	strh	r3, [r4, #12]
 800da86:	e7e2      	b.n	800da4e <__smakebuf_r+0xc>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	9b01      	ldr	r3, [sp, #4]
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	b15b      	cbz	r3, 800dab2 <__smakebuf_r+0x70>
 800da9a:	4630      	mov	r0, r6
 800da9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa0:	f000 f838 	bl	800db14 <_isatty_r>
 800daa4:	b128      	cbz	r0, 800dab2 <__smakebuf_r+0x70>
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	f043 0301 	orr.w	r3, r3, #1
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	431d      	orrs	r5, r3
 800dab6:	81a5      	strh	r5, [r4, #12]
 800dab8:	e7cf      	b.n	800da5a <__smakebuf_r+0x18>

0800daba <memmove>:
 800daba:	4288      	cmp	r0, r1
 800dabc:	b510      	push	{r4, lr}
 800dabe:	eb01 0402 	add.w	r4, r1, r2
 800dac2:	d902      	bls.n	800daca <memmove+0x10>
 800dac4:	4284      	cmp	r4, r0
 800dac6:	4623      	mov	r3, r4
 800dac8:	d807      	bhi.n	800dada <memmove+0x20>
 800daca:	1e43      	subs	r3, r0, #1
 800dacc:	42a1      	cmp	r1, r4
 800dace:	d008      	beq.n	800dae2 <memmove+0x28>
 800dad0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dad4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dad8:	e7f8      	b.n	800dacc <memmove+0x12>
 800dada:	4601      	mov	r1, r0
 800dadc:	4402      	add	r2, r0
 800dade:	428a      	cmp	r2, r1
 800dae0:	d100      	bne.n	800dae4 <memmove+0x2a>
 800dae2:	bd10      	pop	{r4, pc}
 800dae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dae8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daec:	e7f7      	b.n	800dade <memmove+0x24>
	...

0800daf0 <_fstat_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	2300      	movs	r3, #0
 800daf4:	4d06      	ldr	r5, [pc, #24]	@ (800db10 <_fstat_r+0x20>)
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f7f4 fab3 	bl	8002068 <_fstat>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d102      	bne.n	800db0c <_fstat_r+0x1c>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	b103      	cbz	r3, 800db0c <_fstat_r+0x1c>
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	20003ae8 	.word	0x20003ae8

0800db14 <_isatty_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	2300      	movs	r3, #0
 800db18:	4d05      	ldr	r5, [pc, #20]	@ (800db30 <_isatty_r+0x1c>)
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	f7f4 fab1 	bl	8002086 <_isatty>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_isatty_r+0x1a>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_isatty_r+0x1a>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	20003ae8 	.word	0x20003ae8

0800db34 <__assert_func>:
 800db34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db36:	4614      	mov	r4, r2
 800db38:	461a      	mov	r2, r3
 800db3a:	4b09      	ldr	r3, [pc, #36]	@ (800db60 <__assert_func+0x2c>)
 800db3c:	4605      	mov	r5, r0
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68d8      	ldr	r0, [r3, #12]
 800db42:	b954      	cbnz	r4, 800db5a <__assert_func+0x26>
 800db44:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <__assert_func+0x30>)
 800db46:	461c      	mov	r4, r3
 800db48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db4c:	9100      	str	r1, [sp, #0]
 800db4e:	462b      	mov	r3, r5
 800db50:	4905      	ldr	r1, [pc, #20]	@ (800db68 <__assert_func+0x34>)
 800db52:	f000 f86f 	bl	800dc34 <fiprintf>
 800db56:	f000 f87f 	bl	800dc58 <abort>
 800db5a:	4b04      	ldr	r3, [pc, #16]	@ (800db6c <__assert_func+0x38>)
 800db5c:	e7f4      	b.n	800db48 <__assert_func+0x14>
 800db5e:	bf00      	nop
 800db60:	2000002c 	.word	0x2000002c
 800db64:	0800e36e 	.word	0x0800e36e
 800db68:	0800e340 	.word	0x0800e340
 800db6c:	0800e333 	.word	0x0800e333

0800db70 <_calloc_r>:
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	fba1 5402 	umull	r5, r4, r1, r2
 800db76:	b93c      	cbnz	r4, 800db88 <_calloc_r+0x18>
 800db78:	4629      	mov	r1, r5
 800db7a:	f7fd fa09 	bl	800af90 <_malloc_r>
 800db7e:	4606      	mov	r6, r0
 800db80:	b928      	cbnz	r0, 800db8e <_calloc_r+0x1e>
 800db82:	2600      	movs	r6, #0
 800db84:	4630      	mov	r0, r6
 800db86:	bd70      	pop	{r4, r5, r6, pc}
 800db88:	220c      	movs	r2, #12
 800db8a:	6002      	str	r2, [r0, #0]
 800db8c:	e7f9      	b.n	800db82 <_calloc_r+0x12>
 800db8e:	462a      	mov	r2, r5
 800db90:	4621      	mov	r1, r4
 800db92:	f7fe f923 	bl	800bddc <memset>
 800db96:	e7f5      	b.n	800db84 <_calloc_r+0x14>

0800db98 <__ascii_mbtowc>:
 800db98:	b082      	sub	sp, #8
 800db9a:	b901      	cbnz	r1, 800db9e <__ascii_mbtowc+0x6>
 800db9c:	a901      	add	r1, sp, #4
 800db9e:	b142      	cbz	r2, 800dbb2 <__ascii_mbtowc+0x1a>
 800dba0:	b14b      	cbz	r3, 800dbb6 <__ascii_mbtowc+0x1e>
 800dba2:	7813      	ldrb	r3, [r2, #0]
 800dba4:	600b      	str	r3, [r1, #0]
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	1e10      	subs	r0, r2, #0
 800dbaa:	bf18      	it	ne
 800dbac:	2001      	movne	r0, #1
 800dbae:	b002      	add	sp, #8
 800dbb0:	4770      	bx	lr
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	e7fb      	b.n	800dbae <__ascii_mbtowc+0x16>
 800dbb6:	f06f 0001 	mvn.w	r0, #1
 800dbba:	e7f8      	b.n	800dbae <__ascii_mbtowc+0x16>

0800dbbc <_realloc_r>:
 800dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc0:	4680      	mov	r8, r0
 800dbc2:	4615      	mov	r5, r2
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	b921      	cbnz	r1, 800dbd2 <_realloc_r+0x16>
 800dbc8:	4611      	mov	r1, r2
 800dbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	f7fd b9df 	b.w	800af90 <_malloc_r>
 800dbd2:	b92a      	cbnz	r2, 800dbe0 <_realloc_r+0x24>
 800dbd4:	f7fd f96a 	bl	800aeac <_free_r>
 800dbd8:	2400      	movs	r4, #0
 800dbda:	4620      	mov	r0, r4
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	f000 f841 	bl	800dc66 <_malloc_usable_size_r>
 800dbe4:	4285      	cmp	r5, r0
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	d802      	bhi.n	800dbf0 <_realloc_r+0x34>
 800dbea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dbee:	d8f4      	bhi.n	800dbda <_realloc_r+0x1e>
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f7fd f9cc 	bl	800af90 <_malloc_r>
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d0ec      	beq.n	800dbd8 <_realloc_r+0x1c>
 800dbfe:	42b5      	cmp	r5, r6
 800dc00:	462a      	mov	r2, r5
 800dc02:	4621      	mov	r1, r4
 800dc04:	bf28      	it	cs
 800dc06:	4632      	movcs	r2, r6
 800dc08:	f7fe f9d8 	bl	800bfbc <memcpy>
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f7fd f94c 	bl	800aeac <_free_r>
 800dc14:	463c      	mov	r4, r7
 800dc16:	e7e0      	b.n	800dbda <_realloc_r+0x1e>

0800dc18 <__ascii_wctomb>:
 800dc18:	4603      	mov	r3, r0
 800dc1a:	4608      	mov	r0, r1
 800dc1c:	b141      	cbz	r1, 800dc30 <__ascii_wctomb+0x18>
 800dc1e:	2aff      	cmp	r2, #255	@ 0xff
 800dc20:	d904      	bls.n	800dc2c <__ascii_wctomb+0x14>
 800dc22:	228a      	movs	r2, #138	@ 0x8a
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	4770      	bx	lr
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	700a      	strb	r2, [r1, #0]
 800dc30:	4770      	bx	lr
	...

0800dc34 <fiprintf>:
 800dc34:	b40e      	push	{r1, r2, r3}
 800dc36:	b503      	push	{r0, r1, lr}
 800dc38:	4601      	mov	r1, r0
 800dc3a:	ab03      	add	r3, sp, #12
 800dc3c:	4805      	ldr	r0, [pc, #20]	@ (800dc54 <fiprintf+0x20>)
 800dc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc42:	6800      	ldr	r0, [r0, #0]
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	f7ff fd17 	bl	800d678 <_vfiprintf_r>
 800dc4a:	b002      	add	sp, #8
 800dc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc50:	b003      	add	sp, #12
 800dc52:	4770      	bx	lr
 800dc54:	2000002c 	.word	0x2000002c

0800dc58 <abort>:
 800dc58:	2006      	movs	r0, #6
 800dc5a:	b508      	push	{r3, lr}
 800dc5c:	f000 f834 	bl	800dcc8 <raise>
 800dc60:	2001      	movs	r0, #1
 800dc62:	f7f4 f9ce 	bl	8002002 <_exit>

0800dc66 <_malloc_usable_size_r>:
 800dc66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc6a:	1f18      	subs	r0, r3, #4
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	bfbc      	itt	lt
 800dc70:	580b      	ldrlt	r3, [r1, r0]
 800dc72:	18c0      	addlt	r0, r0, r3
 800dc74:	4770      	bx	lr

0800dc76 <_raise_r>:
 800dc76:	291f      	cmp	r1, #31
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	d904      	bls.n	800dc8a <_raise_r+0x14>
 800dc80:	2316      	movs	r3, #22
 800dc82:	6003      	str	r3, [r0, #0]
 800dc84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc88:	bd38      	pop	{r3, r4, r5, pc}
 800dc8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc8c:	b112      	cbz	r2, 800dc94 <_raise_r+0x1e>
 800dc8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc92:	b94b      	cbnz	r3, 800dca8 <_raise_r+0x32>
 800dc94:	4628      	mov	r0, r5
 800dc96:	f000 f831 	bl	800dcfc <_getpid_r>
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	4601      	mov	r1, r0
 800dc9e:	4628      	mov	r0, r5
 800dca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca4:	f000 b818 	b.w	800dcd8 <_kill_r>
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d00a      	beq.n	800dcc2 <_raise_r+0x4c>
 800dcac:	1c59      	adds	r1, r3, #1
 800dcae:	d103      	bne.n	800dcb8 <_raise_r+0x42>
 800dcb0:	2316      	movs	r3, #22
 800dcb2:	6003      	str	r3, [r0, #0]
 800dcb4:	2001      	movs	r0, #1
 800dcb6:	e7e7      	b.n	800dc88 <_raise_r+0x12>
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcc0:	4798      	blx	r3
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	e7e0      	b.n	800dc88 <_raise_r+0x12>
	...

0800dcc8 <raise>:
 800dcc8:	4b02      	ldr	r3, [pc, #8]	@ (800dcd4 <raise+0xc>)
 800dcca:	4601      	mov	r1, r0
 800dccc:	6818      	ldr	r0, [r3, #0]
 800dcce:	f7ff bfd2 	b.w	800dc76 <_raise_r>
 800dcd2:	bf00      	nop
 800dcd4:	2000002c 	.word	0x2000002c

0800dcd8 <_kill_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	2300      	movs	r3, #0
 800dcdc:	4d06      	ldr	r5, [pc, #24]	@ (800dcf8 <_kill_r+0x20>)
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	4611      	mov	r1, r2
 800dce4:	602b      	str	r3, [r5, #0]
 800dce6:	f7f4 f97c 	bl	8001fe2 <_kill>
 800dcea:	1c43      	adds	r3, r0, #1
 800dcec:	d102      	bne.n	800dcf4 <_kill_r+0x1c>
 800dcee:	682b      	ldr	r3, [r5, #0]
 800dcf0:	b103      	cbz	r3, 800dcf4 <_kill_r+0x1c>
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	bd38      	pop	{r3, r4, r5, pc}
 800dcf6:	bf00      	nop
 800dcf8:	20003ae8 	.word	0x20003ae8

0800dcfc <_getpid_r>:
 800dcfc:	f7f4 b96a 	b.w	8001fd4 <_getpid>

0800dd00 <_init>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	bf00      	nop
 800dd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd06:	bc08      	pop	{r3}
 800dd08:	469e      	mov	lr, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_fini>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr
