
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de28  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800df38  0800df38  0000ef38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8b0  0800e8b0  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8b0  0800e8b0  0000f8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b8  0800e8b8  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b8  0800e8b8  0000f8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8bc  0800e8bc  0000f8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e8c0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d44  200001e8  0800eaa8  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f2c  0800eaa8  00010f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002016d  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000510d  00000000  00000000  0003037e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00035490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015db  00000000  00000000  000370d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e74a  00000000  00000000  000386ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d92  00000000  00000000  00056df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d338  00000000  00000000  0007ab87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089c0  00000000  00000000  00117f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001208c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800df20 	.word	0x0800df20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800df20 	.word	0x0800df20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <computeDT>:
#include "mpu6050.h"

PitchRollYaw resultsPRY;
CompFilter resultsCompFilter;

double computeDT(uint32_t *prevTick) {
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    uint32_t currTick = osKernelGetTickCount();  // Get current tick
 8000fec:	f005 fcd2 	bl	8006994 <osKernelGetTickCount>
 8000ff0:	61b8      	str	r0, [r7, #24]
    uint32_t tickFreq = osKernelGetTickFreq();  // Get tick frequency (e.g., 1000 Hz)
 8000ff2:	f005 fce4 	bl	80069be <osKernelGetTickFreq>
 8000ff6:	6178      	str	r0, [r7, #20]

    // Ensure tick frequency is valid
    if (tickFreq == 0) {
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d107      	bne.n	800100e <computeDT+0x2a>
        printf("Error: Tick frequency is zero!\n");
 8000ffe:	481a      	ldr	r0, [pc, #104]	@ (8001068 <computeDT+0x84>)
 8001000:	f00a fee8 	bl	800bdd4 <puts>
        return 0.0;  // Avoid division by zero
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e026      	b.n	800105c <computeDT+0x78>
    }

    uint32_t deltaTicks;
    if (currTick >= *prevTick) {
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	d305      	bcc.n	8001024 <computeDT+0x40>
        deltaTicks = currTick - *prevTick;  // Normal case
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e004      	b.n	800102e <computeDT+0x4a>
    } else {
        deltaTicks = (0xFFFFFFFF - *prevTick) + currTick + 1;  // Handle overflow
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]
    }

    *prevTick = currTick;  // Update previous tick for the next call
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	601a      	str	r2, [r3, #0]

    double dt = (double)deltaTicks / tickFreq;  // Convert ticks to seconds
 8001034:	69f8      	ldr	r0, [r7, #28]
 8001036:	f7ff f9d5 	bl	80003e4 <__aeabi_ui2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff f9d0 	bl	80003e4 <__aeabi_ui2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff fb6e 	bl	800072c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Debugging output
//    printf("computeDT -> currTick: %lu, prevTick: %lu, deltaTicks: %lu, tickFreq: %lu, dt: %.6f\n",
//           currTick, *prevTick, deltaTicks, tickFreq, dt);

    return dt;  // Return time difference in seconds
 8001058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	0800df38 	.word	0x0800df38
 800106c:	00000000 	.word	0x00000000

08001070 <radiansToDegrees>:

float radiansToDegrees(float radians) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    return radians * (180.0f / M_PI);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f9d5 	bl	8000428 <__aeabi_f2d>
 800107e:	a308      	add	r3, pc, #32	@ (adr r3, 80010a0 <radiansToDegrees+0x30>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fa28 	bl	80004d8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fcfa 	bl	8000a88 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	1a63c1f8 	.word	0x1a63c1f8
 80010a4:	404ca5dc 	.word	0x404ca5dc

080010a8 <Kalman_Init>:

	return &resultsCompFilter;
}

// Initialize the Kalman filter
void Kalman_Init(KalmanFilter *kf, float Q_angle, float Q_bias, float R_measure) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
    // Initialization of states
    kf->angle = 0.0f; // θ₀|₀ = 0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    kf->bias = 0.0f;  // b₀|₀ = 0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
    kf->rate = 0.0f;  // Unbiased angular rate is initialized to 0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]

    // Initialize the error covariance matrix P₀|₀
    kf->P[0][0] = 0.0f; kf->P[0][1] = 0.0f;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
    kf->P[1][0] = 0.0f; kf->P[1][1] = 0.0f;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]

    // Set process and measurement noise covariances
    kf->Q_angle = Q_angle;    // Q_θ: Variance in angle
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	61da      	str	r2, [r3, #28]
    kf->Q_bias = Q_bias;      // Q_b: Variance in gyroscope bias
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	621a      	str	r2, [r3, #32]
    kf->R_measure = R_measure; // R: Variance in accelerometer measurement
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <Kalman_Update>:

// Update the Kalman filter with new sensor data
float Kalman_Update(KalmanFilter *kf, float new_angle, float new_rate, float dt) {
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b08b      	sub	sp, #44	@ 0x2c
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	603b      	str	r3, [r7, #0]
    // Step 1: Prediction

    // Predict the unbiased rate: ωₖ - bₖ
    kf->rate = new_rate - kf->bias; // Equation: ωₖ - bₖ
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd06 	bl	8000b30 <__aeabi_fsub>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]

    // Predict the angle: θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * (ωₖ - bₖ)
    kf->angle += dt * kf->rate; // θₖ|ₖ₋₁ = θₖ₋₁|ₖ₋₁ + Δt * rate
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fe04 	bl	8000d44 <__aeabi_fmul>
 800113c:	4603      	mov	r3, r0
 800113e:	4619      	mov	r1, r3
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff fcf7 	bl	8000b34 <__addsf3>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	601a      	str	r2, [r3, #0]

    // Update the error covariance matrix:
    // Pₖ|ₖ₋₁ = F * Pₖ₋₁|ₖ₋₁ * Fᵀ + Q
    kf->P[0][0] += dt * (dt * kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + kf->Q_angle); // Update Pₖ|ₖ₋₁[0][0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68dc      	ldr	r4, [r3, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdf3 	bl	8000d44 <__aeabi_fmul>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff fce1 	bl	8000b30 <__aeabi_fsub>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f7ff fcd9 	bl	8000b30 <__aeabi_fsub>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f7ff fcd3 	bl	8000b34 <__addsf3>
 800118e:	4603      	mov	r3, r0
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdd6 	bl	8000d44 <__aeabi_fmul>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff fcc9 	bl	8000b34 <__addsf3>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[0][1]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	691c      	ldr	r4, [r3, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fdc5 	bl	8000d44 <__aeabi_fmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4619      	mov	r1, r3
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff fcb6 	bl	8000b30 <__aeabi_fsub>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1]; // Update Pₖ|ₖ₋₁[1][0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	695c      	ldr	r4, [r3, #20]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdb4 	bl	8000d44 <__aeabi_fmul>
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fca5 	bl	8000b30 <__aeabi_fsub>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	615a      	str	r2, [r3, #20]
    kf->P[1][1] += kf->Q_bias * dt;  // Update Pₖ|ₖ₋₁[1][1]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	699c      	ldr	r4, [r3, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fda3 	bl	8000d44 <__aeabi_fmul>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fc96 	bl	8000b34 <__addsf3>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	619a      	str	r2, [r3, #24]

    // Step 2: Update

    // Compute the innovation: yₖ = zₖ - H * θₖ|ₖ₋₁
    float y = new_angle - kf->angle; // Innovation: yₖ = zₖ - θₖ|ₖ₋₁
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f7ff fc8a 	bl	8000b30 <__aeabi_fsub>
 800121c:	4603      	mov	r3, r0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Compute the innovation covariance: S = H * Pₖ|ₖ₋₁ * Hᵀ + R
    float S = kf->P[0][0] + kf->R_measure; // S = Pₖ|ₖ₋₁[0][0] + R
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fc82 	bl	8000b34 <__addsf3>
 8001230:	4603      	mov	r3, r0
 8001232:	623b      	str	r3, [r7, #32]

    // Compute the Kalman gain: K = Pₖ|ₖ₋₁ * Hᵀ / S
    float K[2];
    K[0] = kf->P[0][0] / S; // K₁ = Pₖ|ₖ₋₁[0][0] / S
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	6a39      	ldr	r1, [r7, #32]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe36 	bl	8000eac <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	613b      	str	r3, [r7, #16]
    K[1] = kf->P[1][0] / S; // K₂ = Pₖ|ₖ₋₁[1][0] / S
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe2e 	bl	8000eac <__aeabi_fdiv>
 8001250:	4603      	mov	r3, r0
 8001252:	617b      	str	r3, [r7, #20]

    // Update the state estimates: θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
    kf->angle += K[0] * y; // θₖ|ₖ = θₖ|ₖ₋₁ + K₁ * yₖ
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681c      	ldr	r4, [r3, #0]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd71 	bl	8000d44 <__aeabi_fmul>
 8001262:	4603      	mov	r3, r0
 8001264:	4619      	mov	r1, r3
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fc64 	bl	8000b34 <__addsf3>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]

    // Update the bias: bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
    kf->bias += K[1] * y; // bₖ|ₖ = bₖ|ₖ₋₁ + K₂ * yₖ
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685c      	ldr	r4, [r3, #4]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd61 	bl	8000d44 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff fc54 	bl	8000b34 <__addsf3>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	605a      	str	r2, [r3, #4]

    // Update the error covariance matrix:
    // Pₖ|ₖ = (I - K * H) * Pₖ|ₖ₋₁
    float P00_temp = kf->P[0][0]; // Temporary value to hold Pₖ|ₖ₋₁[0][0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1]; // Temporary value to hold Pₖ|ₖ₋₁[0][1]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp; // Update Pₖ|ₖ[0][0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	68dc      	ldr	r4, [r3, #12]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	69f9      	ldr	r1, [r7, #28]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd4b 	bl	8000d44 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff fc3c 	bl	8000b30 <__aeabi_fsub>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp; // Update Pₖ|ₖ[0][1]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	691c      	ldr	r4, [r3, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	69b9      	ldr	r1, [r7, #24]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fd3b 	bl	8000d44 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff fc2c 	bl	8000b30 <__aeabi_fsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp; // Update Pₖ|ₖ[1][0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	695c      	ldr	r4, [r3, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	69f9      	ldr	r1, [r7, #28]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd2b 	bl	8000d44 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4620      	mov	r0, r4
 80012f4:	f7ff fc1c 	bl	8000b30 <__aeabi_fsub>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	615a      	str	r2, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp; // Update Pₖ|ₖ[1][1]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	699c      	ldr	r4, [r3, #24]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd1b 	bl	8000d44 <__aeabi_fmul>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fc0c 	bl	8000b30 <__aeabi_fsub>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	619a      	str	r2, [r3, #24]

    // Return the updated angle estimate
    return kf->angle; // Return θₖ|ₖ
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	372c      	adds	r7, #44	@ 0x2c
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}

0800132c <computeAnglesAcc>:

    return &resultsPRY;
}


PitchRollYaw* computeAnglesAcc(MPU6050_Data *dataToProcess) {
 800132c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	resultsPRY.pitchAcc = atan2(dataToProcess->accelY, sqrt(pow(dataToProcess->accelX,2)+pow(dataToProcess->accelZ,2)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f874 	bl	8000428 <__aeabi_f2d>
 8001340:	4604      	mov	r4, r0
 8001342:	460d      	mov	r5, r1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f86d 	bl	8000428 <__aeabi_f2d>
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001356:	f008 fd21 	bl	8009d9c <pow>
 800135a:	4680      	mov	r8, r0
 800135c:	4689      	mov	r9, r1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f860 	bl	8000428 <__aeabi_f2d>
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001370:	f008 fd14 	bl	8009d9c <pow>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4640      	mov	r0, r8
 800137a:	4649      	mov	r1, r9
 800137c:	f7fe fef6 	bl	800016c <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f008 fd70 	bl	8009e6c <sqrt>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4620      	mov	r0, r4
 8001392:	4629      	mov	r1, r5
 8001394:	f008 fd00 	bl	8009d98 <atan2>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb72 	bl	8000a88 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a29      	ldr	r2, [pc, #164]	@ (800144c <computeAnglesAcc+0x120>)
 80013a8:	6013      	str	r3, [r2, #0]
	resultsPRY.rollAcc = atan2(dataToProcess->accelX, sqrt(pow(dataToProcess->accelY,2)+pow(dataToProcess->accelZ,2)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f833 	bl	8000428 <__aeabi_f2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ca:	f008 fce7 	bl	8009d9c <pow>
 80013ce:	4680      	mov	r8, r0
 80013d0:	4689      	mov	r9, r1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f826 	bl	8000428 <__aeabi_f2d>
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013e4:	f008 fcda 	bl	8009d9c <pow>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4640      	mov	r0, r8
 80013ee:	4649      	mov	r1, r9
 80013f0:	f7fe febc 	bl	800016c <__adddf3>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f008 fd36 	bl	8009e6c <sqrt>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f008 fcc6 	bl	8009d98 <atan2>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fb38 	bl	8000a88 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <computeAnglesAcc+0x120>)
 800141c:	6053      	str	r3, [r2, #4]

    resultsPRY.pitchAcc = radiansToDegrees(resultsPRY.pitchAcc);
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <computeAnglesAcc+0x120>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fe24 	bl	8001070 <radiansToDegrees>
 8001428:	4603      	mov	r3, r0
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <computeAnglesAcc+0x120>)
 800142c:	6013      	str	r3, [r2, #0]
    resultsPRY.rollAcc = radiansToDegrees(resultsPRY.rollAcc);
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <computeAnglesAcc+0x120>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe1c 	bl	8001070 <radiansToDegrees>
 8001438:	4603      	mov	r3, r0
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <computeAnglesAcc+0x120>)
 800143c:	6053      	str	r3, [r2, #4]

    return &resultsPRY;
 800143e:	4b03      	ldr	r3, [pc, #12]	@ (800144c <computeAnglesAcc+0x120>)
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144a:	bf00      	nop
 800144c:	20000204 	.word	0x20000204

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x48>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x48>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6153      	str	r3, [r2, #20]
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x48>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	2010      	movs	r0, #16
 8001474:	f001 fd11 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001478:	2010      	movs	r0, #16
 800147a:	f001 fd2a 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2011      	movs	r0, #17
 8001484:	f001 fd09 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001488:	2011      	movs	r0, #17
 800148a:	f001 fd22 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000

0800149c <FreeRTOS_Init>:

/* USER CODE END Header_StartDefaultTask */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void FreeRTOS_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b092      	sub	sp, #72	@ 0x48
 80014a0:	af00      	add	r7, sp, #0
    osKernelInitialize();
 80014a2:	f005 fa2f 	bl	8006904 <osKernelInitialize>

	// Create a message queue to pass data between threads
    dataQueue = osMessageQueueNew(10, sizeof(MPU6050_Data), NULL); // Assuming MPU6050_Data is the data structure for MPU6050 readings
 80014a6:	2200      	movs	r2, #0
 80014a8:	2124      	movs	r1, #36	@ 0x24
 80014aa:	200a      	movs	r0, #10
 80014ac:	f005 fc90 	bl	8006dd0 <osMessageQueueNew>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a33      	ldr	r2, [pc, #204]	@ (8001580 <FreeRTOS_Init+0xe4>)
 80014b4:	6013      	str	r3, [r2, #0]
    if (dataQueue == NULL) {
 80014b6:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <FreeRTOS_Init+0xe4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <FreeRTOS_Init+0x2a>
        printf("Failed to create data queue\r\n");
 80014be:	4831      	ldr	r0, [pc, #196]	@ (8001584 <FreeRTOS_Init+0xe8>)
 80014c0:	f00a fc88 	bl	800bdd4 <puts>
        return;
 80014c4:	e058      	b.n	8001578 <FreeRTOS_Init+0xdc>
    }

    // Create a mutex for UART access
    uartMutex = osMutexNew(NULL);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f005 fb2e 	bl	8006b28 <osMutexNew>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001588 <FreeRTOS_Init+0xec>)
 80014d0:	6013      	str	r3, [r2, #0]
    if (uartMutex == NULL) {
 80014d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <FreeRTOS_Init+0xec>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <FreeRTOS_Init+0x46>
        printf("Failed to create UART mutex\r\n");
 80014da:	482c      	ldr	r0, [pc, #176]	@ (800158c <FreeRTOS_Init+0xf0>)
 80014dc:	f00a fc7a 	bl	800bdd4 <puts>
        return;
 80014e0:	e04a      	b.n	8001578 <FreeRTOS_Init+0xdc>
    }

    // Create a semaphore for DMA TX completion signaling
    dmaTxCompleteSemaphore = osSemaphoreNew(1, 0, NULL);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2001      	movs	r0, #1
 80014e8:	f005 fba4 	bl	8006c34 <osSemaphoreNew>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a28      	ldr	r2, [pc, #160]	@ (8001590 <FreeRTOS_Init+0xf4>)
 80014f0:	6013      	str	r3, [r2, #0]
    if (dmaTxCompleteSemaphore == NULL) {
 80014f2:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <FreeRTOS_Init+0xf4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <FreeRTOS_Init+0x66>
        printf("Failed to create DMA TX semaphore\r\n");
 80014fa:	4826      	ldr	r0, [pc, #152]	@ (8001594 <FreeRTOS_Init+0xf8>)
 80014fc:	f00a fc6a 	bl	800bdd4 <puts>
        return;
 8001500:	e03a      	b.n	8001578 <FreeRTOS_Init+0xdc>
    }

    // Create a thread for reading data from the MPU6050 sensor
    osThreadAttr_t mpu6050TaskAttributes = {
 8001502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f00a fd76 	bl	800bffc <memset>
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <FreeRTOS_Init+0xfc>)
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
 8001514:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
 800151a:	2318      	movs	r3, #24
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .name = "MPU6050Task",
        .priority = osPriorityNormal,
        .stack_size = 512 * 5  // Adjust stack size as needed
    };
    if (osThreadNew((osThreadFunc_t)mpu6050_ReadData, NULL, &mpu6050TaskAttributes) == NULL) {
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	461a      	mov	r2, r3
 8001524:	2100      	movs	r1, #0
 8001526:	481d      	ldr	r0, [pc, #116]	@ (800159c <FreeRTOS_Init+0x100>)
 8001528:	f005 fa51 	bl	80069ce <osThreadNew>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <FreeRTOS_Init+0x9e>
        printf("Failed to create MPU6050 task\r\n");
 8001532:	481b      	ldr	r0, [pc, #108]	@ (80015a0 <FreeRTOS_Init+0x104>)
 8001534:	f00a fc4e 	bl	800bdd4 <puts>
        return;
 8001538:	e01e      	b.n	8001578 <FreeRTOS_Init+0xdc>
    }

    // Create a thread for processing data
    osThreadAttr_t dataProcessingTaskAttributes = {
 800153a:	463b      	mov	r3, r7
 800153c:	2224      	movs	r2, #36	@ 0x24
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00a fd5b 	bl	800bffc <memset>
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <FreeRTOS_Init+0x108>)
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	2318      	movs	r3, #24
 8001552:	61bb      	str	r3, [r7, #24]
        .name = "DataProcessingTask",
        .priority = osPriorityNormal,
        .stack_size = 512 * 10  // Adjust stack size as needed
    };
    if (osThreadNew((osThreadFunc_t)DataProcessing, NULL, &dataProcessingTaskAttributes) == NULL) {
 8001554:	463b      	mov	r3, r7
 8001556:	461a      	mov	r2, r3
 8001558:	2100      	movs	r1, #0
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <FreeRTOS_Init+0x10c>)
 800155c:	f005 fa37 	bl	80069ce <osThreadNew>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <FreeRTOS_Init+0xd2>
        printf("Failed to create Data Processing task\r\n");
 8001566:	4811      	ldr	r0, [pc, #68]	@ (80015ac <FreeRTOS_Init+0x110>)
 8001568:	f00a fc34 	bl	800bdd4 <puts>
        return;
 800156c:	e004      	b.n	8001578 <FreeRTOS_Init+0xdc>
    }

    printf("FreeRTOS initialization complete\r\n");
 800156e:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <FreeRTOS_Init+0x114>)
 8001570:	f00a fc30 	bl	800bdd4 <puts>

    osKernelStart();
 8001574:	f005 f9e8 	bl	8006948 <osKernelStart>
}
 8001578:	3748      	adds	r7, #72	@ 0x48
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000224 	.word	0x20000224
 8001584:	0800df58 	.word	0x0800df58
 8001588:	20000228 	.word	0x20000228
 800158c:	0800df78 	.word	0x0800df78
 8001590:	2000022c 	.word	0x2000022c
 8001594:	0800df98 	.word	0x0800df98
 8001598:	0800dfbc 	.word	0x0800dfbc
 800159c:	08001e65 	.word	0x08001e65
 80015a0:	0800dfc8 	.word	0x0800dfc8
 80015a4:	0800dfe8 	.word	0x0800dfe8
 80015a8:	08001edd 	.word	0x08001edd
 80015ac:	0800dffc 	.word	0x0800dffc
 80015b0:	0800e024 	.word	0x0800e024

080015b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015e6:	f043 0320 	orr.w	r3, r3, #32
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a20      	ldr	r2, [pc, #128]	@ (8001680 <MX_GPIO_Init+0xcc>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_GPIO_Init+0xcc>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_GPIO_Init+0xcc>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a1a      	ldr	r2, [pc, #104]	@ (8001680 <MX_GPIO_Init+0xcc>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_GPIO_Init+0xcc>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2106      	movs	r1, #6
 800162c:	4815      	ldr	r0, [pc, #84]	@ (8001684 <MX_GPIO_Init+0xd0>)
 800162e:	f001 fff7 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001638:	4b13      	ldr	r3, [pc, #76]	@ (8001688 <MX_GPIO_Init+0xd4>)
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_GPIO_Init+0xd8>)
 8001648:	f001 fe66 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800164c:	2306      	movs	r3, #6
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4808      	ldr	r0, [pc, #32]	@ (8001684 <MX_GPIO_Init+0xd0>)
 8001664:	f001 fe58 	bl	8003318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2105      	movs	r1, #5
 800166c:	2028      	movs	r0, #40	@ 0x28
 800166e:	f001 fc14 	bl	8002e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001672:	2028      	movs	r0, #40	@ 0x28
 8001674:	f001 fc2d 	bl	8002ed2 <HAL_NVIC_EnableIRQ>

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	40010c00 	.word	0x40010c00
 8001688:	10110000 	.word	0x10110000
 800168c:	40011000 	.word	0x40011000

08001690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_I2C1_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <MX_I2C1_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_I2C1_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <MX_I2C1_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_I2C1_Init+0x50>)
 80016ce:	f001 ffe1 	bl	8003694 <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016d8:	f000 f8b4 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000230 	.word	0x20000230
 80016e4:	40005400 	.word	0x40005400
 80016e8:	00061a80 	.word	0x00061a80

080016ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	@ (800175c <HAL_I2C_MspInit+0x70>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d123      	bne.n	8001754 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a13      	ldr	r2, [pc, #76]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001724:	23c0      	movs	r3, #192	@ 0xc0
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001728:	2312      	movs	r3, #18
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	@ (8001764 <HAL_I2C_MspInit+0x78>)
 8001738:	f001 fdee 	bl	8003318 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001746:	61d3      	str	r3, [r2, #28]
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_I2C_MspInit+0x74>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005400 	.word	0x40005400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010c00 	.word	0x40010c00

08001768 <main>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    HAL_Init();
 800176c:	f001 fa8a 	bl	8002c84 <HAL_Init>
    SystemClock_Config();
 8001770:	f000 f814 	bl	800179c <SystemClock_Config>
    MX_GPIO_Init();
 8001774:	f7ff ff1e 	bl	80015b4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001778:	f7ff ff8a 	bl	8001690 <MX_I2C1_Init>
    MX_SPI2_Init();
 800177c:	f000 fc2e 	bl	8001fdc <MX_SPI2_Init>
	HAL_SPI_MspInit(&hspi2);
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <main+0x30>)
 8001782:	f000 fc61 	bl	8002048 <HAL_SPI_MspInit>
    MX_DMA_Init();
 8001786:	f7ff fe63 	bl	8001450 <MX_DMA_Init>
    MX_USART2_UART_Init();
 800178a:	f001 f8ab 	bl	80028e4 <MX_USART2_UART_Init>
    FreeRTOS_Init();
 800178e:	f7ff fe85 	bl	800149c <FreeRTOS_Init>

	while (1) {
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <main+0x2a>
 8001796:	bf00      	nop
 8001798:	20000284 	.word	0x20000284

0800179c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	@ 0x40
 80017a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	2228      	movs	r2, #40	@ 0x28
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00a fc26 	bl	800bffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c6:	2310      	movs	r3, #16
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017d2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 f93f 	bl	8004a60 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80017e8:	f000 f82c 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	230f      	movs	r3, #15
 80017ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2302      	movs	r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f003 fbac 	bl	8004f64 <HAL_RCC_ClockConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001812:	f000 f817 	bl	8001844 <Error_Handler>
  }
}
 8001816:	bf00      	nop
 8001818:	3740      	adds	r7, #64	@ 0x40
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001832:	f001 fa3d 	bl	8002cb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40012c00 	.word	0x40012c00

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <Error_Handler+0x8>

08001850 <MPU6050_Init>:
#include "mpu6050.h"
#include "write_printf.h"

extern MPU6050_Data dataToProcess;

void MPU6050_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 8001856:	f000 fa69 	bl	8001d2c <MPU6050_SoftReset>

    HAL_Delay(2000);
 800185a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800185e:	f001 fa43 	bl	8002ce8 <HAL_Delay>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 8001862:	236b      	movs	r3, #107	@ 0x6b
 8001864:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Data to write
 8001866:	2300      	movs	r3, #0
 8001868:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2302      	movs	r3, #2
 8001876:	21d0      	movs	r1, #208	@ 0xd0
 8001878:	4854      	ldr	r0, [pc, #336]	@ (80019cc <MPU6050_Init+0x17c>)
 800187a:	f002 f84f 	bl	800391c <HAL_I2C_Master_Transmit>
    }

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f107 030b 	add.w	r3, r7, #11
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	221c      	movs	r2, #28
 8001896:	21d0      	movs	r1, #208	@ 0xd0
 8001898:	484c      	ldr	r0, [pc, #304]	@ (80019cc <MPU6050_Init+0x17c>)
 800189a:	f002 f93d 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2301      	movs	r3, #1
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	f107 030b 	add.w	r3, r7, #11
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	221b      	movs	r2, #27
 80018b6:	21d0      	movs	r1, #208	@ 0xd0
 80018b8:	4844      	ldr	r0, [pc, #272]	@ (80019cc <MPU6050_Init+0x17c>)
 80018ba:	f002 f92d 	bl	8003b18 <HAL_I2C_Mem_Write>

    uint8_t config;


    // Set sample rate to 100 Hz
    config = 0x00; // 1000 / (1 + 9) = 100 Hz
 80018be:	2300      	movs	r3, #0
 80018c0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPRT_DIV, 1, &config, 1, HAL_MAX_DELAY);
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2301      	movs	r3, #1
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f107 030a 	add.w	r3, r7, #10
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	2219      	movs	r2, #25
 80018d6:	21d0      	movs	r1, #208	@ 0xd0
 80018d8:	483c      	ldr	r0, [pc, #240]	@ (80019cc <MPU6050_Init+0x17c>)
 80018da:	f002 f91d 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Set DLPF_CFG to 0x02 (21 Hz accelerometer, 20 Hz gyroscope bandwidth, 1 kHz sample rate)
    config = 0x00;
 80018de:	2300      	movs	r3, #0
 80018e0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2301      	movs	r3, #1
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	f107 030a 	add.w	r3, r7, #10
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2301      	movs	r3, #1
 80018f4:	221a      	movs	r2, #26
 80018f6:	21d0      	movs	r1, #208	@ 0xd0
 80018f8:	4834      	ldr	r0, [pc, #208]	@ (80019cc <MPU6050_Init+0x17c>)
 80018fa:	f002 f90d 	bl	8003b18 <HAL_I2C_Mem_Write>

    config = 0x00;  // ACCEL_HPF = 0x01 (5 Hz cutoff frequency)
 80018fe:	2300      	movs	r3, #0
 8001900:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &config, 1, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2301      	movs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	f107 030a 	add.w	r3, r7, #10
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	221c      	movs	r2, #28
 8001916:	21d0      	movs	r1, #208	@ 0xd0
 8001918:	482c      	ldr	r0, [pc, #176]	@ (80019cc <MPU6050_Init+0x17c>)
 800191a:	f002 f8fd 	bl	8003b18 <HAL_I2C_Mem_Write>

    uint8_t whoAmI = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, 1, HAL_MAX_DELAY);
 8001922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	f107 0309 	add.w	r3, r7, #9
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	2275      	movs	r2, #117	@ 0x75
 8001936:	21d0      	movs	r1, #208	@ 0xd0
 8001938:	4824      	ldr	r0, [pc, #144]	@ (80019cc <MPU6050_Init+0x17c>)
 800193a:	f002 f9e7 	bl	8003d0c <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 800193e:	7a7b      	ldrb	r3, [r7, #9]
 8001940:	2b68      	cmp	r3, #104	@ 0x68
 8001942:	d005      	beq.n	8001950 <MPU6050_Init+0x100>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001944:	7a7b      	ldrb	r3, [r7, #9]
 8001946:	4619      	mov	r1, r3
 8001948:	4821      	ldr	r0, [pc, #132]	@ (80019d0 <MPU6050_Init+0x180>)
 800194a:	f00a f9db 	bl	800bd04 <iprintf>
 800194e:	e004      	b.n	800195a <MPU6050_Init+0x10a>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001950:	7a7b      	ldrb	r3, [r7, #9]
 8001952:	4619      	mov	r1, r3
 8001954:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <MPU6050_Init+0x184>)
 8001956:	f00a f9d5 	bl	800bd04 <iprintf>
    }

    uint8_t fifoConfig, userCtrl, gConfig, sConfig;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_EN, 1, &fifoConfig, 1, HAL_MAX_DELAY);
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	2301      	movs	r3, #1
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	2223      	movs	r2, #35	@ 0x23
 800196e:	21d0      	movs	r1, #208	@ 0xd0
 8001970:	4816      	ldr	r0, [pc, #88]	@ (80019cc <MPU6050_Init+0x17c>)
 8001972:	f002 f9cb 	bl	8003d0c <HAL_I2C_Mem_Read>
//    printf("FIFO_EN: 0x%02X\r\n", fifoConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &userCtrl, 1, HAL_MAX_DELAY);
 8001976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	2301      	movs	r3, #1
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	226a      	movs	r2, #106	@ 0x6a
 8001988:	21d0      	movs	r1, #208	@ 0xd0
 800198a:	4810      	ldr	r0, [pc, #64]	@ (80019cc <MPU6050_Init+0x17c>)
 800198c:	f002 f9be 	bl	8003d0c <HAL_I2C_Mem_Read>
//    printf("USER_CTRL: 0x%02X\r\n", userCtrl);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &gConfig, 1, HAL_MAX_DELAY);
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2301      	movs	r3, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	1dbb      	adds	r3, r7, #6
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	221c      	movs	r2, #28
 80019a2:	21d0      	movs	r1, #208	@ 0xd0
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <MPU6050_Init+0x17c>)
 80019a6:	f002 f9b1 	bl	8003d0c <HAL_I2C_Mem_Read>
//    printf("ACCEL CONFIG: 0x%02X\r\n", gConfig);

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &sConfig, 1, HAL_MAX_DELAY);
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	1d7b      	adds	r3, r7, #5
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	221b      	movs	r2, #27
 80019bc:	21d0      	movs	r1, #208	@ 0xd0
 80019be:	4803      	ldr	r0, [pc, #12]	@ (80019cc <MPU6050_Init+0x17c>)
 80019c0:	f002 f9a4 	bl	8003d0c <HAL_I2C_Mem_Read>
//    printf("GYRO CONFIG: 0x%02X\r\n", sConfig);
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000230 	.word	0x20000230
 80019d0:	0800e048 	.word	0x0800e048
 80019d4:	0800e074 	.word	0x0800e074

080019d8 <MPU6050_ReadAll>:

void MPU6050_ReadAll(MPU6050_Data *dataToProcess) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	@ 0x38
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]

    int16_t accelX, accelY, accelZ;
    int16_t gyroX, gyroY, gyroZ;

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	230e      	movs	r3, #14
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2301      	movs	r3, #1
 80019f2:	223b      	movs	r2, #59	@ 0x3b
 80019f4:	21d0      	movs	r1, #208	@ 0xd0
 80019f6:	485d      	ldr	r0, [pc, #372]	@ (8001b6c <MPU6050_ReadAll+0x194>)
 80019f8:	f002 f988 	bl	8003d0c <HAL_I2C_Mem_Read>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d159      	bne.n	8001ab6 <MPU6050_ReadAll+0xde>
        accelX = (int16_t)((buffer[0] << 8) | buffer[1]) - dataToProcess->accelOffsets[0];
 8001a02:	7b3b      	ldrb	r3, [r7, #12]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        accelY = (int16_t)((buffer[2] << 8) | buffer[3]) - dataToProcess->accelOffsets[1];
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
        accelZ = (int16_t)((buffer[4] << 8) | buffer[5]) - dataToProcess->accelOffsets[2];
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	7c7b      	ldrb	r3, [r7, #17]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	847b      	strh	r3, [r7, #34]	@ 0x22
        gyroX  = (int16_t)((buffer[8] << 8) | buffer[9]) - dataToProcess->gyroOffsets[0];
 8001a5c:	7d3b      	ldrb	r3, [r7, #20]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	7d7b      	ldrb	r3, [r7, #21]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	843b      	strh	r3, [r7, #32]
        gyroY  = (int16_t)((buffer[10] << 8) | buffer[11]) - dataToProcess->gyroOffsets[1];
 8001a7a:	7dbb      	ldrb	r3, [r7, #22]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	83fb      	strh	r3, [r7, #30]
        gyroZ  = (int16_t)((buffer[12] << 8) | buffer[13]) - dataToProcess->gyroOffsets[2];
 8001a98:	7e3b      	ldrb	r3, [r7, #24]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	7e7b      	ldrb	r3, [r7, #25]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	83bb      	strh	r3, [r7, #28]
    } else {
    	//Error handle
    }
    dataToProcess->accelX = accelX / 16384.0f;
 8001ab6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8ee 	bl	8000c9c <__aeabi_i2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9f0 	bl	8000eac <__aeabi_fdiv>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	601a      	str	r2, [r3, #0]
    dataToProcess->accelY = accelY / 16384.0f;
 8001ad4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f8df 	bl	8000c9c <__aeabi_i2f>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f9e1 	bl	8000eac <__aeabi_fdiv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	605a      	str	r2, [r3, #4]
    dataToProcess->accelZ = accelZ / 16384.0f;
 8001af2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8d0 	bl	8000c9c <__aeabi_i2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9d2 	bl	8000eac <__aeabi_fdiv>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]

    dataToProcess->gyroX = gyroX / 131.0f;
 8001b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f8c1 	bl	8000c9c <__aeabi_i2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4914      	ldr	r1, [pc, #80]	@ (8001b70 <MPU6050_ReadAll+0x198>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f9c4 	bl	8000eac <__aeabi_fdiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	60da      	str	r2, [r3, #12]
    dataToProcess->gyroY = gyroY / 131.0f;
 8001b2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f8b3 	bl	8000c9c <__aeabi_i2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <MPU6050_ReadAll+0x198>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f9b6 	bl	8000eac <__aeabi_fdiv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
    dataToProcess->gyroZ = gyroZ / 131.0f;
 8001b48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f8a5 	bl	8000c9c <__aeabi_i2f>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4906      	ldr	r1, [pc, #24]	@ (8001b70 <MPU6050_ReadAll+0x198>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9a8 	bl	8000eac <__aeabi_fdiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	615a      	str	r2, [r3, #20]
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000230 	.word	0x20000230
 8001b70:	43030000 	.word	0x43030000

08001b74 <MPU6050_CalibrateExternal>:
    		dataToProcess->gyroOffsets[2]);

    HAL_Delay(2000);
}

void MPU6050_CalibrateExternal(MPU6050_Data *dataToProcess) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    // Calculate offsets
    MPU6050_CalculateOffsets(dataToProcess->accelOffsets, dataToProcess->gyroOffsets);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f103 0218 	add.w	r2, r3, #24
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	331e      	adds	r3, #30
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f000 f829 	bl	8001be0 <MPU6050_CalculateOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001b94:	4619      	mov	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b9c:	461a      	mov	r2, r3
    		dataToProcess->accelOffsets[2]);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->accelOffsets[0], dataToProcess->accelOffsets[1],
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MPU6050_CalibrateExternal+0x64>)
 8001ba6:	f00a f8ad 	bl	800bd04 <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bb8:	461a      	mov	r2, r3
    		dataToProcess->gyroOffsets[2]);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", dataToProcess->gyroOffsets[0], dataToProcess->gyroOffsets[1],
 8001bc0:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <MPU6050_CalibrateExternal+0x68>)
 8001bc2:	f00a f89f 	bl	800bd04 <iprintf>

    HAL_Delay(2000);
 8001bc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bca:	f001 f88d 	bl	8002ce8 <HAL_Delay>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	0800e09c 	.word	0x0800e09c
 8001bdc:	0800e0c0 	.word	0x0800e0c0

08001be0 <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b092      	sub	sp, #72	@ 0x48
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]

    int n = 4000;
 8001c02:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001c06:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[14];

    for (int i = 0; i < n; i++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e056      	b.n	8001cbc <MPU6050_CalculateOffsets+0xdc>
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 14, HAL_MAX_DELAY) == HAL_OK) {
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	230e      	movs	r3, #14
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	223b      	movs	r2, #59	@ 0x3b
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	4840      	ldr	r0, [pc, #256]	@ (8001d28 <MPU6050_CalculateOffsets+0x148>)
 8001c26:	f002 f871 	bl	8003d0c <HAL_I2C_Mem_Read>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d142      	bne.n	8001cb6 <MPU6050_CalculateOffsets+0xd6>
        	accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	7a7b      	ldrb	r3, [r7, #9]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	4413      	add	r3, r2
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
        	accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8001c46:	7abb      	ldrb	r3, [r7, #10]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c58:	4413      	add	r3, r2
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
        	accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]) - 16384;
 8001c5c:	7b3b      	ldrb	r3, [r7, #12]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	7b7b      	ldrb	r3, [r7, #13]
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c70:	4413      	add	r3, r2
 8001c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        	gyroX_sum  += (int16_t)((rawData[8] << 8) | rawData[9]);
 8001c74:	7c3b      	ldrb	r3, [r7, #16]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	7c7b      	ldrb	r3, [r7, #17]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	4413      	add	r3, r2
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
        	gyroY_sum  += (int16_t)((rawData[10] << 8) | rawData[11]);
 8001c8a:	7cbb      	ldrb	r3, [r7, #18]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	4413      	add	r3, r2
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        	gyroZ_sum  += (int16_t)((rawData[12] << 8) | rawData[13]);
 8001ca0:	7d3b      	ldrb	r3, [r7, #20]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	7d7b      	ldrb	r3, [r7, #21]
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	4313      	orrs	r3, r2
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++) {
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dba4      	blt.n	8001c0e <MPU6050_CalculateOffsets+0x2e>
        	//Error handle
        }
    }

    // Calculate average offsets
    accelOffsets[0] = (accelX_sum / n);
 8001cc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = (accelY_sum / n);
 8001cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fb92 f2f3 	sdiv	r2, r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	b212      	sxth	r2, r2
 8001ce0:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / n);
 8001ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fb92 f2f3 	sdiv	r2, r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	b212      	sxth	r2, r2
 8001cf0:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = (gyroX_sum / n);
 8001cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = (gyroY_sum / n);
 8001d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	b212      	sxth	r2, r2
 8001d0e:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = (gyroZ_sum / n);
 8001d10:	6a3a      	ldr	r2, [r7, #32]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	b212      	sxth	r2, r2
 8001d1e:	801a      	strh	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	3738      	adds	r7, #56	@ 0x38
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000230 	.word	0x20000230

08001d2c <MPU6050_SoftReset>:
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
}

void MPU6050_SoftReset(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af04      	add	r7, sp, #16
    uint8_t data_rst = 0x80; // DEVICE_RESET bit
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data_rst, 1, HAL_MAX_DELAY);
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2301      	movs	r3, #1
 8001d46:	226b      	movs	r2, #107	@ 0x6b
 8001d48:	21d0      	movs	r1, #208	@ 0xd0
 8001d4a:	482d      	ldr	r0, [pc, #180]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001d4c:	f001 fee4 	bl	8003b18 <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 8001d50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d54:	f000 ffc8 	bl	8002ce8 <HAL_Delay>
    uint8_t data[2] = {0x00, 0x00}; // Zero offset
 8001d58:	2300      	movs	r3, #0
 8001d5a:	80bb      	strh	r3, [r7, #4]

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	2302      	movs	r3, #2
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	2206      	movs	r2, #6
 8001d6e:	21d0      	movs	r1, #208	@ 0xd0
 8001d70:	4823      	ldr	r0, [pc, #140]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001d72:	f001 fed1 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	2208      	movs	r2, #8
 8001d88:	21d0      	movs	r1, #208	@ 0xd0
 8001d8a:	481d      	ldr	r0, [pc, #116]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001d8c:	f001 fec4 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2302      	movs	r3, #2
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	220a      	movs	r2, #10
 8001da2:	21d0      	movs	r1, #208	@ 0xd0
 8001da4:	4816      	ldr	r0, [pc, #88]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001da6:	f001 feb7 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Reset X-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	2213      	movs	r2, #19
 8001dbc:	21d0      	movs	r1, #208	@ 0xd0
 8001dbe:	4810      	ldr	r0, [pc, #64]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001dc0:	f001 feaa 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Reset Y-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	2302      	movs	r3, #2
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	2215      	movs	r2, #21
 8001dd6:	21d0      	movs	r1, #208	@ 0xd0
 8001dd8:	4809      	ldr	r0, [pc, #36]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001dda:	f001 fe9d 	bl	8003b18 <HAL_I2C_Mem_Write>

    // Reset Z-axis offset
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	2217      	movs	r2, #23
 8001df0:	21d0      	movs	r1, #208	@ 0xd0
 8001df2:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <MPU6050_SoftReset+0xd4>)
 8001df4:	f001 fe90 	bl	8003b18 <HAL_I2C_Mem_Write>

}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000230 	.word	0x20000230

08001e04 <OLED_Init>:

#include "oled.h"

// I2C handle

void OLED_Init(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	if (HAL_SPI_Transmit(&hspi2, 0xAA, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	21aa      	movs	r1, #170	@ 0xaa
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <OLED_Init+0x2c>)
 8001e12:	f003 fae9 	bl	80053e8 <HAL_SPI_Transmit>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <OLED_Init+0x1e>
        printf("SPI transmission error\r\n");
 8001e1c:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <OLED_Init+0x30>)
 8001e1e:	f009 ffd9 	bl	800bdd4 <puts>
	}

	SSD1306_Init();
 8001e22:	f000 f9b9 	bl	8002198 <SSD1306_Init>
	HAL_Delay(10);
 8001e26:	200a      	movs	r0, #10
 8001e28:	f000 ff5e 	bl	8002ce8 <HAL_Delay>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000284 	.word	0x20000284
 8001e34:	0800e1c0 	.word	0x0800e1c0

08001e38 <HAL_UART_TxCpltCallback>:

extern osMessageQueueId_t dataQueue;
extern osMutexId_t uartMutex;
extern osSemaphoreId_t dmaTxCompleteSemaphore;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_UART_TxCpltCallback+0x24>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d104      	bne.n	8001e52 <HAL_UART_TxCpltCallback+0x1a>
        osSemaphoreRelease(dmaTxCompleteSemaphore);
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_UART_TxCpltCallback+0x28>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 ff7b 	bl	8006d48 <osSemaphoreRelease>

    }
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000728 	.word	0x20000728
 8001e60:	2000022c 	.word	0x2000022c

08001e64 <mpu6050_ReadData>:

void mpu6050_ReadData(void *argument) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0be      	sub	sp, #248	@ 0xf8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    MPU6050_Data dataToProcess;

    char buffer[200];

    OLED_Init();
 8001e6c:	f7ff ffca 	bl	8001e04 <OLED_Init>
    printf("OLED initialized\r\n");
 8001e70:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <mpu6050_ReadData+0x60>)
 8001e72:	f009 ffaf 	bl	800bdd4 <puts>
    MPU6050_Init();
 8001e76:	f7ff fceb 	bl	8001850 <MPU6050_Init>
    printf("MPU6050 initialized\r\n");
 8001e7a:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <mpu6050_ReadData+0x64>)
 8001e7c:	f009 ffaa 	bl	800bdd4 <puts>
    printf("MPU6050 calibrating...\r\n");
 8001e80:	4812      	ldr	r0, [pc, #72]	@ (8001ecc <mpu6050_ReadData+0x68>)
 8001e82:	f009 ffa7 	bl	800bdd4 <puts>

    //MPU6050_CalibrateInternal(&dataToProcess);
    MPU6050_CalibrateExternal(&dataToProcess);
 8001e86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fe72 	bl	8001b74 <MPU6050_CalibrateExternal>
    printf("MPU6050 calibrated\r\n");
 8001e90:	480f      	ldr	r0, [pc, #60]	@ (8001ed0 <mpu6050_ReadData+0x6c>)
 8001e92:	f009 ff9f 	bl	800bdd4 <puts>
    while (1) {
        // Read sensor data
        MPU6050_ReadAll(&dataToProcess);
 8001e96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fd9c 	bl	80019d8 <MPU6050_ReadAll>
        //} else {
            //printf("UART mutex acquire failed\r\n");
        //}

        // Send data to the queue
        if (osMessageQueuePut(dataQueue, &dataToProcess, 0, 200) != osOK) {
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <mpu6050_ReadData+0x70>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 8001ea8:	23c8      	movs	r3, #200	@ 0xc8
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f005 f804 	bl	8006eb8 <osMessageQueuePut>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <mpu6050_ReadData+0x58>
            printf("Queue is full\r\n");
 8001eb6:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <mpu6050_ReadData+0x74>)
 8001eb8:	f009 ff8c 	bl	800bdd4 <puts>
        }

        osDelay(2);  // Prevent rapid polling
 8001ebc:	2002      	movs	r0, #2
 8001ebe:	f004 fe18 	bl	8006af2 <osDelay>
        MPU6050_ReadAll(&dataToProcess);
 8001ec2:	e7e8      	b.n	8001e96 <mpu6050_ReadData+0x32>
 8001ec4:	0800e1d8 	.word	0x0800e1d8
 8001ec8:	0800e1ec 	.word	0x0800e1ec
 8001ecc:	0800e204 	.word	0x0800e204
 8001ed0:	0800e21c 	.word	0x0800e21c
 8001ed4:	20000224 	.word	0x20000224
 8001ed8:	0800e230 	.word	0x0800e230

08001edc <DataProcessing>:
    }
}


void DataProcessing(void *argument) {
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b0da      	sub	sp, #360	@ 0x168
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001ee6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001eea:	6018      	str	r0, [r3, #0]
    float kalmanRoll;
    float kalmanPitch;
    double dt;
    char buffer[200];

    printf("DataProcessing task started\r\n");
 8001eec:	4834      	ldr	r0, [pc, #208]	@ (8001fc0 <DataProcessing+0xe4>)
 8001eee:	f009 ff71 	bl	800bdd4 <puts>


    Kalman_Init(&resultKalmanFilterPitch, 0.001f, 0.003f, 0.03f); // Initialize the Kalman filter with noise parameters
 8001ef2:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8001ef6:	4b33      	ldr	r3, [pc, #204]	@ (8001fc4 <DataProcessing+0xe8>)
 8001ef8:	4a33      	ldr	r2, [pc, #204]	@ (8001fc8 <DataProcessing+0xec>)
 8001efa:	4934      	ldr	r1, [pc, #208]	@ (8001fcc <DataProcessing+0xf0>)
 8001efc:	f7ff f8d4 	bl	80010a8 <Kalman_Init>
    Kalman_Init(&resultKalmanFilterRoll, 0.001f, 0.003f, 0.03f); // Initialize the Kalman filter with noise parameters
 8001f00:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <DataProcessing+0xe8>)
 8001f06:	4a30      	ldr	r2, [pc, #192]	@ (8001fc8 <DataProcessing+0xec>)
 8001f08:	4930      	ldr	r1, [pc, #192]	@ (8001fcc <DataProcessing+0xf0>)
 8001f0a:	f7ff f8cd 	bl	80010a8 <Kalman_Init>
    uint32_t prevTick = osKernelGetTickCount();  // Initialize previous tick
 8001f0e:	f004 fd41 	bl	8006994 <osKernelGetTickCount>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001f18:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f1c:	601a      	str	r2, [r3, #0]

    while (1) {

        // Get data from queue
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <DataProcessing+0xf4>)
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8001f26:	23c8      	movs	r3, #200	@ 0xc8
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f005 f825 	bl	8006f78 <osMessageQueueGet>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f4      	bne.n	8001f1e <DataProcessing+0x42>
        	// Record the start time
            SSD1306_DrawString(29, 16, "Pitch", 1); // Label for pitch
 8001f34:	2301      	movs	r3, #1
 8001f36:	4a27      	ldr	r2, [pc, #156]	@ (8001fd4 <DataProcessing+0xf8>)
 8001f38:	2110      	movs	r1, #16
 8001f3a:	201d      	movs	r0, #29
 8001f3c:	f000 fae4 	bl	8002508 <SSD1306_DrawString>
            SSD1306_DrawString(69, 16, "Roll", 1); // Label for pitch
 8001f40:	2301      	movs	r3, #1
 8001f42:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <DataProcessing+0xfc>)
 8001f44:	2110      	movs	r1, #16
 8001f46:	2045      	movs	r0, #69	@ 0x45
 8001f48:	f000 fade 	bl	8002508 <SSD1306_DrawString>

            //resultsCompFilter = complementary_filter(&resultsPRY, &receivedData, &prevTick);
            resultsPRY = computeAnglesAcc(&receivedData);
 8001f4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f9eb 	bl	800132c <computeAnglesAcc>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c


            // Clear regions where pitch and roll values are displayed
            SSD1306_ClearRegion(29, 28, 40, 8); // Clear the region for pitch value
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	2228      	movs	r2, #40	@ 0x28
 8001f60:	211c      	movs	r1, #28
 8001f62:	201d      	movs	r0, #29
 8001f64:	f000 f9ac 	bl	80022c0 <SSD1306_ClearRegion>
            SSD1306_ClearRegion(69, 28, 40, 8); // Clear the region for roll value
 8001f68:	2308      	movs	r3, #8
 8001f6a:	2228      	movs	r2, #40	@ 0x28
 8001f6c:	211c      	movs	r1, #28
 8001f6e:	2045      	movs	r0, #69	@ 0x45
 8001f70:	f000 f9a6 	bl	80022c0 <SSD1306_ClearRegion>

//            dt = computeDT(&prevTick);
//            kalmanPitch = Kalman_Update(&resultKalmanFilterPitch, resultsPRY->pitchAcc, receivedData.gyroX, (float)dt);
            dt = computeDT(&prevTick);
 8001f74:	f107 030c 	add.w	r3, r7, #12
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f833 	bl	8000fe4 <computeDT>
 8001f7e:	e9c7 0154 	strd	r0, r1, [r7, #336]	@ 0x150
            kalmanRoll = Kalman_Update(&resultKalmanFilterRoll, resultsPRY->rollAcc, receivedData.gyroY, (float)dt);
 8001f82:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001f86:	685c      	ldr	r4, [r3, #4]
 8001f88:	f8d7 5138 	ldr.w	r5, [r7, #312]	@ 0x138
 8001f8c:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8001f90:	f7fe fd7a 	bl	8000a88 <__aeabi_d2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f7ff f8b4 	bl	800110a <Kalman_Update>
 8001fa2:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
             //SSD1306_DrawFloat(29, 28, resultsCompFilter->pitch, 1, 1);
//            SSD1306_DrawFloat(29, 28, kalmanPitch, 1, 1);

            //SSD1306_DrawFloat(69, 28, resultsCompFilter->roll, 1, 1);
            SSD1306_DrawFloat(69, 28, kalmanRoll, 1, 1);
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001fb0:	211c      	movs	r1, #28
 8001fb2:	2045      	movs	r0, #69	@ 0x45
 8001fb4:	f000 face 	bl	8002554 <SSD1306_DrawFloat>

            SSD1306_UpdateScreen();
 8001fb8:	f000 f9b6 	bl	8002328 <SSD1306_UpdateScreen>
        if (osMessageQueueGet(dataQueue, &receivedData, NULL, 200) == osOK) {
 8001fbc:	e7af      	b.n	8001f1e <DataProcessing+0x42>
 8001fbe:	bf00      	nop
 8001fc0:	0800e240 	.word	0x0800e240
 8001fc4:	3cf5c28f 	.word	0x3cf5c28f
 8001fc8:	3b449ba6 	.word	0x3b449ba6
 8001fcc:	3a83126f 	.word	0x3a83126f
 8001fd0:	20000224 	.word	0x20000224
 8001fd4:	0800e260 	.word	0x0800e260
 8001fd8:	0800e268 	.word	0x0800e268

08001fdc <MX_SPI2_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
	hspi2.Instance = SPI2;  // Specify the SPI instance (e.g., SPI2)
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <MX_SPI2_Init+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;  // Set as master
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001fe8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fec:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;  // Full-duplex communication
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;  // 8-bit data frame size
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;  // Clock polarity: idle low (CPOL = 0)
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_SPI2_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;  // Data captured on first clock edge (CPHA = 0)
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;  // Software management of NSS (CS pin handled manually)
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  // Set SPI clock (adjust as needed)
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002010:	2208      	movs	r2, #8
 8002012:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;  // MSB transmitted first
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;  // Disable TI mode
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_SPI2_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  // Disable CRC calculation
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;  // Default polynomial
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_SPI2_Init+0x64>)
 8002028:	2207      	movs	r2, #7
 800202a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <MX_SPI2_Init+0x64>)
 800202e:	f003 f957 	bl	80052e0 <HAL_SPI_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_SPI2_Init+0x60>
		// Initialization error handling
		Error_Handler();
 8002038:	f7ff fc04 	bl	8001844 <Error_Handler>
	}
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000284 	.word	0x20000284
 8002044:	40003800 	.word	0x40003800

08002048 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0318 	add.w	r3, r7, #24
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a37      	ldr	r2, [pc, #220]	@ (8002140 <HAL_SPI_MspInit+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d130      	bne.n	80020ca <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002068:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a35      	ldr	r2, [pc, #212]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 800206e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a2f      	ldr	r2, [pc, #188]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002098:	2320      	movs	r3, #32
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4827      	ldr	r0, [pc, #156]	@ (8002148 <HAL_SPI_MspInit+0x100>)
 80020ac:	f001 f934 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020b0:	2340      	movs	r3, #64	@ 0x40
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0318 	add.w	r3, r7, #24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4821      	ldr	r0, [pc, #132]	@ (8002148 <HAL_SPI_MspInit+0x100>)
 80020c4:	f001 f928 	bl	8003318 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020c8:	e036      	b.n	8002138 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <HAL_SPI_MspInit+0x104>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d131      	bne.n	8002138 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020de:	61d3      	str	r3, [r2, #28]
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_SPI_MspInit+0xfc>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002104:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	4619      	mov	r1, r3
 8002118:	480d      	ldr	r0, [pc, #52]	@ (8002150 <HAL_SPI_MspInit+0x108>)
 800211a:	f001 f8fd 	bl	8003318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800211e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	4619      	mov	r1, r3
 8002132:	4807      	ldr	r0, [pc, #28]	@ (8002150 <HAL_SPI_MspInit+0x108>)
 8002134:	f001 f8f0 	bl	8003318 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	@ 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40013000 	.word	0x40013000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010800 	.word	0x40010800
 800214c:	40003800 	.word	0x40003800
 8002150:	40010c00 	.word	0x40010c00

08002154 <SSD1306_Write>:
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_RESET);
    HAL_Delay(10);
    HAL_GPIO_WritePin(SSD1306_RESET_GPIO, SSD1306_RESET_PIN, GPIO_PIN_SET);
}

void SSD1306_Write(uint8_t data, uint8_t cmd) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	460a      	mov	r2, r1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	4613      	mov	r3, r2
 8002162:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, cmd == SSD1306_DATA ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	2b01      	cmp	r3, #1
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	2104      	movs	r1, #4
 8002174:	4806      	ldr	r0, [pc, #24]	@ (8002190 <SSD1306_Write+0x3c>)
 8002176:	f001 fa53 	bl	8003620 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(SSD1306_SPI, &data, 1, HAL_MAX_DELAY);
 800217a:	1df9      	adds	r1, r7, #7
 800217c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002180:	2201      	movs	r2, #1
 8002182:	4804      	ldr	r0, [pc, #16]	@ (8002194 <SSD1306_Write+0x40>)
 8002184:	f003 f930 	bl	80053e8 <HAL_SPI_Transmit>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010c00 	.word	0x40010c00
 8002194:	20000284 	.word	0x20000284

08002198 <SSD1306_Init>:

void SSD1306_Init(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    // Reset the OLED (if the RESET pin is connected)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // Replace GPIOB and PIN_2 with your RESET pin
 800219c:	2200      	movs	r2, #0
 800219e:	2102      	movs	r1, #2
 80021a0:	4840      	ldr	r0, [pc, #256]	@ (80022a4 <SSD1306_Init+0x10c>)
 80021a2:	f001 fa3d 	bl	8003620 <HAL_GPIO_WritePin>
    HAL_Delay(10);                                        // Wait 10ms
 80021a6:	200a      	movs	r0, #10
 80021a8:	f000 fd9e 	bl	8002ce8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2102      	movs	r1, #2
 80021b0:	483c      	ldr	r0, [pc, #240]	@ (80022a4 <SSD1306_Init+0x10c>)
 80021b2:	f001 fa35 	bl	8003620 <HAL_GPIO_WritePin>

    // Initialization commands for SSD1306
    SSD1306_Write(0xAE, SSD1306_COMMAND); // Display OFF
 80021b6:	2100      	movs	r1, #0
 80021b8:	20ae      	movs	r0, #174	@ 0xae
 80021ba:	f7ff ffcb 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x20, SSD1306_COMMAND); // Set Memory Addressing Mode
 80021be:	2100      	movs	r1, #0
 80021c0:	2020      	movs	r0, #32
 80021c2:	f7ff ffc7 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Horizontal Addressing Mode
 80021c6:	2100      	movs	r1, #0
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff ffc3 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xB0, SSD1306_COMMAND); // Set Page Start Address
 80021ce:	2100      	movs	r1, #0
 80021d0:	20b0      	movs	r0, #176	@ 0xb0
 80021d2:	f7ff ffbf 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xC8, SSD1306_COMMAND); // COM Output Scan Direction
 80021d6:	2100      	movs	r1, #0
 80021d8:	20c8      	movs	r0, #200	@ 0xc8
 80021da:	f7ff ffbb 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // Set Low Column Address
 80021de:	2100      	movs	r1, #0
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff ffb7 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x10, SSD1306_COMMAND); // Set High Column Address
 80021e6:	2100      	movs	r1, #0
 80021e8:	2010      	movs	r0, #16
 80021ea:	f7ff ffb3 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Set Start Line Address
 80021ee:	2100      	movs	r1, #0
 80021f0:	2040      	movs	r0, #64	@ 0x40
 80021f2:	f7ff ffaf 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x81, SSD1306_COMMAND); // Set Contrast Control
 80021f6:	2100      	movs	r1, #0
 80021f8:	2081      	movs	r0, #129	@ 0x81
 80021fa:	f7ff ffab 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xFF, SSD1306_COMMAND); // Max contrast
 80021fe:	2100      	movs	r1, #0
 8002200:	20ff      	movs	r0, #255	@ 0xff
 8002202:	f7ff ffa7 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xA1, SSD1306_COMMAND); // Set Segment Re-map
 8002206:	2100      	movs	r1, #0
 8002208:	20a1      	movs	r0, #161	@ 0xa1
 800220a:	f7ff ffa3 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xA6, SSD1306_COMMAND); // Set Normal Display
 800220e:	2100      	movs	r1, #0
 8002210:	20a6      	movs	r0, #166	@ 0xa6
 8002212:	f7ff ff9f 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xA8, SSD1306_COMMAND); // Set Multiplex Ratio
 8002216:	2100      	movs	r1, #0
 8002218:	20a8      	movs	r0, #168	@ 0xa8
 800221a:	f7ff ff9b 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x3F, SSD1306_COMMAND); // 1/64 Duty
 800221e:	2100      	movs	r1, #0
 8002220:	203f      	movs	r0, #63	@ 0x3f
 8002222:	f7ff ff97 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xA4, SSD1306_COMMAND); // Disable Entire Display ON
 8002226:	2100      	movs	r1, #0
 8002228:	20a4      	movs	r0, #164	@ 0xa4
 800222a:	f7ff ff93 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xD3, SSD1306_COMMAND); // Set Display Offset
 800222e:	2100      	movs	r1, #0
 8002230:	20d3      	movs	r0, #211	@ 0xd3
 8002232:	f7ff ff8f 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x00, SSD1306_COMMAND); // No offset
 8002236:	2100      	movs	r1, #0
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff ff8b 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xD5, SSD1306_COMMAND); // Set Display Clock Divide Ratio
 800223e:	2100      	movs	r1, #0
 8002240:	20d5      	movs	r0, #213	@ 0xd5
 8002242:	f7ff ff87 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x80, SSD1306_COMMAND); // Default clock ratio
 8002246:	2100      	movs	r1, #0
 8002248:	2080      	movs	r0, #128	@ 0x80
 800224a:	f7ff ff83 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xD9, SSD1306_COMMAND); // Set Pre-charge Period
 800224e:	2100      	movs	r1, #0
 8002250:	20d9      	movs	r0, #217	@ 0xd9
 8002252:	f7ff ff7f 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xF1, SSD1306_COMMAND); // Default pre-charge
 8002256:	2100      	movs	r1, #0
 8002258:	20f1      	movs	r0, #241	@ 0xf1
 800225a:	f7ff ff7b 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xDA, SSD1306_COMMAND); // Set COM Pins Hardware Configuration
 800225e:	2100      	movs	r1, #0
 8002260:	20da      	movs	r0, #218	@ 0xda
 8002262:	f7ff ff77 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x12, SSD1306_COMMAND); // Alternative COM pins
 8002266:	2100      	movs	r1, #0
 8002268:	2012      	movs	r0, #18
 800226a:	f7ff ff73 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xDB, SSD1306_COMMAND); // Set VCOMH Deselect Level
 800226e:	2100      	movs	r1, #0
 8002270:	20db      	movs	r0, #219	@ 0xdb
 8002272:	f7ff ff6f 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x40, SSD1306_COMMAND); // Default VCOMH
 8002276:	2100      	movs	r1, #0
 8002278:	2040      	movs	r0, #64	@ 0x40
 800227a:	f7ff ff6b 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x8D, SSD1306_COMMAND); // Enable charge pump
 800227e:	2100      	movs	r1, #0
 8002280:	208d      	movs	r0, #141	@ 0x8d
 8002282:	f7ff ff67 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0x14, SSD1306_COMMAND);
 8002286:	2100      	movs	r1, #0
 8002288:	2014      	movs	r0, #20
 800228a:	f7ff ff63 	bl	8002154 <SSD1306_Write>
    SSD1306_Write(0xAF, SSD1306_COMMAND); // Display ON
 800228e:	2100      	movs	r1, #0
 8002290:	20af      	movs	r0, #175	@ 0xaf
 8002292:	f7ff ff5f 	bl	8002154 <SSD1306_Write>

    SSD1306_Clear();
 8002296:	f000 f807 	bl	80022a8 <SSD1306_Clear>
    SSD1306_UpdateScreen();
 800229a:	f000 f845 	bl	8002328 <SSD1306_UpdateScreen>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <SSD1306_Clear>:

void SSD1306_Clear(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    memset(SSD1306_Buffer, 0x00, sizeof(SSD1306_Buffer));
 80022ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b0:	2100      	movs	r1, #0
 80022b2:	4802      	ldr	r0, [pc, #8]	@ (80022bc <SSD1306_Clear+0x14>)
 80022b4:	f009 fea2 	bl	800bffc <memset>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200002dc 	.word	0x200002dc

080022c0 <SSD1306_ClearRegion>:

void SSD1306_ClearRegion(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	4603      	mov	r3, r0
 80022d4:	71bb      	strb	r3, [r7, #6]
 80022d6:	460b      	mov	r3, r1
 80022d8:	717b      	strb	r3, [r7, #5]
 80022da:	4613      	mov	r3, r2
 80022dc:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = 0; i < width; i++) {
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e018      	b.n	8002316 <SSD1306_ClearRegion+0x56>
        for (uint8_t j = 0; j < height; j++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	73bb      	strb	r3, [r7, #14]
 80022e8:	e00e      	b.n	8002308 <SSD1306_ClearRegion+0x48>
            SSD1306_DrawPixel(x + i, y + j, 0); // Draw black pixels
 80022ea:	79fa      	ldrb	r2, [r7, #7]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	4413      	add	r3, r2
 80022f0:	b2d8      	uxtb	r0, r3
 80022f2:	79ba      	ldrb	r2, [r7, #6]
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	4413      	add	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	f000 f849 	bl	8002394 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < height; j++) {
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	3301      	adds	r3, #1
 8002306:	73bb      	strb	r3, [r7, #14]
 8002308:	7bba      	ldrb	r2, [r7, #14]
 800230a:	793b      	ldrb	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	d3ec      	bcc.n	80022ea <SSD1306_ClearRegion+0x2a>
    for (uint8_t i = 0; i < width; i++) {
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	797b      	ldrb	r3, [r7, #5]
 800231a:	429a      	cmp	r2, r3
 800231c:	d3e2      	bcc.n	80022e4 <SSD1306_ClearRegion+0x24>
        }
    }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}

08002328 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 800232e:	2300      	movs	r3, #0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	e020      	b.n	8002376 <SSD1306_UpdateScreen+0x4e>
        SSD1306_Write(0xB0 + page, SSD1306_COMMAND);
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	3b50      	subs	r3, #80	@ 0x50
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff09 	bl	8002154 <SSD1306_Write>
        SSD1306_Write(0x00, SSD1306_COMMAND);
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff ff05 	bl	8002154 <SSD1306_Write>
        SSD1306_Write(0x10, SSD1306_COMMAND);
 800234a:	2100      	movs	r1, #0
 800234c:	2010      	movs	r0, #16
 800234e:	f7ff ff01 	bl	8002154 <SSD1306_Write>
        HAL_GPIO_WritePin(SSD1306_DC_GPIO, SSD1306_DC_PIN, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2104      	movs	r1, #4
 8002356:	480c      	ldr	r0, [pc, #48]	@ (8002388 <SSD1306_UpdateScreen+0x60>)
 8002358:	f001 f962 	bl	8003620 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(SSD1306_SPI, &SSD1306_Buffer[page * SSD1306_WIDTH], SSD1306_WIDTH, HAL_MAX_DELAY);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	01db      	lsls	r3, r3, #7
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SSD1306_UpdateScreen+0x64>)
 8002362:	1899      	adds	r1, r3, r2
 8002364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002368:	2280      	movs	r2, #128	@ 0x80
 800236a:	4809      	ldr	r0, [pc, #36]	@ (8002390 <SSD1306_UpdateScreen+0x68>)
 800236c:	f003 f83c 	bl	80053e8 <HAL_SPI_Transmit>
    for (uint8_t page = 0; page < 8; page++) {
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	3301      	adds	r3, #1
 8002374:	71fb      	strb	r3, [r7, #7]
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b07      	cmp	r3, #7
 800237a:	d9db      	bls.n	8002334 <SSD1306_UpdateScreen+0xc>
    }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010c00 	.word	0x40010c00
 800238c:	200002dc 	.word	0x200002dc
 8002390:	20000284 	.word	0x20000284

08002394 <SSD1306_DrawPixel>:
        }
    }
}


void SSD1306_DrawPixel(uint8_t x, uint8_t y, uint8_t color) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	460b      	mov	r3, r1
 80023a0:	71bb      	strb	r3, [r7, #6]
 80023a2:	4613      	mov	r3, r2
 80023a4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db3d      	blt.n	800242a <SSD1306_DrawPixel+0x96>
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023b2:	d83a      	bhi.n	800242a <SSD1306_DrawPixel+0x96>

    if (color) {
 80023b4:	797b      	ldrb	r3, [r7, #5]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01a      	beq.n	80023f0 <SSD1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y % 8));
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	08db      	lsrs	r3, r3, #3
 80023c0:	b2d8      	uxtb	r0, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	01db      	lsls	r3, r3, #7
 80023c6:	4413      	add	r3, r2
 80023c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <SSD1306_DrawPixel+0xa0>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b259      	sxtb	r1, r3
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	4603      	mov	r3, r0
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	4413      	add	r3, r2
 80023e8:	b2c9      	uxtb	r1, r1
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <SSD1306_DrawPixel+0xa0>)
 80023ec:	54d1      	strb	r1, [r2, r3]
 80023ee:	e01d      	b.n	800242c <SSD1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	01db      	lsls	r3, r3, #7
 80023fc:	4413      	add	r3, r2
 80023fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <SSD1306_DrawPixel+0xa0>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	b25a      	sxtb	r2, r3
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	b25b      	sxtb	r3, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	b25b      	sxtb	r3, r3
 8002416:	4013      	ands	r3, r2
 8002418:	b259      	sxtb	r1, r3
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	4603      	mov	r3, r0
 800241e:	01db      	lsls	r3, r3, #7
 8002420:	4413      	add	r3, r2
 8002422:	b2c9      	uxtb	r1, r1
 8002424:	4a03      	ldr	r2, [pc, #12]	@ (8002434 <SSD1306_DrawPixel+0xa0>)
 8002426:	54d1      	strb	r1, [r2, r3]
 8002428:	e000      	b.n	800242c <SSD1306_DrawPixel+0x98>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 800242a:	bf00      	nop
    }
}
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	200002dc 	.word	0x200002dc

08002438 <SSD1306_DrawChar>:

void SSD1306_DrawChar(uint8_t x, uint8_t y, char c, uint8_t color) {
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	4604      	mov	r4, r0
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	4603      	mov	r3, r0
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	460b      	mov	r3, r1
 8002450:	717b      	strb	r3, [r7, #5]
 8002452:	4613      	mov	r3, r2
 8002454:	713b      	strb	r3, [r7, #4]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db4e      	blt.n	80024fc <SSD1306_DrawChar+0xc4>
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	2b3f      	cmp	r3, #63	@ 0x3f
 8002462:	d84b      	bhi.n	80024fc <SSD1306_DrawChar+0xc4>

    if (c < 32 || c > 126) c = '?'; // Replace unsupported characters with '?'
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	2b1f      	cmp	r3, #31
 8002468:	d902      	bls.n	8002470 <SSD1306_DrawChar+0x38>
 800246a:	797b      	ldrb	r3, [r7, #5]
 800246c:	2b7e      	cmp	r3, #126	@ 0x7e
 800246e:	d901      	bls.n	8002474 <SSD1306_DrawChar+0x3c>
 8002470:	233f      	movs	r3, #63	@ 0x3f
 8002472:	717b      	strb	r3, [r7, #5]

    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e03c      	b.n	80024f4 <SSD1306_DrawChar+0xbc>
        uint8_t line = Font5x7[(c - 32) * 5 + i];
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	f1a3 0220 	sub.w	r2, r3, #32
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	441a      	add	r2, r3
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	4413      	add	r3, r2
 800248a:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <SSD1306_DrawChar+0xcc>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
 8002494:	e028      	b.n	80024e8 <SSD1306_DrawChar+0xb0>
            if (line & (1 << j)) {
 8002496:	7b7a      	ldrb	r2, [r7, #13]
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	fa42 f303 	asr.w	r3, r2, r3
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <SSD1306_DrawChar+0x88>
                SSD1306_DrawPixel(x + i, y + j, color);
 80024a6:	79fa      	ldrb	r2, [r7, #7]
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2d8      	uxtb	r0, r3
 80024ae:	79ba      	ldrb	r2, [r7, #6]
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	793a      	ldrb	r2, [r7, #4]
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7ff ff6b 	bl	8002394 <SSD1306_DrawPixel>
 80024be:	e010      	b.n	80024e2 <SSD1306_DrawChar+0xaa>
            } else {
                SSD1306_DrawPixel(x + i, y + j, !color);
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4413      	add	r3, r2
 80024c6:	b2d8      	uxtb	r0, r3
 80024c8:	79ba      	ldrb	r2, [r7, #6]
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	4413      	add	r3, r2
 80024ce:	b2d9      	uxtb	r1, r3
 80024d0:	793b      	ldrb	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	f7ff ff59 	bl	8002394 <SSD1306_DrawPixel>
        for (uint8_t j = 0; j < 8; j++) { // Each character is 7 pixels tall
 80024e2:	7bbb      	ldrb	r3, [r7, #14]
 80024e4:	3301      	adds	r3, #1
 80024e6:	73bb      	strb	r3, [r7, #14]
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d9d3      	bls.n	8002496 <SSD1306_DrawChar+0x5e>
    for (uint8_t i = 0; i < 5; i++) { // Each character is 5 pixels wide
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d9bf      	bls.n	800247a <SSD1306_DrawChar+0x42>
 80024fa:	e000      	b.n	80024fe <SSD1306_DrawChar+0xc6>
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
 80024fc:	bf00      	nop
            }
        }
    }
}
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	0800e294 	.word	0x0800e294

08002508 <SSD1306_DrawString>:

void SSD1306_DrawString(uint8_t x, uint8_t y, const char* str, uint8_t color) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	603a      	str	r2, [r7, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
 8002516:	460b      	mov	r3, r1
 8002518:	71bb      	strb	r3, [r7, #6]
 800251a:	4613      	mov	r3, r2
 800251c:	717b      	strb	r3, [r7, #5]
    while (*str) {
 800251e:	e00f      	b.n	8002540 <SSD1306_DrawString+0x38>
        SSD1306_DrawChar(x, y, *str, color);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	79b9      	ldrb	r1, [r7, #6]
 8002528:	79f8      	ldrb	r0, [r7, #7]
 800252a:	f7ff ff85 	bl	8002438 <SSD1306_DrawChar>
        x += 6; // Move to the next character (5 pixels + 1 space)
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	3306      	adds	r3, #6
 8002532:	71fb      	strb	r3, [r7, #7]
        str++;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	603b      	str	r3, [r7, #0]
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b7a      	cmp	r3, #122	@ 0x7a
 800253e:	d804      	bhi.n	800254a <SSD1306_DrawString+0x42>
    while (*str) {
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1eb      	bne.n	8002520 <SSD1306_DrawString+0x18>
    }
}
 8002548:	e000      	b.n	800254c <SSD1306_DrawString+0x44>
        if (x + 5 >= SSD1306_WIDTH) break; // Stop if the string goes off-screen
 800254a:	bf00      	nop
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <SSD1306_DrawFloat>:
    char buffer[12]; // Buffer to hold the number as a string
    snprintf(buffer, sizeof(buffer), "%d", number); // Convert number to string
    SSD1306_DrawString(x, y, buffer, color);
}

void SSD1306_DrawFloat(uint8_t x, uint8_t y, float number, uint8_t decimal_places, uint8_t color) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b08b      	sub	sp, #44	@ 0x2c
 8002558:	af02      	add	r7, sp, #8
 800255a:	603a      	str	r2, [r7, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
 8002562:	460b      	mov	r3, r1
 8002564:	71bb      	strb	r3, [r7, #6]
 8002566:	4613      	mov	r3, r2
 8002568:	717b      	strb	r3, [r7, #5]
    char buffer[20]; // Buffer to hold the converted float as a string
    snprintf(buffer, sizeof(buffer), "%.*f", decimal_places, number); // Convert float to string
 800256a:	797c      	ldrb	r4, [r7, #5]
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f7fd ff5b 	bl	8000428 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	f107 000c 	add.w	r0, r7, #12
 800257a:	e9cd 2300 	strd	r2, r3, [sp]
 800257e:	4623      	mov	r3, r4
 8002580:	4a07      	ldr	r2, [pc, #28]	@ (80025a0 <SSD1306_DrawFloat+0x4c>)
 8002582:	2114      	movs	r1, #20
 8002584:	f009 fc2e 	bl	800bde4 <sniprintf>
    SSD1306_DrawString(x, y, buffer, color); // Use the existing string drawing function
 8002588:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800258c:	f107 020c 	add.w	r2, r7, #12
 8002590:	79b9      	ldrb	r1, [r7, #6]
 8002592:	79f8      	ldrb	r0, [r7, #7]
 8002594:	f7ff ffb8 	bl	8002508 <SSD1306_DrawString>
}
 8002598:	bf00      	nop
 800259a:	3724      	adds	r7, #36	@ 0x24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	0800e274 	.word	0x0800e274

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_MspInit+0x68>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4a17      	ldr	r2, [pc, #92]	@ (800260c <HAL_MspInit+0x68>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6193      	str	r3, [r2, #24]
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <HAL_MspInit+0x68>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_MspInit+0x68>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_MspInit+0x68>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_MspInit+0x68>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	f06f 0001 	mvn.w	r0, #1
 80025e2:	f000 fc5a 	bl	8002e9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <HAL_MspInit+0x6c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4a04      	ldr	r2, [pc, #16]	@ (8002610 <HAL_MspInit+0x6c>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000

08002614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800262a:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <HAL_InitTick+0xd0>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	4a2d      	ldr	r2, [pc, #180]	@ (80026e4 <HAL_InitTick+0xd0>)
 8002630:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002634:	6193      	str	r3, [r2, #24]
 8002636:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_InitTick+0xd0>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002642:	f107 020c 	add.w	r2, r7, #12
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f002 fdf9 	bl	8005244 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002652:	f002 fde3 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 8002656:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265a:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <HAL_InitTick+0xd4>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	3b01      	subs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002666:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_InitTick+0xd8>)
 8002668:	4a21      	ldr	r2, [pc, #132]	@ (80026f0 <HAL_InitTick+0xdc>)
 800266a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800266c:	4b1f      	ldr	r3, [pc, #124]	@ (80026ec <HAL_InitTick+0xd8>)
 800266e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002672:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_InitTick+0xd8>)
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800267a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <HAL_InitTick+0xd8>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002680:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <HAL_InitTick+0xd8>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002686:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <HAL_InitTick+0xd8>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800268c:	4817      	ldr	r0, [pc, #92]	@ (80026ec <HAL_InitTick+0xd8>)
 800268e:	f003 f8a8 	bl	80057e2 <HAL_TIM_Base_Init>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800269c:	2b00      	cmp	r3, #0
 800269e:	d11b      	bne.n	80026d8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80026a0:	4812      	ldr	r0, [pc, #72]	@ (80026ec <HAL_InitTick+0xd8>)
 80026a2:	f003 f8f7 	bl	8005894 <HAL_TIM_Base_Start_IT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80026b4:	2019      	movs	r0, #25
 80026b6:	f000 fc0c 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d808      	bhi.n	80026d2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	2019      	movs	r0, #25
 80026c6:	f000 fbe8 	bl	8002e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <HAL_InitTick+0xe0>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e002      	b.n	80026d8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3730      	adds	r7, #48	@ 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	200006dc 	.word	0x200006dc
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	20000004 	.word	0x20000004

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <NMI_Handler+0x4>

08002700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <MemManage_Handler+0x4>

08002710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <UsageFault_Handler+0x4>

08002720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA1_Channel6_IRQHandler+0x10>)
 8002732:	f000 fceb 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000770 	.word	0x20000770

08002740 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA1_Channel7_IRQHandler+0x10>)
 8002746:	f000 fce1 	bl	800310c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200007b4 	.word	0x200007b4

08002754 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <TIM1_UP_IRQHandler+0x10>)
 800275a:	f003 f8ed 	bl	8005938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200006dc 	.word	0x200006dc

08002768 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <USART2_IRQHandler+0x10>)
 800276e:	f003 fb53 	bl	8005e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000728 	.word	0x20000728

0800277c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002780:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002784:	f000 ff64 	bl	8003650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return 1;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <_kill>:

int _kill(int pid, int sig)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027a4:	f009 fce2 	bl	800c16c <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2216      	movs	r2, #22
 80027ac:	601a      	str	r2, [r3, #0]
  return -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <_exit>:

void _exit (int status)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffe7 	bl	800279a <_kill>
  while (1) {}    /* Make sure we hang here */
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <_exit+0x12>

080027d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e00a      	b.n	80027f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e2:	f3af 8000 	nop.w
 80027e6:	4601      	mov	r1, r0
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	60ba      	str	r2, [r7, #8]
 80027ee:	b2ca      	uxtb	r2, r1
 80027f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	dbf0      	blt.n	80027e2 <_read+0x12>
  }

  return len;
 8002800:	687b      	ldr	r3, [r7, #4]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_close>:
  }
  return len;
}

int _close(int file)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002830:	605a      	str	r2, [r3, #4]
  return 0;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <_isatty>:

int _isatty(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f009 fc66 	bl	800c16c <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20005000 	.word	0x20005000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	20000724 	.word	0x20000724
 80028d4:	20003f30 	.word	0x20003f30

080028d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	@ (8002934 <MX_USART2_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	@ (8002930 <MX_USART2_UART_Init+0x4c>)
 800291c:	f003 f9a0 	bl	8005c60 <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f7fe ff8d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000728 	.word	0x20000728
 8002934:	40004400 	.word	0x40004400

08002938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3f      	ldr	r2, [pc, #252]	@ (8002a50 <HAL_UART_MspInit+0x118>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d177      	bne.n	8002a48 <HAL_UART_MspInit+0x110>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002958:	4b3e      	ldr	r3, [pc, #248]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 800295e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002962:	61d3      	str	r3, [r2, #28]
 8002964:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002970:	4b38      	ldr	r3, [pc, #224]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a37      	ldr	r2, [pc, #220]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b35      	ldr	r3, [pc, #212]	@ (8002a54 <HAL_UART_MspInit+0x11c>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002988:	230c      	movs	r3, #12
 800298a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2302      	movs	r3, #2
 8002992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4619      	mov	r1, r3
 800299a:	482f      	ldr	r0, [pc, #188]	@ (8002a58 <HAL_UART_MspInit+0x120>)
 800299c:	f000 fcbc 	bl	8003318 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80029a0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a60 <HAL_UART_MspInit+0x128>)
 80029a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029b4:	2280      	movs	r2, #128	@ 0x80
 80029b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b8:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029be:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80029c4:	4b25      	ldr	r3, [pc, #148]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029c6:	2220      	movs	r2, #32
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ca:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029d0:	4822      	ldr	r0, [pc, #136]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029d2:	f000 fa8d 	bl	8002ef0 <HAL_DMA_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 80029dc:	f7fe ff32 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029e6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_UART_MspInit+0x124>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 80029ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002a68 <HAL_UART_MspInit+0x130>)
 80029f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 80029f4:	2210      	movs	r2, #16
 80029f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a00:	2280      	movs	r2, #128	@ 0x80
 8002a02:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a04:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a12:	2220      	movs	r2, #32
 8002a14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a1c:	4811      	ldr	r0, [pc, #68]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a1e:	f000 fa67 	bl	8002ef0 <HAL_DMA_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002a28:	f7fe ff0c 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a32:	4a0c      	ldr	r2, [pc, #48]	@ (8002a64 <HAL_UART_MspInit+0x12c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2105      	movs	r1, #5
 8002a3c:	2026      	movs	r0, #38	@ 0x26
 8002a3e:	f000 fa2c 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a42:	2026      	movs	r0, #38	@ 0x26
 8002a44:	f000 fa45 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010800 	.word	0x40010800
 8002a5c:	20000770 	.word	0x20000770
 8002a60:	4002006c 	.word	0x4002006c
 8002a64:	200007b4 	.word	0x200007b4
 8002a68:	40020080 	.word	0x40020080

08002a6c <_write>:
 */

#include "write_printf.h"
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	4804      	ldr	r0, [pc, #16]	@ (8002a94 <_write+0x28>)
 8002a84:	f003 f93c 	bl	8005d00 <HAL_UART_Transmit>
    return len;
 8002a88:	687b      	ldr	r3, [r7, #4]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000728 	.word	0x20000728

08002a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a98:	f7ff ff1e 	bl	80028d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a9c:	480b      	ldr	r0, [pc, #44]	@ (8002acc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a9e:	490c      	ldr	r1, [pc, #48]	@ (8002ad0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa4:	e002      	b.n	8002aac <LoopCopyDataInit>

08002aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aaa:	3304      	adds	r3, #4

08002aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab0:	d3f9      	bcc.n	8002aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ab4:	4c09      	ldr	r4, [pc, #36]	@ (8002adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab8:	e001      	b.n	8002abe <LoopFillZerobss>

08002aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002abc:	3204      	adds	r2, #4

08002abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac0:	d3fb      	bcc.n	8002aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f009 fb59 	bl	800c178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ac6:	f7fe fe4f 	bl	8001768 <main>
  bx lr
 8002aca:	4770      	bx	lr
  ldr r0, =_sdata
 8002acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002ad4:	0800e8c0 	.word	0x0800e8c0
  ldr r2, =_sbss
 8002ad8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002adc:	20003f2c 	.word	0x20003f2c

08002ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae0:	e7fe      	b.n	8002ae0 <ADC1_2_IRQHandler>

08002ae2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
}
 8002af2:	bf00      	nop
 8002af4:	f7fe fea6 	bl	8001844 <Error_Handler>
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e007      	b.n	8002b12 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	2100      	movs	r1, #0
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d9f4      	bls.n	8002b02 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	721a      	strb	r2, [r3, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b34:	b672      	cpsid	i
}
 8002b36:	bf00      	nop
 8002b38:	f7fe fe84 	bl	8001844 <Error_Handler>
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7a1b      	ldrb	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d905      	bls.n	8002b54 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b48:	b672      	cpsid	i
}
 8002b4a:	bf00      	nop
 8002b4c:	f7fe fe7a 	bl	8001844 <Error_Handler>
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7a1b      	ldrb	r3, [r3, #8]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	b2d1      	uxtb	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	7211      	strb	r1, [r2, #8]
 8002b60:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b62:	f3ef 8211 	mrs	r2, BASEPRI
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60fa      	str	r2, [r7, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	bf00      	nop
 8002b9c:	f7fe fe52 	bl	8001844 <Error_Handler>
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7a1b      	ldrb	r3, [r3, #8]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7a1b      	ldrb	r3, [r3, #8]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d905      	bls.n	8002bc4 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
 8002bbc:	f7fe fe42 	bl	8001844 <Error_Handler>
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7a1b      	ldrb	r3, [r3, #8]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002bd8:	bf00      	nop
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002bf0:	f009 fabc 	bl	800c16c <__errno>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2216      	movs	r2, #22
 8002bf8:	601a      	str	r2, [r3, #0]
    return;
 8002bfa:	e016      	b.n	8002c2a <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002bfc:	200c      	movs	r0, #12
 8002bfe:	f008 faad 	bl	800b15c <malloc>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff63 	bl	8002ae2 <stm32_lock_init>
    return;
 8002c1c:	e005      	b.n	8002c2a <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1e:	b672      	cpsid	i
}
 8002c20:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002c22:	f7fe fe0f 	bl	8001844 <Error_Handler>
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <__retarget_lock_init_recursive+0x44>
}
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3e:	b672      	cpsid	i
}
 8002c40:	bf00      	nop
 8002c42:	f7fe fdff 	bl	8001844 <Error_Handler>
 8002c46:	bf00      	nop
 8002c48:	e7fd      	b.n	8002c46 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff6a 	bl	8002b26 <stm32_lock_acquire>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	bf00      	nop
 8002c6c:	f7fe fdea 	bl	8001844 <Error_Handler>
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff87 	bl	8002b8a <stm32_lock_release>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c88:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <HAL_Init+0x28>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a07      	ldr	r2, [pc, #28]	@ (8002cac <HAL_Init+0x28>)
 8002c8e:	f043 0310 	orr.w	r3, r3, #16
 8002c92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c94:	2003      	movs	r0, #3
 8002c96:	f000 f8f5 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9a:	200f      	movs	r0, #15
 8002c9c:	f7ff fcba 	bl	8002614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca0:	f7ff fc80 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_IncTick+0x1c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a03      	ldr	r2, [pc, #12]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000810 	.word	0x20000810

08002cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	@ (8002ce4 <HAL_GetTick+0x10>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	20000810 	.word	0x20000810

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff fff0 	bl	8002cd4 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d00:	d005      	beq.n	8002d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_Delay+0x44>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d0e:	bf00      	nop
 8002d10:	f7ff ffe0 	bl	8002cd4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d8f7      	bhi.n	8002d10 <HAL_Delay+0x28>
  {
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000008 	.word	0x20000008

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db0b      	blt.n	8002dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	4906      	ldr	r1, [pc, #24]	@ (8002dc8 <__NVIC_EnableIRQ+0x34>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2001      	movs	r0, #1
 8002db6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	@ (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff4f 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff64 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ffb2 	bl	8002e20 <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff81 	bl	8002dcc <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff57 	bl	8002d94 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e043      	b.n	8002f8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b22      	ldr	r3, [pc, #136]	@ (8002f98 <HAL_DMA_Init+0xa8>)
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a22      	ldr	r2, [pc, #136]	@ (8002f9c <HAL_DMA_Init+0xac>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	009a      	lsls	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa0 <HAL_DMA_Init+0xb0>)
 8002f22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	bffdfff8 	.word	0xbffdfff8
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	40020000 	.word	0x40020000

08002fa4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e020      	b.n	8003010 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020e 	bic.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d005      	beq.n	8003040 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e051      	b.n	80030e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <HAL_DMA_Abort_IT+0xd4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d029      	beq.n	80030be <HAL_DMA_Abort_IT+0xa2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <HAL_DMA_Abort_IT+0xd8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_Abort_IT+0x9e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <HAL_DMA_Abort_IT+0xdc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01a      	beq.n	80030b4 <HAL_DMA_Abort_IT+0x98>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_DMA_Abort_IT+0xe0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d012      	beq.n	80030ae <HAL_DMA_Abort_IT+0x92>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_DMA_Abort_IT+0xe4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00a      	beq.n	80030a8 <HAL_DMA_Abort_IT+0x8c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <HAL_DMA_Abort_IT+0xe8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_DMA_Abort_IT+0x86>
 800309c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030a0:	e00e      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030a6:	e00b      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ac:	e008      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b2:	e005      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030b8:	e002      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030ba:	2310      	movs	r3, #16
 80030bc:	e000      	b.n	80030c0 <HAL_DMA_Abort_IT+0xa4>
 80030be:	2301      	movs	r3, #1
 80030c0:	4a11      	ldr	r2, [pc, #68]	@ (8003108 <HAL_DMA_Abort_IT+0xec>)
 80030c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
    } 
  }
  return status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020008 	.word	0x40020008
 80030f4:	4002001c 	.word	0x4002001c
 80030f8:	40020030 	.word	0x40020030
 80030fc:	40020044 	.word	0x40020044
 8003100:	40020058 	.word	0x40020058
 8003104:	4002006c 	.word	0x4002006c
 8003108:	40020000 	.word	0x40020000

0800310c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	2204      	movs	r2, #4
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d04f      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xc8>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a66      	ldr	r2, [pc, #408]	@ (80032fc <HAL_DMA_IRQHandler+0x1f0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d029      	beq.n	80031ba <HAL_DMA_IRQHandler+0xae>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a65      	ldr	r2, [pc, #404]	@ (8003300 <HAL_DMA_IRQHandler+0x1f4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xaa>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a63      	ldr	r2, [pc, #396]	@ (8003304 <HAL_DMA_IRQHandler+0x1f8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xa4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a62      	ldr	r2, [pc, #392]	@ (8003308 <HAL_DMA_IRQHandler+0x1fc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d012      	beq.n	80031aa <HAL_DMA_IRQHandler+0x9e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a60      	ldr	r2, [pc, #384]	@ (800330c <HAL_DMA_IRQHandler+0x200>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x98>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5f      	ldr	r2, [pc, #380]	@ (8003310 <HAL_DMA_IRQHandler+0x204>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d102      	bne.n	800319e <HAL_DMA_IRQHandler+0x92>
 8003198:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800319c:	e00e      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 800319e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80031a2:	e00b      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031a8:	e008      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031ae:	e005      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031b4:	e002      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031b6:	2340      	movs	r3, #64	@ 0x40
 80031b8:	e000      	b.n	80031bc <HAL_DMA_IRQHandler+0xb0>
 80031ba:	2304      	movs	r3, #4
 80031bc:	4a55      	ldr	r2, [pc, #340]	@ (8003314 <HAL_DMA_IRQHandler+0x208>)
 80031be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8094 	beq.w	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031d2:	e08e      	b.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	2202      	movs	r2, #2
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d056      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d051      	beq.n	8003292 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 020a 	bic.w	r2, r2, #10
 800320a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a38      	ldr	r2, [pc, #224]	@ (80032fc <HAL_DMA_IRQHandler+0x1f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d029      	beq.n	8003272 <HAL_DMA_IRQHandler+0x166>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a37      	ldr	r2, [pc, #220]	@ (8003300 <HAL_DMA_IRQHandler+0x1f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_IRQHandler+0x162>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <HAL_DMA_IRQHandler+0x1f8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x15c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a34      	ldr	r2, [pc, #208]	@ (8003308 <HAL_DMA_IRQHandler+0x1fc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d012      	beq.n	8003262 <HAL_DMA_IRQHandler+0x156>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_DMA_IRQHandler+0x200>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00a      	beq.n	800325c <HAL_DMA_IRQHandler+0x150>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_DMA_IRQHandler+0x204>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d102      	bne.n	8003256 <HAL_DMA_IRQHandler+0x14a>
 8003250:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003254:	e00e      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800325a:	e00b      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 800325c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003260:	e008      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003266:	e005      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326c:	e002      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 800326e:	2320      	movs	r3, #32
 8003270:	e000      	b.n	8003274 <HAL_DMA_IRQHandler+0x168>
 8003272:	2302      	movs	r3, #2
 8003274:	4a27      	ldr	r2, [pc, #156]	@ (8003314 <HAL_DMA_IRQHandler+0x208>)
 8003276:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d034      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003290:	e02f      	b.n	80032f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2208      	movs	r2, #8
 8003298:	409a      	lsls	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d028      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020e 	bic.w	r2, r2, #14
 80032ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
    }
  }
  return;
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
}
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40020008 	.word	0x40020008
 8003300:	4002001c 	.word	0x4002001c
 8003304:	40020030 	.word	0x40020030
 8003308:	40020044 	.word	0x40020044
 800330c:	40020058 	.word	0x40020058
 8003310:	4002006c 	.word	0x4002006c
 8003314:	40020000 	.word	0x40020000

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b08b      	sub	sp, #44	@ 0x2c
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332a:	e169      	b.n	8003600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800332c:	2201      	movs	r2, #1
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	f040 8158 	bne.w	80035fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a9a      	ldr	r2, [pc, #616]	@ (80035b8 <HAL_GPIO_Init+0x2a0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
 8003354:	4a98      	ldr	r2, [pc, #608]	@ (80035b8 <HAL_GPIO_Init+0x2a0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d875      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 800335a:	4a98      	ldr	r2, [pc, #608]	@ (80035bc <HAL_GPIO_Init+0x2a4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d058      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
 8003360:	4a96      	ldr	r2, [pc, #600]	@ (80035bc <HAL_GPIO_Init+0x2a4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d86f      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 8003366:	4a96      	ldr	r2, [pc, #600]	@ (80035c0 <HAL_GPIO_Init+0x2a8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d052      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
 800336c:	4a94      	ldr	r2, [pc, #592]	@ (80035c0 <HAL_GPIO_Init+0x2a8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d869      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 8003372:	4a94      	ldr	r2, [pc, #592]	@ (80035c4 <HAL_GPIO_Init+0x2ac>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d04c      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
 8003378:	4a92      	ldr	r2, [pc, #584]	@ (80035c4 <HAL_GPIO_Init+0x2ac>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d863      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 800337e:	4a92      	ldr	r2, [pc, #584]	@ (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d046      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
 8003384:	4a90      	ldr	r2, [pc, #576]	@ (80035c8 <HAL_GPIO_Init+0x2b0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d85d      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 800338a:	2b12      	cmp	r3, #18
 800338c:	d82a      	bhi.n	80033e4 <HAL_GPIO_Init+0xcc>
 800338e:	2b12      	cmp	r3, #18
 8003390:	d859      	bhi.n	8003446 <HAL_GPIO_Init+0x12e>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <HAL_GPIO_Init+0x80>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	08003413 	.word	0x08003413
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080033ff 	.word	0x080033ff
 80033a4:	08003441 	.word	0x08003441
 80033a8:	08003447 	.word	0x08003447
 80033ac:	08003447 	.word	0x08003447
 80033b0:	08003447 	.word	0x08003447
 80033b4:	08003447 	.word	0x08003447
 80033b8:	08003447 	.word	0x08003447
 80033bc:	08003447 	.word	0x08003447
 80033c0:	08003447 	.word	0x08003447
 80033c4:	08003447 	.word	0x08003447
 80033c8:	08003447 	.word	0x08003447
 80033cc:	08003447 	.word	0x08003447
 80033d0:	08003447 	.word	0x08003447
 80033d4:	08003447 	.word	0x08003447
 80033d8:	08003447 	.word	0x08003447
 80033dc:	080033f5 	.word	0x080033f5
 80033e0:	08003409 	.word	0x08003409
 80033e4:	4a79      	ldr	r2, [pc, #484]	@ (80035cc <HAL_GPIO_Init+0x2b4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ea:	e02c      	b.n	8003446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e029      	b.n	8003448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	3304      	adds	r3, #4
 80033fa:	623b      	str	r3, [r7, #32]
          break;
 80033fc:	e024      	b.n	8003448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	3308      	adds	r3, #8
 8003404:	623b      	str	r3, [r7, #32]
          break;
 8003406:	e01f      	b.n	8003448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	330c      	adds	r3, #12
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e01a      	b.n	8003448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800341a:	2304      	movs	r3, #4
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e013      	b.n	8003448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003428:	2308      	movs	r3, #8
 800342a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	611a      	str	r2, [r3, #16]
          break;
 8003432:	e009      	b.n	8003448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003434:	2308      	movs	r3, #8
 8003436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	615a      	str	r2, [r3, #20]
          break;
 800343e:	e003      	b.n	8003448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003440:	2300      	movs	r3, #0
 8003442:	623b      	str	r3, [r7, #32]
          break;
 8003444:	e000      	b.n	8003448 <HAL_GPIO_Init+0x130>
          break;
 8003446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2bff      	cmp	r3, #255	@ 0xff
 800344c:	d801      	bhi.n	8003452 <HAL_GPIO_Init+0x13a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	e001      	b.n	8003456 <HAL_GPIO_Init+0x13e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2bff      	cmp	r3, #255	@ 0xff
 800345c:	d802      	bhi.n	8003464 <HAL_GPIO_Init+0x14c>
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	e002      	b.n	800346a <HAL_GPIO_Init+0x152>
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	3b08      	subs	r3, #8
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	210f      	movs	r1, #15
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	401a      	ands	r2, r3
 800347c:	6a39      	ldr	r1, [r7, #32]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80b1 	beq.w	80035fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003498:	4b4d      	ldr	r3, [pc, #308]	@ (80035d0 <HAL_GPIO_Init+0x2b8>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	4a4c      	ldr	r2, [pc, #304]	@ (80035d0 <HAL_GPIO_Init+0x2b8>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6193      	str	r3, [r2, #24]
 80034a4:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_GPIO_Init+0x2b8>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034b0:	4a48      	ldr	r2, [pc, #288]	@ (80035d4 <HAL_GPIO_Init+0x2bc>)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <HAL_GPIO_Init+0x2c0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <HAL_GPIO_Init+0x1ec>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <HAL_GPIO_Init+0x2c4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00d      	beq.n	8003500 <HAL_GPIO_Init+0x1e8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3e      	ldr	r2, [pc, #248]	@ (80035e0 <HAL_GPIO_Init+0x2c8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d007      	beq.n	80034fc <HAL_GPIO_Init+0x1e4>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3d      	ldr	r2, [pc, #244]	@ (80035e4 <HAL_GPIO_Init+0x2cc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_GPIO_Init+0x1e0>
 80034f4:	2303      	movs	r3, #3
 80034f6:	e006      	b.n	8003506 <HAL_GPIO_Init+0x1ee>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e004      	b.n	8003506 <HAL_GPIO_Init+0x1ee>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e002      	b.n	8003506 <HAL_GPIO_Init+0x1ee>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_GPIO_Init+0x1ee>
 8003504:	2300      	movs	r3, #0
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	f002 0203 	and.w	r2, r2, #3
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	4093      	lsls	r3, r2
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003516:	492f      	ldr	r1, [pc, #188]	@ (80035d4 <HAL_GPIO_Init+0x2bc>)
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003530:	4b2d      	ldr	r3, [pc, #180]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	492c      	ldr	r1, [pc, #176]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800353e:	4b2a      	ldr	r3, [pc, #168]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	43db      	mvns	r3, r3
 8003546:	4928      	ldr	r1, [pc, #160]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003548:	4013      	ands	r3, r2
 800354a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003558:	4b23      	ldr	r3, [pc, #140]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4922      	ldr	r1, [pc, #136]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003566:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	43db      	mvns	r3, r3
 800356e:	491e      	ldr	r1, [pc, #120]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003570:	4013      	ands	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d006      	beq.n	800358e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4918      	ldr	r1, [pc, #96]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]
 800358c:	e006      	b.n	800359c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	43db      	mvns	r3, r3
 8003596:	4914      	ldr	r1, [pc, #80]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 8003598:	4013      	ands	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d021      	beq.n	80035ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	490e      	ldr	r1, [pc, #56]	@ (80035e8 <HAL_GPIO_Init+0x2d0>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e021      	b.n	80035fa <HAL_GPIO_Init+0x2e2>
 80035b6:	bf00      	nop
 80035b8:	10320000 	.word	0x10320000
 80035bc:	10310000 	.word	0x10310000
 80035c0:	10220000 	.word	0x10220000
 80035c4:	10210000 	.word	0x10210000
 80035c8:	10120000 	.word	0x10120000
 80035cc:	10110000 	.word	0x10110000
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010800 	.word	0x40010800
 80035dc:	40010c00 	.word	0x40010c00
 80035e0:	40011000 	.word	0x40011000
 80035e4:	40011400 	.word	0x40011400
 80035e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_GPIO_Init+0x304>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4909      	ldr	r1, [pc, #36]	@ (800361c <HAL_GPIO_Init+0x304>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	3301      	adds	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	f47f ae8e 	bne.w	800332c <HAL_GPIO_Init+0x14>
  }
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	372c      	adds	r7, #44	@ 0x2c
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003666:	4a05      	ldr	r2, [pc, #20]	@ (800367c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f806 	bl	8003680 <HAL_GPIO_EXTI_Callback>
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40010400 	.word	0x40010400

08003680 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e12b      	b.n	80038fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe f816 	bl	80016ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f8:	f001 fd7c 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a81      	ldr	r2, [pc, #516]	@ (8003908 <HAL_I2C_Init+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d807      	bhi.n	8003718 <HAL_I2C_Init+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a80      	ldr	r2, [pc, #512]	@ (800390c <HAL_I2C_Init+0x278>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e006      	b.n	8003726 <HAL_I2C_Init+0x92>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a7d      	ldr	r2, [pc, #500]	@ (8003910 <HAL_I2C_Init+0x27c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0e7      	b.n	80038fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a78      	ldr	r2, [pc, #480]	@ (8003914 <HAL_I2C_Init+0x280>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a6a      	ldr	r2, [pc, #424]	@ (8003908 <HAL_I2C_Init+0x274>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <HAL_I2C_Init+0xd4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	e009      	b.n	800377c <HAL_I2C_Init+0xe8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	4a69      	ldr	r2, [pc, #420]	@ (8003918 <HAL_I2C_Init+0x284>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800378e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	495c      	ldr	r1, [pc, #368]	@ (8003908 <HAL_I2C_Init+0x274>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d819      	bhi.n	80037d0 <HAL_I2C_Init+0x13c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e59      	subs	r1, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037b0:	400b      	ands	r3, r1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_I2C_Init+0x138>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e59      	subs	r1, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	e051      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e04f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <HAL_I2C_Init+0x168>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e012      	b.n	8003822 <HAL_I2C_Init+0x18e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x196>
 8003826:	2301      	movs	r3, #1
 8003828:	e022      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <HAL_I2C_Init+0x1bc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e58      	subs	r0, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	fbb0 f3f3 	udiv	r3, r0, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384e:	e00f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6809      	ldr	r1, [r1, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800389e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6911      	ldr	r1, [r2, #16]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	000186a0 	.word	0x000186a0
 800390c:	001e847f 	.word	0x001e847f
 8003910:	003d08ff 	.word	0x003d08ff
 8003914:	431bde83 	.word	0x431bde83
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
 800392c:	4613      	mov	r3, r2
 800392e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff f9d0 	bl	8002cd4 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 80e0 	bne.w	8003b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	4970      	ldr	r1, [pc, #448]	@ (8003b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fe50 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e0d3      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Transmit+0x50>
 8003968:	2302      	movs	r3, #2
 800396a:	e0cc      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2221      	movs	r2, #33	@ 0x21
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a50      	ldr	r2, [pc, #320]	@ (8003b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fc0a 	bl	80041f4 <I2C_MasterRequestWrite>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e08d      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a00:	e066      	b.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 ff0e 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 ff05 	bl	80048b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01a      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d194      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000

08003b18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	813b      	strh	r3, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b32:	f7ff f8cf 	bl	8002cd4 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	f040 80d9 	bne.w	8003cf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2319      	movs	r3, #25
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	496d      	ldr	r1, [pc, #436]	@ (8003d04 <HAL_I2C_Mem_Write+0x1ec>)
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fd4f 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0cc      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_Mem_Write+0x56>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0c5      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d007      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2221      	movs	r2, #33	@ 0x21
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2240      	movs	r2, #64	@ 0x40
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003d08 <HAL_I2C_Mem_Write+0x1f0>)
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bd6:	88f8      	ldrh	r0, [r7, #6]
 8003bd8:	893a      	ldrh	r2, [r7, #8]
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4603      	mov	r3, r0
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fb86 	bl	80042f8 <I2C_RequestMemoryWrite>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d052      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e081      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fe14 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d107      	bne.n	8003c1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06b      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d11b      	bne.n	8003c98 <HAL_I2C_Mem_Write+0x180>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	781a      	ldrb	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1aa      	bne.n	8003bf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fe07 	bl	80048b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d107      	bne.n	8003cc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e016      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cf8:	2302      	movs	r3, #2
  }
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	00100002 	.word	0x00100002
 8003d08:	ffff0000 	.word	0xffff0000

08003d0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	@ 0x30
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	817b      	strh	r3, [r7, #10]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	813b      	strh	r3, [r7, #8]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d2a:	f7fe ffd3 	bl	8002cd4 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	f040 8250 	bne.w	80041de <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2319      	movs	r3, #25
 8003d44:	2201      	movs	r2, #1
 8003d46:	4982      	ldr	r1, [pc, #520]	@ (8003f50 <HAL_I2C_Mem_Read+0x244>)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fc53 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
 8003d56:	e243      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Mem_Read+0x5a>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e23c      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d007      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2222      	movs	r2, #34	@ 0x22
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a62      	ldr	r2, [pc, #392]	@ (8003f54 <HAL_I2C_Mem_Read+0x248>)
 8003dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dce:	88f8      	ldrh	r0, [r7, #6]
 8003dd0:	893a      	ldrh	r2, [r7, #8]
 8003dd2:	8979      	ldrh	r1, [r7, #10]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4603      	mov	r3, r0
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fb20 	bl	8004424 <I2C_RequestMemoryRead>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e1f8      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d113      	bne.n	8003e1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e1cc      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d11e      	bne.n	8003e64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e36:	b672      	cpsid	i
}
 8003e38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e60:	b662      	cpsie	i
}
 8003e62:	e035      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11e      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e7c:	b672      	cpsid	i
}
 8003e7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ea6:	b662      	cpsie	i
}
 8003ea8:	e012      	b.n	8003ed0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003eb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ed0:	e172      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	f200 811f 	bhi.w	800411a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d123      	bne.n	8003f2c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fd2d 	bl	8004948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e173      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f2a:	e145      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d152      	bne.n	8003fda <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4906      	ldr	r1, [pc, #24]	@ (8003f58 <HAL_I2C_Mem_Read+0x24c>)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fb58 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e148      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
 8003f4e:	bf00      	nop
 8003f50:	00100002 	.word	0x00100002
 8003f54:	ffff0000 	.word	0xffff0000
 8003f58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fa2:	b662      	cpsie	i
}
 8003fa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fd8:	e0ee      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4981      	ldr	r1, [pc, #516]	@ (80041e8 <HAL_I2C_Mem_Read+0x4dc>)
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb05 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0f5      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004004:	b672      	cpsid	i
}
 8004006:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800403a:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <HAL_I2C_Mem_Read+0x4e0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	4a6b      	ldr	r2, [pc, #428]	@ (80041f0 <HAL_I2C_Mem_Read+0x4e4>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	0a1a      	lsrs	r2, r3, #8
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00da      	lsls	r2, r3, #3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	3b01      	subs	r3, #1
 8004058:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d118      	bne.n	8004092 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f043 0220 	orr.w	r2, r3, #32
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004082:	b662      	cpsie	i
}
 8004084:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0a6      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d1d9      	bne.n	8004054 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004118:	e04e      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fc12 	bl	8004948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e058      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d124      	bne.n	80041b8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b03      	cmp	r3, #3
 8004174:	d107      	bne.n	8004186 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004184:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f ae88 	bne.w	8003ed2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3728      	adds	r7, #40	@ 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	00010004 	.word	0x00010004
 80041ec:	20000000 	.word	0x20000000
 80041f0:	14f8b589 	.word	0x14f8b589

080041f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	460b      	mov	r3, r1
 8004202:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b08      	cmp	r3, #8
 800420e:	d006      	beq.n	800421e <I2C_MasterRequestWrite+0x2a>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d003      	beq.n	800421e <I2C_MasterRequestWrite+0x2a>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800421c:	d108      	bne.n	8004230 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e00b      	b.n	8004248 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	2b12      	cmp	r3, #18
 8004236:	d107      	bne.n	8004248 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004246:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f9cd 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426e:	d103      	bne.n	8004278 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004276:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e035      	b.n	80042e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004284:	d108      	bne.n	8004298 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004294:	611a      	str	r2, [r3, #16]
 8004296:	e01b      	b.n	80042d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004298:	897b      	ldrh	r3, [r7, #10]
 800429a:	11db      	asrs	r3, r3, #7
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0306 	and.w	r3, r3, #6
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f063 030f 	orn	r3, r3, #15
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	490e      	ldr	r1, [pc, #56]	@ (80042f0 <I2C_MasterRequestWrite+0xfc>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fa16 	bl	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e010      	b.n	80042e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4907      	ldr	r1, [pc, #28]	@ (80042f4 <I2C_MasterRequestWrite+0x100>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fa06 	bl	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010008 	.word	0x00010008
 80042f4:	00010002 	.word	0x00010002

080042f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	2200      	movs	r2, #0
 800432a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f960 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004348:	d103      	bne.n	8004352 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e05f      	b.n	8004416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	492d      	ldr	r1, [pc, #180]	@ (8004420 <I2C_RequestMemoryWrite+0x128>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f9bb 	bl	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e04c      	b.n	8004416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	6a39      	ldr	r1, [r7, #32]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fa46 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02b      	b.n	8004416 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	e021      	b.n	8004414 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e0:	6a39      	ldr	r1, [r7, #32]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa20 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d107      	bne.n	8004406 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e005      	b.n	8004416 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800440a:	893b      	ldrh	r3, [r7, #8]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	00010002 	.word	0x00010002

08004424 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	4608      	mov	r0, r1
 800442e:	4611      	mov	r1, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4603      	mov	r3, r0
 8004434:	817b      	strh	r3, [r7, #10]
 8004436:	460b      	mov	r3, r1
 8004438:	813b      	strh	r3, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800444c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2200      	movs	r2, #0
 8004466:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f8c2 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004484:	d103      	bne.n	800448e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0aa      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	4952      	ldr	r1, [pc, #328]	@ (80045f0 <I2C_RequestMemoryRead+0x1cc>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f91d 	bl	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e097      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f9a8 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e076      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e021      	b.n	8004550 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f982 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e050      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004546:	893b      	ldrh	r3, [r7, #8]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004552:	6a39      	ldr	r1, [r7, #32]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f967 	bl	8004828 <I2C_WaitOnTXEFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	2b04      	cmp	r3, #4
 8004566:	d107      	bne.n	8004578 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e035      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800458a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2200      	movs	r2, #0
 8004594:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f82b 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b2:	d103      	bne.n	80045bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e013      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	6a3a      	ldr	r2, [r7, #32]
 80045d4:	4906      	ldr	r1, [pc, #24]	@ (80045f0 <I2C_RequestMemoryRead+0x1cc>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f886 	bl	80046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	00010002 	.word	0x00010002

080045f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004604:	e048      	b.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800460c:	d044      	beq.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7fe fb61 	bl	8002cd4 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d139      	bne.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10d      	bne.n	800464a <I2C_WaitOnFlagUntilTimeout+0x56>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	43da      	mvns	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4013      	ands	r3, r2
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	e00c      	b.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x70>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	43da      	mvns	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4013      	ands	r3, r2
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	429a      	cmp	r2, r3
 8004668:	d116      	bne.n	8004698 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e023      	b.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d10d      	bne.n	80046be <I2C_WaitOnFlagUntilTimeout+0xca>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	43da      	mvns	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	e00c      	b.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	43da      	mvns	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4013      	ands	r3, r2
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d093      	beq.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f6:	e071      	b.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004706:	d123      	bne.n	8004750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004716:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	f043 0204 	orr.w	r2, r3, #4
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e067      	b.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004756:	d041      	beq.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004758:	f7fe fabc 	bl	8002cd4 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d302      	bcc.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d136      	bne.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d10c      	bne.n	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e00b      	b.n	80047aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	43da      	mvns	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f043 0220 	orr.w	r2, r3, #32
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e021      	b.n	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10c      	bne.n	8004800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e00b      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf14      	ite	ne
 8004812:	2301      	movne	r3, #1
 8004814:	2300      	moveq	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f af6d 	bne.w	80046f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004834:	e034      	b.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f8e3 	bl	8004a02 <I2C_IsAcknowledgeFailed>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e034      	b.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800484c:	d028      	beq.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fe fa41 	bl	8002cd4 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d11d      	bne.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486e:	2b80      	cmp	r3, #128	@ 0x80
 8004870:	d016      	beq.n	80048a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e007      	b.n	80048b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b80      	cmp	r3, #128	@ 0x80
 80048ac:	d1c3      	bne.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c4:	e034      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f89b 	bl	8004a02 <I2C_IsAcknowledgeFailed>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e034      	b.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048dc:	d028      	beq.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe f9f9 	bl	8002cd4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11d      	bne.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d016      	beq.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	f043 0220 	orr.w	r2, r3, #32
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e007      	b.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d1c3      	bne.n	80048c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004954:	e049      	b.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d119      	bne.n	8004998 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0210 	mvn.w	r2, #16
 800496c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e030      	b.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fe f99c 	bl	8002cd4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11d      	bne.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b8:	2b40      	cmp	r3, #64	@ 0x40
 80049ba:	d016      	beq.n	80049ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e007      	b.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d1ae      	bne.n	8004956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a18:	d11b      	bne.n	8004a52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e272      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8087 	beq.w	8004b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a80:	4b92      	ldr	r3, [pc, #584]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a8c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d112      	bne.n	8004abe <HAL_RCC_OscConfig+0x5e>
 8004a98:	4b8c      	ldr	r3, [pc, #560]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d10b      	bne.n	8004abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa6:	4b89      	ldr	r3, [pc, #548]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d06c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x12c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d168      	bne.n	8004b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e24c      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac6:	d106      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x76>
 8004ac8:	4b80      	ldr	r3, [pc, #512]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7f      	ldr	r2, [pc, #508]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e02e      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x98>
 8004ade:	4b7b      	ldr	r3, [pc, #492]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b78      	ldr	r3, [pc, #480]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a77      	ldr	r2, [pc, #476]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e01d      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0xbc>
 8004b02:	4b72      	ldr	r3, [pc, #456]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a71      	ldr	r2, [pc, #452]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a6e      	ldr	r2, [pc, #440]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0xd4>
 8004b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b68      	ldr	r3, [pc, #416]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a67      	ldr	r2, [pc, #412]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f8ca 	bl	8002cd4 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fe f8c6 	bl	8002cd4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	@ 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e200      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b5d      	ldr	r3, [pc, #372]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xe4>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe f8b6 	bl	8002cd4 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe f8b2 	bl	8002cd4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	@ 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1ec      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	4b53      	ldr	r3, [pc, #332]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x10c>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d063      	beq.n	8004c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ba6:	4b49      	ldr	r3, [pc, #292]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11c      	bne.n	8004bec <HAL_RCC_OscConfig+0x18c>
 8004bb2:	4b46      	ldr	r3, [pc, #280]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d116      	bne.n	8004bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbe:	4b43      	ldr	r3, [pc, #268]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x176>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1c0      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4939      	ldr	r1, [pc, #228]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	e03a      	b.n	8004c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf4:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <HAL_RCC_OscConfig+0x270>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fe f86b 	bl	8002cd4 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fe f867 	bl	8002cd4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1a1      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	4b2d      	ldr	r3, [pc, #180]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4927      	ldr	r1, [pc, #156]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	e015      	b.n	8004c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4b26      	ldr	r3, [pc, #152]	@ (8004cd0 <HAL_RCC_OscConfig+0x270>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f84a 	bl	8002cd4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c44:	f7fe f846 	bl	8002cd4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e180      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03a      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c76:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <HAL_RCC_OscConfig+0x274>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7c:	f7fe f82a 	bl	8002cd4 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fe f826 	bl	8002cd4 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e160      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <HAL_RCC_OscConfig+0x26c>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f000 fafe 	bl	80052a4 <RCC_Delay>
 8004ca8:	e01c      	b.n	8004ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004caa:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <HAL_RCC_OscConfig+0x274>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb0:	f7fe f810 	bl	8002cd4 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb6:	e00f      	b.n	8004cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7fe f80c 	bl	8002cd4 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d908      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e146      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	42420000 	.word	0x42420000
 8004cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	4b92      	ldr	r3, [pc, #584]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e9      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a6 	beq.w	8004e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10d      	bne.n	8004d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	4b88      	ldr	r3, [pc, #544]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4a87      	ldr	r2, [pc, #540]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	61d3      	str	r3, [r2, #28]
 8004d0e:	4b85      	ldr	r3, [pc, #532]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b82      	ldr	r3, [pc, #520]	@ (8004f28 <HAL_RCC_OscConfig+0x4c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f28 <HAL_RCC_OscConfig+0x4c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f28 <HAL_RCC_OscConfig+0x4c8>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fd ffcd 	bl	8002cd4 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fd ffc9 	bl	8002cd4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	@ 0x64
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e103      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b75      	ldr	r3, [pc, #468]	@ (8004f28 <HAL_RCC_OscConfig+0x4c8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <HAL_RCC_OscConfig+0x312>
 8004d64:	4b6f      	ldr	r3, [pc, #444]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	4a6e      	ldr	r2, [pc, #440]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6213      	str	r3, [r2, #32]
 8004d70:	e02d      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x334>
 8004d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4a69      	ldr	r2, [pc, #420]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6213      	str	r3, [r2, #32]
 8004d86:	4b67      	ldr	r3, [pc, #412]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4a66      	ldr	r2, [pc, #408]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	6213      	str	r3, [r2, #32]
 8004d92:	e01c      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b05      	cmp	r3, #5
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCC_OscConfig+0x356>
 8004d9c:	4b61      	ldr	r3, [pc, #388]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4a60      	ldr	r2, [pc, #384]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6213      	str	r3, [r2, #32]
 8004da8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	4a5d      	ldr	r2, [pc, #372]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6213      	str	r3, [r2, #32]
 8004db4:	e00b      	b.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004db6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a5a      	ldr	r2, [pc, #360]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6213      	str	r3, [r2, #32]
 8004dc2:	4b58      	ldr	r3, [pc, #352]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a57      	ldr	r2, [pc, #348]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d015      	beq.n	8004e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd ff7d 	bl	8002cd4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fd ff79 	bl	8002cd4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0b1      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCC_OscConfig+0x37e>
 8004e00:	e014      	b.n	8004e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e02:	f7fd ff67 	bl	8002cd4 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	e00a      	b.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fd ff63 	bl	8002cd4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e09b      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e20:	4b40      	ldr	r3, [pc, #256]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1ee      	bne.n	8004e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e32:	4b3c      	ldr	r3, [pc, #240]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8087 	beq.w	8004f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e48:	4b36      	ldr	r3, [pc, #216]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d061      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d146      	bne.n	8004eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b33      	ldr	r3, [pc, #204]	@ (8004f2c <HAL_RCC_OscConfig+0x4cc>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e62:	f7fd ff37 	bl	8002cd4 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6a:	f7fd ff33 	bl	8002cd4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e06d      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e7c:	4b29      	ldr	r3, [pc, #164]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d108      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4921      	ldr	r1, [pc, #132]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a19      	ldr	r1, [r3, #32]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	491b      	ldr	r1, [pc, #108]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <HAL_RCC_OscConfig+0x4cc>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fd ff07 	bl	8002cd4 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fd ff03 	bl	8002cd4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e03d      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004edc:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x46a>
 8004ee8:	e035      	b.n	8004f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eea:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <HAL_RCC_OscConfig+0x4cc>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fef0 	bl	8002cd4 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd feec 	bl	8002cd4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e026      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x498>
 8004f16:	e01e      	b.n	8004f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e019      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40007000 	.word	0x40007000
 8004f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_OscConfig+0x500>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d106      	bne.n	8004f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0d0      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f78:	4b6a      	ldr	r3, [pc, #424]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d910      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b67      	ldr	r3, [pc, #412]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 0207 	bic.w	r2, r3, #7
 8004f8e:	4965      	ldr	r1, [pc, #404]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b63      	ldr	r3, [pc, #396]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0b8      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d020      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc0:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a58      	ldr	r2, [pc, #352]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd8:	4b53      	ldr	r3, [pc, #332]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a52      	ldr	r2, [pc, #328]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe4:	4b50      	ldr	r3, [pc, #320]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	494d      	ldr	r1, [pc, #308]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d040      	beq.n	8005084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d115      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e07f      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e073      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005032:	4b3d      	ldr	r3, [pc, #244]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e06b      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005042:	4b39      	ldr	r3, [pc, #228]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4936      	ldr	r1, [pc, #216]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005054:	f7fd fe3e 	bl	8002cd4 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fd fe3a 	bl	8002cd4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e053      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b2d      	ldr	r3, [pc, #180]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005084:	4b27      	ldr	r3, [pc, #156]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d210      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 0207 	bic.w	r2, r3, #7
 800509a:	4922      	ldr	r1, [pc, #136]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b20      	ldr	r3, [pc, #128]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e032      	b.n	800511a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c0:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4916      	ldr	r1, [pc, #88]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050de:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	490e      	ldr	r1, [pc, #56]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050f2:	f000 f821 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	490a      	ldr	r1, [pc, #40]	@ (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <HAL_RCC_ClockConfig+0x1cc>)
 800510c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_ClockConfig+0x1d0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd fa7e 	bl	8002614 <HAL_InitTick>

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40022000 	.word	0x40022000
 8005128:	40021000 	.word	0x40021000
 800512c:	0800e470 	.word	0x0800e470
 8005130:	20000000 	.word	0x20000000
 8005134:	20000004 	.word	0x20000004

08005138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005152:	4b1e      	ldr	r3, [pc, #120]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b04      	cmp	r3, #4
 8005160:	d002      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x30>
 8005162:	2b08      	cmp	r3, #8
 8005164:	d003      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x36>
 8005166:	e027      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005168:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800516a:	613b      	str	r3, [r7, #16]
      break;
 800516c:	e027      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	0c9b      	lsrs	r3, r3, #18
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	4a17      	ldr	r2, [pc, #92]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005186:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x94>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0c5b      	lsrs	r3, r3, #17
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	4a11      	ldr	r2, [pc, #68]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005192:	5cd3      	ldrb	r3, [r2, r3]
 8005194:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a0d      	ldr	r2, [pc, #52]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800519a:	fb03 f202 	mul.w	r2, r3, r2
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e004      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0c      	ldr	r2, [pc, #48]	@ (80051dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80051ac:	fb02 f303 	mul.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	613b      	str	r3, [r7, #16]
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80051ba:	613b      	str	r3, [r7, #16]
      break;
 80051bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051be:	693b      	ldr	r3, [r7, #16]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	007a1200 	.word	0x007a1200
 80051d4:	0800e488 	.word	0x0800e488
 80051d8:	0800e498 	.word	0x0800e498
 80051dc:	003d0900 	.word	0x003d0900

080051e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e4:	4b02      	ldr	r3, [pc, #8]	@ (80051f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	20000000 	.word	0x20000000

080051f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051f8:	f7ff fff2 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 80051fc:	4602      	mov	r2, r0
 80051fe:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	4903      	ldr	r1, [pc, #12]	@ (8005218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800520a:	5ccb      	ldrb	r3, [r1, r3]
 800520c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005210:	4618      	mov	r0, r3
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	0800e480 	.word	0x0800e480

0800521c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005220:	f7ff ffde 	bl	80051e0 <HAL_RCC_GetHCLKFreq>
 8005224:	4602      	mov	r2, r0
 8005226:	4b05      	ldr	r3, [pc, #20]	@ (800523c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	0adb      	lsrs	r3, r3, #11
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	4903      	ldr	r1, [pc, #12]	@ (8005240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005232:	5ccb      	ldrb	r3, [r1, r3]
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000
 8005240:	0800e480 	.word	0x0800e480

08005244 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	220f      	movs	r2, #15
 8005252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005254:	4b11      	ldr	r3, [pc, #68]	@ (800529c <HAL_RCC_GetClockConfig+0x58>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0203 	and.w	r2, r3, #3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005260:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <HAL_RCC_GetClockConfig+0x58>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <HAL_RCC_GetClockConfig+0x58>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <HAL_RCC_GetClockConfig+0x58>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	08db      	lsrs	r3, r3, #3
 800527e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0207 	and.w	r2, r3, #7
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	40021000 	.word	0x40021000
 80052a0:	40022000 	.word	0x40022000

080052a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <RCC_Delay+0x34>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <RCC_Delay+0x38>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0a5b      	lsrs	r3, r3, #9
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052c0:	bf00      	nop
  }
  while (Delay --);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1e5a      	subs	r2, r3, #1
 80052c6:	60fa      	str	r2, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f9      	bne.n	80052c0 <RCC_Delay+0x1c>
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20000000 	.word	0x20000000
 80052dc:	10624dd3 	.word	0x10624dd3

080052e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e076      	b.n	80053e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005302:	d009      	beq.n	8005318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	61da      	str	r2, [r3, #28]
 800530a:	e005      	b.n	8005318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc fe88 	bl	8002048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800534e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800539c:	ea42 0103 	orr.w	r1, r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	0c1a      	lsrs	r2, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f002 0204 	and.w	r2, r2, #4
 80053be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053f8:	f7fd fc6c 	bl	8002cd4 <HAL_GetTick>
 80053fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
 8005410:	e12a      	b.n	8005668 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_SPI_Transmit+0x36>
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e122      	b.n	8005668 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SPI_Transmit+0x48>
 800542c:	2302      	movs	r3, #2
 800542e:	e11b      	b.n	8005668 <HAL_SPI_Transmit+0x280>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2203      	movs	r2, #3
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547e:	d10f      	bne.n	80054a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800548e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800549e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d007      	beq.n	80054be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c6:	d152      	bne.n	800556e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_Transmit+0xee>
 80054d0:	8b7b      	ldrh	r3, [r7, #26]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d145      	bne.n	8005562 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	881a      	ldrh	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054fa:	e032      	b.n	8005562 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d112      	bne.n	8005530 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800552e:	e018      	b.n	8005562 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005530:	f7fd fbd0 	bl	8002cd4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d803      	bhi.n	8005548 <HAL_SPI_Transmit+0x160>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005546:	d102      	bne.n	800554e <HAL_SPI_Transmit+0x166>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e082      	b.n	8005668 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1c7      	bne.n	80054fc <HAL_SPI_Transmit+0x114>
 800556c:	e053      	b.n	8005616 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Transmit+0x194>
 8005576:	8b7b      	ldrh	r3, [r7, #26]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d147      	bne.n	800560c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	7812      	ldrb	r2, [r2, #0]
 8005588:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055a2:	e033      	b.n	800560c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d113      	bne.n	80055da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055d8:	e018      	b.n	800560c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055da:	f7fd fb7b 	bl	8002cd4 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d803      	bhi.n	80055f2 <HAL_SPI_Transmit+0x20a>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x210>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e02d      	b.n	8005668 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1c6      	bne.n	80055a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f8b0 	bl	8005780 <SPI_EndRxTxTransaction>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005666:	2300      	movs	r3, #0
  }
}
 8005668:	4618      	mov	r0, r3
 800566a:	3720      	adds	r7, #32
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005680:	f7fd fb28 	bl	8002cd4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005690:	f7fd fb20 	bl	8002cd4 <HAL_GetTick>
 8005694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005696:	4b39      	ldr	r3, [pc, #228]	@ (800577c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	0d1b      	lsrs	r3, r3, #20
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	e054      	b.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ae:	d050      	beq.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b0:	f7fd fb10 	bl	8002cd4 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d902      	bls.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13d      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056de:	d111      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	d004      	beq.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f2:	d107      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570c:	d10f      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800572c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e017      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3b01      	subs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d19b      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000000 	.word	0x20000000

08005780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2201      	movs	r2, #1
 8005794:	2102      	movs	r1, #2
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ff6a 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e013      	b.n	80057da <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2180      	movs	r1, #128	@ 0x80
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff ff57 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	f043 0220 	orr.w	r2, r3, #32
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e000      	b.n	80057da <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e041      	b.n	8005878 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f839 	bl	8005880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f000 f99d 	bl	8005b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d001      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e03a      	b.n	8005922 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a18      	ldr	r2, [pc, #96]	@ (800592c <HAL_TIM_Base_Start_IT+0x98>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x58>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d6:	d009      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x58>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a14      	ldr	r2, [pc, #80]	@ (8005930 <HAL_TIM_Base_Start_IT+0x9c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x58>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <HAL_TIM_Base_Start_IT+0xa0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d111      	bne.n	8005910 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d010      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0201 	orr.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	e007      	b.n	8005920 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800

08005938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d020      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0202 	mvn.w	r2, #2
 800596c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f8d1 	bl	8005b2a <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8c4 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8d3 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d020      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01b      	beq.n	80059e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0204 	mvn.w	r2, #4
 80059b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8ab 	bl	8005b2a <HAL_TIM_IC_CaptureCallback>
 80059d4:	e005      	b.n	80059e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f89e 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8ad 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d020      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0208 	mvn.w	r2, #8
 8005a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2204      	movs	r2, #4
 8005a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f885 	bl	8005b2a <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f878 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f887 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d020      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01b      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0210 	mvn.w	r2, #16
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2208      	movs	r2, #8
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f85f 	bl	8005b2a <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f852 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f861 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00c      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0201 	mvn.w	r2, #1
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb febe 	bl	8001820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8c3 	bl	8005c4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f831 	bl	8005b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 0320 	and.w	r3, r3, #32
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0220 	mvn.w	r2, #32
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f896 	bl	8005c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a2f      	ldr	r2, [pc, #188]	@ (8005c30 <TIM_Base_SetConfig+0xd0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_Base_SetConfig+0x30>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b7e:	d007      	beq.n	8005b90 <TIM_Base_SetConfig+0x30>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a2c      	ldr	r2, [pc, #176]	@ (8005c34 <TIM_Base_SetConfig+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0x30>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c38 <TIM_Base_SetConfig+0xd8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a22      	ldr	r2, [pc, #136]	@ (8005c30 <TIM_Base_SetConfig+0xd0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d007      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c34 <TIM_Base_SetConfig+0xd4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_Base_SetConfig+0x62>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005c38 <TIM_Base_SetConfig+0xd8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005c30 <TIM_Base_SetConfig+0xd0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]
  }
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800

08005c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc80      	pop	{r7}
 8005c5e:	4770      	bx	lr

08005c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e042      	b.n	8005cf8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fc fe56 	bl	8002938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fd5b 	bl	8006760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d175      	bne.n	8005e0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_UART_Transmit+0x2c>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e06e      	b.n	8005e0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2221      	movs	r2, #33	@ 0x21
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3e:	f7fc ffc9 	bl	8002cd4 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d58:	d108      	bne.n	8005d6c <HAL_UART_Transmit+0x6c>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e003      	b.n	8005d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d74:	e02e      	b.n	8005dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2180      	movs	r1, #128	@ 0x80
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 faf8 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e03a      	b.n	8005e0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10b      	bne.n	8005db6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	3302      	adds	r3, #2
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	e007      	b.n	8005dc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1cb      	bne.n	8005d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	@ 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fac4 	bl	8006376 <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e006      	b.n	8005e0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e000      	b.n	8005e0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10f      	bne.n	8005e7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <HAL_UART_IRQHandler+0x66>
 8005e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fbb3 	bl	80065e2 <UART_Receive_IT>
      return;
 8005e7c:	e25b      	b.n	8006336 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80de 	beq.w	8006044 <HAL_UART_IRQHandler+0x22c>
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80d1 	beq.w	8006044 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <HAL_UART_IRQHandler+0xae>
 8005eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f043 0201 	orr.w	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <HAL_UART_IRQHandler+0xd2>
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee2:	f043 0202 	orr.w	r2, r3, #2
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_UART_IRQHandler+0xf6>
 8005ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	f043 0204 	orr.w	r2, r3, #4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d011      	beq.n	8005f3e <HAL_UART_IRQHandler+0x126>
 8005f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f36:	f043 0208 	orr.w	r2, r3, #8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 81f2 	beq.w	800632c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_UART_IRQHandler+0x14e>
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fb3e 	bl	80065e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d103      	bne.n	8005f92 <HAL_UART_IRQHandler+0x17a>
 8005f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d04f      	beq.n	8006032 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa48 	bl	8006428 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d041      	beq.n	800602a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3314      	adds	r3, #20
 8005fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1d9      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80061f8 <HAL_UART_IRQHandler+0x3e0>)
 8006000:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006006:	4618      	mov	r0, r3
 8006008:	f7fd f808 	bl	800301c <HAL_DMA_Abort_IT>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d016      	beq.n	8006040 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800601c:	4610      	mov	r0, r2
 800601e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e00e      	b.n	8006040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f993 	bl	800634e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	e00a      	b.n	8006040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f98f 	bl	800634e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006030:	e006      	b.n	8006040 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f98b 	bl	800634e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800603e:	e175      	b.n	800632c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	bf00      	nop
    return;
 8006042:	e173      	b.n	800632c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 814f 	bne.w	80062ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8148 	beq.w	80062ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006060:	f003 0310 	and.w	r3, r3, #16
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8141 	beq.w	80062ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	60bb      	str	r3, [r7, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80b6 	beq.w	80061fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800609c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8145 	beq.w	8006330 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ae:	429a      	cmp	r2, r3
 80060b0:	f080 813e 	bcs.w	8006330 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	f000 8088 	beq.w	80061d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006100:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800610c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1d9      	bne.n	80060c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006124:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006138:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800613c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006140:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800614a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e1      	bne.n	8006114 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006174:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006176:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800617a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e3      	bne.n	8006150 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061a8:	f023 0310 	bic.w	r3, r3, #16
 80061ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e3      	bne.n	8006196 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fc fee6 	bl	8002fa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f8b6 	bl	8006360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061f4:	e09c      	b.n	8006330 <HAL_UART_IRQHandler+0x518>
 80061f6:	bf00      	nop
 80061f8:	080064ed 	.word	0x080064ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 808e 	beq.w	8006334 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8089 	beq.w	8006334 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006238:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006246:	647a      	str	r2, [r7, #68]	@ 0x44
 8006248:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800624c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e3      	bne.n	8006222 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	e853 3f00 	ldrex	r3, [r3]
 8006268:	623b      	str	r3, [r7, #32]
   return(result);
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	f023 0301 	bic.w	r3, r3, #1
 8006270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3314      	adds	r3, #20
 800627a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800627e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e3      	bne.n	800625a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062c4:	61fa      	str	r2, [r7, #28]
 80062c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	617b      	str	r3, [r7, #20]
   return(result);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e3      	bne.n	80062a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062e2:	4619      	mov	r1, r3
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f83b 	bl	8006360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ea:	e023      	b.n	8006334 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <HAL_UART_IRQHandler+0x4f4>
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f905 	bl	8006514 <UART_Transmit_IT>
    return;
 800630a:	e014      	b.n	8006336 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00e      	beq.n	8006336 <HAL_UART_IRQHandler+0x51e>
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f944 	bl	80065b2 <UART_EndTransmit_IT>
    return;
 800632a:	e004      	b.n	8006336 <HAL_UART_IRQHandler+0x51e>
    return;
 800632c:	bf00      	nop
 800632e:	e002      	b.n	8006336 <HAL_UART_IRQHandler+0x51e>
      return;
 8006330:	bf00      	nop
 8006332:	e000      	b.n	8006336 <HAL_UART_IRQHandler+0x51e>
      return;
 8006334:	bf00      	nop
  }
}
 8006336:	37e8      	adds	r7, #232	@ 0xe8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006386:	e03b      	b.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800638e:	d037      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006390:	f7fc fca0 	bl	8002cd4 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e03a      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d023      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d020      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	d01d      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d116      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f81d 	bl	8006428 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2208      	movs	r2, #8
 80063f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e00f      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	429a      	cmp	r2, r3
 800641c:	d0b4      	beq.n	8006388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b095      	sub	sp, #84	@ 0x54
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006450:	643a      	str	r2, [r7, #64]	@ 0x40
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3314      	adds	r3, #20
 800646a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	61fb      	str	r3, [r7, #28]
   return(result);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e5      	bne.n	8006464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	2b01      	cmp	r3, #1
 800649e:	d119      	bne.n	80064d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c0:	61ba      	str	r2, [r7, #24]
 80064c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	613b      	str	r3, [r7, #16]
   return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064e2:	bf00      	nop
 80064e4:	3754      	adds	r7, #84	@ 0x54
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr

080064ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff ff21 	bl	800634e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b21      	cmp	r3, #33	@ 0x21
 8006526:	d13e      	bne.n	80065a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006530:	d114      	bne.n	800655c <UART_Transmit_IT+0x48>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d110      	bne.n	800655c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	461a      	mov	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800654e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	1c9a      	adds	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]
 800655a:	e008      	b.n	800656e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6211      	str	r1, [r2, #32]
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29b      	uxth	r3, r3
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4619      	mov	r1, r3
 800657c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006590:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fb fc30 	bl	8001e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08c      	sub	sp, #48	@ 0x30
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b22      	cmp	r3, #34	@ 0x22
 80065f4:	f040 80ae 	bne.w	8006754 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006600:	d117      	bne.n	8006632 <UART_Receive_IT+0x50>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006620:	b29a      	uxth	r2, r3
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006630:	e026      	b.n	8006680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006644:	d007      	beq.n	8006656 <UART_Receive_IT+0x74>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <UART_Receive_IT+0x82>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e008      	b.n	8006676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006690:	2b00      	cmp	r3, #0
 8006692:	d15d      	bne.n	8006750 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0220 	bic.w	r2, r2, #32
 80066a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d135      	bne.n	8006746 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	613b      	str	r3, [r7, #16]
   return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	623a      	str	r2, [r7, #32]
 8006702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	6a3a      	ldr	r2, [r7, #32]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	61bb      	str	r3, [r7, #24]
   return(result);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b10      	cmp	r3, #16
 8006720:	d10a      	bne.n	8006738 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7ff fe0e 	bl	8006360 <HAL_UARTEx_RxEventCallback>
 8006744:	e002      	b.n	800674c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fdf8 	bl	800633c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e002      	b.n	8006756 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	@ 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800679a:	f023 030c 	bic.w	r3, r3, #12
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	430b      	orrs	r3, r1
 80067a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699a      	ldr	r2, [r3, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006874 <UART_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fe fd28 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	e002      	b.n	80067d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067d0:	f7fe fd10 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 80067d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009a      	lsls	r2, r3, #2
 80067e0:	441a      	add	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	4a22      	ldr	r2, [pc, #136]	@ (8006878 <UART_SetConfig+0x118>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	0119      	lsls	r1, r3, #4
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009a      	lsls	r2, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	fbb2 f2f3 	udiv	r2, r2, r3
 800680c:	4b1a      	ldr	r3, [pc, #104]	@ (8006878 <UART_SetConfig+0x118>)
 800680e:	fba3 0302 	umull	r0, r3, r3, r2
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	2064      	movs	r0, #100	@ 0x64
 8006816:	fb00 f303 	mul.w	r3, r0, r3
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	3332      	adds	r3, #50	@ 0x32
 8006820:	4a15      	ldr	r2, [pc, #84]	@ (8006878 <UART_SetConfig+0x118>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800682c:	4419      	add	r1, r3
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009a      	lsls	r2, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	fbb2 f2f3 	udiv	r2, r2, r3
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <UART_SetConfig+0x118>)
 8006846:	fba3 0302 	umull	r0, r3, r3, r2
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2064      	movs	r0, #100	@ 0x64
 800684e:	fb00 f303 	mul.w	r3, r0, r3
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	3332      	adds	r3, #50	@ 0x32
 8006858:	4a07      	ldr	r2, [pc, #28]	@ (8006878 <UART_SetConfig+0x118>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	f003 020f 	and.w	r2, r3, #15
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	440a      	add	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40013800 	.word	0x40013800
 8006878:	51eb851f 	.word	0x51eb851f

0800687c <__NVIC_SetPriority>:
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db0a      	blt.n	80068a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	490c      	ldr	r1, [pc, #48]	@ (80068c8 <__NVIC_SetPriority+0x4c>)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	0112      	lsls	r2, r2, #4
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80068a4:	e00a      	b.n	80068bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4908      	ldr	r1, [pc, #32]	@ (80068cc <__NVIC_SetPriority+0x50>)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3b04      	subs	r3, #4
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	440b      	add	r3, r1
 80068ba:	761a      	strb	r2, [r3, #24]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e100 	.word	0xe000e100
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80068d4:	4b05      	ldr	r3, [pc, #20]	@ (80068ec <SysTick_Handler+0x1c>)
 80068d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80068d8:	f002 fa42 	bl	8008d60 <xTaskGetSchedulerState>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d001      	beq.n	80068e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068e2:	f002 ffe9 	bl	80098b8 <xPortSysTickHandler>
  }
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	e000e010 	.word	0xe000e010

080068f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068f4:	2100      	movs	r1, #0
 80068f6:	f06f 0004 	mvn.w	r0, #4
 80068fa:	f7ff ffbf 	bl	800687c <__NVIC_SetPriority>
#endif
}
 80068fe:	bf00      	nop
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800690a:	f3ef 8305 	mrs	r3, IPSR
 800690e:	603b      	str	r3, [r7, #0]
  return(result);
 8006910:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006916:	f06f 0305 	mvn.w	r3, #5
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	e00c      	b.n	8006938 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800691e:	4b09      	ldr	r3, [pc, #36]	@ (8006944 <osKernelInitialize+0x40>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d105      	bne.n	8006932 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006926:	4b07      	ldr	r3, [pc, #28]	@ (8006944 <osKernelInitialize+0x40>)
 8006928:	2201      	movs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800692c:	2300      	movs	r3, #0
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	e002      	b.n	8006938 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006936:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006938:	687b      	ldr	r3, [r7, #4]
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr
 8006944:	20000814 	.word	0x20000814

08006948 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800694e:	f3ef 8305 	mrs	r3, IPSR
 8006952:	603b      	str	r3, [r7, #0]
  return(result);
 8006954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <osKernelStart+0x1a>
    stat = osErrorISR;
 800695a:	f06f 0305 	mvn.w	r3, #5
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	e010      	b.n	8006984 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006962:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <osKernelStart+0x48>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d109      	bne.n	800697e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800696a:	f7ff ffc1 	bl	80068f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <osKernelStart+0x48>)
 8006970:	2202      	movs	r2, #2
 8006972:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006974:	f001 fd82 	bl	800847c <vTaskStartScheduler>
      stat = osOK;
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e002      	b.n	8006984 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006984:	687b      	ldr	r3, [r7, #4]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000814 	.word	0x20000814

08006994 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800699a:	f3ef 8305 	mrs	r3, IPSR
 800699e:	603b      	str	r3, [r7, #0]
  return(result);
 80069a0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80069a6:	f001 fe93 	bl	80086d0 <xTaskGetTickCountFromISR>
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	e002      	b.n	80069b4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80069ae:	f001 fe81 	bl	80086b4 <xTaskGetTickCount>
 80069b2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80069b4:	687b      	ldr	r3, [r7, #4]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80069be:	b480      	push	{r7}
 80069c0:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80069c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b08e      	sub	sp, #56	@ 0x38
 80069d2:	af04      	add	r7, sp, #16
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	617b      	str	r3, [r7, #20]
  return(result);
 80069e4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d17e      	bne.n	8006ae8 <osThreadNew+0x11a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d07b      	beq.n	8006ae8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069f0:	2380      	movs	r3, #128	@ 0x80
 80069f2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069f4:	2318      	movs	r3, #24
 80069f6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d045      	beq.n	8006a94 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <osThreadNew+0x48>
        name = attr->name;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <osThreadNew+0x6e>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b38      	cmp	r3, #56	@ 0x38
 8006a2e:	d805      	bhi.n	8006a3c <osThreadNew+0x6e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <osThreadNew+0x72>
        return (NULL);
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e054      	b.n	8006aea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	089b      	lsrs	r3, r3, #2
 8006a4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <osThreadNew+0xa8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a5e:	d90a      	bls.n	8006a76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d006      	beq.n	8006a76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <osThreadNew+0xa8>
        mem = 1;
 8006a70:	2301      	movs	r3, #1
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e010      	b.n	8006a98 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <osThreadNew+0xca>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d108      	bne.n	8006a98 <osThreadNew+0xca>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <osThreadNew+0xca>
          mem = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e001      	b.n	8006a98 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d110      	bne.n	8006ac0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006aa6:	9202      	str	r2, [sp, #8]
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f001 faed 	bl	8008094 <xTaskCreateStatic>
 8006aba:	4603      	mov	r3, r0
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	e013      	b.n	8006ae8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d110      	bne.n	8006ae8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 fb3b 	bl	8008154 <xTaskCreate>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d001      	beq.n	8006ae8 <osThreadNew+0x11a>
            hTask = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ae8:	693b      	ldr	r3, [r7, #16]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3728      	adds	r7, #40	@ 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afa:	f3ef 8305 	mrs	r3, IPSR
 8006afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <osDelay+0x1c>
    stat = osErrorISR;
 8006b06:	f06f 0305 	mvn.w	r3, #5
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e007      	b.n	8006b1e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fc79 	bl	8008410 <vTaskDelay>
    }
  }

  return (stat);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b34:	f3ef 8305 	mrs	r3, IPSR
 8006b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b3a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d174      	bne.n	8006c2a <osMutexNew+0x102>
    if (attr != NULL) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <osMutexNew+0x26>
      type = attr->attr_bits;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	e001      	b.n	8006b52 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <osMutexNew+0x3a>
      rmtx = 1U;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e001      	b.n	8006b66 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d15c      	bne.n	8006c2a <osMutexNew+0x102>
      mem = -1;
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b74:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d015      	beq.n	8006ba8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <osMutexNew+0x6a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b8a:	d902      	bls.n	8006b92 <osMutexNew+0x6a>
          mem = 1;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	e00c      	b.n	8006bac <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d108      	bne.n	8006bac <osMutexNew+0x84>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d104      	bne.n	8006bac <osMutexNew+0x84>
            mem = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e001      	b.n	8006bac <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d112      	bne.n	8006bd8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	2004      	movs	r0, #4
 8006bc0:	f000 fc91 	bl	80074e6 <xQueueCreateMutexStatic>
 8006bc4:	61f8      	str	r0, [r7, #28]
 8006bc6:	e016      	b.n	8006bf6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	2001      	movs	r0, #1
 8006bd0:	f000 fc89 	bl	80074e6 <xQueueCreateMutexStatic>
 8006bd4:	61f8      	str	r0, [r7, #28]
 8006bd6:	e00e      	b.n	8006bf6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006be4:	2004      	movs	r0, #4
 8006be6:	f000 fc66 	bl	80074b6 <xQueueCreateMutex>
 8006bea:	61f8      	str	r0, [r7, #28]
 8006bec:	e003      	b.n	8006bf6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006bee:	2001      	movs	r0, #1
 8006bf0:	f000 fc61 	bl	80074b6 <xQueueCreateMutex>
 8006bf4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00c      	beq.n	8006c16 <osMutexNew+0xee>
        if (attr != NULL) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <osMutexNew+0xe2>
          name = attr->name;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e001      	b.n	8006c0e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	69f8      	ldr	r0, [r7, #28]
 8006c12:	f001 f9b9 	bl	8007f88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d006      	beq.n	8006c2a <osMutexNew+0x102>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006c2a:	69fb      	ldr	r3, [r7, #28]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08a      	sub	sp, #40	@ 0x28
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c44:	f3ef 8305 	mrs	r3, IPSR
 8006c48:	613b      	str	r3, [r7, #16]
  return(result);
 8006c4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d175      	bne.n	8006d3c <osSemaphoreNew+0x108>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d072      	beq.n	8006d3c <osSemaphoreNew+0x108>
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d86e      	bhi.n	8006d3c <osSemaphoreNew+0x108>
    mem = -1;
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d006      	beq.n	8006c80 <osSemaphoreNew+0x4c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b4f      	cmp	r3, #79	@ 0x4f
 8006c78:	d902      	bls.n	8006c80 <osSemaphoreNew+0x4c>
        mem = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e00c      	b.n	8006c9a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d108      	bne.n	8006c9a <osSemaphoreNew+0x66>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <osSemaphoreNew+0x66>
          mem = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	e001      	b.n	8006c9a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ca0:	d04c      	beq.n	8006d3c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d128      	bne.n	8006cfa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d10a      	bne.n	8006cc4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	9200      	str	r2, [sp, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	2001      	movs	r0, #1
 8006cbc:	f000 fb06 	bl	80072cc <xQueueGenericCreateStatic>
 8006cc0:	61f8      	str	r0, [r7, #28]
 8006cc2:	e005      	b.n	8006cd0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	2001      	movs	r0, #1
 8006cca:	f000 fb7c 	bl	80073c6 <xQueueGenericCreate>
 8006cce:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d022      	beq.n	8006d1c <osSemaphoreNew+0xe8>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	69f8      	ldr	r0, [r7, #28]
 8006ce4:	f000 fc88 	bl	80075f8 <xQueueGenericSend>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d016      	beq.n	8006d1c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006cee:	69f8      	ldr	r0, [r7, #28]
 8006cf0:	f001 f816 	bl	8007d20 <vQueueDelete>
            hSemaphore = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	e010      	b.n	8006d1c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d108      	bne.n	8006d12 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	461a      	mov	r2, r3
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fc07 	bl	800751c <xQueueCreateCountingSemaphoreStatic>
 8006d0e:	61f8      	str	r0, [r7, #28]
 8006d10:	e004      	b.n	8006d1c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fc3a 	bl	800758e <xQueueCreateCountingSemaphore>
 8006d1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e001      	b.n	8006d34 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	69f8      	ldr	r0, [r7, #28]
 8006d38:	f001 f926 	bl	8007f88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006d3c:	69fb      	ldr	r3, [r7, #28]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3720      	adds	r7, #32
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006d5e:	f06f 0303 	mvn.w	r3, #3
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	e02c      	b.n	8006dc0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d66:	f3ef 8305 	mrs	r3, IPSR
 8006d6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01a      	beq.n	8006da8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6938      	ldr	r0, [r7, #16]
 8006d7e:	f000 fddb 	bl	8007938 <xQueueGiveFromISR>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d003      	beq.n	8006d90 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006d88:	f06f 0302 	mvn.w	r3, #2
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e017      	b.n	8006dc0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d014      	beq.n	8006dc0 <osSemaphoreRelease+0x78>
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <osSemaphoreRelease+0x84>)
 8006d98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	e00b      	b.n	8006dc0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	6938      	ldr	r0, [r7, #16]
 8006db0:	f000 fc22 	bl	80075f8 <xQueueGenericSend>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006dba:	f06f 0302 	mvn.w	r3, #2
 8006dbe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	@ 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de0:	f3ef 8305 	mrs	r3, IPSR
 8006de4:	613b      	str	r3, [r7, #16]
  return(result);
 8006de6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d15f      	bne.n	8006eac <osMessageQueueNew+0xdc>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d05c      	beq.n	8006eac <osMessageQueueNew+0xdc>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d059      	beq.n	8006eac <osMessageQueueNew+0xdc>
    mem = -1;
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d029      	beq.n	8006e58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <osMessageQueueNew+0x62>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e12:	d90e      	bls.n	8006e32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695a      	ldr	r2, [r3, #20]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	fb01 f303 	mul.w	r3, r1, r3
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d302      	bcc.n	8006e32 <osMessageQueueNew+0x62>
        mem = 1;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	e014      	b.n	8006e5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d110      	bne.n	8006e5c <osMessageQueueNew+0x8c>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d108      	bne.n	8006e5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <osMessageQueueNew+0x8c>
          mem = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e001      	b.n	8006e5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d10b      	bne.n	8006e7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691a      	ldr	r2, [r3, #16]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	9100      	str	r1, [sp, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fa2b 	bl	80072cc <xQueueGenericCreateStatic>
 8006e76:	61f8      	str	r0, [r7, #28]
 8006e78:	e008      	b.n	8006e8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d105      	bne.n	8006e8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e80:	2200      	movs	r2, #0
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fa9e 	bl	80073c6 <xQueueGenericCreate>
 8006e8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e001      	b.n	8006ea4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	69f8      	ldr	r0, [r7, #28]
 8006ea8:	f001 f86e 	bl	8007f88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006eac:	69fb      	ldr	r3, [r7, #28]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed0:	f3ef 8305 	mrs	r3, IPSR
 8006ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ed6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d028      	beq.n	8006f2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <osMessageQueuePut+0x36>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <osMessageQueuePut+0x36>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006eee:	f06f 0303 	mvn.w	r3, #3
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e038      	b.n	8006f68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006efa:	f107 0210 	add.w	r2, r7, #16
 8006efe:	2300      	movs	r3, #0
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f000 fc7a 	bl	80077fc <xQueueGenericSendFromISR>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f0e:	f06f 0302 	mvn.w	r3, #2
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e028      	b.n	8006f68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d025      	beq.n	8006f68 <osMessageQueuePut+0xb0>
 8006f1c:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <osMessageQueuePut+0xbc>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	e01c      	b.n	8006f68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <osMessageQueuePut+0x82>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f3a:	f06f 0303 	mvn.w	r3, #3
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e012      	b.n	8006f68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f42:	2300      	movs	r3, #0
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	69b8      	ldr	r0, [r7, #24]
 8006f4a:	f000 fb55 	bl	80075f8 <xQueueGenericSend>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d009      	beq.n	8006f68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f5a:	f06f 0301 	mvn.w	r3, #1
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	e002      	b.n	8006f68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f62:	f06f 0302 	mvn.w	r3, #2
 8006f66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f68:	69fb      	ldr	r3, [r7, #28]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f8e:	f3ef 8305 	mrs	r3, IPSR
 8006f92:	617b      	str	r3, [r7, #20]
  return(result);
 8006f94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d028      	beq.n	8006fec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <osMessageQueueGet+0x34>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <osMessageQueueGet+0x34>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006fac:	f06f 0303 	mvn.w	r3, #3
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	e037      	b.n	8007024 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	69b8      	ldr	r0, [r7, #24]
 8006fc2:	f000 fe2b 	bl	8007c1c <xQueueReceiveFromISR>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006fcc:	f06f 0302 	mvn.w	r3, #2
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	e027      	b.n	8007024 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d024      	beq.n	8007024 <osMessageQueueGet+0xac>
 8006fda:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <osMessageQueueGet+0xb8>)
 8006fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	e01b      	b.n	8007024 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <osMessageQueueGet+0x80>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ff8:	f06f 0303 	mvn.w	r3, #3
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	e011      	b.n	8007024 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	69b8      	ldr	r0, [r7, #24]
 8007006:	f000 fd27 	bl	8007a58 <xQueueReceive>
 800700a:	4603      	mov	r3, r0
 800700c:	2b01      	cmp	r3, #1
 800700e:	d009      	beq.n	8007024 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007016:	f06f 0301 	mvn.w	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	e002      	b.n	8007024 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800701e:	f06f 0302 	mvn.w	r3, #2
 8007022:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007024:	69fb      	ldr	r3, [r7, #28]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a06      	ldr	r2, [pc, #24]	@ (800705c <vApplicationGetIdleTaskMemory+0x28>)
 8007044:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a05      	ldr	r2, [pc, #20]	@ (8007060 <vApplicationGetIdleTaskMemory+0x2c>)
 800704a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2280      	movs	r2, #128	@ 0x80
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	20000818 	.word	0x20000818
 8007060:	200008c0 	.word	0x200008c0

08007064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a07      	ldr	r2, [pc, #28]	@ (8007090 <vApplicationGetTimerTaskMemory+0x2c>)
 8007074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4a06      	ldr	r2, [pc, #24]	@ (8007094 <vApplicationGetTimerTaskMemory+0x30>)
 800707a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000ac0 	.word	0x20000ac0
 8007094:	20000b68 	.word	0x20000b68

08007098 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f103 0208 	add.w	r2, r3, #8
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f103 0208 	add.w	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0208 	add.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800714a:	d103      	bne.n	8007154 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e00c      	b.n	800716e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3308      	adds	r3, #8
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e002      	b.n	8007162 <vListInsert+0x2e>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	429a      	cmp	r2, r3
 800716c:	d2f6      	bcs.n	800715c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr

080071a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6892      	ldr	r2, [r2, #8]
 80071ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6852      	ldr	r2, [r2, #4]
 80071c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d103      	bne.n	80071d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	1e5a      	subs	r2, r3, #1
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr
	...

080071f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <xQueueGenericReset+0x2c>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60bb      	str	r3, [r7, #8]
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007224:	f002 faca 	bl	80097bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007254:	3b01      	subs	r3, #1
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	441a      	add	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	22ff      	movs	r2, #255	@ 0xff
 8007268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	22ff      	movs	r2, #255	@ 0xff
 8007270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d114      	bne.n	80072a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01a      	beq.n	80072b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3310      	adds	r3, #16
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fba4 	bl	80089d4 <xTaskRemoveFromEventList>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d012      	beq.n	80072b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <xQueueGenericReset+0xd0>)
 8007294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	e009      	b.n	80072b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3310      	adds	r3, #16
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff fef5 	bl	8007098 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3324      	adds	r3, #36	@ 0x24
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fef0 	bl	8007098 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072b8:	f002 fab0 	bl	800981c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072bc:	2301      	movs	r3, #1
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	@ 0x38
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <xQueueGenericCreateStatic+0x56>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <xQueueGenericCreateStatic+0x5a>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueGenericCreateStatic+0x5c>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <xQueueGenericCreateStatic+0x84>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <xQueueGenericCreateStatic+0x88>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <xQueueGenericCreateStatic+0x8a>
 8007354:	2300      	movs	r3, #0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61fb      	str	r3, [r7, #28]
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	e7fd      	b.n	800736e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007372:	2350      	movs	r3, #80	@ 0x50
 8007374:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b50      	cmp	r3, #80	@ 0x50
 800737a:	d00b      	beq.n	8007394 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	61bb      	str	r3, [r7, #24]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007394:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00d      	beq.n	80073bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80073ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	4613      	mov	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f840 	bl	800743c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80073be:	4618      	mov	r0, r3
 80073c0:	3730      	adds	r7, #48	@ 0x30
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b08a      	sub	sp, #40	@ 0x28
 80073ca:	af02      	add	r7, sp, #8
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	613b      	str	r3, [r7, #16]
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	e7fd      	b.n	80073ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3350      	adds	r3, #80	@ 0x50
 8007400:	4618      	mov	r0, r3
 8007402:	f002 fadd 	bl	80099c0 <pvPortMalloc>
 8007406:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d011      	beq.n	8007432 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	3350      	adds	r3, #80	@ 0x50
 8007416:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007420:	79fa      	ldrb	r2, [r7, #7]
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	4613      	mov	r3, r2
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f805 	bl	800743c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007432:	69bb      	ldr	r3, [r7, #24]
	}
 8007434:	4618      	mov	r0, r3
 8007436:	3720      	adds	r7, #32
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e002      	b.n	800745e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800746a:	2101      	movs	r1, #1
 800746c:	69b8      	ldr	r0, [r7, #24]
 800746e:	f7ff fec3 	bl	80071f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074a2:	2300      	movs	r3, #0
 80074a4:	2200      	movs	r2, #0
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f8a5 	bl	80075f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b086      	sub	sp, #24
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	4603      	mov	r3, r0
 80074be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6939      	ldr	r1, [r7, #16]
 80074ce:	6978      	ldr	r0, [r7, #20]
 80074d0:	f7ff ff79 	bl	80073c6 <xQueueGenericCreate>
 80074d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff ffd3 	bl	8007482 <prvInitialiseMutex>

		return xNewQueue;
 80074dc:	68fb      	ldr	r3, [r7, #12]
	}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b088      	sub	sp, #32
 80074ea:	af02      	add	r7, sp, #8
 80074ec:	4603      	mov	r3, r0
 80074ee:	6039      	str	r1, [r7, #0]
 80074f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2200      	movs	r2, #0
 8007502:	6939      	ldr	r1, [r7, #16]
 8007504:	6978      	ldr	r0, [r7, #20]
 8007506:	f7ff fee1 	bl	80072cc <xQueueGenericCreateStatic>
 800750a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff ffb8 	bl	8007482 <prvInitialiseMutex>

		return xNewQueue;
 8007512:	68fb      	ldr	r3, [r7, #12]
	}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10b      	bne.n	8007546 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	61bb      	str	r3, [r7, #24]
}
 8007540:	bf00      	nop
 8007542:	bf00      	nop
 8007544:	e7fd      	b.n	8007542 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	429a      	cmp	r2, r3
 800754c:	d90b      	bls.n	8007566 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	617b      	str	r3, [r7, #20]
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	e7fd      	b.n	8007562 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007566:	2302      	movs	r3, #2
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	2100      	movs	r1, #0
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff feab 	bl	80072cc <xQueueGenericCreateStatic>
 8007576:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007584:	69fb      	ldr	r3, [r7, #28]
	}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	613b      	str	r3, [r7, #16]
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d90b      	bls.n	80075d6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60fb      	str	r3, [r7, #12]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075d6:	2202      	movs	r2, #2
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fef3 	bl	80073c6 <xQueueGenericCreate>
 80075e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075ee:	697b      	ldr	r3, [r7, #20]
	}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08e      	sub	sp, #56	@ 0x38
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007606:	2300      	movs	r3, #0
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <xQueueGenericSend+0x34>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <xQueueGenericSend+0x42>
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <xQueueGenericSend+0x46>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericSend+0x48>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10b      	bne.n	800765c <xQueueGenericSend+0x64>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b02      	cmp	r3, #2
 8007660:	d103      	bne.n	800766a <xQueueGenericSend+0x72>
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <xQueueGenericSend+0x76>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <xQueueGenericSend+0x78>
 800766e:	2300      	movs	r3, #0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <xQueueGenericSend+0x94>
	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	623b      	str	r3, [r7, #32]
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	e7fd      	b.n	8007688 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800768c:	f001 fb68 	bl	8008d60 <xTaskGetSchedulerState>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <xQueueGenericSend+0xa4>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <xQueueGenericSend+0xa8>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <xQueueGenericSend+0xaa>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <xQueueGenericSend+0xc6>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	61fb      	str	r3, [r7, #28]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076be:	f002 f87d 	bl	80097bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d302      	bcc.n	80076d4 <xQueueGenericSend+0xdc>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d129      	bne.n	8007728 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076da:	f000 fb45 	bl	8007d68 <prvCopyDataToQueue>
 80076de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d010      	beq.n	800770a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ea:	3324      	adds	r3, #36	@ 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f971 	bl	80089d4 <xTaskRemoveFromEventList>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076f8:	4b3f      	ldr	r3, [pc, #252]	@ (80077f8 <xQueueGenericSend+0x200>)
 80076fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	e00a      	b.n	8007720 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <xQueueGenericSend+0x200>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007720:	f002 f87c 	bl	800981c <vPortExitCritical>
				return pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	e063      	b.n	80077f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800772e:	f002 f875 	bl	800981c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007732:	2300      	movs	r3, #0
 8007734:	e05c      	b.n	80077f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	4618      	mov	r0, r3
 8007742:	f001 f9ab 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800774a:	f002 f867 	bl	800981c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800774e:	f000 ff05 	bl	800855c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007752:	f002 f833 	bl	80097bc <vPortEnterCritical>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800775c:	b25b      	sxtb	r3, r3
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007762:	d103      	bne.n	800776c <xQueueGenericSend+0x174>
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007772:	b25b      	sxtb	r3, r3
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007778:	d103      	bne.n	8007782 <xQueueGenericSend+0x18a>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007782:	f002 f84b 	bl	800981c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007786:	1d3a      	adds	r2, r7, #4
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f001 f99a 	bl	8008ac8 <xTaskCheckForTimeOut>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d124      	bne.n	80077e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800779a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800779c:	f000 fbdc 	bl	8007f58 <prvIsQueueFull>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d018      	beq.n	80077d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a8:	3310      	adds	r3, #16
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f8be 	bl	8008930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80077b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077b6:	f000 fb67 	bl	8007e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80077ba:	f000 fedd 	bl	8008578 <xTaskResumeAll>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f47f af7c 	bne.w	80076be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80077c6:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <xQueueGenericSend+0x200>)
 80077c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	e772      	b.n	80076be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077da:	f000 fb55 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077de:	f000 fecb 	bl	8008578 <xTaskResumeAll>
 80077e2:	e76c      	b.n	80076be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077e6:	f000 fb4f 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077ea:	f000 fec5 	bl	8008578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3738      	adds	r7, #56	@ 0x38
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b090      	sub	sp, #64	@ 0x40
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800780e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10b      	bne.n	800782c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <xQueueGenericSendFromISR+0x3e>
 8007832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <xQueueGenericSendFromISR+0x42>
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <xQueueGenericSendFromISR+0x44>
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d103      	bne.n	800786a <xQueueGenericSendFromISR+0x6e>
 8007862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <xQueueGenericSendFromISR+0x72>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <xQueueGenericSendFromISR+0x74>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	623b      	str	r3, [r7, #32]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800788c:	f002 f858 	bl	8009940 <vPortValidateInterruptPriority>
	__asm volatile
 8007890:	f3ef 8211 	mrs	r2, BASEPRI
 8007894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	61fa      	str	r2, [r7, #28]
 80078a6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80078a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d302      	bcc.n	80078be <xQueueGenericSendFromISR+0xc2>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d12f      	bne.n	800791e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80078d4:	f000 fa48 	bl	8007d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078e0:	d112      	bne.n	8007908 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	3324      	adds	r3, #36	@ 0x24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f870 	bl	80089d4 <xTaskRemoveFromEventList>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e007      	b.n	8007918 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007908:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800790c:	3301      	adds	r3, #1
 800790e:	b2db      	uxtb	r3, r3
 8007910:	b25a      	sxtb	r2, r3
 8007912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007918:	2301      	movs	r3, #1
 800791a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800791c:	e001      	b.n	8007922 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800791e:	2300      	movs	r3, #0
 8007920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007924:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f383 8811 	msr	BASEPRI, r3
}
 800792c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007930:	4618      	mov	r0, r3
 8007932:	3740      	adds	r7, #64	@ 0x40
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08e      	sub	sp, #56	@ 0x38
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10b      	bne.n	8007964 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	623b      	str	r3, [r7, #32]
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	e7fd      	b.n	8007960 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61fb      	str	r3, [r7, #28]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <xQueueGiveFromISR+0x5c>
 800798c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <xQueueGiveFromISR+0x60>
 8007994:	2301      	movs	r3, #1
 8007996:	e000      	b.n	800799a <xQueueGiveFromISR+0x62>
 8007998:	2300      	movs	r3, #0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61bb      	str	r3, [r7, #24]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b6:	f001 ffc3 	bl	8009940 <vPortValidateInterruptPriority>
	__asm volatile
 80079ba:	f3ef 8211 	mrs	r2, BASEPRI
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	617a      	str	r2, [r7, #20]
 80079d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80079d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d22b      	bcs.n	8007a3e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a00:	d112      	bne.n	8007a28 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	3324      	adds	r3, #36	@ 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 ffe0 	bl	80089d4 <xTaskRemoveFromEventList>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e007      	b.n	8007a38 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	b25a      	sxtb	r2, r3
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a3c:	e001      	b.n	8007a42 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f383 8811 	msr	BASEPRI, r3
}
 8007a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3738      	adds	r7, #56	@ 0x38
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	@ 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <xQueueReceive+0x32>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	623b      	str	r3, [r7, #32]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <xQueueReceive+0x40>
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <xQueueReceive+0x44>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <xQueueReceive+0x46>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <xQueueReceive+0x62>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61fb      	str	r3, [r7, #28]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aba:	f001 f951 	bl	8008d60 <xTaskGetSchedulerState>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <xQueueReceive+0x72>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <xQueueReceive+0x76>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueReceive+0x78>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueReceive+0x94>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61bb      	str	r3, [r7, #24]
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aec:	f001 fe66 	bl	80097bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01f      	beq.n	8007b3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b00:	f000 f99c 	bl	8007e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	1e5a      	subs	r2, r3, #1
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b16:	3310      	adds	r3, #16
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 ff5b 	bl	80089d4 <xTaskRemoveFromEventList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b24:	4b3c      	ldr	r3, [pc, #240]	@ (8007c18 <xQueueReceive+0x1c0>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b34:	f001 fe72 	bl	800981c <vPortExitCritical>
				return pdPASS;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e069      	b.n	8007c10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b42:	f001 fe6b 	bl	800981c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e062      	b.n	8007c10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 ffa1 	bl	8008a9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b5e:	f001 fe5d 	bl	800981c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b62:	f000 fcfb 	bl	800855c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b66:	f001 fe29 	bl	80097bc <vPortEnterCritical>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b76:	d103      	bne.n	8007b80 <xQueueReceive+0x128>
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b8c:	d103      	bne.n	8007b96 <xQueueReceive+0x13e>
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b96:	f001 fe41 	bl	800981c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b9a:	1d3a      	adds	r2, r7, #4
 8007b9c:	f107 0310 	add.w	r3, r7, #16
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 ff90 	bl	8008ac8 <xTaskCheckForTimeOut>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d123      	bne.n	8007bf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb0:	f000 f9bc 	bl	8007f2c <prvIsQueueEmpty>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d017      	beq.n	8007bea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	3324      	adds	r3, #36	@ 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 feb4 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bca:	f000 f95d 	bl	8007e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f000 fcd3 	bl	8008578 <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d189      	bne.n	8007aec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <xQueueReceive+0x1c0>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	e780      	b.n	8007aec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bec:	f000 f94c 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf0:	f000 fcc2 	bl	8008578 <xTaskResumeAll>
 8007bf4:	e77a      	b.n	8007aec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf8:	f000 f946 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bfc:	f000 fcbc 	bl	8008578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c02:	f000 f993 	bl	8007f2c <prvIsQueueEmpty>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f43f af6f 	beq.w	8007aec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3730      	adds	r7, #48	@ 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08e      	sub	sp, #56	@ 0x38
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10b      	bne.n	8007c4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	623b      	str	r3, [r7, #32]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <xQueueReceiveFromISR+0x3c>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <xQueueReceiveFromISR+0x40>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e000      	b.n	8007c5e <xQueueReceiveFromISR+0x42>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	61fb      	str	r3, [r7, #28]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c7a:	f001 fe61 	bl	8009940 <vPortValidateInterruptPriority>
	__asm volatile
 8007c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	61ba      	str	r2, [r7, #24]
 8007c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d02f      	beq.n	8007d06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cb4:	f000 f8c2 	bl	8007e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cc8:	d112      	bne.n	8007cf0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fe7c 	bl	80089d4 <xTaskRemoveFromEventList>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00e      	beq.n	8007d00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	e007      	b.n	8007d00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	b25a      	sxtb	r2, r3
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007d00:	2301      	movs	r3, #1
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d04:	e001      	b.n	8007d0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f383 8811 	msr	BASEPRI, r3
}
 8007d14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3738      	adds	r7, #56	@ 0x38
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <vQueueDelete+0x2a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	60bb      	str	r3, [r7, #8]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f944 	bl	8007fd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d102      	bne.n	8007d60 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fefe 	bl	8009b5c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d14d      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 f802 	bl	8008d9c <xTaskPriorityDisinherit>
 8007d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	e043      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d119      	bne.n	8007ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6858      	ldr	r0, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f004 fa12 	bl	800c1dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d32b      	bcc.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	e026      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68d8      	ldr	r0, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	461a      	mov	r2, r3
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	f004 f9f8 	bl	800c1dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df4:	425b      	negs	r3, r3
 8007df6:	441a      	add	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d207      	bcs.n	8007e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e10:	425b      	negs	r3, r3
 8007e12:	441a      	add	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d105      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e32:	697b      	ldr	r3, [r7, #20]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d018      	beq.n	8007e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d303      	bcc.n	8007e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68d9      	ldr	r1, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6838      	ldr	r0, [r7, #0]
 8007e7c:	f004 f9ae 	bl	800c1dc <memcpy>
	}
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e90:	f001 fc94 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e9c:	e011      	b.n	8007ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d012      	beq.n	8007ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fd92 	bl	80089d4 <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007eb6:	f000 fe6b 	bl	8008b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dce9      	bgt.n	8007e9e <prvUnlockQueue+0x16>
 8007eca:	e000      	b.n	8007ece <prvUnlockQueue+0x46>
					break;
 8007ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	22ff      	movs	r2, #255	@ 0xff
 8007ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ed6:	f001 fca1 	bl	800981c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eda:	f001 fc6f 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ee6:	e011      	b.n	8007f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3310      	adds	r3, #16
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fd6d 	bl	80089d4 <xTaskRemoveFromEventList>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f00:	f000 fe46 	bl	8008b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dce9      	bgt.n	8007ee8 <prvUnlockQueue+0x60>
 8007f14:	e000      	b.n	8007f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	22ff      	movs	r2, #255	@ 0xff
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f20:	f001 fc7c 	bl	800981c <vPortExitCritical>
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f34:	f001 fc42 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e001      	b.n	8007f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 fc67 	bl	800981c <vPortExitCritical>

	return xReturn;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f60:	f001 fc2c 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d102      	bne.n	8007f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e001      	b.n	8007f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f7a:	f001 fc4f 	bl	800981c <vPortExitCritical>

	return xReturn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e014      	b.n	8007fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f98:	4a0e      	ldr	r2, [pc, #56]	@ (8007fd4 <vQueueAddToRegistry+0x4c>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fa4:	490b      	ldr	r1, [pc, #44]	@ (8007fd4 <vQueueAddToRegistry+0x4c>)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fae:	4a09      	ldr	r2, [pc, #36]	@ (8007fd4 <vQueueAddToRegistry+0x4c>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fba:	e006      	b.n	8007fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b07      	cmp	r3, #7
 8007fc6:	d9e7      	bls.n	8007f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr
 8007fd4:	20000f68 	.word	0x20000f68

08007fd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e016      	b.n	8008014 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007fe6:	4a10      	ldr	r2, [pc, #64]	@ (8008028 <vQueueUnregisterQueue+0x50>)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d10b      	bne.n	800800e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8008028 <vQueueUnregisterQueue+0x50>)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008000:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <vQueueUnregisterQueue+0x50>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	4413      	add	r3, r2
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
				break;
 800800c:	e006      	b.n	800801c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b07      	cmp	r3, #7
 8008018:	d9e5      	bls.n	8007fe6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800801a:	bf00      	nop
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	20000f68 	.word	0x20000f68

0800802c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800803c:	f001 fbbe 	bl	80097bc <vPortEnterCritical>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008046:	b25b      	sxtb	r3, r3
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800804c:	d103      	bne.n	8008056 <vQueueWaitForMessageRestricted+0x2a>
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800805c:	b25b      	sxtb	r3, r3
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008062:	d103      	bne.n	800806c <vQueueWaitForMessageRestricted+0x40>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800806c:	f001 fbd6 	bl	800981c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d106      	bne.n	8008086 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	3324      	adds	r3, #36	@ 0x24
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fc7b 	bl	800897c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	f7ff fefe 	bl	8007e88 <prvUnlockQueue>
	}
 800808c:	bf00      	nop
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	@ 0x38
 8008098:	af04      	add	r7, sp, #16
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	623b      	str	r3, [r7, #32]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xTaskCreateStatic+0x4a>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	61fb      	str	r3, [r7, #28]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080de:	23a8      	movs	r3, #168	@ 0xa8
 80080e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2ba8      	cmp	r3, #168	@ 0xa8
 80080e6:	d00b      	beq.n	8008100 <xTaskCreateStatic+0x6c>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	61bb      	str	r3, [r7, #24]
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	e7fd      	b.n	80080fc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008100:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01e      	beq.n	8008146 <xTaskCreateStatic+0xb2>
 8008108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810a:	2b00      	cmp	r3, #0
 800810c:	d01b      	beq.n	8008146 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800810e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008110:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	2202      	movs	r2, #2
 800811c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008120:	2300      	movs	r3, #0
 8008122:	9303      	str	r3, [sp, #12]
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	9302      	str	r3, [sp, #8]
 8008128:	f107 0314 	add.w	r3, r7, #20
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f851 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800813e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008140:	f000 f8f6 	bl	8008330 <prvAddNewTaskToReadyList>
 8008144:	e001      	b.n	800814a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800814a:	697b      	ldr	r3, [r7, #20]
	}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	@ 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08c      	sub	sp, #48	@ 0x30
 8008158:	af04      	add	r7, sp, #16
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	4613      	mov	r3, r2
 8008162:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fc29 	bl	80099c0 <pvPortMalloc>
 800816e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008176:	20a8      	movs	r0, #168	@ 0xa8
 8008178:	f001 fc22 	bl	80099c0 <pvPortMalloc>
 800817c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	631a      	str	r2, [r3, #48]	@ 0x30
 800818a:	e005      	b.n	8008198 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800818c:	6978      	ldr	r0, [r7, #20]
 800818e:	f001 fce5 	bl	8009b5c <vPortFree>
 8008192:	e001      	b.n	8008198 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008194:	2300      	movs	r3, #0
 8008196:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d017      	beq.n	80081ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081a6:	88fa      	ldrh	r2, [r7, #6]
 80081a8:	2300      	movs	r3, #0
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	9302      	str	r3, [sp, #8]
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f80f 	bl	80081e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081c2:	69f8      	ldr	r0, [r7, #28]
 80081c4:	f000 f8b4 	bl	8008330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081c8:	2301      	movs	r3, #1
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e002      	b.n	80081d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081d4:	69bb      	ldr	r3, [r7, #24]
	}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3720      	adds	r7, #32
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	461a      	mov	r2, r3
 80081f8:	21a5      	movs	r1, #165	@ 0xa5
 80081fa:	f003 feff 	bl	800bffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008208:	3b01      	subs	r3, #1
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f023 0307 	bic.w	r3, r3, #7
 8008216:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00b      	beq.n	800823a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	617b      	str	r3, [r7, #20]
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop
 8008238:	e7fd      	b.n	8008236 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01f      	beq.n	8008280 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e012      	b.n	800826c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	7819      	ldrb	r1, [r3, #0]
 800824e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	3334      	adds	r3, #52	@ 0x34
 8008256:	460a      	mov	r2, r1
 8008258:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3301      	adds	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d9e9      	bls.n	8008246 <prvInitialiseNewTask+0x66>
 8008272:	e000      	b.n	8008276 <prvInitialiseNewTask+0x96>
			{
				break;
 8008274:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800827e:	e003      	b.n	8008288 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828a:	2b37      	cmp	r3, #55	@ 0x37
 800828c:	d901      	bls.n	8008292 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800828e:	2337      	movs	r3, #55	@ 0x37
 8008290:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008296:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800829c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	2200      	movs	r2, #0
 80082a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	3304      	adds	r3, #4
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe ff14 	bl	80070d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	3318      	adds	r3, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe ff0f 	bl	80070d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e0:	3354      	adds	r3, #84	@ 0x54
 80082e2:	224c      	movs	r2, #76	@ 0x4c
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f003 fe88 	bl	800bffc <memset>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008324 <prvInitialiseNewTask+0x144>)
 80082f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <prvInitialiseNewTask+0x148>)
 80082f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	4a0c      	ldr	r2, [pc, #48]	@ (800832c <prvInitialiseNewTask+0x14c>)
 80082fc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	68f9      	ldr	r1, [r7, #12]
 8008302:	69b8      	ldr	r0, [r7, #24]
 8008304:	f001 f966 	bl	80095d4 <pxPortInitialiseStack>
 8008308:	4602      	mov	r2, r0
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800830e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800831a:	bf00      	nop
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20003dec 	.word	0x20003dec
 8008328:	20003e54 	.word	0x20003e54
 800832c:	20003ebc 	.word	0x20003ebc

08008330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008338:	f001 fa40 	bl	80097bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800833c:	4b2d      	ldr	r3, [pc, #180]	@ (80083f4 <prvAddNewTaskToReadyList+0xc4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3301      	adds	r3, #1
 8008342:	4a2c      	ldr	r2, [pc, #176]	@ (80083f4 <prvAddNewTaskToReadyList+0xc4>)
 8008344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008346:	4b2c      	ldr	r3, [pc, #176]	@ (80083f8 <prvAddNewTaskToReadyList+0xc8>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d109      	bne.n	8008362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800834e:	4a2a      	ldr	r2, [pc, #168]	@ (80083f8 <prvAddNewTaskToReadyList+0xc8>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008354:	4b27      	ldr	r3, [pc, #156]	@ (80083f4 <prvAddNewTaskToReadyList+0xc4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d110      	bne.n	800837e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800835c:	f000 fc3c 	bl	8008bd8 <prvInitialiseTaskLists>
 8008360:	e00d      	b.n	800837e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008362:	4b26      	ldr	r3, [pc, #152]	@ (80083fc <prvAddNewTaskToReadyList+0xcc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800836a:	4b23      	ldr	r3, [pc, #140]	@ (80083f8 <prvAddNewTaskToReadyList+0xc8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	429a      	cmp	r2, r3
 8008376:	d802      	bhi.n	800837e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008378:	4a1f      	ldr	r2, [pc, #124]	@ (80083f8 <prvAddNewTaskToReadyList+0xc8>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800837e:	4b20      	ldr	r3, [pc, #128]	@ (8008400 <prvAddNewTaskToReadyList+0xd0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	4a1e      	ldr	r2, [pc, #120]	@ (8008400 <prvAddNewTaskToReadyList+0xd0>)
 8008386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008388:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <prvAddNewTaskToReadyList+0xd0>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008394:	4b1b      	ldr	r3, [pc, #108]	@ (8008404 <prvAddNewTaskToReadyList+0xd4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d903      	bls.n	80083a4 <prvAddNewTaskToReadyList+0x74>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	4a18      	ldr	r2, [pc, #96]	@ (8008404 <prvAddNewTaskToReadyList+0xd4>)
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <prvAddNewTaskToReadyList+0xd8>)
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	4610      	mov	r0, r2
 80083bc:	f7fe fe97 	bl	80070ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c0:	f001 fa2c 	bl	800981c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083c4:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <prvAddNewTaskToReadyList+0xcc>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00e      	beq.n	80083ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083cc:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <prvAddNewTaskToReadyList+0xc8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d207      	bcs.n	80083ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083da:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <prvAddNewTaskToReadyList+0xdc>)
 80083dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	2000147c 	.word	0x2000147c
 80083f8:	20000fa8 	.word	0x20000fa8
 80083fc:	20001488 	.word	0x20001488
 8008400:	20001498 	.word	0x20001498
 8008404:	20001484 	.word	0x20001484
 8008408:	20000fac 	.word	0x20000fac
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d018      	beq.n	8008454 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008422:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <vTaskDelay+0x64>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <vTaskDelay+0x32>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	60bb      	str	r3, [r7, #8]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008442:	f000 f88b 	bl	800855c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008446:	2100      	movs	r1, #0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fd17 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800844e:	f000 f893 	bl	8008578 <xTaskResumeAll>
 8008452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d107      	bne.n	800846a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800845a:	4b07      	ldr	r3, [pc, #28]	@ (8008478 <vTaskDelay+0x68>)
 800845c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200014a4 	.word	0x200014a4
 8008478:	e000ed04 	.word	0xe000ed04

0800847c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	@ 0x28
 8008480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800848a:	463a      	mov	r2, r7
 800848c:	1d39      	adds	r1, r7, #4
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fdce 	bl	8007034 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	9202      	str	r2, [sp, #8]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	460a      	mov	r2, r1
 80084aa:	4924      	ldr	r1, [pc, #144]	@ (800853c <vTaskStartScheduler+0xc0>)
 80084ac:	4824      	ldr	r0, [pc, #144]	@ (8008540 <vTaskStartScheduler+0xc4>)
 80084ae:	f7ff fdf1 	bl	8008094 <xTaskCreateStatic>
 80084b2:	4603      	mov	r3, r0
 80084b4:	4a23      	ldr	r2, [pc, #140]	@ (8008544 <vTaskStartScheduler+0xc8>)
 80084b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084b8:	4b22      	ldr	r3, [pc, #136]	@ (8008544 <vTaskStartScheduler+0xc8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e001      	b.n	80084ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084d0:	f000 fd28 	bl	8008f24 <xTimerCreateTimerTask>
 80084d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d11b      	bne.n	8008514 <vTaskStartScheduler+0x98>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	613b      	str	r3, [r7, #16]
}
 80084ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084f0:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <vTaskStartScheduler+0xcc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3354      	adds	r3, #84	@ 0x54
 80084f6:	4a15      	ldr	r2, [pc, #84]	@ (800854c <vTaskStartScheduler+0xd0>)
 80084f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084fa:	4b15      	ldr	r3, [pc, #84]	@ (8008550 <vTaskStartScheduler+0xd4>)
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <vTaskStartScheduler+0xd8>)
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008508:	4b13      	ldr	r3, [pc, #76]	@ (8008558 <vTaskStartScheduler+0xdc>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800850e:	f001 f8e3 	bl	80096d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008512:	e00f      	b.n	8008534 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800851a:	d10b      	bne.n	8008534 <vTaskStartScheduler+0xb8>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <vTaskStartScheduler+0xb4>
}
 8008534:	bf00      	nop
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	0800e27c 	.word	0x0800e27c
 8008540:	08008ba9 	.word	0x08008ba9
 8008544:	200014a0 	.word	0x200014a0
 8008548:	20000fa8 	.word	0x20000fa8
 800854c:	2000002c 	.word	0x2000002c
 8008550:	2000149c 	.word	0x2000149c
 8008554:	20001488 	.word	0x20001488
 8008558:	20001480 	.word	0x20001480

0800855c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008560:	4b04      	ldr	r3, [pc, #16]	@ (8008574 <vTaskSuspendAll+0x18>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	4a03      	ldr	r2, [pc, #12]	@ (8008574 <vTaskSuspendAll+0x18>)
 8008568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800856a:	bf00      	nop
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200014a4 	.word	0x200014a4

08008578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008586:	4b42      	ldr	r3, [pc, #264]	@ (8008690 <xTaskResumeAll+0x118>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	603b      	str	r3, [r7, #0]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085a6:	f001 f909 	bl	80097bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085aa:	4b39      	ldr	r3, [pc, #228]	@ (8008690 <xTaskResumeAll+0x118>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	4a37      	ldr	r2, [pc, #220]	@ (8008690 <xTaskResumeAll+0x118>)
 80085b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b4:	4b36      	ldr	r3, [pc, #216]	@ (8008690 <xTaskResumeAll+0x118>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d162      	bne.n	8008682 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085bc:	4b35      	ldr	r3, [pc, #212]	@ (8008694 <xTaskResumeAll+0x11c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d05e      	beq.n	8008682 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c4:	e02f      	b.n	8008626 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	4b34      	ldr	r3, [pc, #208]	@ (8008698 <xTaskResumeAll+0x120>)
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3318      	adds	r3, #24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fde6 	bl	80071a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3304      	adds	r3, #4
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe fde1 	bl	80071a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e6:	4b2d      	ldr	r3, [pc, #180]	@ (800869c <xTaskResumeAll+0x124>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d903      	bls.n	80085f6 <xTaskResumeAll+0x7e>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f2:	4a2a      	ldr	r2, [pc, #168]	@ (800869c <xTaskResumeAll+0x124>)
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a27      	ldr	r2, [pc, #156]	@ (80086a0 <xTaskResumeAll+0x128>)
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3304      	adds	r3, #4
 800860a:	4619      	mov	r1, r3
 800860c:	4610      	mov	r0, r2
 800860e:	f7fe fd6e 	bl	80070ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4b23      	ldr	r3, [pc, #140]	@ (80086a4 <xTaskResumeAll+0x12c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008620:	4b21      	ldr	r3, [pc, #132]	@ (80086a8 <xTaskResumeAll+0x130>)
 8008622:	2201      	movs	r2, #1
 8008624:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008626:	4b1c      	ldr	r3, [pc, #112]	@ (8008698 <xTaskResumeAll+0x120>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1cb      	bne.n	80085c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008634:	f000 fb74 	bl	8008d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008638:	4b1c      	ldr	r3, [pc, #112]	@ (80086ac <xTaskResumeAll+0x134>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d010      	beq.n	8008666 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008644:	f000 f856 	bl	80086f4 <xTaskIncrementTick>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800864e:	4b16      	ldr	r3, [pc, #88]	@ (80086a8 <xTaskResumeAll+0x130>)
 8008650:	2201      	movs	r2, #1
 8008652:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3b01      	subs	r3, #1
 8008658:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1f1      	bne.n	8008644 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008660:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <xTaskResumeAll+0x134>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008666:	4b10      	ldr	r3, [pc, #64]	@ (80086a8 <xTaskResumeAll+0x130>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008672:	4b0f      	ldr	r3, [pc, #60]	@ (80086b0 <xTaskResumeAll+0x138>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008682:	f001 f8cb 	bl	800981c <vPortExitCritical>

	return xAlreadyYielded;
 8008686:	68bb      	ldr	r3, [r7, #8]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	200014a4 	.word	0x200014a4
 8008694:	2000147c 	.word	0x2000147c
 8008698:	2000143c 	.word	0x2000143c
 800869c:	20001484 	.word	0x20001484
 80086a0:	20000fac 	.word	0x20000fac
 80086a4:	20000fa8 	.word	0x20000fa8
 80086a8:	20001490 	.word	0x20001490
 80086ac:	2000148c 	.word	0x2000148c
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ba:	4b04      	ldr	r3, [pc, #16]	@ (80086cc <xTaskGetTickCount+0x18>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086c0:	687b      	ldr	r3, [r7, #4]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr
 80086cc:	20001480 	.word	0x20001480

080086d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086d6:	f001 f933 	bl	8009940 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80086de:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <xTaskGetTickCountFromISR+0x20>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086e4:	683b      	ldr	r3, [r7, #0]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001480 	.word	0x20001480

080086f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fe:	4b4f      	ldr	r3, [pc, #316]	@ (800883c <xTaskIncrementTick+0x148>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 8090 	bne.w	8008828 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008708:	4b4d      	ldr	r3, [pc, #308]	@ (8008840 <xTaskIncrementTick+0x14c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008710:	4a4b      	ldr	r2, [pc, #300]	@ (8008840 <xTaskIncrementTick+0x14c>)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d121      	bne.n	8008760 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800871c:	4b49      	ldr	r3, [pc, #292]	@ (8008844 <xTaskIncrementTick+0x150>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	603b      	str	r3, [r7, #0]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <xTaskIncrementTick+0x46>
 800873e:	4b41      	ldr	r3, [pc, #260]	@ (8008844 <xTaskIncrementTick+0x150>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	4b40      	ldr	r3, [pc, #256]	@ (8008848 <xTaskIncrementTick+0x154>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3e      	ldr	r2, [pc, #248]	@ (8008844 <xTaskIncrementTick+0x150>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	4a3e      	ldr	r2, [pc, #248]	@ (8008848 <xTaskIncrementTick+0x154>)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b3e      	ldr	r3, [pc, #248]	@ (800884c <xTaskIncrementTick+0x158>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3301      	adds	r3, #1
 8008758:	4a3c      	ldr	r2, [pc, #240]	@ (800884c <xTaskIncrementTick+0x158>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f000 fae0 	bl	8008d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008760:	4b3b      	ldr	r3, [pc, #236]	@ (8008850 <xTaskIncrementTick+0x15c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	429a      	cmp	r2, r3
 8008768:	d349      	bcc.n	80087fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800876a:	4b36      	ldr	r3, [pc, #216]	@ (8008844 <xTaskIncrementTick+0x150>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d104      	bne.n	800877e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008774:	4b36      	ldr	r3, [pc, #216]	@ (8008850 <xTaskIncrementTick+0x15c>)
 8008776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800877a:	601a      	str	r2, [r3, #0]
					break;
 800877c:	e03f      	b.n	80087fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877e:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <xTaskIncrementTick+0x150>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	429a      	cmp	r2, r3
 8008794:	d203      	bcs.n	800879e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008796:	4a2e      	ldr	r2, [pc, #184]	@ (8008850 <xTaskIncrementTick+0x15c>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800879c:	e02f      	b.n	80087fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fcfe 	bl	80071a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3318      	adds	r3, #24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fcf5 	bl	80071a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087be:	4b25      	ldr	r3, [pc, #148]	@ (8008854 <xTaskIncrementTick+0x160>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d903      	bls.n	80087ce <xTaskIncrementTick+0xda>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ca:	4a22      	ldr	r2, [pc, #136]	@ (8008854 <xTaskIncrementTick+0x160>)
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4a1f      	ldr	r2, [pc, #124]	@ (8008858 <xTaskIncrementTick+0x164>)
 80087dc:	441a      	add	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fe fc82 	bl	80070ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ee:	4b1b      	ldr	r3, [pc, #108]	@ (800885c <xTaskIncrementTick+0x168>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3b8      	bcc.n	800876a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087fc:	e7b5      	b.n	800876a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087fe:	4b17      	ldr	r3, [pc, #92]	@ (800885c <xTaskIncrementTick+0x168>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008804:	4914      	ldr	r1, [pc, #80]	@ (8008858 <xTaskIncrementTick+0x164>)
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d901      	bls.n	800881a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800881a:	4b11      	ldr	r3, [pc, #68]	@ (8008860 <xTaskIncrementTick+0x16c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008822:	2301      	movs	r3, #1
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	e004      	b.n	8008832 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008828:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <xTaskIncrementTick+0x170>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	4a0d      	ldr	r2, [pc, #52]	@ (8008864 <xTaskIncrementTick+0x170>)
 8008830:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008832:	697b      	ldr	r3, [r7, #20]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	200014a4 	.word	0x200014a4
 8008840:	20001480 	.word	0x20001480
 8008844:	20001434 	.word	0x20001434
 8008848:	20001438 	.word	0x20001438
 800884c:	20001494 	.word	0x20001494
 8008850:	2000149c 	.word	0x2000149c
 8008854:	20001484 	.word	0x20001484
 8008858:	20000fac 	.word	0x20000fac
 800885c:	20000fa8 	.word	0x20000fa8
 8008860:	20001490 	.word	0x20001490
 8008864:	2000148c 	.word	0x2000148c

08008868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800886e:	4b2a      	ldr	r3, [pc, #168]	@ (8008918 <vTaskSwitchContext+0xb0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008876:	4b29      	ldr	r3, [pc, #164]	@ (800891c <vTaskSwitchContext+0xb4>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800887c:	e047      	b.n	800890e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <vTaskSwitchContext+0xb4>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008884:	4b26      	ldr	r3, [pc, #152]	@ (8008920 <vTaskSwitchContext+0xb8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e011      	b.n	80088b0 <vTaskSwitchContext+0x48>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <vTaskSwitchContext+0x42>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	607b      	str	r3, [r7, #4]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <vTaskSwitchContext+0x3e>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	491c      	ldr	r1, [pc, #112]	@ (8008924 <vTaskSwitchContext+0xbc>)
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0e3      	beq.n	800888c <vTaskSwitchContext+0x24>
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4a15      	ldr	r2, [pc, #84]	@ (8008924 <vTaskSwitchContext+0xbc>)
 80088d0:	4413      	add	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	685a      	ldr	r2, [r3, #4]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	605a      	str	r2, [r3, #4]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	3308      	adds	r3, #8
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d104      	bne.n	80088f4 <vTaskSwitchContext+0x8c>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	605a      	str	r2, [r3, #4]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	4a0b      	ldr	r2, [pc, #44]	@ (8008928 <vTaskSwitchContext+0xc0>)
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	4a08      	ldr	r2, [pc, #32]	@ (8008920 <vTaskSwitchContext+0xb8>)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008904:	4b08      	ldr	r3, [pc, #32]	@ (8008928 <vTaskSwitchContext+0xc0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3354      	adds	r3, #84	@ 0x54
 800890a:	4a08      	ldr	r2, [pc, #32]	@ (800892c <vTaskSwitchContext+0xc4>)
 800890c:	6013      	str	r3, [r2, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr
 8008918:	200014a4 	.word	0x200014a4
 800891c:	20001490 	.word	0x20001490
 8008920:	20001484 	.word	0x20001484
 8008924:	20000fac 	.word	0x20000fac
 8008928:	20000fa8 	.word	0x20000fa8
 800892c:	2000002c 	.word	0x2000002c

08008930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	60fb      	str	r3, [r7, #12]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008958:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <vTaskPlaceOnEventList+0x48>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3318      	adds	r3, #24
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7fe fbe7 	bl	8007134 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008966:	2101      	movs	r1, #1
 8008968:	6838      	ldr	r0, [r7, #0]
 800896a:	f000 fa87 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000fa8 	.word	0x20000fa8

0800897c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10b      	bne.n	80089a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	bf00      	nop
 80089a4:	e7fd      	b.n	80089a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a6:	4b0a      	ldr	r3, [pc, #40]	@ (80089d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3318      	adds	r3, #24
 80089ac:	4619      	mov	r1, r3
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7fe fb9d 	bl	80070ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	68b8      	ldr	r0, [r7, #8]
 80089c4:	f000 fa5a 	bl	8008e7c <prvAddCurrentTaskToDelayedList>
	}
 80089c8:	bf00      	nop
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000fa8 	.word	0x20000fa8

080089d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60fb      	str	r3, [r7, #12]
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	e7fd      	b.n	80089fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3318      	adds	r3, #24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fbcc 	bl	80071a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a84 <xTaskRemoveFromEventList+0xb0>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11d      	bne.n	8008a50 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fbc3 	bl	80071a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a22:	4b19      	ldr	r3, [pc, #100]	@ (8008a88 <xTaskRemoveFromEventList+0xb4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d903      	bls.n	8008a32 <xTaskRemoveFromEventList+0x5e>
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	4a16      	ldr	r2, [pc, #88]	@ (8008a88 <xTaskRemoveFromEventList+0xb4>)
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4a13      	ldr	r2, [pc, #76]	@ (8008a8c <xTaskRemoveFromEventList+0xb8>)
 8008a40:	441a      	add	r2, r3
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fe fb50 	bl	80070ee <vListInsertEnd>
 8008a4e:	e005      	b.n	8008a5c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3318      	adds	r3, #24
 8008a54:	4619      	mov	r1, r3
 8008a56:	480e      	ldr	r0, [pc, #56]	@ (8008a90 <xTaskRemoveFromEventList+0xbc>)
 8008a58:	f7fe fb49 	bl	80070ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a60:	4b0c      	ldr	r3, [pc, #48]	@ (8008a94 <xTaskRemoveFromEventList+0xc0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d905      	bls.n	8008a76 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <xTaskRemoveFromEventList+0xc4>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	e001      	b.n	8008a7a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a7a:	697b      	ldr	r3, [r7, #20]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200014a4 	.word	0x200014a4
 8008a88:	20001484 	.word	0x20001484
 8008a8c:	20000fac 	.word	0x20000fac
 8008a90:	2000143c 	.word	0x2000143c
 8008a94:	20000fa8 	.word	0x20000fa8
 8008a98:	20001490 	.word	0x20001490

08008a9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa4:	4b06      	ldr	r3, [pc, #24]	@ (8008ac0 <vTaskInternalSetTimeOutState+0x24>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aac:	4b05      	ldr	r3, [pc, #20]	@ (8008ac4 <vTaskInternalSetTimeOutState+0x28>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	605a      	str	r2, [r3, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20001494 	.word	0x20001494
 8008ac4:	20001480 	.word	0x20001480

08008ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	613b      	str	r3, [r7, #16]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60fb      	str	r3, [r7, #12]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b0e:	f000 fe55 	bl	80097bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b12:	4b1d      	ldr	r3, [pc, #116]	@ (8008b88 <xTaskCheckForTimeOut+0xc0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b2a:	d102      	bne.n	8008b32 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e023      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b15      	ldr	r3, [pc, #84]	@ (8008b8c <xTaskCheckForTimeOut+0xc4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d007      	beq.n	8008b4e <xTaskCheckForTimeOut+0x86>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	e015      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20b      	bcs.n	8008b70 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff99 	bl	8008a9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e004      	b.n	8008b7a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f000 fe4f 	bl	800981c <vPortExitCritical>

	return xReturn;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20001480 	.word	0x20001480
 8008b8c:	20001494 	.word	0x20001494

08008b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b94:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <vTaskMissedYield+0x14>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20001490 	.word	0x20001490

08008ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bb0:	f000 f852 	bl	8008c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb4:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <prvIdleTask+0x28>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d9f9      	bls.n	8008bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bbc:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <prvIdleTask+0x2c>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bcc:	e7f0      	b.n	8008bb0 <prvIdleTask+0x8>
 8008bce:	bf00      	nop
 8008bd0:	20000fac 	.word	0x20000fac
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e00c      	b.n	8008bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a12      	ldr	r2, [pc, #72]	@ (8008c38 <prvInitialiseTaskLists+0x60>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fa50 	bl	8007098 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b37      	cmp	r3, #55	@ 0x37
 8008c02:	d9ef      	bls.n	8008be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c04:	480d      	ldr	r0, [pc, #52]	@ (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c06:	f7fe fa47 	bl	8007098 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c0a:	480d      	ldr	r0, [pc, #52]	@ (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c0c:	f7fe fa44 	bl	8007098 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c10:	480c      	ldr	r0, [pc, #48]	@ (8008c44 <prvInitialiseTaskLists+0x6c>)
 8008c12:	f7fe fa41 	bl	8007098 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c16:	480c      	ldr	r0, [pc, #48]	@ (8008c48 <prvInitialiseTaskLists+0x70>)
 8008c18:	f7fe fa3e 	bl	8007098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c1c:	480b      	ldr	r0, [pc, #44]	@ (8008c4c <prvInitialiseTaskLists+0x74>)
 8008c1e:	f7fe fa3b 	bl	8007098 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <prvInitialiseTaskLists+0x78>)
 8008c24:	4a05      	ldr	r2, [pc, #20]	@ (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	@ (8008c54 <prvInitialiseTaskLists+0x7c>)
 8008c2a:	4a05      	ldr	r2, [pc, #20]	@ (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000fac 	.word	0x20000fac
 8008c3c:	2000140c 	.word	0x2000140c
 8008c40:	20001420 	.word	0x20001420
 8008c44:	2000143c 	.word	0x2000143c
 8008c48:	20001450 	.word	0x20001450
 8008c4c:	20001468 	.word	0x20001468
 8008c50:	20001434 	.word	0x20001434
 8008c54:	20001438 	.word	0x20001438

08008c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5e:	e019      	b.n	8008c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c60:	f000 fdac 	bl	80097bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x50>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fa97 	bl	80071a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c8a:	f000 fdc7 	bl	800981c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f810 	bl	8008cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c94:	4b06      	ldr	r3, [pc, #24]	@ (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e1      	bne.n	8008c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20001450 	.word	0x20001450
 8008cac:	2000147c 	.word	0x2000147c
 8008cb0:	20001464 	.word	0x20001464

08008cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3354      	adds	r3, #84	@ 0x54
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f003 f9b7 	bl	800c034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d108      	bne.n	8008ce2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 ff41 	bl	8009b5c <vPortFree>
				vPortFree( pxTCB );
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 ff3e 	bl	8009b5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ce0:	e019      	b.n	8008d16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d103      	bne.n	8008cf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 ff35 	bl	8009b5c <vPortFree>
	}
 8008cf2:	e010      	b.n	8008d16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d00b      	beq.n	8008d16 <prvDeleteTCB+0x62>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	60fb      	str	r3, [r7, #12]
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	e7fd      	b.n	8008d12 <prvDeleteTCB+0x5e>
	}
 8008d16:	bf00      	nop
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d26:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <prvResetNextTaskUnblockTime+0x38>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d30:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <prvResetNextTaskUnblockTime+0x3c>)
 8008d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d38:	e008      	b.n	8008d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3a:	4b07      	ldr	r3, [pc, #28]	@ (8008d58 <prvResetNextTaskUnblockTime+0x38>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a04      	ldr	r2, [pc, #16]	@ (8008d5c <prvResetNextTaskUnblockTime+0x3c>)
 8008d4a:	6013      	str	r3, [r2, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	20001434 	.word	0x20001434
 8008d5c:	2000149c 	.word	0x2000149c

08008d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d66:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <xTaskGetSchedulerState+0x34>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	e008      	b.n	8008d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d74:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <xTaskGetSchedulerState+0x38>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d102      	bne.n	8008d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	607b      	str	r3, [r7, #4]
 8008d80:	e001      	b.n	8008d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d82:	2300      	movs	r3, #0
 8008d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d86:	687b      	ldr	r3, [r7, #4]
	}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20001488 	.word	0x20001488
 8008d98:	200014a4 	.word	0x200014a4

08008d9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d058      	beq.n	8008e64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008db2:	4b2f      	ldr	r3, [pc, #188]	@ (8008e70 <xTaskPriorityDisinherit+0xd4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d00b      	beq.n	8008dd4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60bb      	str	r3, [r7, #8]
}
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
 8008df2:	e7fd      	b.n	8008df0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d02c      	beq.n	8008e64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d128      	bne.n	8008e64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe f9c4 	bl	80071a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e34:	4b0f      	ldr	r3, [pc, #60]	@ (8008e74 <xTaskPriorityDisinherit+0xd8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d903      	bls.n	8008e44 <xTaskPriorityDisinherit+0xa8>
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e40:	4a0c      	ldr	r2, [pc, #48]	@ (8008e74 <xTaskPriorityDisinherit+0xd8>)
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4a09      	ldr	r2, [pc, #36]	@ (8008e78 <xTaskPriorityDisinherit+0xdc>)
 8008e52:	441a      	add	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f7fe f947 	bl	80070ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e64:	697b      	ldr	r3, [r7, #20]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000fa8 	.word	0x20000fa8
 8008e74:	20001484 	.word	0x20001484
 8008e78:	20000fac 	.word	0x20000fac

08008e7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e86:	4b21      	ldr	r3, [pc, #132]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0x90>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e8c:	4b20      	ldr	r3, [pc, #128]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe f986 	bl	80071a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e9e:	d10a      	bne.n	8008eb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	4619      	mov	r1, r3
 8008eae:	4819      	ldr	r0, [pc, #100]	@ (8008f14 <prvAddCurrentTaskToDelayedList+0x98>)
 8008eb0:	f7fe f91d 	bl	80070ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb4:	e026      	b.n	8008f04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ebe:	4b14      	ldr	r3, [pc, #80]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d209      	bcs.n	8008ee2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ece:	4b12      	ldr	r3, [pc, #72]	@ (8008f18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe f92a 	bl	8007134 <vListInsert>
}
 8008ee0:	e010      	b.n	8008f04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7fe f920 	bl	8007134 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d202      	bcs.n	8008f04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008efe:	4a08      	ldr	r2, [pc, #32]	@ (8008f20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20001480 	.word	0x20001480
 8008f10:	20000fa8 	.word	0x20000fa8
 8008f14:	20001468 	.word	0x20001468
 8008f18:	20001438 	.word	0x20001438
 8008f1c:	20001434 	.word	0x20001434
 8008f20:	2000149c 	.word	0x2000149c

08008f24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	@ 0x28
 8008f28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f2e:	f000 fb11 	bl	8009554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f32:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa8 <xTimerCreateTimerTask+0x84>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d021      	beq.n	8008f7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f42:	1d3a      	adds	r2, r7, #4
 8008f44:	f107 0108 	add.w	r1, r7, #8
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe f889 	bl	8007064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	9202      	str	r2, [sp, #8]
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	2300      	movs	r3, #0
 8008f62:	460a      	mov	r2, r1
 8008f64:	4911      	ldr	r1, [pc, #68]	@ (8008fac <xTimerCreateTimerTask+0x88>)
 8008f66:	4812      	ldr	r0, [pc, #72]	@ (8008fb0 <xTimerCreateTimerTask+0x8c>)
 8008f68:	f7ff f894 	bl	8008094 <xTaskCreateStatic>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4a11      	ldr	r2, [pc, #68]	@ (8008fb4 <xTimerCreateTimerTask+0x90>)
 8008f70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f72:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <xTimerCreateTimerTask+0x90>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10b      	bne.n	8008f9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	613b      	str	r3, [r7, #16]
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f9c:	697b      	ldr	r3, [r7, #20]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200014d8 	.word	0x200014d8
 8008fac:	0800e284 	.word	0x0800e284
 8008fb0:	080090f1 	.word	0x080090f1
 8008fb4:	200014dc 	.word	0x200014dc

08008fb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08a      	sub	sp, #40	@ 0x28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10b      	bne.n	8008fe8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	623b      	str	r3, [r7, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	e7fd      	b.n	8008fe4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fe8:	4b19      	ldr	r3, [pc, #100]	@ (8009050 <xTimerGenericCommand+0x98>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d02a      	beq.n	8009046 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b05      	cmp	r3, #5
 8009000:	dc18      	bgt.n	8009034 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009002:	f7ff fead 	bl	8008d60 <xTaskGetSchedulerState>
 8009006:	4603      	mov	r3, r0
 8009008:	2b02      	cmp	r3, #2
 800900a:	d109      	bne.n	8009020 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800900c:	4b10      	ldr	r3, [pc, #64]	@ (8009050 <xTimerGenericCommand+0x98>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	f107 0110 	add.w	r1, r7, #16
 8009014:	2300      	movs	r3, #0
 8009016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009018:	f7fe faee 	bl	80075f8 <xQueueGenericSend>
 800901c:	6278      	str	r0, [r7, #36]	@ 0x24
 800901e:	e012      	b.n	8009046 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009020:	4b0b      	ldr	r3, [pc, #44]	@ (8009050 <xTimerGenericCommand+0x98>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	f107 0110 	add.w	r1, r7, #16
 8009028:	2300      	movs	r3, #0
 800902a:	2200      	movs	r2, #0
 800902c:	f7fe fae4 	bl	80075f8 <xQueueGenericSend>
 8009030:	6278      	str	r0, [r7, #36]	@ 0x24
 8009032:	e008      	b.n	8009046 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009034:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <xTimerGenericCommand+0x98>)
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	f107 0110 	add.w	r1, r7, #16
 800903c:	2300      	movs	r3, #0
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	f7fe fbdc 	bl	80077fc <xQueueGenericSendFromISR>
 8009044:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009048:	4618      	mov	r0, r3
 800904a:	3728      	adds	r7, #40	@ 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200014d8 	.word	0x200014d8

08009054 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af02      	add	r7, sp, #8
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800905e:	4b23      	ldr	r3, [pc, #140]	@ (80090ec <prvProcessExpiredTimer+0x98>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	3304      	adds	r3, #4
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe f899 	bl	80071a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d023      	beq.n	80090c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	18d1      	adds	r1, r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	6978      	ldr	r0, [r7, #20]
 800908e:	f000 f8d3 	bl	8009238 <prvInsertTimerInActiveList>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	2300      	movs	r3, #0
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	2100      	movs	r1, #0
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f7ff ff88 	bl	8008fb8 <xTimerGenericCommand>
 80090a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d114      	bne.n	80090da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ce:	f023 0301 	bic.w	r3, r3, #1
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	6978      	ldr	r0, [r7, #20]
 80090e0:	4798      	blx	r3
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200014d0 	.word	0x200014d0

080090f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 f859 	bl	80091b4 <prvGetNextExpireTime>
 8009102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f805 	bl	8009118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800910e:	f000 f8d5 	bl	80092bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009112:	bf00      	nop
 8009114:	e7f0      	b.n	80090f8 <prvTimerTask+0x8>
	...

08009118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009122:	f7ff fa1b 	bl	800855c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009126:	f107 0308 	add.w	r3, r7, #8
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f864 	bl	80091f8 <prvSampleTimeNow>
 8009130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d130      	bne.n	800919a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <prvProcessTimerOrBlockTask+0x3c>
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	429a      	cmp	r2, r3
 8009144:	d806      	bhi.n	8009154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009146:	f7ff fa17 	bl	8008578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff ff81 	bl	8009054 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009152:	e024      	b.n	800919e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d008      	beq.n	800916c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800915a:	4b13      	ldr	r3, [pc, #76]	@ (80091a8 <prvProcessTimerOrBlockTask+0x90>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <prvProcessTimerOrBlockTask+0x50>
 8009164:	2301      	movs	r3, #1
 8009166:	e000      	b.n	800916a <prvProcessTimerOrBlockTask+0x52>
 8009168:	2300      	movs	r3, #0
 800916a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800916c:	4b0f      	ldr	r3, [pc, #60]	@ (80091ac <prvProcessTimerOrBlockTask+0x94>)
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4619      	mov	r1, r3
 800917a:	f7fe ff57 	bl	800802c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800917e:	f7ff f9fb 	bl	8008578 <xTaskResumeAll>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009188:	4b09      	ldr	r3, [pc, #36]	@ (80091b0 <prvProcessTimerOrBlockTask+0x98>)
 800918a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	f3bf 8f6f 	isb	sy
}
 8009198:	e001      	b.n	800919e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800919a:	f7ff f9ed 	bl	8008578 <xTaskResumeAll>
}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200014d4 	.word	0x200014d4
 80091ac:	200014d8 	.word	0x200014d8
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091bc:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <prvGetNextExpireTime+0x40>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <prvGetNextExpireTime+0x16>
 80091c6:	2201      	movs	r2, #1
 80091c8:	e000      	b.n	80091cc <prvGetNextExpireTime+0x18>
 80091ca:	2200      	movs	r2, #0
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d105      	bne.n	80091e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091d8:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <prvGetNextExpireTime+0x40>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	e001      	b.n	80091e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091e8:	68fb      	ldr	r3, [r7, #12]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr
 80091f4:	200014d0 	.word	0x200014d0

080091f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009200:	f7ff fa58 	bl	80086b4 <xTaskGetTickCount>
 8009204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009206:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <prvSampleTimeNow+0x3c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	429a      	cmp	r2, r3
 800920e:	d205      	bcs.n	800921c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009210:	f000 f93a 	bl	8009488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e002      	b.n	8009222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009222:	4a04      	ldr	r2, [pc, #16]	@ (8009234 <prvSampleTimeNow+0x3c>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009228:	68fb      	ldr	r3, [r7, #12]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200014e0 	.word	0x200014e0

08009238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d812      	bhi.n	8009284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	429a      	cmp	r2, r3
 800926a:	d302      	bcc.n	8009272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e01b      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009272:	4b10      	ldr	r3, [pc, #64]	@ (80092b4 <prvInsertTimerInActiveList+0x7c>)
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7fd ff59 	bl	8007134 <vListInsert>
 8009282:	e012      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d206      	bcs.n	800929a <prvInsertTimerInActiveList+0x62>
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
 8009298:	e007      	b.n	80092aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800929a:	4b07      	ldr	r3, [pc, #28]	@ (80092b8 <prvInsertTimerInActiveList+0x80>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4619      	mov	r1, r3
 80092a4:	4610      	mov	r0, r2
 80092a6:	f7fd ff45 	bl	8007134 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092aa:	697b      	ldr	r3, [r7, #20]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200014d4 	.word	0x200014d4
 80092b8:	200014d0 	.word	0x200014d0

080092bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	@ 0x38
 80092c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092c2:	e0ce      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da19      	bge.n	80092fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ca:	1d3b      	adds	r3, r7, #4
 80092cc:	3304      	adds	r3, #4
 80092ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61fb      	str	r3, [r7, #28]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f4:	6850      	ldr	r0, [r2, #4]
 80092f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092f8:	6892      	ldr	r2, [r2, #8]
 80092fa:	4611      	mov	r1, r2
 80092fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f2c0 80ae 	blt.w	8009462 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd ff44 	bl	80071a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800931c:	463b      	mov	r3, r7
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff ff6a 	bl	80091f8 <prvSampleTimeNow>
 8009324:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b09      	cmp	r3, #9
 800932a:	f200 8097 	bhi.w	800945c <prvProcessReceivedCommands+0x1a0>
 800932e:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <prvProcessReceivedCommands+0x78>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	0800935d 	.word	0x0800935d
 8009338:	0800935d 	.word	0x0800935d
 800933c:	0800935d 	.word	0x0800935d
 8009340:	080093d3 	.word	0x080093d3
 8009344:	080093e7 	.word	0x080093e7
 8009348:	08009433 	.word	0x08009433
 800934c:	0800935d 	.word	0x0800935d
 8009350:	0800935d 	.word	0x0800935d
 8009354:	080093d3 	.word	0x080093d3
 8009358:	080093e7 	.word	0x080093e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	b2da      	uxtb	r2, r3
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	18d1      	adds	r1, r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800937a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800937c:	f7ff ff5c 	bl	8009238 <prvInsertTimerInActiveList>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d06c      	beq.n	8009460 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800938c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d061      	beq.n	8009460 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	441a      	add	r2, r3
 80093a4:	2300      	movs	r3, #0
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	2300      	movs	r3, #0
 80093aa:	2100      	movs	r1, #0
 80093ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ae:	f7ff fe03 	bl	8008fb8 <xTimerGenericCommand>
 80093b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d152      	bne.n	8009460 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	61bb      	str	r3, [r7, #24]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093e4:	e03d      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	617b      	str	r3, [r7, #20]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	18d1      	adds	r1, r2, r3
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800942a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800942c:	f7ff ff04 	bl	8009238 <prvInsertTimerInActiveList>
					break;
 8009430:	e017      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009440:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009442:	f000 fb8b 	bl	8009b5c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009446:	e00c      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	b2da      	uxtb	r2, r3
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800945a:	e002      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <prvProcessReceivedCommands+0x1a6>
					break;
 8009460:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009462:	4b08      	ldr	r3, [pc, #32]	@ (8009484 <prvProcessReceivedCommands+0x1c8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	1d39      	adds	r1, r7, #4
 8009468:	2200      	movs	r2, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe faf4 	bl	8007a58 <xQueueReceive>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	f47f af26 	bne.w	80092c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	3730      	adds	r7, #48	@ 0x30
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	200014d8 	.word	0x200014d8

08009488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800948e:	e049      	b.n	8009524 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009490:	4b2e      	ldr	r3, [pc, #184]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800949a:	4b2c      	ldr	r3, [pc, #176]	@ (800954c <prvSwitchTimerLists+0xc4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd fe7b 	bl	80071a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d02f      	beq.n	8009524 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4413      	add	r3, r2
 80094cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d90e      	bls.n	80094f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094e2:	4b1a      	ldr	r3, [pc, #104]	@ (800954c <prvSwitchTimerLists+0xc4>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fd fe21 	bl	8007134 <vListInsert>
 80094f2:	e017      	b.n	8009524 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094f4:	2300      	movs	r3, #0
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	2100      	movs	r1, #0
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fd5a 	bl	8008fb8 <xTimerGenericCommand>
 8009504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	603b      	str	r3, [r7, #0]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009524:	4b09      	ldr	r3, [pc, #36]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1b0      	bne.n	8009490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800952e:	4b07      	ldr	r3, [pc, #28]	@ (800954c <prvSwitchTimerLists+0xc4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <prvSwitchTimerLists+0xc8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a04      	ldr	r2, [pc, #16]	@ (800954c <prvSwitchTimerLists+0xc4>)
 800953a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800953c:	4a04      	ldr	r2, [pc, #16]	@ (8009550 <prvSwitchTimerLists+0xc8>)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	6013      	str	r3, [r2, #0]
}
 8009542:	bf00      	nop
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	200014d0 	.word	0x200014d0
 8009550:	200014d4 	.word	0x200014d4

08009554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800955a:	f000 f92f 	bl	80097bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800955e:	4b15      	ldr	r3, [pc, #84]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d120      	bne.n	80095a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009566:	4814      	ldr	r0, [pc, #80]	@ (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009568:	f7fd fd96 	bl	8007098 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800956c:	4813      	ldr	r0, [pc, #76]	@ (80095bc <prvCheckForValidListAndQueue+0x68>)
 800956e:	f7fd fd93 	bl	8007098 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009572:	4b13      	ldr	r3, [pc, #76]	@ (80095c0 <prvCheckForValidListAndQueue+0x6c>)
 8009574:	4a10      	ldr	r2, [pc, #64]	@ (80095b8 <prvCheckForValidListAndQueue+0x64>)
 8009576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009578:	4b12      	ldr	r3, [pc, #72]	@ (80095c4 <prvCheckForValidListAndQueue+0x70>)
 800957a:	4a10      	ldr	r2, [pc, #64]	@ (80095bc <prvCheckForValidListAndQueue+0x68>)
 800957c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800957e:	2300      	movs	r3, #0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4b11      	ldr	r3, [pc, #68]	@ (80095c8 <prvCheckForValidListAndQueue+0x74>)
 8009584:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <prvCheckForValidListAndQueue+0x78>)
 8009586:	2110      	movs	r1, #16
 8009588:	200a      	movs	r0, #10
 800958a:	f7fd fe9f 	bl	80072cc <xQueueGenericCreateStatic>
 800958e:	4603      	mov	r3, r0
 8009590:	4a08      	ldr	r2, [pc, #32]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009592:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009594:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <prvCheckForValidListAndQueue+0x60>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	490b      	ldr	r1, [pc, #44]	@ (80095d0 <prvCheckForValidListAndQueue+0x7c>)
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fcf0 	bl	8007f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095a8:	f000 f938 	bl	800981c <vPortExitCritical>
}
 80095ac:	bf00      	nop
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	200014d8 	.word	0x200014d8
 80095b8:	200014a8 	.word	0x200014a8
 80095bc:	200014bc 	.word	0x200014bc
 80095c0:	200014d0 	.word	0x200014d0
 80095c4:	200014d4 	.word	0x200014d4
 80095c8:	20001584 	.word	0x20001584
 80095cc:	200014e4 	.word	0x200014e4
 80095d0:	0800e28c 	.word	0x0800e28c

080095d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3b04      	subs	r3, #4
 80095e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f023 0201 	bic.w	r2, r3, #1
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b04      	subs	r3, #4
 8009602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009604:	4a08      	ldr	r2, [pc, #32]	@ (8009628 <pxPortInitialiseStack+0x54>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3b14      	subs	r3, #20
 800960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3b20      	subs	r3, #32
 800961a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800961c:	68fb      	ldr	r3, [r7, #12]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr
 8009628:	0800962d 	.word	0x0800962d

0800962c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009632:	2300      	movs	r3, #0
 8009634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009636:	4b12      	ldr	r3, [pc, #72]	@ (8009680 <prvTaskExitError+0x54>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800963e:	d00b      	beq.n	8009658 <prvTaskExitError+0x2c>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
}
 8009652:	bf00      	nop
 8009654:	bf00      	nop
 8009656:	e7fd      	b.n	8009654 <prvTaskExitError+0x28>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60bb      	str	r3, [r7, #8]
}
 800966a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800966c:	bf00      	nop
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d0fc      	beq.n	800966e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr
 8009680:	2000000c 	.word	0x2000000c
	...

08009690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80096ae:	4770      	bx	lr

080096b0 <pxCurrentTCBConst2>:
 80096b0:	20000fa8 	.word	0x20000fa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80096b8:	4806      	ldr	r0, [pc, #24]	@ (80096d4 <prvPortStartFirstTask+0x1c>)
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f380 8808 	msr	MSP, r0
 80096c2:	b662      	cpsie	i
 80096c4:	b661      	cpsie	f
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	df00      	svc	0
 80096d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096d2:	bf00      	nop
 80096d4:	e000ed08 	.word	0xe000ed08

080096d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096de:	4b32      	ldr	r3, [pc, #200]	@ (80097a8 <xPortStartScheduler+0xd0>)
 80096e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	22ff      	movs	r2, #255	@ 0xff
 80096ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009700:	b2da      	uxtb	r2, r3
 8009702:	4b2a      	ldr	r3, [pc, #168]	@ (80097ac <xPortStartScheduler+0xd4>)
 8009704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009706:	4b2a      	ldr	r3, [pc, #168]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009708:	2207      	movs	r2, #7
 800970a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970c:	e009      	b.n	8009722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800970e:	4b28      	ldr	r3, [pc, #160]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3b01      	subs	r3, #1
 8009714:	4a26      	ldr	r2, [pc, #152]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	b2db      	uxtb	r3, r3
 8009720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009722:	78fb      	ldrb	r3, [r7, #3]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972a:	2b80      	cmp	r3, #128	@ 0x80
 800972c:	d0ef      	beq.n	800970e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800972e:	4b20      	ldr	r3, [pc, #128]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1c3 0307 	rsb	r3, r3, #7
 8009736:	2b04      	cmp	r3, #4
 8009738:	d00b      	beq.n	8009752 <xPortStartScheduler+0x7a>
	__asm volatile
 800973a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973e:	f383 8811 	msr	BASEPRI, r3
 8009742:	f3bf 8f6f 	isb	sy
 8009746:	f3bf 8f4f 	dsb	sy
 800974a:	60bb      	str	r3, [r7, #8]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009752:	4b17      	ldr	r3, [pc, #92]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	4a15      	ldr	r2, [pc, #84]	@ (80097b0 <xPortStartScheduler+0xd8>)
 800975a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800975c:	4b14      	ldr	r3, [pc, #80]	@ (80097b0 <xPortStartScheduler+0xd8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009764:	4a12      	ldr	r2, [pc, #72]	@ (80097b0 <xPortStartScheduler+0xd8>)
 8009766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	b2da      	uxtb	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009770:	4b10      	ldr	r3, [pc, #64]	@ (80097b4 <xPortStartScheduler+0xdc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a0f      	ldr	r2, [pc, #60]	@ (80097b4 <xPortStartScheduler+0xdc>)
 8009776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800977a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800977c:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <xPortStartScheduler+0xdc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a0c      	ldr	r2, [pc, #48]	@ (80097b4 <xPortStartScheduler+0xdc>)
 8009782:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009788:	f000 f8b8 	bl	80098fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800978c:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <xPortStartScheduler+0xe0>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009792:	f7ff ff91 	bl	80096b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009796:	f7ff f867 	bl	8008868 <vTaskSwitchContext>
	prvTaskExitError();
 800979a:	f7ff ff47 	bl	800962c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	e000e400 	.word	0xe000e400
 80097ac:	200015d4 	.word	0x200015d4
 80097b0:	200015d8 	.word	0x200015d8
 80097b4:	e000ed20 	.word	0xe000ed20
 80097b8:	2000000c 	.word	0x2000000c

080097bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
}
 80097d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009814 <vPortEnterCritical+0x58>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3301      	adds	r3, #1
 80097dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009814 <vPortEnterCritical+0x58>)
 80097de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <vPortEnterCritical+0x58>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d110      	bne.n	800980a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009818 <vPortEnterCritical+0x5c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <vPortEnterCritical+0x4e>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	603b      	str	r3, [r7, #0]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <vPortEnterCritical+0x4a>
	}
}
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	bc80      	pop	{r7}
 8009812:	4770      	bx	lr
 8009814:	2000000c 	.word	0x2000000c
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009822:	4b12      	ldr	r3, [pc, #72]	@ (800986c <vPortExitCritical+0x50>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <vPortExitCritical+0x26>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	607b      	str	r3, [r7, #4]
}
 800983c:	bf00      	nop
 800983e:	bf00      	nop
 8009840:	e7fd      	b.n	800983e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009842:	4b0a      	ldr	r3, [pc, #40]	@ (800986c <vPortExitCritical+0x50>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3b01      	subs	r3, #1
 8009848:	4a08      	ldr	r2, [pc, #32]	@ (800986c <vPortExitCritical+0x50>)
 800984a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800984c:	4b07      	ldr	r3, [pc, #28]	@ (800986c <vPortExitCritical+0x50>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d105      	bne.n	8009860 <vPortExitCritical+0x44>
 8009854:	2300      	movs	r3, #0
 8009856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f383 8811 	msr	BASEPRI, r3
}
 800985e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	bc80      	pop	{r7}
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	2000000c 	.word	0x2000000c

08009870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009870:	f3ef 8009 	mrs	r0, PSP
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <pxCurrentTCBConst>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009880:	6010      	str	r0, [r2, #0]
 8009882:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009886:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800988a:	f380 8811 	msr	BASEPRI, r0
 800988e:	f7fe ffeb 	bl	8008868 <vTaskSwitchContext>
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8811 	msr	BASEPRI, r0
 800989a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098a6:	f380 8809 	msr	PSP, r0
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	4770      	bx	lr

080098b0 <pxCurrentTCBConst>:
 80098b0:	20000fa8 	.word	0x20000fa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	607b      	str	r3, [r7, #4]
}
 80098d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098d2:	f7fe ff0f 	bl	80086f4 <xTaskIncrementTick>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098dc:	4b06      	ldr	r3, [pc, #24]	@ (80098f8 <xPortSysTickHandler+0x40>)
 80098de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	2300      	movs	r3, #0
 80098e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	e000ed04 	.word	0xe000ed04

080098fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <vPortSetupTimerInterrupt+0x30>)
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009906:	4b0a      	ldr	r3, [pc, #40]	@ (8009930 <vPortSetupTimerInterrupt+0x34>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800990c:	4b09      	ldr	r3, [pc, #36]	@ (8009934 <vPortSetupTimerInterrupt+0x38>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a09      	ldr	r2, [pc, #36]	@ (8009938 <vPortSetupTimerInterrupt+0x3c>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	099b      	lsrs	r3, r3, #6
 8009918:	4a08      	ldr	r2, [pc, #32]	@ (800993c <vPortSetupTimerInterrupt+0x40>)
 800991a:	3b01      	subs	r3, #1
 800991c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800991e:	4b03      	ldr	r3, [pc, #12]	@ (800992c <vPortSetupTimerInterrupt+0x30>)
 8009920:	2207      	movs	r2, #7
 8009922:	601a      	str	r2, [r3, #0]
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr
 800992c:	e000e010 	.word	0xe000e010
 8009930:	e000e018 	.word	0xe000e018
 8009934:	20000000 	.word	0x20000000
 8009938:	10624dd3 	.word	0x10624dd3
 800993c:	e000e014 	.word	0xe000e014

08009940 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009946:	f3ef 8305 	mrs	r3, IPSR
 800994a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b0f      	cmp	r3, #15
 8009950:	d915      	bls.n	800997e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009952:	4a17      	ldr	r2, [pc, #92]	@ (80099b0 <vPortValidateInterruptPriority+0x70>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800995c:	4b15      	ldr	r3, [pc, #84]	@ (80099b4 <vPortValidateInterruptPriority+0x74>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	7afa      	ldrb	r2, [r7, #11]
 8009962:	429a      	cmp	r2, r3
 8009964:	d20b      	bcs.n	800997e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	607b      	str	r3, [r7, #4]
}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	e7fd      	b.n	800997a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800997e:	4b0e      	ldr	r3, [pc, #56]	@ (80099b8 <vPortValidateInterruptPriority+0x78>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009986:	4b0d      	ldr	r3, [pc, #52]	@ (80099bc <vPortValidateInterruptPriority+0x7c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d90b      	bls.n	80099a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	603b      	str	r3, [r7, #0]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vPortValidateInterruptPriority+0x62>
	}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bc80      	pop	{r7}
 80099ae:	4770      	bx	lr
 80099b0:	e000e3f0 	.word	0xe000e3f0
 80099b4:	200015d4 	.word	0x200015d4
 80099b8:	e000ed0c 	.word	0xe000ed0c
 80099bc:	200015d8 	.word	0x200015d8

080099c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	@ 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099cc:	f7fe fdc6 	bl	800855c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099d0:	4b5c      	ldr	r3, [pc, #368]	@ (8009b44 <pvPortMalloc+0x184>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099d8:	f000 f924 	bl	8009c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099dc:	4b5a      	ldr	r3, [pc, #360]	@ (8009b48 <pvPortMalloc+0x188>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4013      	ands	r3, r2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f040 8095 	bne.w	8009b14 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01e      	beq.n	8009a2e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80099f0:	2208      	movs	r2, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4413      	add	r3, r2
 80099f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d015      	beq.n	8009a2e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f023 0307 	bic.w	r3, r3, #7
 8009a08:	3308      	adds	r3, #8
 8009a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00b      	beq.n	8009a2e <pvPortMalloc+0x6e>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	617b      	str	r3, [r7, #20]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d06f      	beq.n	8009b14 <pvPortMalloc+0x154>
 8009a34:	4b45      	ldr	r3, [pc, #276]	@ (8009b4c <pvPortMalloc+0x18c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d86a      	bhi.n	8009b14 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a3e:	4b44      	ldr	r3, [pc, #272]	@ (8009b50 <pvPortMalloc+0x190>)
 8009a40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a42:	4b43      	ldr	r3, [pc, #268]	@ (8009b50 <pvPortMalloc+0x190>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a48:	e004      	b.n	8009a54 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d903      	bls.n	8009a66 <pvPortMalloc+0xa6>
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1f1      	bne.n	8009a4a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a66:	4b37      	ldr	r3, [pc, #220]	@ (8009b44 <pvPortMalloc+0x184>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d051      	beq.n	8009b14 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2208      	movs	r2, #8
 8009a76:	4413      	add	r3, r2
 8009a78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d920      	bls.n	8009ad4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4413      	add	r3, r2
 8009a98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <pvPortMalloc+0xfc>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	613b      	str	r3, [r7, #16]
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	1ad2      	subs	r2, r2, r3
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ace:	69b8      	ldr	r0, [r7, #24]
 8009ad0:	f000 f90a 	bl	8009ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b4c <pvPortMalloc+0x18c>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	4a1b      	ldr	r2, [pc, #108]	@ (8009b4c <pvPortMalloc+0x18c>)
 8009ae0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b4c <pvPortMalloc+0x18c>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b54 <pvPortMalloc+0x194>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d203      	bcs.n	8009af6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009aee:	4b17      	ldr	r3, [pc, #92]	@ (8009b4c <pvPortMalloc+0x18c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a18      	ldr	r2, [pc, #96]	@ (8009b54 <pvPortMalloc+0x194>)
 8009af4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	4b13      	ldr	r3, [pc, #76]	@ (8009b48 <pvPortMalloc+0x188>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b0a:	4b13      	ldr	r3, [pc, #76]	@ (8009b58 <pvPortMalloc+0x198>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	4a11      	ldr	r2, [pc, #68]	@ (8009b58 <pvPortMalloc+0x198>)
 8009b12:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b14:	f7fe fd30 	bl	8008578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <pvPortMalloc+0x17a>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60fb      	str	r3, [r7, #12]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <pvPortMalloc+0x176>
	return pvReturn;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3728      	adds	r7, #40	@ 0x28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20003dcc 	.word	0x20003dcc
 8009b48:	20003de0 	.word	0x20003de0
 8009b4c:	20003dd0 	.word	0x20003dd0
 8009b50:	20003dc4 	.word	0x20003dc4
 8009b54:	20003dd4 	.word	0x20003dd4
 8009b58:	20003dd8 	.word	0x20003dd8

08009b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d04f      	beq.n	8009c0e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b6e:	2308      	movs	r3, #8
 8009b70:	425b      	negs	r3, r3
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	4b25      	ldr	r3, [pc, #148]	@ (8009c18 <vPortFree+0xbc>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vPortFree+0x46>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	60fb      	str	r3, [r7, #12]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <vPortFree+0x66>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	60bb      	str	r3, [r7, #8]
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	e7fd      	b.n	8009bbe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	4b14      	ldr	r3, [pc, #80]	@ (8009c18 <vPortFree+0xbc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01e      	beq.n	8009c0e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11a      	bne.n	8009c0e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <vPortFree+0xbc>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	43db      	mvns	r3, r3
 8009be2:	401a      	ands	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009be8:	f7fe fcb8 	bl	800855c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <vPortFree+0xc0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4a09      	ldr	r2, [pc, #36]	@ (8009c1c <vPortFree+0xc0>)
 8009bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bfa:	6938      	ldr	r0, [r7, #16]
 8009bfc:	f000 f874 	bl	8009ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c00:	4b07      	ldr	r3, [pc, #28]	@ (8009c20 <vPortFree+0xc4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	4a06      	ldr	r2, [pc, #24]	@ (8009c20 <vPortFree+0xc4>)
 8009c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c0a:	f7fe fcb5 	bl	8008578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c0e:	bf00      	nop
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20003de0 	.word	0x20003de0
 8009c1c:	20003dd0 	.word	0x20003dd0
 8009c20:	20003ddc 	.word	0x20003ddc

08009c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c2a:	f242 73e8 	movw	r3, #10216	@ 0x27e8
 8009c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c30:	4b27      	ldr	r3, [pc, #156]	@ (8009cd0 <prvHeapInit+0xac>)
 8009c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3307      	adds	r3, #7
 8009c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0307 	bic.w	r3, r3, #7
 8009c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd0 <prvHeapInit+0xac>)
 8009c54:	4413      	add	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cd4 <prvHeapInit+0xb0>)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c62:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd4 <prvHeapInit+0xb0>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c70:	2208      	movs	r2, #8
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0307 	bic.w	r3, r3, #7
 8009c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <prvHeapInit+0xb4>)
 8009c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c86:	4b14      	ldr	r3, [pc, #80]	@ (8009cd8 <prvHeapInit+0xb4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c8e:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <prvHeapInit+0xb4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd8 <prvHeapInit+0xb4>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8009cdc <prvHeapInit+0xb8>)
 8009cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ce0 <prvHeapInit+0xbc>)
 8009cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cbc:	4b09      	ldr	r3, [pc, #36]	@ (8009ce4 <prvHeapInit+0xc0>)
 8009cbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cc2:	601a      	str	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	200015dc 	.word	0x200015dc
 8009cd4:	20003dc4 	.word	0x20003dc4
 8009cd8:	20003dcc 	.word	0x20003dcc
 8009cdc:	20003dd4 	.word	0x20003dd4
 8009ce0:	20003dd0 	.word	0x20003dd0
 8009ce4:	20003de0 	.word	0x20003de0

08009ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cf0:	4b27      	ldr	r3, [pc, #156]	@ (8009d90 <prvInsertBlockIntoFreeList+0xa8>)
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e002      	b.n	8009cfc <prvInsertBlockIntoFreeList+0x14>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d8f7      	bhi.n	8009cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	4413      	add	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d108      	bne.n	8009d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	441a      	add	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d118      	bne.n	8009d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <prvInsertBlockIntoFreeList+0xac>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d00d      	beq.n	8009d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	441a      	add	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	e008      	b.n	8009d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <prvInsertBlockIntoFreeList+0xac>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e003      	b.n	8009d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d002      	beq.n	8009d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bc80      	pop	{r7}
 8009d8e:	4770      	bx	lr
 8009d90:	20003dc4 	.word	0x20003dc4
 8009d94:	20003dcc 	.word	0x20003dcc

08009d98 <atan2>:
 8009d98:	f000 b96a 	b.w	800a070 <__ieee754_atan2>

08009d9c <pow>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	4614      	mov	r4, r2
 8009da2:	461d      	mov	r5, r3
 8009da4:	4680      	mov	r8, r0
 8009da6:	4689      	mov	r9, r1
 8009da8:	f000 fa36 	bl	800a218 <__ieee754_pow>
 8009dac:	4622      	mov	r2, r4
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	462b      	mov	r3, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fe28 	bl	8000a0c <__aeabi_dcmpun>
 8009dbc:	bbc8      	cbnz	r0, 8009e32 <pow+0x96>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	f7f6 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8009dca:	b1b8      	cbz	r0, 8009dfc <pow+0x60>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	f7f6 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d141      	bne.n	8009e60 <pow+0xc4>
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f000 f868 	bl	8009eb4 <finite>
 8009de4:	b328      	cbz	r0, 8009e32 <pow+0x96>
 8009de6:	2200      	movs	r2, #0
 8009de8:	2300      	movs	r3, #0
 8009dea:	4620      	mov	r0, r4
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fde5 	bl	80009bc <__aeabi_dcmplt>
 8009df2:	b1f0      	cbz	r0, 8009e32 <pow+0x96>
 8009df4:	f002 f9ba 	bl	800c16c <__errno>
 8009df8:	2322      	movs	r3, #34	@ 0x22
 8009dfa:	e019      	b.n	8009e30 <pow+0x94>
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f000 f858 	bl	8009eb4 <finite>
 8009e04:	b9c8      	cbnz	r0, 8009e3a <pow+0x9e>
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f000 f853 	bl	8009eb4 <finite>
 8009e0e:	b1a0      	cbz	r0, 8009e3a <pow+0x9e>
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f000 f84e 	bl	8009eb4 <finite>
 8009e18:	b178      	cbz	r0, 8009e3a <pow+0x9e>
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fdf3 	bl	8000a0c <__aeabi_dcmpun>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0e4      	beq.n	8009df4 <pow+0x58>
 8009e2a:	f002 f99f 	bl	800c16c <__errno>
 8009e2e:	2321      	movs	r3, #33	@ 0x21
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	4630      	mov	r0, r6
 8009e34:	4639      	mov	r1, r7
 8009e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0f3      	beq.n	8009e32 <pow+0x96>
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f000 f831 	bl	8009eb4 <finite>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d0ed      	beq.n	8009e32 <pow+0x96>
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f000 f82b 	bl	8009eb4 <finite>
 8009e5e:	e7c8      	b.n	8009df2 <pow+0x56>
 8009e60:	2600      	movs	r6, #0
 8009e62:	4f01      	ldr	r7, [pc, #4]	@ (8009e68 <pow+0xcc>)
 8009e64:	e7e5      	b.n	8009e32 <pow+0x96>
 8009e66:	bf00      	nop
 8009e68:	3ff00000 	.word	0x3ff00000

08009e6c <sqrt>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	4606      	mov	r6, r0
 8009e70:	460f      	mov	r7, r1
 8009e72:	f000 f825 	bl	8009ec0 <__ieee754_sqrt>
 8009e76:	4632      	mov	r2, r6
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	463b      	mov	r3, r7
 8009e7e:	4630      	mov	r0, r6
 8009e80:	4639      	mov	r1, r7
 8009e82:	f7f6 fdc3 	bl	8000a0c <__aeabi_dcmpun>
 8009e86:	b990      	cbnz	r0, 8009eae <sqrt+0x42>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fd94 	bl	80009bc <__aeabi_dcmplt>
 8009e94:	b158      	cbz	r0, 8009eae <sqrt+0x42>
 8009e96:	f002 f969 	bl	800c16c <__errno>
 8009e9a:	2321      	movs	r3, #33	@ 0x21
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	6003      	str	r3, [r0, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4610      	mov	r0, r2
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f7f6 fc41 	bl	800072c <__aeabi_ddiv>
 8009eaa:	4604      	mov	r4, r0
 8009eac:	460d      	mov	r5, r1
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eb4 <finite>:
 8009eb4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009eb8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009ebc:	0fc0      	lsrs	r0, r0, #31
 8009ebe:	4770      	bx	lr

08009ec0 <__ieee754_sqrt>:
 8009ec0:	4a67      	ldr	r2, [pc, #412]	@ (800a060 <__ieee754_sqrt+0x1a0>)
 8009ec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	438a      	bics	r2, r1
 8009ec8:	4606      	mov	r6, r0
 8009eca:	460f      	mov	r7, r1
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4604      	mov	r4, r0
 8009ed0:	d10e      	bne.n	8009ef0 <__ieee754_sqrt+0x30>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	f7f6 fb00 	bl	80004d8 <__aeabi_dmul>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 f944 	bl	800016c <__adddf3>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	dc0c      	bgt.n	8009f0e <__ieee754_sqrt+0x4e>
 8009ef4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009ef8:	4302      	orrs	r2, r0
 8009efa:	d0f5      	beq.n	8009ee8 <__ieee754_sqrt+0x28>
 8009efc:	b189      	cbz	r1, 8009f22 <__ieee754_sqrt+0x62>
 8009efe:	4602      	mov	r2, r0
 8009f00:	f7f6 f932 	bl	8000168 <__aeabi_dsub>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	f7f6 fc10 	bl	800072c <__aeabi_ddiv>
 8009f0c:	e7ea      	b.n	8009ee4 <__ieee754_sqrt+0x24>
 8009f0e:	150a      	asrs	r2, r1, #20
 8009f10:	d115      	bne.n	8009f3e <__ieee754_sqrt+0x7e>
 8009f12:	2100      	movs	r1, #0
 8009f14:	e009      	b.n	8009f2a <__ieee754_sqrt+0x6a>
 8009f16:	0ae3      	lsrs	r3, r4, #11
 8009f18:	3a15      	subs	r2, #21
 8009f1a:	0564      	lsls	r4, r4, #21
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0fa      	beq.n	8009f16 <__ieee754_sqrt+0x56>
 8009f20:	e7f7      	b.n	8009f12 <__ieee754_sqrt+0x52>
 8009f22:	460a      	mov	r2, r1
 8009f24:	e7fa      	b.n	8009f1c <__ieee754_sqrt+0x5c>
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	3101      	adds	r1, #1
 8009f2a:	02d8      	lsls	r0, r3, #11
 8009f2c:	d5fb      	bpl.n	8009f26 <__ieee754_sqrt+0x66>
 8009f2e:	1e48      	subs	r0, r1, #1
 8009f30:	1a12      	subs	r2, r2, r0
 8009f32:	f1c1 0020 	rsb	r0, r1, #32
 8009f36:	fa24 f000 	lsr.w	r0, r4, r0
 8009f3a:	4303      	orrs	r3, r0
 8009f3c:	408c      	lsls	r4, r1
 8009f3e:	2600      	movs	r6, #0
 8009f40:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009f44:	2116      	movs	r1, #22
 8009f46:	07d2      	lsls	r2, r2, #31
 8009f48:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f56:	bf5c      	itt	pl
 8009f58:	005b      	lslpl	r3, r3, #1
 8009f5a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009f5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f62:	bf58      	it	pl
 8009f64:	0064      	lslpl	r4, r4, #1
 8009f66:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009f6a:	107f      	asrs	r7, r7, #1
 8009f6c:	0064      	lsls	r4, r4, #1
 8009f6e:	1815      	adds	r5, r2, r0
 8009f70:	429d      	cmp	r5, r3
 8009f72:	bfde      	ittt	le
 8009f74:	182a      	addle	r2, r5, r0
 8009f76:	1b5b      	suble	r3, r3, r5
 8009f78:	1836      	addle	r6, r6, r0
 8009f7a:	0fe5      	lsrs	r5, r4, #31
 8009f7c:	3901      	subs	r1, #1
 8009f7e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009f82:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f86:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009f8a:	d1f0      	bne.n	8009f6e <__ieee754_sqrt+0xae>
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	f04f 0a20 	mov.w	sl, #32
 8009f92:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009f96:	429a      	cmp	r2, r3
 8009f98:	eb01 0c00 	add.w	ip, r1, r0
 8009f9c:	db02      	blt.n	8009fa4 <__ieee754_sqrt+0xe4>
 8009f9e:	d113      	bne.n	8009fc8 <__ieee754_sqrt+0x108>
 8009fa0:	45a4      	cmp	ip, r4
 8009fa2:	d811      	bhi.n	8009fc8 <__ieee754_sqrt+0x108>
 8009fa4:	f1bc 0f00 	cmp.w	ip, #0
 8009fa8:	eb0c 0100 	add.w	r1, ip, r0
 8009fac:	da42      	bge.n	800a034 <__ieee754_sqrt+0x174>
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	db40      	blt.n	800a034 <__ieee754_sqrt+0x174>
 8009fb2:	f102 0e01 	add.w	lr, r2, #1
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	4672      	mov	r2, lr
 8009fba:	45a4      	cmp	ip, r4
 8009fbc:	bf88      	it	hi
 8009fbe:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009fc2:	eba4 040c 	sub.w	r4, r4, ip
 8009fc6:	4405      	add	r5, r0
 8009fc8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009fcc:	f1ba 0a01 	subs.w	sl, sl, #1
 8009fd0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009fd4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009fd8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009fdc:	d1db      	bne.n	8009f96 <__ieee754_sqrt+0xd6>
 8009fde:	431c      	orrs	r4, r3
 8009fe0:	d01a      	beq.n	800a018 <__ieee754_sqrt+0x158>
 8009fe2:	4c20      	ldr	r4, [pc, #128]	@ (800a064 <__ieee754_sqrt+0x1a4>)
 8009fe4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a068 <__ieee754_sqrt+0x1a8>
 8009fe8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009fec:	e9db 2300 	ldrd	r2, r3, [fp]
 8009ff0:	f7f6 f8ba 	bl	8000168 <__aeabi_dsub>
 8009ff4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4649      	mov	r1, r9
 800a000:	f7f6 fce6 	bl	80009d0 <__aeabi_dcmple>
 800a004:	b140      	cbz	r0, 800a018 <__ieee754_sqrt+0x158>
 800a006:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a00a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a00e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a012:	d111      	bne.n	800a038 <__ieee754_sqrt+0x178>
 800a014:	4655      	mov	r5, sl
 800a016:	3601      	adds	r6, #1
 800a018:	1072      	asrs	r2, r6, #1
 800a01a:	086b      	lsrs	r3, r5, #1
 800a01c:	07f1      	lsls	r1, r6, #31
 800a01e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a022:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a026:	bf48      	it	mi
 800a028:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a02c:	4618      	mov	r0, r3
 800a02e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a032:	e757      	b.n	8009ee4 <__ieee754_sqrt+0x24>
 800a034:	4696      	mov	lr, r2
 800a036:	e7be      	b.n	8009fb6 <__ieee754_sqrt+0xf6>
 800a038:	f7f6 f898 	bl	800016c <__adddf3>
 800a03c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 fcb8 	bl	80009bc <__aeabi_dcmplt>
 800a04c:	b120      	cbz	r0, 800a058 <__ieee754_sqrt+0x198>
 800a04e:	1ca8      	adds	r0, r5, #2
 800a050:	bf08      	it	eq
 800a052:	3601      	addeq	r6, #1
 800a054:	3502      	adds	r5, #2
 800a056:	e7df      	b.n	800a018 <__ieee754_sqrt+0x158>
 800a058:	1c6b      	adds	r3, r5, #1
 800a05a:	f023 0501 	bic.w	r5, r3, #1
 800a05e:	e7db      	b.n	800a018 <__ieee754_sqrt+0x158>
 800a060:	7ff00000 	.word	0x7ff00000
 800a064:	20000018 	.word	0x20000018
 800a068:	20000010 	.word	0x20000010
 800a06c:	00000000 	.word	0x00000000

0800a070 <__ieee754_atan2>:
 800a070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	4617      	mov	r7, r2
 800a076:	4690      	mov	r8, r2
 800a078:	4699      	mov	r9, r3
 800a07a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a07e:	427b      	negs	r3, r7
 800a080:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800a208 <__ieee754_atan2+0x198>
 800a084:	433b      	orrs	r3, r7
 800a086:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a08a:	4553      	cmp	r3, sl
 800a08c:	4604      	mov	r4, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	d809      	bhi.n	800a0a6 <__ieee754_atan2+0x36>
 800a092:	4246      	negs	r6, r0
 800a094:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a098:	4306      	orrs	r6, r0
 800a09a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a09e:	4556      	cmp	r6, sl
 800a0a0:	468e      	mov	lr, r1
 800a0a2:	4683      	mov	fp, r0
 800a0a4:	d908      	bls.n	800a0b8 <__ieee754_atan2+0x48>
 800a0a6:	4642      	mov	r2, r8
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 f85d 	bl	800016c <__adddf3>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	e016      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a0b8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800a0bc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a0c0:	433e      	orrs	r6, r7
 800a0c2:	d103      	bne.n	800a0cc <__ieee754_atan2+0x5c>
 800a0c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	f000 bdce 	b.w	800ac68 <atan>
 800a0cc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a0d0:	f006 0602 	and.w	r6, r6, #2
 800a0d4:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a0d8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a0dc:	d107      	bne.n	800a0ee <__ieee754_atan2+0x7e>
 800a0de:	2e02      	cmp	r6, #2
 800a0e0:	d064      	beq.n	800a1ac <__ieee754_atan2+0x13c>
 800a0e2:	2e03      	cmp	r6, #3
 800a0e4:	d066      	beq.n	800a1b4 <__ieee754_atan2+0x144>
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	4317      	orrs	r7, r2
 800a0f0:	d106      	bne.n	800a100 <__ieee754_atan2+0x90>
 800a0f2:	f1be 0f00 	cmp.w	lr, #0
 800a0f6:	da68      	bge.n	800a1ca <__ieee754_atan2+0x15a>
 800a0f8:	a537      	add	r5, pc, #220	@ (adr r5, 800a1d8 <__ieee754_atan2+0x168>)
 800a0fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0fe:	e7f2      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a100:	4552      	cmp	r2, sl
 800a102:	d10f      	bne.n	800a124 <__ieee754_atan2+0xb4>
 800a104:	4293      	cmp	r3, r2
 800a106:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800a10a:	d107      	bne.n	800a11c <__ieee754_atan2+0xac>
 800a10c:	2e02      	cmp	r6, #2
 800a10e:	d855      	bhi.n	800a1bc <__ieee754_atan2+0x14c>
 800a110:	4b3e      	ldr	r3, [pc, #248]	@ (800a20c <__ieee754_atan2+0x19c>)
 800a112:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a11a:	e7e4      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a11c:	2e02      	cmp	r6, #2
 800a11e:	d851      	bhi.n	800a1c4 <__ieee754_atan2+0x154>
 800a120:	4b3b      	ldr	r3, [pc, #236]	@ (800a210 <__ieee754_atan2+0x1a0>)
 800a122:	e7f6      	b.n	800a112 <__ieee754_atan2+0xa2>
 800a124:	4553      	cmp	r3, sl
 800a126:	d0e4      	beq.n	800a0f2 <__ieee754_atan2+0x82>
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a12e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a132:	da21      	bge.n	800a178 <__ieee754_atan2+0x108>
 800a134:	f1b9 0f00 	cmp.w	r9, #0
 800a138:	da01      	bge.n	800a13e <__ieee754_atan2+0xce>
 800a13a:	323c      	adds	r2, #60	@ 0x3c
 800a13c:	db20      	blt.n	800a180 <__ieee754_atan2+0x110>
 800a13e:	4642      	mov	r2, r8
 800a140:	464b      	mov	r3, r9
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	f7f6 faf1 	bl	800072c <__aeabi_ddiv>
 800a14a:	f000 ff1d 	bl	800af88 <fabs>
 800a14e:	f000 fd8b 	bl	800ac68 <atan>
 800a152:	4604      	mov	r4, r0
 800a154:	460d      	mov	r5, r1
 800a156:	2e01      	cmp	r6, #1
 800a158:	d015      	beq.n	800a186 <__ieee754_atan2+0x116>
 800a15a:	2e02      	cmp	r6, #2
 800a15c:	d017      	beq.n	800a18e <__ieee754_atan2+0x11e>
 800a15e:	2e00      	cmp	r6, #0
 800a160:	d0c1      	beq.n	800a0e6 <__ieee754_atan2+0x76>
 800a162:	a31f      	add	r3, pc, #124	@ (adr r3, 800a1e0 <__ieee754_atan2+0x170>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7f5 fffc 	bl	8000168 <__aeabi_dsub>
 800a170:	a31d      	add	r3, pc, #116	@ (adr r3, 800a1e8 <__ieee754_atan2+0x178>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	e016      	b.n	800a1a6 <__ieee754_atan2+0x136>
 800a178:	a51d      	add	r5, pc, #116	@ (adr r5, 800a1f0 <__ieee754_atan2+0x180>)
 800a17a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a17e:	e7ea      	b.n	800a156 <__ieee754_atan2+0xe6>
 800a180:	2400      	movs	r4, #0
 800a182:	2500      	movs	r5, #0
 800a184:	e7e7      	b.n	800a156 <__ieee754_atan2+0xe6>
 800a186:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800a18a:	461d      	mov	r5, r3
 800a18c:	e7ab      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a18e:	a314      	add	r3, pc, #80	@ (adr r3, 800a1e0 <__ieee754_atan2+0x170>)
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f5 ffe6 	bl	8000168 <__aeabi_dsub>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	a111      	add	r1, pc, #68	@ (adr r1, 800a1e8 <__ieee754_atan2+0x178>)
 800a1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a6:	f7f5 ffdf 	bl	8000168 <__aeabi_dsub>
 800a1aa:	e782      	b.n	800a0b2 <__ieee754_atan2+0x42>
 800a1ac:	a50e      	add	r5, pc, #56	@ (adr r5, 800a1e8 <__ieee754_atan2+0x178>)
 800a1ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1b2:	e798      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a1b4:	a510      	add	r5, pc, #64	@ (adr r5, 800a1f8 <__ieee754_atan2+0x188>)
 800a1b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1ba:	e794      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a1bc:	a510      	add	r5, pc, #64	@ (adr r5, 800a200 <__ieee754_atan2+0x190>)
 800a1be:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1c2:	e790      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a1c4:	2400      	movs	r4, #0
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	e78d      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a1ca:	a509      	add	r5, pc, #36	@ (adr r5, 800a1f0 <__ieee754_atan2+0x180>)
 800a1cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1d0:	e789      	b.n	800a0e6 <__ieee754_atan2+0x76>
 800a1d2:	bf00      	nop
 800a1d4:	f3af 8000 	nop.w
 800a1d8:	54442d18 	.word	0x54442d18
 800a1dc:	bff921fb 	.word	0xbff921fb
 800a1e0:	33145c07 	.word	0x33145c07
 800a1e4:	3ca1a626 	.word	0x3ca1a626
 800a1e8:	54442d18 	.word	0x54442d18
 800a1ec:	400921fb 	.word	0x400921fb
 800a1f0:	54442d18 	.word	0x54442d18
 800a1f4:	3ff921fb 	.word	0x3ff921fb
 800a1f8:	54442d18 	.word	0x54442d18
 800a1fc:	c00921fb 	.word	0xc00921fb
 800a200:	54442d18 	.word	0x54442d18
 800a204:	3fe921fb 	.word	0x3fe921fb
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	0800e4b8 	.word	0x0800e4b8
 800a210:	0800e4a0 	.word	0x0800e4a0
 800a214:	00000000 	.word	0x00000000

0800a218 <__ieee754_pow>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	b091      	sub	sp, #68	@ 0x44
 800a21e:	e9cd 2300 	strd	r2, r3, [sp]
 800a222:	468b      	mov	fp, r1
 800a224:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a228:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a22c:	4682      	mov	sl, r0
 800a22e:	ea57 0001 	orrs.w	r0, r7, r1
 800a232:	d112      	bne.n	800a25a <__ieee754_pow+0x42>
 800a234:	4653      	mov	r3, sl
 800a236:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a23a:	18db      	adds	r3, r3, r3
 800a23c:	4152      	adcs	r2, r2
 800a23e:	4298      	cmp	r0, r3
 800a240:	4b91      	ldr	r3, [pc, #580]	@ (800a488 <__ieee754_pow+0x270>)
 800a242:	4193      	sbcs	r3, r2
 800a244:	f080 84ce 	bcs.w	800abe4 <__ieee754_pow+0x9cc>
 800a248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a24c:	4650      	mov	r0, sl
 800a24e:	4659      	mov	r1, fp
 800a250:	f7f5 ff8c 	bl	800016c <__adddf3>
 800a254:	b011      	add	sp, #68	@ 0x44
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	4b8c      	ldr	r3, [pc, #560]	@ (800a48c <__ieee754_pow+0x274>)
 800a25c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a260:	429e      	cmp	r6, r3
 800a262:	465d      	mov	r5, fp
 800a264:	46d1      	mov	r9, sl
 800a266:	d807      	bhi.n	800a278 <__ieee754_pow+0x60>
 800a268:	d102      	bne.n	800a270 <__ieee754_pow+0x58>
 800a26a:	f1ba 0f00 	cmp.w	sl, #0
 800a26e:	d1eb      	bne.n	800a248 <__ieee754_pow+0x30>
 800a270:	429f      	cmp	r7, r3
 800a272:	d801      	bhi.n	800a278 <__ieee754_pow+0x60>
 800a274:	d10f      	bne.n	800a296 <__ieee754_pow+0x7e>
 800a276:	b171      	cbz	r1, 800a296 <__ieee754_pow+0x7e>
 800a278:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a27c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a280:	ea55 0509 	orrs.w	r5, r5, r9
 800a284:	d1e0      	bne.n	800a248 <__ieee754_pow+0x30>
 800a286:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a28a:	18db      	adds	r3, r3, r3
 800a28c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a290:	4152      	adcs	r2, r2
 800a292:	429d      	cmp	r5, r3
 800a294:	e7d4      	b.n	800a240 <__ieee754_pow+0x28>
 800a296:	2d00      	cmp	r5, #0
 800a298:	4633      	mov	r3, r6
 800a29a:	da39      	bge.n	800a310 <__ieee754_pow+0xf8>
 800a29c:	4a7c      	ldr	r2, [pc, #496]	@ (800a490 <__ieee754_pow+0x278>)
 800a29e:	4297      	cmp	r7, r2
 800a2a0:	d84e      	bhi.n	800a340 <__ieee754_pow+0x128>
 800a2a2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a2a6:	4297      	cmp	r7, r2
 800a2a8:	f240 84ab 	bls.w	800ac02 <__ieee754_pow+0x9ea>
 800a2ac:	153a      	asrs	r2, r7, #20
 800a2ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a2b2:	2a14      	cmp	r2, #20
 800a2b4:	dd0f      	ble.n	800a2d6 <__ieee754_pow+0xbe>
 800a2b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a2ba:	fa21 f402 	lsr.w	r4, r1, r2
 800a2be:	fa04 f202 	lsl.w	r2, r4, r2
 800a2c2:	428a      	cmp	r2, r1
 800a2c4:	f040 849d 	bne.w	800ac02 <__ieee754_pow+0x9ea>
 800a2c8:	f004 0401 	and.w	r4, r4, #1
 800a2cc:	f1c4 0402 	rsb	r4, r4, #2
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	d15a      	bne.n	800a38a <__ieee754_pow+0x172>
 800a2d4:	e00e      	b.n	800a2f4 <__ieee754_pow+0xdc>
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	d156      	bne.n	800a388 <__ieee754_pow+0x170>
 800a2da:	f1c2 0214 	rsb	r2, r2, #20
 800a2de:	fa47 f402 	asr.w	r4, r7, r2
 800a2e2:	fa04 f202 	lsl.w	r2, r4, r2
 800a2e6:	42ba      	cmp	r2, r7
 800a2e8:	f040 8488 	bne.w	800abfc <__ieee754_pow+0x9e4>
 800a2ec:	f004 0401 	and.w	r4, r4, #1
 800a2f0:	f1c4 0402 	rsb	r4, r4, #2
 800a2f4:	4a67      	ldr	r2, [pc, #412]	@ (800a494 <__ieee754_pow+0x27c>)
 800a2f6:	4297      	cmp	r7, r2
 800a2f8:	d130      	bne.n	800a35c <__ieee754_pow+0x144>
 800a2fa:	f1b8 0f00 	cmp.w	r8, #0
 800a2fe:	f280 8479 	bge.w	800abf4 <__ieee754_pow+0x9dc>
 800a302:	4652      	mov	r2, sl
 800a304:	465b      	mov	r3, fp
 800a306:	2000      	movs	r0, #0
 800a308:	4962      	ldr	r1, [pc, #392]	@ (800a494 <__ieee754_pow+0x27c>)
 800a30a:	f7f6 fa0f 	bl	800072c <__aeabi_ddiv>
 800a30e:	e7a1      	b.n	800a254 <__ieee754_pow+0x3c>
 800a310:	2400      	movs	r4, #0
 800a312:	2900      	cmp	r1, #0
 800a314:	d139      	bne.n	800a38a <__ieee754_pow+0x172>
 800a316:	4a5d      	ldr	r2, [pc, #372]	@ (800a48c <__ieee754_pow+0x274>)
 800a318:	4297      	cmp	r7, r2
 800a31a:	d1eb      	bne.n	800a2f4 <__ieee754_pow+0xdc>
 800a31c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a320:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a324:	ea53 0309 	orrs.w	r3, r3, r9
 800a328:	f000 845c 	beq.w	800abe4 <__ieee754_pow+0x9cc>
 800a32c:	4b5a      	ldr	r3, [pc, #360]	@ (800a498 <__ieee754_pow+0x280>)
 800a32e:	429e      	cmp	r6, r3
 800a330:	d908      	bls.n	800a344 <__ieee754_pow+0x12c>
 800a332:	f1b8 0f00 	cmp.w	r8, #0
 800a336:	f2c0 8459 	blt.w	800abec <__ieee754_pow+0x9d4>
 800a33a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a33e:	e789      	b.n	800a254 <__ieee754_pow+0x3c>
 800a340:	2402      	movs	r4, #2
 800a342:	e7e6      	b.n	800a312 <__ieee754_pow+0xfa>
 800a344:	f1b8 0f00 	cmp.w	r8, #0
 800a348:	f04f 0000 	mov.w	r0, #0
 800a34c:	f04f 0100 	mov.w	r1, #0
 800a350:	da80      	bge.n	800a254 <__ieee754_pow+0x3c>
 800a352:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a356:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a35a:	e77b      	b.n	800a254 <__ieee754_pow+0x3c>
 800a35c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a360:	d106      	bne.n	800a370 <__ieee754_pow+0x158>
 800a362:	4652      	mov	r2, sl
 800a364:	465b      	mov	r3, fp
 800a366:	4650      	mov	r0, sl
 800a368:	4659      	mov	r1, fp
 800a36a:	f7f6 f8b5 	bl	80004d8 <__aeabi_dmul>
 800a36e:	e771      	b.n	800a254 <__ieee754_pow+0x3c>
 800a370:	4a4a      	ldr	r2, [pc, #296]	@ (800a49c <__ieee754_pow+0x284>)
 800a372:	4590      	cmp	r8, r2
 800a374:	d109      	bne.n	800a38a <__ieee754_pow+0x172>
 800a376:	2d00      	cmp	r5, #0
 800a378:	db07      	blt.n	800a38a <__ieee754_pow+0x172>
 800a37a:	4650      	mov	r0, sl
 800a37c:	4659      	mov	r1, fp
 800a37e:	b011      	add	sp, #68	@ 0x44
 800a380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	f7ff bd9c 	b.w	8009ec0 <__ieee754_sqrt>
 800a388:	2400      	movs	r4, #0
 800a38a:	4650      	mov	r0, sl
 800a38c:	4659      	mov	r1, fp
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	f000 fdfa 	bl	800af88 <fabs>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	f1b9 0f00 	cmp.w	r9, #0
 800a39a:	d127      	bne.n	800a3ec <__ieee754_pow+0x1d4>
 800a39c:	4a3d      	ldr	r2, [pc, #244]	@ (800a494 <__ieee754_pow+0x27c>)
 800a39e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a3a2:	4594      	cmp	ip, r2
 800a3a4:	d000      	beq.n	800a3a8 <__ieee754_pow+0x190>
 800a3a6:	bb0e      	cbnz	r6, 800a3ec <__ieee754_pow+0x1d4>
 800a3a8:	f1b8 0f00 	cmp.w	r8, #0
 800a3ac:	da05      	bge.n	800a3ba <__ieee754_pow+0x1a2>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	4937      	ldr	r1, [pc, #220]	@ (800a494 <__ieee754_pow+0x27c>)
 800a3b6:	f7f6 f9b9 	bl	800072c <__aeabi_ddiv>
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	f6bf af4a 	bge.w	800a254 <__ieee754_pow+0x3c>
 800a3c0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a3c4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a3c8:	4326      	orrs	r6, r4
 800a3ca:	d108      	bne.n	800a3de <__ieee754_pow+0x1c6>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f7f5 fec8 	bl	8000168 <__aeabi_dsub>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	e795      	b.n	800a30a <__ieee754_pow+0xf2>
 800a3de:	2c01      	cmp	r4, #1
 800a3e0:	f47f af38 	bne.w	800a254 <__ieee754_pow+0x3c>
 800a3e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	e733      	b.n	800a254 <__ieee754_pow+0x3c>
 800a3ec:	0fea      	lsrs	r2, r5, #31
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	ea52 0c04 	orrs.w	ip, r2, r4
 800a3f4:	d102      	bne.n	800a3fc <__ieee754_pow+0x1e4>
 800a3f6:	4652      	mov	r2, sl
 800a3f8:	465b      	mov	r3, fp
 800a3fa:	e7e9      	b.n	800a3d0 <__ieee754_pow+0x1b8>
 800a3fc:	f04f 0900 	mov.w	r9, #0
 800a400:	3c01      	subs	r4, #1
 800a402:	4314      	orrs	r4, r2
 800a404:	bf14      	ite	ne
 800a406:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a494 <__ieee754_pow+0x27c>
 800a40a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a4a0 <__ieee754_pow+0x288>
 800a40e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a412:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a416:	f240 8107 	bls.w	800a628 <__ieee754_pow+0x410>
 800a41a:	4b22      	ldr	r3, [pc, #136]	@ (800a4a4 <__ieee754_pow+0x28c>)
 800a41c:	429f      	cmp	r7, r3
 800a41e:	4b1e      	ldr	r3, [pc, #120]	@ (800a498 <__ieee754_pow+0x280>)
 800a420:	d913      	bls.n	800a44a <__ieee754_pow+0x232>
 800a422:	429e      	cmp	r6, r3
 800a424:	d808      	bhi.n	800a438 <__ieee754_pow+0x220>
 800a426:	f1b8 0f00 	cmp.w	r8, #0
 800a42a:	da08      	bge.n	800a43e <__ieee754_pow+0x226>
 800a42c:	2000      	movs	r0, #0
 800a42e:	b011      	add	sp, #68	@ 0x44
 800a430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	f000 be44 	b.w	800b0c0 <__math_oflow>
 800a438:	f1b8 0f00 	cmp.w	r8, #0
 800a43c:	dcf6      	bgt.n	800a42c <__ieee754_pow+0x214>
 800a43e:	2000      	movs	r0, #0
 800a440:	b011      	add	sp, #68	@ 0x44
 800a442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a446:	f000 be36 	b.w	800b0b6 <__math_uflow>
 800a44a:	429e      	cmp	r6, r3
 800a44c:	d20c      	bcs.n	800a468 <__ieee754_pow+0x250>
 800a44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	f7f6 fab1 	bl	80009bc <__aeabi_dcmplt>
 800a45a:	3800      	subs	r0, #0
 800a45c:	bf18      	it	ne
 800a45e:	2001      	movne	r0, #1
 800a460:	f1b8 0f00 	cmp.w	r8, #0
 800a464:	daec      	bge.n	800a440 <__ieee754_pow+0x228>
 800a466:	e7e2      	b.n	800a42e <__ieee754_pow+0x216>
 800a468:	4b0a      	ldr	r3, [pc, #40]	@ (800a494 <__ieee754_pow+0x27c>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	429e      	cmp	r6, r3
 800a46e:	d91b      	bls.n	800a4a8 <__ieee754_pow+0x290>
 800a470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a474:	2300      	movs	r3, #0
 800a476:	f7f6 faa1 	bl	80009bc <__aeabi_dcmplt>
 800a47a:	3800      	subs	r0, #0
 800a47c:	bf18      	it	ne
 800a47e:	2001      	movne	r0, #1
 800a480:	f1b8 0f00 	cmp.w	r8, #0
 800a484:	dcd3      	bgt.n	800a42e <__ieee754_pow+0x216>
 800a486:	e7db      	b.n	800a440 <__ieee754_pow+0x228>
 800a488:	fff00000 	.word	0xfff00000
 800a48c:	7ff00000 	.word	0x7ff00000
 800a490:	433fffff 	.word	0x433fffff
 800a494:	3ff00000 	.word	0x3ff00000
 800a498:	3fefffff 	.word	0x3fefffff
 800a49c:	3fe00000 	.word	0x3fe00000
 800a4a0:	bff00000 	.word	0xbff00000
 800a4a4:	43f00000 	.word	0x43f00000
 800a4a8:	4b5b      	ldr	r3, [pc, #364]	@ (800a618 <__ieee754_pow+0x400>)
 800a4aa:	f7f5 fe5d 	bl	8000168 <__aeabi_dsub>
 800a4ae:	a352      	add	r3, pc, #328	@ (adr r3, 800a5f8 <__ieee754_pow+0x3e0>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	460d      	mov	r5, r1
 800a4b8:	f7f6 f80e 	bl	80004d8 <__aeabi_dmul>
 800a4bc:	a350      	add	r3, pc, #320	@ (adr r3, 800a600 <__ieee754_pow+0x3e8>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f6 f805 	bl	80004d8 <__aeabi_dmul>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	468b      	mov	fp, r1
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4b50      	ldr	r3, [pc, #320]	@ (800a61c <__ieee754_pow+0x404>)
 800a4da:	f7f5 fffd 	bl	80004d8 <__aeabi_dmul>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	a149      	add	r1, pc, #292	@ (adr r1, 800a608 <__ieee754_pow+0x3f0>)
 800a4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4e8:	f7f5 fe3e 	bl	8000168 <__aeabi_dsub>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	f7f5 fff2 	bl	80004d8 <__aeabi_dmul>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	4949      	ldr	r1, [pc, #292]	@ (800a620 <__ieee754_pow+0x408>)
 800a4fc:	f7f5 fe34 	bl	8000168 <__aeabi_dsub>
 800a500:	4622      	mov	r2, r4
 800a502:	4680      	mov	r8, r0
 800a504:	4689      	mov	r9, r1
 800a506:	462b      	mov	r3, r5
 800a508:	4620      	mov	r0, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7f5 ffe4 	bl	80004d8 <__aeabi_dmul>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4640      	mov	r0, r8
 800a516:	4649      	mov	r1, r9
 800a518:	f7f5 ffde 	bl	80004d8 <__aeabi_dmul>
 800a51c:	a33c      	add	r3, pc, #240	@ (adr r3, 800a610 <__ieee754_pow+0x3f8>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	f7f5 ffd9 	bl	80004d8 <__aeabi_dmul>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4650      	mov	r0, sl
 800a52c:	4659      	mov	r1, fp
 800a52e:	f7f5 fe1b 	bl	8000168 <__aeabi_dsub>
 800a532:	2400      	movs	r4, #0
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4680      	mov	r8, r0
 800a53a:	4689      	mov	r9, r1
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f5 fe14 	bl	800016c <__adddf3>
 800a544:	4632      	mov	r2, r6
 800a546:	463b      	mov	r3, r7
 800a548:	4620      	mov	r0, r4
 800a54a:	460d      	mov	r5, r1
 800a54c:	f7f5 fe0c 	bl	8000168 <__aeabi_dsub>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 fe06 	bl	8000168 <__aeabi_dsub>
 800a55c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a560:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a564:	2300      	movs	r3, #0
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a574:	4652      	mov	r2, sl
 800a576:	465b      	mov	r3, fp
 800a578:	f7f5 fdf6 	bl	8000168 <__aeabi_dsub>
 800a57c:	4622      	mov	r2, r4
 800a57e:	462b      	mov	r3, r5
 800a580:	f7f5 ffaa 	bl	80004d8 <__aeabi_dmul>
 800a584:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a588:	4680      	mov	r8, r0
 800a58a:	4689      	mov	r9, r1
 800a58c:	4630      	mov	r0, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	f7f5 ffa2 	bl	80004d8 <__aeabi_dmul>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f5 fde6 	bl	800016c <__adddf3>
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	465b      	mov	r3, fp
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f5 ff94 	bl	80004d8 <__aeabi_dmul>
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4689      	mov	r9, r1
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f5 fdd6 	bl	800016c <__adddf3>
 800a5c0:	4b18      	ldr	r3, [pc, #96]	@ (800a624 <__ieee754_pow+0x40c>)
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4299      	cmp	r1, r3
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	468a      	mov	sl, r1
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	f340 82e0 	ble.w	800ab90 <__ieee754_pow+0x978>
 800a5d0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a5d4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a5d8:	4303      	orrs	r3, r0
 800a5da:	f000 81df 	beq.w	800a99c <__ieee754_pow+0x784>
 800a5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f7f6 f9e9 	bl	80009bc <__aeabi_dcmplt>
 800a5ea:	3800      	subs	r0, #0
 800a5ec:	bf18      	it	ne
 800a5ee:	2001      	movne	r0, #1
 800a5f0:	e71d      	b.n	800a42e <__ieee754_pow+0x216>
 800a5f2:	bf00      	nop
 800a5f4:	f3af 8000 	nop.w
 800a5f8:	60000000 	.word	0x60000000
 800a5fc:	3ff71547 	.word	0x3ff71547
 800a600:	f85ddf44 	.word	0xf85ddf44
 800a604:	3e54ae0b 	.word	0x3e54ae0b
 800a608:	55555555 	.word	0x55555555
 800a60c:	3fd55555 	.word	0x3fd55555
 800a610:	652b82fe 	.word	0x652b82fe
 800a614:	3ff71547 	.word	0x3ff71547
 800a618:	3ff00000 	.word	0x3ff00000
 800a61c:	3fd00000 	.word	0x3fd00000
 800a620:	3fe00000 	.word	0x3fe00000
 800a624:	408fffff 	.word	0x408fffff
 800a628:	4ad3      	ldr	r2, [pc, #844]	@ (800a978 <__ieee754_pow+0x760>)
 800a62a:	402a      	ands	r2, r5
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	f040 817a 	bne.w	800a926 <__ieee754_pow+0x70e>
 800a632:	4bd2      	ldr	r3, [pc, #840]	@ (800a97c <__ieee754_pow+0x764>)
 800a634:	2200      	movs	r2, #0
 800a636:	f7f5 ff4f 	bl	80004d8 <__aeabi_dmul>
 800a63a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a63e:	460b      	mov	r3, r1
 800a640:	151a      	asrs	r2, r3, #20
 800a642:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a646:	4422      	add	r2, r4
 800a648:	920a      	str	r2, [sp, #40]	@ 0x28
 800a64a:	4acd      	ldr	r2, [pc, #820]	@ (800a980 <__ieee754_pow+0x768>)
 800a64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a650:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a654:	4293      	cmp	r3, r2
 800a656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a65a:	dd08      	ble.n	800a66e <__ieee754_pow+0x456>
 800a65c:	4ac9      	ldr	r2, [pc, #804]	@ (800a984 <__ieee754_pow+0x76c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	f340 8163 	ble.w	800a92a <__ieee754_pow+0x712>
 800a664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a666:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a66a:	3301      	adds	r3, #1
 800a66c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a66e:	2600      	movs	r6, #0
 800a670:	00f3      	lsls	r3, r6, #3
 800a672:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a674:	4bc4      	ldr	r3, [pc, #784]	@ (800a988 <__ieee754_pow+0x770>)
 800a676:	4629      	mov	r1, r5
 800a678:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a67c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a680:	461a      	mov	r2, r3
 800a682:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a686:	4623      	mov	r3, r4
 800a688:	4682      	mov	sl, r0
 800a68a:	f7f5 fd6d 	bl	8000168 <__aeabi_dsub>
 800a68e:	4652      	mov	r2, sl
 800a690:	462b      	mov	r3, r5
 800a692:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a69a:	f7f5 fd67 	bl	800016c <__adddf3>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	49b9      	ldr	r1, [pc, #740]	@ (800a98c <__ieee754_pow+0x774>)
 800a6a6:	f7f6 f841 	bl	800072c <__aeabi_ddiv>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a6b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6b6:	f7f5 ff0f 	bl	80004d8 <__aeabi_dmul>
 800a6ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a6c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	46ab      	mov	fp, r5
 800a6cc:	106d      	asrs	r5, r5, #1
 800a6ce:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a6d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a6dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	461d      	mov	r5, r3
 800a6e8:	f7f5 fef6 	bl	80004d8 <__aeabi_dmul>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6f4:	f7f5 fd38 	bl	8000168 <__aeabi_dsub>
 800a6f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	460f      	mov	r7, r1
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fd30 	bl	8000168 <__aeabi_dsub>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4650      	mov	r0, sl
 800a70e:	4659      	mov	r1, fp
 800a710:	f7f5 fd2a 	bl	8000168 <__aeabi_dsub>
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	f7f5 fede 	bl	80004d8 <__aeabi_dmul>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4630      	mov	r0, r6
 800a722:	4639      	mov	r1, r7
 800a724:	f7f5 fd20 	bl	8000168 <__aeabi_dsub>
 800a728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a72c:	f7f5 fed4 	bl	80004d8 <__aeabi_dmul>
 800a730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a734:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a738:	4610      	mov	r0, r2
 800a73a:	4619      	mov	r1, r3
 800a73c:	f7f5 fecc 	bl	80004d8 <__aeabi_dmul>
 800a740:	a37b      	add	r3, pc, #492	@ (adr r3, 800a930 <__ieee754_pow+0x718>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7f5 fec5 	bl	80004d8 <__aeabi_dmul>
 800a74e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a938 <__ieee754_pow+0x720>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7f5 fd0a 	bl	800016c <__adddf3>
 800a758:	4622      	mov	r2, r4
 800a75a:	462b      	mov	r3, r5
 800a75c:	f7f5 febc 	bl	80004d8 <__aeabi_dmul>
 800a760:	a377      	add	r3, pc, #476	@ (adr r3, 800a940 <__ieee754_pow+0x728>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 fd01 	bl	800016c <__adddf3>
 800a76a:	4622      	mov	r2, r4
 800a76c:	462b      	mov	r3, r5
 800a76e:	f7f5 feb3 	bl	80004d8 <__aeabi_dmul>
 800a772:	a375      	add	r3, pc, #468	@ (adr r3, 800a948 <__ieee754_pow+0x730>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fcf8 	bl	800016c <__adddf3>
 800a77c:	4622      	mov	r2, r4
 800a77e:	462b      	mov	r3, r5
 800a780:	f7f5 feaa 	bl	80004d8 <__aeabi_dmul>
 800a784:	a372      	add	r3, pc, #456	@ (adr r3, 800a950 <__ieee754_pow+0x738>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fcef 	bl	800016c <__adddf3>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 fea1 	bl	80004d8 <__aeabi_dmul>
 800a796:	a370      	add	r3, pc, #448	@ (adr r3, 800a958 <__ieee754_pow+0x740>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fce6 	bl	800016c <__adddf3>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	460f      	mov	r7, r1
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7f5 fe94 	bl	80004d8 <__aeabi_dmul>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	4639      	mov	r1, r7
 800a7b8:	f7f5 fe8e 	bl	80004d8 <__aeabi_dmul>
 800a7bc:	4604      	mov	r4, r0
 800a7be:	460d      	mov	r5, r1
 800a7c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7c4:	4642      	mov	r2, r8
 800a7c6:	464b      	mov	r3, r9
 800a7c8:	f7f5 fcd0 	bl	800016c <__adddf3>
 800a7cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7d0:	f7f5 fe82 	bl	80004d8 <__aeabi_dmul>
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	462b      	mov	r3, r5
 800a7d8:	f7f5 fcc8 	bl	800016c <__adddf3>
 800a7dc:	4642      	mov	r2, r8
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	f7f5 fe76 	bl	80004d8 <__aeabi_dmul>
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4b68      	ldr	r3, [pc, #416]	@ (800a990 <__ieee754_pow+0x778>)
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	f7f5 fcba 	bl	800016c <__adddf3>
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	465b      	mov	r3, fp
 800a7fc:	f7f5 fcb6 	bl	800016c <__adddf3>
 800a800:	2400      	movs	r4, #0
 800a802:	460d      	mov	r5, r1
 800a804:	4622      	mov	r2, r4
 800a806:	460b      	mov	r3, r1
 800a808:	4640      	mov	r0, r8
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f5 fe64 	bl	80004d8 <__aeabi_dmul>
 800a810:	2200      	movs	r2, #0
 800a812:	4680      	mov	r8, r0
 800a814:	4689      	mov	r9, r1
 800a816:	4620      	mov	r0, r4
 800a818:	4629      	mov	r1, r5
 800a81a:	4b5d      	ldr	r3, [pc, #372]	@ (800a990 <__ieee754_pow+0x778>)
 800a81c:	f7f5 fca4 	bl	8000168 <__aeabi_dsub>
 800a820:	4632      	mov	r2, r6
 800a822:	463b      	mov	r3, r7
 800a824:	f7f5 fca0 	bl	8000168 <__aeabi_dsub>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4650      	mov	r0, sl
 800a82e:	4659      	mov	r1, fp
 800a830:	f7f5 fc9a 	bl	8000168 <__aeabi_dsub>
 800a834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a838:	f7f5 fe4e 	bl	80004d8 <__aeabi_dmul>
 800a83c:	4622      	mov	r2, r4
 800a83e:	4606      	mov	r6, r0
 800a840:	460f      	mov	r7, r1
 800a842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a846:	462b      	mov	r3, r5
 800a848:	f7f5 fe46 	bl	80004d8 <__aeabi_dmul>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	2400      	movs	r4, #0
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4640      	mov	r0, r8
 800a864:	4649      	mov	r1, r9
 800a866:	f7f5 fc81 	bl	800016c <__adddf3>
 800a86a:	a33d      	add	r3, pc, #244	@ (adr r3, 800a960 <__ieee754_pow+0x748>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	4620      	mov	r0, r4
 800a872:	460d      	mov	r5, r1
 800a874:	f7f5 fe30 	bl	80004d8 <__aeabi_dmul>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a880:	4620      	mov	r0, r4
 800a882:	4629      	mov	r1, r5
 800a884:	f7f5 fc70 	bl	8000168 <__aeabi_dsub>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f5 fc6a 	bl	8000168 <__aeabi_dsub>
 800a894:	a334      	add	r3, pc, #208	@ (adr r3, 800a968 <__ieee754_pow+0x750>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	a334      	add	r3, pc, #208	@ (adr r3, 800a970 <__ieee754_pow+0x758>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460f      	mov	r7, r1
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 fe14 	bl	80004d8 <__aeabi_dmul>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f7f5 fc58 	bl	800016c <__adddf3>
 800a8bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8be:	4b35      	ldr	r3, [pc, #212]	@ (800a994 <__ieee754_pow+0x77c>)
 800a8c0:	2400      	movs	r4, #0
 800a8c2:	4413      	add	r3, r2
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fc50 	bl	800016c <__adddf3>
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8d0:	468b      	mov	fp, r1
 800a8d2:	f7f5 fd97 	bl	8000404 <__aeabi_i2d>
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	460f      	mov	r7, r1
 800a8da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8dc:	4b2e      	ldr	r3, [pc, #184]	@ (800a998 <__ieee754_pow+0x780>)
 800a8de:	4413      	add	r3, r2
 800a8e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8e4:	4652      	mov	r2, sl
 800a8e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8ea:	465b      	mov	r3, fp
 800a8ec:	f7f5 fc3e 	bl	800016c <__adddf3>
 800a8f0:	4642      	mov	r2, r8
 800a8f2:	464b      	mov	r3, r9
 800a8f4:	f7f5 fc3a 	bl	800016c <__adddf3>
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	f7f5 fc36 	bl	800016c <__adddf3>
 800a900:	4632      	mov	r2, r6
 800a902:	463b      	mov	r3, r7
 800a904:	4620      	mov	r0, r4
 800a906:	460d      	mov	r5, r1
 800a908:	f7f5 fc2e 	bl	8000168 <__aeabi_dsub>
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	f7f5 fc2a 	bl	8000168 <__aeabi_dsub>
 800a914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a918:	f7f5 fc26 	bl	8000168 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4650      	mov	r0, sl
 800a922:	4659      	mov	r1, fp
 800a924:	e618      	b.n	800a558 <__ieee754_pow+0x340>
 800a926:	2400      	movs	r4, #0
 800a928:	e68a      	b.n	800a640 <__ieee754_pow+0x428>
 800a92a:	2601      	movs	r6, #1
 800a92c:	e6a0      	b.n	800a670 <__ieee754_pow+0x458>
 800a92e:	bf00      	nop
 800a930:	4a454eef 	.word	0x4a454eef
 800a934:	3fca7e28 	.word	0x3fca7e28
 800a938:	93c9db65 	.word	0x93c9db65
 800a93c:	3fcd864a 	.word	0x3fcd864a
 800a940:	a91d4101 	.word	0xa91d4101
 800a944:	3fd17460 	.word	0x3fd17460
 800a948:	518f264d 	.word	0x518f264d
 800a94c:	3fd55555 	.word	0x3fd55555
 800a950:	db6fabff 	.word	0xdb6fabff
 800a954:	3fdb6db6 	.word	0x3fdb6db6
 800a958:	33333303 	.word	0x33333303
 800a95c:	3fe33333 	.word	0x3fe33333
 800a960:	e0000000 	.word	0xe0000000
 800a964:	3feec709 	.word	0x3feec709
 800a968:	dc3a03fd 	.word	0xdc3a03fd
 800a96c:	3feec709 	.word	0x3feec709
 800a970:	145b01f5 	.word	0x145b01f5
 800a974:	be3e2fe0 	.word	0xbe3e2fe0
 800a978:	7ff00000 	.word	0x7ff00000
 800a97c:	43400000 	.word	0x43400000
 800a980:	0003988e 	.word	0x0003988e
 800a984:	000bb679 	.word	0x000bb679
 800a988:	0800e4f0 	.word	0x0800e4f0
 800a98c:	3ff00000 	.word	0x3ff00000
 800a990:	40080000 	.word	0x40080000
 800a994:	0800e4d0 	.word	0x0800e4d0
 800a998:	0800e4e0 	.word	0x0800e4e0
 800a99c:	a39a      	add	r3, pc, #616	@ (adr r3, 800ac08 <__ieee754_pow+0x9f0>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fbe1 	bl	800016c <__adddf3>
 800a9aa:	4642      	mov	r2, r8
 800a9ac:	e9cd 0100 	strd	r0, r1, [sp]
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	f7f5 fbd7 	bl	8000168 <__aeabi_dsub>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9c2:	f7f6 f819 	bl	80009f8 <__aeabi_dcmpgt>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	f47f ae09 	bne.w	800a5de <__ieee754_pow+0x3c6>
 800a9cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a9d0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a9d4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a9d8:	fa43 fa0a 	asr.w	sl, r3, sl
 800a9dc:	44da      	add	sl, fp
 800a9de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a9e2:	489b      	ldr	r0, [pc, #620]	@ (800ac50 <__ieee754_pow+0xa38>)
 800a9e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a9e8:	4108      	asrs	r0, r1
 800a9ea:	ea00 030a 	and.w	r3, r0, sl
 800a9ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a9f2:	f1c1 0114 	rsb	r1, r1, #20
 800a9f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	fa4a fa01 	asr.w	sl, sl, r1
 800aa00:	f1bb 0f00 	cmp.w	fp, #0
 800aa04:	4649      	mov	r1, r9
 800aa06:	f04f 0200 	mov.w	r2, #0
 800aa0a:	bfb8      	it	lt
 800aa0c:	f1ca 0a00 	rsblt	sl, sl, #0
 800aa10:	f7f5 fbaa 	bl	8000168 <__aeabi_dsub>
 800aa14:	4680      	mov	r8, r0
 800aa16:	4689      	mov	r9, r1
 800aa18:	2400      	movs	r4, #0
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	4640      	mov	r0, r8
 800aa20:	4649      	mov	r1, r9
 800aa22:	f7f5 fba3 	bl	800016c <__adddf3>
 800aa26:	a37a      	add	r3, pc, #488	@ (adr r3, 800ac10 <__ieee754_pow+0x9f8>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	460d      	mov	r5, r1
 800aa30:	f7f5 fd52 	bl	80004d8 <__aeabi_dmul>
 800aa34:	4642      	mov	r2, r8
 800aa36:	464b      	mov	r3, r9
 800aa38:	e9cd 0100 	strd	r0, r1, [sp]
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fb92 	bl	8000168 <__aeabi_dsub>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fb8c 	bl	8000168 <__aeabi_dsub>
 800aa50:	a371      	add	r3, pc, #452	@ (adr r3, 800ac18 <__ieee754_pow+0xa00>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 fd3f 	bl	80004d8 <__aeabi_dmul>
 800aa5a:	a371      	add	r3, pc, #452	@ (adr r3, 800ac20 <__ieee754_pow+0xa08>)
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	4680      	mov	r8, r0
 800aa62:	4689      	mov	r9, r1
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f5 fd36 	bl	80004d8 <__aeabi_dmul>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4640      	mov	r0, r8
 800aa72:	4649      	mov	r1, r9
 800aa74:	f7f5 fb7a 	bl	800016c <__adddf3>
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa84:	f7f5 fb72 	bl	800016c <__adddf3>
 800aa88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa8c:	4680      	mov	r8, r0
 800aa8e:	4689      	mov	r9, r1
 800aa90:	f7f5 fb6a 	bl	8000168 <__aeabi_dsub>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f7f5 fb64 	bl	8000168 <__aeabi_dsub>
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	4649      	mov	r1, r9
 800aaac:	f7f5 fd14 	bl	80004d8 <__aeabi_dmul>
 800aab0:	a35d      	add	r3, pc, #372	@ (adr r3, 800ac28 <__ieee754_pow+0xa10>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	f7f5 fd0d 	bl	80004d8 <__aeabi_dmul>
 800aabe:	a35c      	add	r3, pc, #368	@ (adr r3, 800ac30 <__ieee754_pow+0xa18>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fb50 	bl	8000168 <__aeabi_dsub>
 800aac8:	4622      	mov	r2, r4
 800aaca:	462b      	mov	r3, r5
 800aacc:	f7f5 fd04 	bl	80004d8 <__aeabi_dmul>
 800aad0:	a359      	add	r3, pc, #356	@ (adr r3, 800ac38 <__ieee754_pow+0xa20>)
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fb49 	bl	800016c <__adddf3>
 800aada:	4622      	mov	r2, r4
 800aadc:	462b      	mov	r3, r5
 800aade:	f7f5 fcfb 	bl	80004d8 <__aeabi_dmul>
 800aae2:	a357      	add	r3, pc, #348	@ (adr r3, 800ac40 <__ieee754_pow+0xa28>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fb3e 	bl	8000168 <__aeabi_dsub>
 800aaec:	4622      	mov	r2, r4
 800aaee:	462b      	mov	r3, r5
 800aaf0:	f7f5 fcf2 	bl	80004d8 <__aeabi_dmul>
 800aaf4:	a354      	add	r3, pc, #336	@ (adr r3, 800ac48 <__ieee754_pow+0xa30>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fb37 	bl	800016c <__adddf3>
 800aafe:	4622      	mov	r2, r4
 800ab00:	462b      	mov	r3, r5
 800ab02:	f7f5 fce9 	bl	80004d8 <__aeabi_dmul>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fb2b 	bl	8000168 <__aeabi_dsub>
 800ab12:	4604      	mov	r4, r0
 800ab14:	460d      	mov	r5, r1
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fcdb 	bl	80004d8 <__aeabi_dmul>
 800ab22:	2200      	movs	r2, #0
 800ab24:	e9cd 0100 	strd	r0, r1, [sp]
 800ab28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7f5 fb1a 	bl	8000168 <__aeabi_dsub>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab3c:	f7f5 fdf6 	bl	800072c <__aeabi_ddiv>
 800ab40:	4632      	mov	r2, r6
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	463b      	mov	r3, r7
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 fcc4 	bl	80004d8 <__aeabi_dmul>
 800ab50:	4632      	mov	r2, r6
 800ab52:	463b      	mov	r3, r7
 800ab54:	f7f5 fb0a 	bl	800016c <__adddf3>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 fb02 	bl	8000168 <__aeabi_dsub>
 800ab64:	4642      	mov	r2, r8
 800ab66:	464b      	mov	r3, r9
 800ab68:	f7f5 fafe 	bl	8000168 <__aeabi_dsub>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	460b      	mov	r3, r1
 800ab70:	2000      	movs	r0, #0
 800ab72:	4938      	ldr	r1, [pc, #224]	@ (800ac54 <__ieee754_pow+0xa3c>)
 800ab74:	f7f5 faf8 	bl	8000168 <__aeabi_dsub>
 800ab78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ab7c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800ab80:	da2e      	bge.n	800abe0 <__ieee754_pow+0x9c8>
 800ab82:	4652      	mov	r2, sl
 800ab84:	f000 fa04 	bl	800af90 <scalbn>
 800ab88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab8c:	f7ff bbed 	b.w	800a36a <__ieee754_pow+0x152>
 800ab90:	4c31      	ldr	r4, [pc, #196]	@ (800ac58 <__ieee754_pow+0xa40>)
 800ab92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	d91a      	bls.n	800abd0 <__ieee754_pow+0x9b8>
 800ab9a:	4b30      	ldr	r3, [pc, #192]	@ (800ac5c <__ieee754_pow+0xa44>)
 800ab9c:	440b      	add	r3, r1
 800ab9e:	4303      	orrs	r3, r0
 800aba0:	d009      	beq.n	800abb6 <__ieee754_pow+0x99e>
 800aba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba6:	2200      	movs	r2, #0
 800aba8:	2300      	movs	r3, #0
 800abaa:	f7f5 ff07 	bl	80009bc <__aeabi_dcmplt>
 800abae:	3800      	subs	r0, #0
 800abb0:	bf18      	it	ne
 800abb2:	2001      	movne	r0, #1
 800abb4:	e444      	b.n	800a440 <__ieee754_pow+0x228>
 800abb6:	4642      	mov	r2, r8
 800abb8:	464b      	mov	r3, r9
 800abba:	f7f5 fad5 	bl	8000168 <__aeabi_dsub>
 800abbe:	4632      	mov	r2, r6
 800abc0:	463b      	mov	r3, r7
 800abc2:	f7f5 ff0f 	bl	80009e4 <__aeabi_dcmpge>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1eb      	bne.n	800aba2 <__ieee754_pow+0x98a>
 800abca:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800ac60 <__ieee754_pow+0xa48>
 800abce:	e6fd      	b.n	800a9cc <__ieee754_pow+0x7b4>
 800abd0:	469a      	mov	sl, r3
 800abd2:	4b24      	ldr	r3, [pc, #144]	@ (800ac64 <__ieee754_pow+0xa4c>)
 800abd4:	459a      	cmp	sl, r3
 800abd6:	f63f aef9 	bhi.w	800a9cc <__ieee754_pow+0x7b4>
 800abda:	f8dd a010 	ldr.w	sl, [sp, #16]
 800abde:	e71b      	b.n	800aa18 <__ieee754_pow+0x800>
 800abe0:	4621      	mov	r1, r4
 800abe2:	e7d1      	b.n	800ab88 <__ieee754_pow+0x970>
 800abe4:	2000      	movs	r0, #0
 800abe6:	491b      	ldr	r1, [pc, #108]	@ (800ac54 <__ieee754_pow+0xa3c>)
 800abe8:	f7ff bb34 	b.w	800a254 <__ieee754_pow+0x3c>
 800abec:	2000      	movs	r0, #0
 800abee:	2100      	movs	r1, #0
 800abf0:	f7ff bb30 	b.w	800a254 <__ieee754_pow+0x3c>
 800abf4:	4650      	mov	r0, sl
 800abf6:	4659      	mov	r1, fp
 800abf8:	f7ff bb2c 	b.w	800a254 <__ieee754_pow+0x3c>
 800abfc:	460c      	mov	r4, r1
 800abfe:	f7ff bb79 	b.w	800a2f4 <__ieee754_pow+0xdc>
 800ac02:	2400      	movs	r4, #0
 800ac04:	f7ff bb64 	b.w	800a2d0 <__ieee754_pow+0xb8>
 800ac08:	652b82fe 	.word	0x652b82fe
 800ac0c:	3c971547 	.word	0x3c971547
 800ac10:	00000000 	.word	0x00000000
 800ac14:	3fe62e43 	.word	0x3fe62e43
 800ac18:	fefa39ef 	.word	0xfefa39ef
 800ac1c:	3fe62e42 	.word	0x3fe62e42
 800ac20:	0ca86c39 	.word	0x0ca86c39
 800ac24:	be205c61 	.word	0xbe205c61
 800ac28:	72bea4d0 	.word	0x72bea4d0
 800ac2c:	3e663769 	.word	0x3e663769
 800ac30:	c5d26bf1 	.word	0xc5d26bf1
 800ac34:	3ebbbd41 	.word	0x3ebbbd41
 800ac38:	af25de2c 	.word	0xaf25de2c
 800ac3c:	3f11566a 	.word	0x3f11566a
 800ac40:	16bebd93 	.word	0x16bebd93
 800ac44:	3f66c16c 	.word	0x3f66c16c
 800ac48:	5555553e 	.word	0x5555553e
 800ac4c:	3fc55555 	.word	0x3fc55555
 800ac50:	fff00000 	.word	0xfff00000
 800ac54:	3ff00000 	.word	0x3ff00000
 800ac58:	4090cbff 	.word	0x4090cbff
 800ac5c:	3f6f3400 	.word	0x3f6f3400
 800ac60:	4090cc00 	.word	0x4090cc00
 800ac64:	3fe00000 	.word	0x3fe00000

0800ac68 <atan>:
 800ac68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	4bbc      	ldr	r3, [pc, #752]	@ (800af60 <atan+0x2f8>)
 800ac6e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800ac72:	429e      	cmp	r6, r3
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	468b      	mov	fp, r1
 800ac7a:	d918      	bls.n	800acae <atan+0x46>
 800ac7c:	4bb9      	ldr	r3, [pc, #740]	@ (800af64 <atan+0x2fc>)
 800ac7e:	429e      	cmp	r6, r3
 800ac80:	d801      	bhi.n	800ac86 <atan+0x1e>
 800ac82:	d109      	bne.n	800ac98 <atan+0x30>
 800ac84:	b140      	cbz	r0, 800ac98 <atan+0x30>
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7f5 fa6d 	bl	800016c <__adddf3>
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	e006      	b.n	800aca6 <atan+0x3e>
 800ac98:	f1bb 0f00 	cmp.w	fp, #0
 800ac9c:	f340 8123 	ble.w	800aee6 <atan+0x27e>
 800aca0:	a593      	add	r5, pc, #588	@ (adr r5, 800aef0 <atan+0x288>)
 800aca2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aca6:	4620      	mov	r0, r4
 800aca8:	4629      	mov	r1, r5
 800acaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	4bae      	ldr	r3, [pc, #696]	@ (800af68 <atan+0x300>)
 800acb0:	429e      	cmp	r6, r3
 800acb2:	d811      	bhi.n	800acd8 <atan+0x70>
 800acb4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800acb8:	429e      	cmp	r6, r3
 800acba:	d80a      	bhi.n	800acd2 <atan+0x6a>
 800acbc:	a38e      	add	r3, pc, #568	@ (adr r3, 800aef8 <atan+0x290>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fa53 	bl	800016c <__adddf3>
 800acc6:	2200      	movs	r2, #0
 800acc8:	4ba8      	ldr	r3, [pc, #672]	@ (800af6c <atan+0x304>)
 800acca:	f7f5 fe95 	bl	80009f8 <__aeabi_dcmpgt>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d1e9      	bne.n	800aca6 <atan+0x3e>
 800acd2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800acd6:	e027      	b.n	800ad28 <atan+0xc0>
 800acd8:	f000 f956 	bl	800af88 <fabs>
 800acdc:	4ba4      	ldr	r3, [pc, #656]	@ (800af70 <atan+0x308>)
 800acde:	4604      	mov	r4, r0
 800ace0:	429e      	cmp	r6, r3
 800ace2:	460d      	mov	r5, r1
 800ace4:	f200 80b8 	bhi.w	800ae58 <atan+0x1f0>
 800ace8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800acec:	429e      	cmp	r6, r3
 800acee:	f200 809c 	bhi.w	800ae2a <atan+0x1c2>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	f7f5 fa39 	bl	800016c <__adddf3>
 800acfa:	2200      	movs	r2, #0
 800acfc:	4b9b      	ldr	r3, [pc, #620]	@ (800af6c <atan+0x304>)
 800acfe:	f7f5 fa33 	bl	8000168 <__aeabi_dsub>
 800ad02:	2200      	movs	r2, #0
 800ad04:	4606      	mov	r6, r0
 800ad06:	460f      	mov	r7, r1
 800ad08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	4629      	mov	r1, r5
 800ad10:	f7f5 fa2c 	bl	800016c <__adddf3>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fd06 	bl	800072c <__aeabi_ddiv>
 800ad20:	f04f 0a00 	mov.w	sl, #0
 800ad24:	4604      	mov	r4, r0
 800ad26:	460d      	mov	r5, r1
 800ad28:	4622      	mov	r2, r4
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fbd2 	bl	80004d8 <__aeabi_dmul>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4689      	mov	r9, r1
 800ad3c:	f7f5 fbcc 	bl	80004d8 <__aeabi_dmul>
 800ad40:	a36f      	add	r3, pc, #444	@ (adr r3, 800af00 <atan+0x298>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	f7f5 fbc5 	bl	80004d8 <__aeabi_dmul>
 800ad4e:	a36e      	add	r3, pc, #440	@ (adr r3, 800af08 <atan+0x2a0>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f7f5 fa0a 	bl	800016c <__adddf3>
 800ad58:	4632      	mov	r2, r6
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	f7f5 fbbc 	bl	80004d8 <__aeabi_dmul>
 800ad60:	a36b      	add	r3, pc, #428	@ (adr r3, 800af10 <atan+0x2a8>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fa01 	bl	800016c <__adddf3>
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	f7f5 fbb3 	bl	80004d8 <__aeabi_dmul>
 800ad72:	a369      	add	r3, pc, #420	@ (adr r3, 800af18 <atan+0x2b0>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 f9f8 	bl	800016c <__adddf3>
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	463b      	mov	r3, r7
 800ad80:	f7f5 fbaa 	bl	80004d8 <__aeabi_dmul>
 800ad84:	a366      	add	r3, pc, #408	@ (adr r3, 800af20 <atan+0x2b8>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 f9ef 	bl	800016c <__adddf3>
 800ad8e:	4632      	mov	r2, r6
 800ad90:	463b      	mov	r3, r7
 800ad92:	f7f5 fba1 	bl	80004d8 <__aeabi_dmul>
 800ad96:	a364      	add	r3, pc, #400	@ (adr r3, 800af28 <atan+0x2c0>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 f9e6 	bl	800016c <__adddf3>
 800ada0:	4642      	mov	r2, r8
 800ada2:	464b      	mov	r3, r9
 800ada4:	f7f5 fb98 	bl	80004d8 <__aeabi_dmul>
 800ada8:	a361      	add	r3, pc, #388	@ (adr r3, 800af30 <atan+0x2c8>)
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	4680      	mov	r8, r0
 800adb0:	4689      	mov	r9, r1
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 fb8f 	bl	80004d8 <__aeabi_dmul>
 800adba:	a35f      	add	r3, pc, #380	@ (adr r3, 800af38 <atan+0x2d0>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 f9d2 	bl	8000168 <__aeabi_dsub>
 800adc4:	4632      	mov	r2, r6
 800adc6:	463b      	mov	r3, r7
 800adc8:	f7f5 fb86 	bl	80004d8 <__aeabi_dmul>
 800adcc:	a35c      	add	r3, pc, #368	@ (adr r3, 800af40 <atan+0x2d8>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f7f5 f9c9 	bl	8000168 <__aeabi_dsub>
 800add6:	4632      	mov	r2, r6
 800add8:	463b      	mov	r3, r7
 800adda:	f7f5 fb7d 	bl	80004d8 <__aeabi_dmul>
 800adde:	a35a      	add	r3, pc, #360	@ (adr r3, 800af48 <atan+0x2e0>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	f7f5 f9c0 	bl	8000168 <__aeabi_dsub>
 800ade8:	4632      	mov	r2, r6
 800adea:	463b      	mov	r3, r7
 800adec:	f7f5 fb74 	bl	80004d8 <__aeabi_dmul>
 800adf0:	a357      	add	r3, pc, #348	@ (adr r3, 800af50 <atan+0x2e8>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	f7f5 f9b7 	bl	8000168 <__aeabi_dsub>
 800adfa:	4632      	mov	r2, r6
 800adfc:	463b      	mov	r3, r7
 800adfe:	f7f5 fb6b 	bl	80004d8 <__aeabi_dmul>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4640      	mov	r0, r8
 800ae08:	4649      	mov	r1, r9
 800ae0a:	f7f5 f9af 	bl	800016c <__adddf3>
 800ae0e:	4622      	mov	r2, r4
 800ae10:	462b      	mov	r3, r5
 800ae12:	f7f5 fb61 	bl	80004d8 <__aeabi_dmul>
 800ae16:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	d144      	bne.n	800aeaa <atan+0x242>
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 f9a0 	bl	8000168 <__aeabi_dsub>
 800ae28:	e733      	b.n	800ac92 <atan+0x2a>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4b4f      	ldr	r3, [pc, #316]	@ (800af6c <atan+0x304>)
 800ae2e:	f7f5 f99b 	bl	8000168 <__aeabi_dsub>
 800ae32:	2200      	movs	r2, #0
 800ae34:	4606      	mov	r6, r0
 800ae36:	460f      	mov	r7, r1
 800ae38:	4620      	mov	r0, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4b4b      	ldr	r3, [pc, #300]	@ (800af6c <atan+0x304>)
 800ae3e:	f7f5 f995 	bl	800016c <__adddf3>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 fc6f 	bl	800072c <__aeabi_ddiv>
 800ae4e:	f04f 0a01 	mov.w	sl, #1
 800ae52:	4604      	mov	r4, r0
 800ae54:	460d      	mov	r5, r1
 800ae56:	e767      	b.n	800ad28 <atan+0xc0>
 800ae58:	4b46      	ldr	r3, [pc, #280]	@ (800af74 <atan+0x30c>)
 800ae5a:	429e      	cmp	r6, r3
 800ae5c:	d21a      	bcs.n	800ae94 <atan+0x22c>
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4b45      	ldr	r3, [pc, #276]	@ (800af78 <atan+0x310>)
 800ae62:	f7f5 f981 	bl	8000168 <__aeabi_dsub>
 800ae66:	2200      	movs	r2, #0
 800ae68:	4606      	mov	r6, r0
 800ae6a:	460f      	mov	r7, r1
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4b41      	ldr	r3, [pc, #260]	@ (800af78 <atan+0x310>)
 800ae72:	f7f5 fb31 	bl	80004d8 <__aeabi_dmul>
 800ae76:	2200      	movs	r2, #0
 800ae78:	4b3c      	ldr	r3, [pc, #240]	@ (800af6c <atan+0x304>)
 800ae7a:	f7f5 f977 	bl	800016c <__adddf3>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4630      	mov	r0, r6
 800ae84:	4639      	mov	r1, r7
 800ae86:	f7f5 fc51 	bl	800072c <__aeabi_ddiv>
 800ae8a:	f04f 0a02 	mov.w	sl, #2
 800ae8e:	4604      	mov	r4, r0
 800ae90:	460d      	mov	r5, r1
 800ae92:	e749      	b.n	800ad28 <atan+0xc0>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	2000      	movs	r0, #0
 800ae9a:	4938      	ldr	r1, [pc, #224]	@ (800af7c <atan+0x314>)
 800ae9c:	f7f5 fc46 	bl	800072c <__aeabi_ddiv>
 800aea0:	f04f 0a03 	mov.w	sl, #3
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	e73e      	b.n	800ad28 <atan+0xc0>
 800aeaa:	4b35      	ldr	r3, [pc, #212]	@ (800af80 <atan+0x318>)
 800aeac:	4e35      	ldr	r6, [pc, #212]	@ (800af84 <atan+0x31c>)
 800aeae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	f7f5 f957 	bl	8000168 <__aeabi_dsub>
 800aeba:	4622      	mov	r2, r4
 800aebc:	462b      	mov	r3, r5
 800aebe:	f7f5 f953 	bl	8000168 <__aeabi_dsub>
 800aec2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aece:	f7f5 f94b 	bl	8000168 <__aeabi_dsub>
 800aed2:	f1bb 0f00 	cmp.w	fp, #0
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	f6bf aee4 	bge.w	800aca6 <atan+0x3e>
 800aede:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aee2:	461d      	mov	r5, r3
 800aee4:	e6df      	b.n	800aca6 <atan+0x3e>
 800aee6:	a51c      	add	r5, pc, #112	@ (adr r5, 800af58 <atan+0x2f0>)
 800aee8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aeec:	e6db      	b.n	800aca6 <atan+0x3e>
 800aeee:	bf00      	nop
 800aef0:	54442d18 	.word	0x54442d18
 800aef4:	3ff921fb 	.word	0x3ff921fb
 800aef8:	8800759c 	.word	0x8800759c
 800aefc:	7e37e43c 	.word	0x7e37e43c
 800af00:	e322da11 	.word	0xe322da11
 800af04:	3f90ad3a 	.word	0x3f90ad3a
 800af08:	24760deb 	.word	0x24760deb
 800af0c:	3fa97b4b 	.word	0x3fa97b4b
 800af10:	a0d03d51 	.word	0xa0d03d51
 800af14:	3fb10d66 	.word	0x3fb10d66
 800af18:	c54c206e 	.word	0xc54c206e
 800af1c:	3fb745cd 	.word	0x3fb745cd
 800af20:	920083ff 	.word	0x920083ff
 800af24:	3fc24924 	.word	0x3fc24924
 800af28:	5555550d 	.word	0x5555550d
 800af2c:	3fd55555 	.word	0x3fd55555
 800af30:	2c6a6c2f 	.word	0x2c6a6c2f
 800af34:	bfa2b444 	.word	0xbfa2b444
 800af38:	52defd9a 	.word	0x52defd9a
 800af3c:	3fadde2d 	.word	0x3fadde2d
 800af40:	af749a6d 	.word	0xaf749a6d
 800af44:	3fb3b0f2 	.word	0x3fb3b0f2
 800af48:	fe231671 	.word	0xfe231671
 800af4c:	3fbc71c6 	.word	0x3fbc71c6
 800af50:	9998ebc4 	.word	0x9998ebc4
 800af54:	3fc99999 	.word	0x3fc99999
 800af58:	54442d18 	.word	0x54442d18
 800af5c:	bff921fb 	.word	0xbff921fb
 800af60:	440fffff 	.word	0x440fffff
 800af64:	7ff00000 	.word	0x7ff00000
 800af68:	3fdbffff 	.word	0x3fdbffff
 800af6c:	3ff00000 	.word	0x3ff00000
 800af70:	3ff2ffff 	.word	0x3ff2ffff
 800af74:	40038000 	.word	0x40038000
 800af78:	3ff80000 	.word	0x3ff80000
 800af7c:	bff00000 	.word	0xbff00000
 800af80:	0800e500 	.word	0x0800e500
 800af84:	0800e520 	.word	0x0800e520

0800af88 <fabs>:
 800af88:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af8c:	4619      	mov	r1, r3
 800af8e:	4770      	bx	lr

0800af90 <scalbn>:
 800af90:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800af94:	4616      	mov	r6, r2
 800af96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800af9a:	4683      	mov	fp, r0
 800af9c:	468c      	mov	ip, r1
 800af9e:	460b      	mov	r3, r1
 800afa0:	b982      	cbnz	r2, 800afc4 <scalbn+0x34>
 800afa2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800afa6:	4303      	orrs	r3, r0
 800afa8:	d039      	beq.n	800b01e <scalbn+0x8e>
 800afaa:	4b2f      	ldr	r3, [pc, #188]	@ (800b068 <scalbn+0xd8>)
 800afac:	2200      	movs	r2, #0
 800afae:	f7f5 fa93 	bl	80004d8 <__aeabi_dmul>
 800afb2:	4b2e      	ldr	r3, [pc, #184]	@ (800b06c <scalbn+0xdc>)
 800afb4:	4683      	mov	fp, r0
 800afb6:	429e      	cmp	r6, r3
 800afb8:	468c      	mov	ip, r1
 800afba:	da0d      	bge.n	800afd8 <scalbn+0x48>
 800afbc:	a326      	add	r3, pc, #152	@ (adr r3, 800b058 <scalbn+0xc8>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	e01b      	b.n	800affc <scalbn+0x6c>
 800afc4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800afc8:	42ba      	cmp	r2, r7
 800afca:	d109      	bne.n	800afe0 <scalbn+0x50>
 800afcc:	4602      	mov	r2, r0
 800afce:	f7f5 f8cd 	bl	800016c <__adddf3>
 800afd2:	4683      	mov	fp, r0
 800afd4:	468c      	mov	ip, r1
 800afd6:	e022      	b.n	800b01e <scalbn+0x8e>
 800afd8:	460b      	mov	r3, r1
 800afda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800afde:	3a36      	subs	r2, #54	@ 0x36
 800afe0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800afe4:	428e      	cmp	r6, r1
 800afe6:	dd0c      	ble.n	800b002 <scalbn+0x72>
 800afe8:	a31d      	add	r3, pc, #116	@ (adr r3, 800b060 <scalbn+0xd0>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	461c      	mov	r4, r3
 800aff0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800aff4:	f361 74df 	bfi	r4, r1, #31, #1
 800aff8:	4621      	mov	r1, r4
 800affa:	481d      	ldr	r0, [pc, #116]	@ (800b070 <scalbn+0xe0>)
 800affc:	f7f5 fa6c 	bl	80004d8 <__aeabi_dmul>
 800b000:	e7e7      	b.n	800afd2 <scalbn+0x42>
 800b002:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b006:	4432      	add	r2, r6
 800b008:	428a      	cmp	r2, r1
 800b00a:	dced      	bgt.n	800afe8 <scalbn+0x58>
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	dd0a      	ble.n	800b026 <scalbn+0x96>
 800b010:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b014:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b018:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b01c:	46ac      	mov	ip, r5
 800b01e:	4658      	mov	r0, fp
 800b020:	4661      	mov	r1, ip
 800b022:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b026:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b02a:	da09      	bge.n	800b040 <scalbn+0xb0>
 800b02c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b030:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b034:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b038:	480e      	ldr	r0, [pc, #56]	@ (800b074 <scalbn+0xe4>)
 800b03a:	f041 011f 	orr.w	r1, r1, #31
 800b03e:	e7bd      	b.n	800afbc <scalbn+0x2c>
 800b040:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b044:	3236      	adds	r2, #54	@ 0x36
 800b046:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b04a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b04e:	4658      	mov	r0, fp
 800b050:	4629      	mov	r1, r5
 800b052:	2200      	movs	r2, #0
 800b054:	4b08      	ldr	r3, [pc, #32]	@ (800b078 <scalbn+0xe8>)
 800b056:	e7d1      	b.n	800affc <scalbn+0x6c>
 800b058:	c2f8f359 	.word	0xc2f8f359
 800b05c:	01a56e1f 	.word	0x01a56e1f
 800b060:	8800759c 	.word	0x8800759c
 800b064:	7e37e43c 	.word	0x7e37e43c
 800b068:	43500000 	.word	0x43500000
 800b06c:	ffff3cb0 	.word	0xffff3cb0
 800b070:	8800759c 	.word	0x8800759c
 800b074:	c2f8f359 	.word	0xc2f8f359
 800b078:	3c900000 	.word	0x3c900000

0800b07c <with_errno>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	4604      	mov	r4, r0
 800b080:	460d      	mov	r5, r1
 800b082:	4616      	mov	r6, r2
 800b084:	f001 f872 	bl	800c16c <__errno>
 800b088:	4629      	mov	r1, r5
 800b08a:	6006      	str	r6, [r0, #0]
 800b08c:	4620      	mov	r0, r4
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <xflow>:
 800b090:	b513      	push	{r0, r1, r4, lr}
 800b092:	4604      	mov	r4, r0
 800b094:	4619      	mov	r1, r3
 800b096:	4610      	mov	r0, r2
 800b098:	b10c      	cbz	r4, 800b09e <xflow+0xe>
 800b09a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b09e:	e9cd 2300 	strd	r2, r3, [sp]
 800b0a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0a6:	f7f5 fa17 	bl	80004d8 <__aeabi_dmul>
 800b0aa:	2222      	movs	r2, #34	@ 0x22
 800b0ac:	b002      	add	sp, #8
 800b0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b2:	f7ff bfe3 	b.w	800b07c <with_errno>

0800b0b6 <__math_uflow>:
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b0bc:	f7ff bfe8 	b.w	800b090 <xflow>

0800b0c0 <__math_oflow>:
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b0c6:	f7ff bfe3 	b.w	800b090 <xflow>
	...

0800b0cc <_free_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d040      	beq.n	800b156 <_free_r+0x8a>
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f0c      	subs	r4, r1, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfb8      	it	lt
 800b0de:	18e4      	addlt	r4, r4, r3
 800b0e0:	f000 f8e6 	bl	800b2b0 <__malloc_lock>
 800b0e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b158 <_free_r+0x8c>)
 800b0e6:	6813      	ldr	r3, [r2, #0]
 800b0e8:	b933      	cbnz	r3, 800b0f8 <_free_r+0x2c>
 800b0ea:	6063      	str	r3, [r4, #4]
 800b0ec:	6014      	str	r4, [r2, #0]
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f4:	f000 b8e2 	b.w	800b2bc <__malloc_unlock>
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	d908      	bls.n	800b10e <_free_r+0x42>
 800b0fc:	6820      	ldr	r0, [r4, #0]
 800b0fe:	1821      	adds	r1, r4, r0
 800b100:	428b      	cmp	r3, r1
 800b102:	bf01      	itttt	eq
 800b104:	6819      	ldreq	r1, [r3, #0]
 800b106:	685b      	ldreq	r3, [r3, #4]
 800b108:	1809      	addeq	r1, r1, r0
 800b10a:	6021      	streq	r1, [r4, #0]
 800b10c:	e7ed      	b.n	800b0ea <_free_r+0x1e>
 800b10e:	461a      	mov	r2, r3
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	b10b      	cbz	r3, 800b118 <_free_r+0x4c>
 800b114:	42a3      	cmp	r3, r4
 800b116:	d9fa      	bls.n	800b10e <_free_r+0x42>
 800b118:	6811      	ldr	r1, [r2, #0]
 800b11a:	1850      	adds	r0, r2, r1
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d10b      	bne.n	800b138 <_free_r+0x6c>
 800b120:	6820      	ldr	r0, [r4, #0]
 800b122:	4401      	add	r1, r0
 800b124:	1850      	adds	r0, r2, r1
 800b126:	4283      	cmp	r3, r0
 800b128:	6011      	str	r1, [r2, #0]
 800b12a:	d1e0      	bne.n	800b0ee <_free_r+0x22>
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4408      	add	r0, r1
 800b132:	6010      	str	r0, [r2, #0]
 800b134:	6053      	str	r3, [r2, #4]
 800b136:	e7da      	b.n	800b0ee <_free_r+0x22>
 800b138:	d902      	bls.n	800b140 <_free_r+0x74>
 800b13a:	230c      	movs	r3, #12
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	e7d6      	b.n	800b0ee <_free_r+0x22>
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	1821      	adds	r1, r4, r0
 800b144:	428b      	cmp	r3, r1
 800b146:	bf01      	itttt	eq
 800b148:	6819      	ldreq	r1, [r3, #0]
 800b14a:	685b      	ldreq	r3, [r3, #4]
 800b14c:	1809      	addeq	r1, r1, r0
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	6063      	str	r3, [r4, #4]
 800b152:	6054      	str	r4, [r2, #4]
 800b154:	e7cb      	b.n	800b0ee <_free_r+0x22>
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	20003de8 	.word	0x20003de8

0800b15c <malloc>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	@ (800b168 <malloc+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f000 b825 	b.w	800b1b0 <_malloc_r>
 800b166:	bf00      	nop
 800b168:	2000002c 	.word	0x2000002c

0800b16c <sbrk_aligned>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4e0f      	ldr	r6, [pc, #60]	@ (800b1ac <sbrk_aligned+0x40>)
 800b170:	460c      	mov	r4, r1
 800b172:	6831      	ldr	r1, [r6, #0]
 800b174:	4605      	mov	r5, r0
 800b176:	b911      	cbnz	r1, 800b17e <sbrk_aligned+0x12>
 800b178:	f000 ffd6 	bl	800c128 <_sbrk_r>
 800b17c:	6030      	str	r0, [r6, #0]
 800b17e:	4621      	mov	r1, r4
 800b180:	4628      	mov	r0, r5
 800b182:	f000 ffd1 	bl	800c128 <_sbrk_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d103      	bne.n	800b192 <sbrk_aligned+0x26>
 800b18a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b18e:	4620      	mov	r0, r4
 800b190:	bd70      	pop	{r4, r5, r6, pc}
 800b192:	1cc4      	adds	r4, r0, #3
 800b194:	f024 0403 	bic.w	r4, r4, #3
 800b198:	42a0      	cmp	r0, r4
 800b19a:	d0f8      	beq.n	800b18e <sbrk_aligned+0x22>
 800b19c:	1a21      	subs	r1, r4, r0
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 ffc2 	bl	800c128 <_sbrk_r>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d1f2      	bne.n	800b18e <sbrk_aligned+0x22>
 800b1a8:	e7ef      	b.n	800b18a <sbrk_aligned+0x1e>
 800b1aa:	bf00      	nop
 800b1ac:	20003de4 	.word	0x20003de4

0800b1b0 <_malloc_r>:
 800b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b4:	1ccd      	adds	r5, r1, #3
 800b1b6:	f025 0503 	bic.w	r5, r5, #3
 800b1ba:	3508      	adds	r5, #8
 800b1bc:	2d0c      	cmp	r5, #12
 800b1be:	bf38      	it	cc
 800b1c0:	250c      	movcc	r5, #12
 800b1c2:	2d00      	cmp	r5, #0
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	db01      	blt.n	800b1cc <_malloc_r+0x1c>
 800b1c8:	42a9      	cmp	r1, r5
 800b1ca:	d904      	bls.n	800b1d6 <_malloc_r+0x26>
 800b1cc:	230c      	movs	r3, #12
 800b1ce:	6033      	str	r3, [r6, #0]
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2ac <_malloc_r+0xfc>
 800b1da:	f000 f869 	bl	800b2b0 <__malloc_lock>
 800b1de:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	bb44      	cbnz	r4, 800b238 <_malloc_r+0x88>
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f7ff ffbf 	bl	800b16c <sbrk_aligned>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	d158      	bne.n	800b2a6 <_malloc_r+0xf6>
 800b1f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b1f8:	4627      	mov	r7, r4
 800b1fa:	2f00      	cmp	r7, #0
 800b1fc:	d143      	bne.n	800b286 <_malloc_r+0xd6>
 800b1fe:	2c00      	cmp	r4, #0
 800b200:	d04b      	beq.n	800b29a <_malloc_r+0xea>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	4639      	mov	r1, r7
 800b206:	4630      	mov	r0, r6
 800b208:	eb04 0903 	add.w	r9, r4, r3
 800b20c:	f000 ff8c 	bl	800c128 <_sbrk_r>
 800b210:	4581      	cmp	r9, r0
 800b212:	d142      	bne.n	800b29a <_malloc_r+0xea>
 800b214:	6821      	ldr	r1, [r4, #0]
 800b216:	4630      	mov	r0, r6
 800b218:	1a6d      	subs	r5, r5, r1
 800b21a:	4629      	mov	r1, r5
 800b21c:	f7ff ffa6 	bl	800b16c <sbrk_aligned>
 800b220:	3001      	adds	r0, #1
 800b222:	d03a      	beq.n	800b29a <_malloc_r+0xea>
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	442b      	add	r3, r5
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	f8d8 3000 	ldr.w	r3, [r8]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	bb62      	cbnz	r2, 800b28c <_malloc_r+0xdc>
 800b232:	f8c8 7000 	str.w	r7, [r8]
 800b236:	e00f      	b.n	800b258 <_malloc_r+0xa8>
 800b238:	6822      	ldr	r2, [r4, #0]
 800b23a:	1b52      	subs	r2, r2, r5
 800b23c:	d420      	bmi.n	800b280 <_malloc_r+0xd0>
 800b23e:	2a0b      	cmp	r2, #11
 800b240:	d917      	bls.n	800b272 <_malloc_r+0xc2>
 800b242:	1961      	adds	r1, r4, r5
 800b244:	42a3      	cmp	r3, r4
 800b246:	6025      	str	r5, [r4, #0]
 800b248:	bf18      	it	ne
 800b24a:	6059      	strne	r1, [r3, #4]
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	bf08      	it	eq
 800b250:	f8c8 1000 	streq.w	r1, [r8]
 800b254:	5162      	str	r2, [r4, r5]
 800b256:	604b      	str	r3, [r1, #4]
 800b258:	4630      	mov	r0, r6
 800b25a:	f000 f82f 	bl	800b2bc <__malloc_unlock>
 800b25e:	f104 000b 	add.w	r0, r4, #11
 800b262:	1d23      	adds	r3, r4, #4
 800b264:	f020 0007 	bic.w	r0, r0, #7
 800b268:	1ac2      	subs	r2, r0, r3
 800b26a:	bf1c      	itt	ne
 800b26c:	1a1b      	subne	r3, r3, r0
 800b26e:	50a3      	strne	r3, [r4, r2]
 800b270:	e7af      	b.n	800b1d2 <_malloc_r+0x22>
 800b272:	6862      	ldr	r2, [r4, #4]
 800b274:	42a3      	cmp	r3, r4
 800b276:	bf0c      	ite	eq
 800b278:	f8c8 2000 	streq.w	r2, [r8]
 800b27c:	605a      	strne	r2, [r3, #4]
 800b27e:	e7eb      	b.n	800b258 <_malloc_r+0xa8>
 800b280:	4623      	mov	r3, r4
 800b282:	6864      	ldr	r4, [r4, #4]
 800b284:	e7ae      	b.n	800b1e4 <_malloc_r+0x34>
 800b286:	463c      	mov	r4, r7
 800b288:	687f      	ldr	r7, [r7, #4]
 800b28a:	e7b6      	b.n	800b1fa <_malloc_r+0x4a>
 800b28c:	461a      	mov	r2, r3
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	42a3      	cmp	r3, r4
 800b292:	d1fb      	bne.n	800b28c <_malloc_r+0xdc>
 800b294:	2300      	movs	r3, #0
 800b296:	6053      	str	r3, [r2, #4]
 800b298:	e7de      	b.n	800b258 <_malloc_r+0xa8>
 800b29a:	230c      	movs	r3, #12
 800b29c:	4630      	mov	r0, r6
 800b29e:	6033      	str	r3, [r6, #0]
 800b2a0:	f000 f80c 	bl	800b2bc <__malloc_unlock>
 800b2a4:	e794      	b.n	800b1d0 <_malloc_r+0x20>
 800b2a6:	6005      	str	r5, [r0, #0]
 800b2a8:	e7d6      	b.n	800b258 <_malloc_r+0xa8>
 800b2aa:	bf00      	nop
 800b2ac:	20003de8 	.word	0x20003de8

0800b2b0 <__malloc_lock>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	@ (800b2b8 <__malloc_lock+0x8>)
 800b2b2:	f7f7 bcbd 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	20000804 	.word	0x20000804

0800b2bc <__malloc_unlock>:
 800b2bc:	4801      	ldr	r0, [pc, #4]	@ (800b2c4 <__malloc_unlock+0x8>)
 800b2be:	f7f7 bccc 	b.w	8002c5a <__retarget_lock_release_recursive>
 800b2c2:	bf00      	nop
 800b2c4:	20000804 	.word	0x20000804

0800b2c8 <__cvt>:
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ce:	461d      	mov	r5, r3
 800b2d0:	bfbb      	ittet	lt
 800b2d2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b2d6:	461d      	movlt	r5, r3
 800b2d8:	2300      	movge	r3, #0
 800b2da:	232d      	movlt	r3, #45	@ 0x2d
 800b2dc:	b088      	sub	sp, #32
 800b2de:	4614      	mov	r4, r2
 800b2e0:	bfb8      	it	lt
 800b2e2:	4614      	movlt	r4, r2
 800b2e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b2e6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b2e8:	7013      	strb	r3, [r2, #0]
 800b2ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b2f0:	f023 0820 	bic.w	r8, r3, #32
 800b2f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2f8:	d005      	beq.n	800b306 <__cvt+0x3e>
 800b2fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2fe:	d100      	bne.n	800b302 <__cvt+0x3a>
 800b300:	3601      	adds	r6, #1
 800b302:	2302      	movs	r3, #2
 800b304:	e000      	b.n	800b308 <__cvt+0x40>
 800b306:	2303      	movs	r3, #3
 800b308:	aa07      	add	r2, sp, #28
 800b30a:	9204      	str	r2, [sp, #16]
 800b30c:	aa06      	add	r2, sp, #24
 800b30e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b312:	e9cd 3600 	strd	r3, r6, [sp]
 800b316:	4622      	mov	r2, r4
 800b318:	462b      	mov	r3, r5
 800b31a:	f000 fff5 	bl	800c308 <_dtoa_r>
 800b31e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b322:	4607      	mov	r7, r0
 800b324:	d119      	bne.n	800b35a <__cvt+0x92>
 800b326:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b328:	07db      	lsls	r3, r3, #31
 800b32a:	d50e      	bpl.n	800b34a <__cvt+0x82>
 800b32c:	eb00 0906 	add.w	r9, r0, r6
 800b330:	2200      	movs	r2, #0
 800b332:	2300      	movs	r3, #0
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800b33c:	b108      	cbz	r0, 800b342 <__cvt+0x7a>
 800b33e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b342:	2230      	movs	r2, #48	@ 0x30
 800b344:	9b07      	ldr	r3, [sp, #28]
 800b346:	454b      	cmp	r3, r9
 800b348:	d31e      	bcc.n	800b388 <__cvt+0xc0>
 800b34a:	4638      	mov	r0, r7
 800b34c:	9b07      	ldr	r3, [sp, #28]
 800b34e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b350:	1bdb      	subs	r3, r3, r7
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	b008      	add	sp, #32
 800b356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b35e:	eb00 0906 	add.w	r9, r0, r6
 800b362:	d1e5      	bne.n	800b330 <__cvt+0x68>
 800b364:	7803      	ldrb	r3, [r0, #0]
 800b366:	2b30      	cmp	r3, #48	@ 0x30
 800b368:	d10a      	bne.n	800b380 <__cvt+0xb8>
 800b36a:	2200      	movs	r2, #0
 800b36c:	2300      	movs	r3, #0
 800b36e:	4620      	mov	r0, r4
 800b370:	4629      	mov	r1, r5
 800b372:	f7f5 fb19 	bl	80009a8 <__aeabi_dcmpeq>
 800b376:	b918      	cbnz	r0, 800b380 <__cvt+0xb8>
 800b378:	f1c6 0601 	rsb	r6, r6, #1
 800b37c:	f8ca 6000 	str.w	r6, [sl]
 800b380:	f8da 3000 	ldr.w	r3, [sl]
 800b384:	4499      	add	r9, r3
 800b386:	e7d3      	b.n	800b330 <__cvt+0x68>
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	9107      	str	r1, [sp, #28]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e7d9      	b.n	800b344 <__cvt+0x7c>

0800b390 <__exponent>:
 800b390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b392:	2900      	cmp	r1, #0
 800b394:	bfb6      	itet	lt
 800b396:	232d      	movlt	r3, #45	@ 0x2d
 800b398:	232b      	movge	r3, #43	@ 0x2b
 800b39a:	4249      	neglt	r1, r1
 800b39c:	2909      	cmp	r1, #9
 800b39e:	7002      	strb	r2, [r0, #0]
 800b3a0:	7043      	strb	r3, [r0, #1]
 800b3a2:	dd29      	ble.n	800b3f8 <__exponent+0x68>
 800b3a4:	f10d 0307 	add.w	r3, sp, #7
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	270a      	movs	r7, #10
 800b3ac:	fbb1 f6f7 	udiv	r6, r1, r7
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	fb07 1416 	mls	r4, r7, r6, r1
 800b3b6:	3430      	adds	r4, #48	@ 0x30
 800b3b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b3bc:	460c      	mov	r4, r1
 800b3be:	2c63      	cmp	r4, #99	@ 0x63
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b3c6:	dcf1      	bgt.n	800b3ac <__exponent+0x1c>
 800b3c8:	3130      	adds	r1, #48	@ 0x30
 800b3ca:	1e94      	subs	r4, r2, #2
 800b3cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	1c41      	adds	r1, r0, #1
 800b3d4:	42ab      	cmp	r3, r5
 800b3d6:	d30a      	bcc.n	800b3ee <__exponent+0x5e>
 800b3d8:	f10d 0309 	add.w	r3, sp, #9
 800b3dc:	1a9b      	subs	r3, r3, r2
 800b3de:	42ac      	cmp	r4, r5
 800b3e0:	bf88      	it	hi
 800b3e2:	2300      	movhi	r3, #0
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	4403      	add	r3, r0
 800b3e8:	1a18      	subs	r0, r3, r0
 800b3ea:	b003      	add	sp, #12
 800b3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3f6:	e7ed      	b.n	800b3d4 <__exponent+0x44>
 800b3f8:	2330      	movs	r3, #48	@ 0x30
 800b3fa:	3130      	adds	r1, #48	@ 0x30
 800b3fc:	7083      	strb	r3, [r0, #2]
 800b3fe:	70c1      	strb	r1, [r0, #3]
 800b400:	1d03      	adds	r3, r0, #4
 800b402:	e7f1      	b.n	800b3e8 <__exponent+0x58>

0800b404 <_printf_float>:
 800b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	b091      	sub	sp, #68	@ 0x44
 800b40a:	460c      	mov	r4, r1
 800b40c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b410:	4616      	mov	r6, r2
 800b412:	461f      	mov	r7, r3
 800b414:	4605      	mov	r5, r0
 800b416:	f000 fdf9 	bl	800c00c <_localeconv_r>
 800b41a:	6803      	ldr	r3, [r0, #0]
 800b41c:	4618      	mov	r0, r3
 800b41e:	9308      	str	r3, [sp, #32]
 800b420:	f7f4 fe96 	bl	8000150 <strlen>
 800b424:	2300      	movs	r3, #0
 800b426:	930e      	str	r3, [sp, #56]	@ 0x38
 800b428:	f8d8 3000 	ldr.w	r3, [r8]
 800b42c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b42e:	3307      	adds	r3, #7
 800b430:	f023 0307 	bic.w	r3, r3, #7
 800b434:	f103 0208 	add.w	r2, r3, #8
 800b438:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b43c:	f8d4 b000 	ldr.w	fp, [r4]
 800b440:	f8c8 2000 	str.w	r2, [r8]
 800b444:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b448:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b44c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b44e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b452:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b45a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b45e:	4b9c      	ldr	r3, [pc, #624]	@ (800b6d0 <_printf_float+0x2cc>)
 800b460:	f7f5 fad4 	bl	8000a0c <__aeabi_dcmpun>
 800b464:	bb70      	cbnz	r0, 800b4c4 <_printf_float+0xc0>
 800b466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b46a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b46e:	4b98      	ldr	r3, [pc, #608]	@ (800b6d0 <_printf_float+0x2cc>)
 800b470:	f7f5 faae 	bl	80009d0 <__aeabi_dcmple>
 800b474:	bb30      	cbnz	r0, 800b4c4 <_printf_float+0xc0>
 800b476:	2200      	movs	r2, #0
 800b478:	2300      	movs	r3, #0
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 fa9d 	bl	80009bc <__aeabi_dcmplt>
 800b482:	b110      	cbz	r0, 800b48a <_printf_float+0x86>
 800b484:	232d      	movs	r3, #45	@ 0x2d
 800b486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b48a:	4a92      	ldr	r2, [pc, #584]	@ (800b6d4 <_printf_float+0x2d0>)
 800b48c:	4b92      	ldr	r3, [pc, #584]	@ (800b6d8 <_printf_float+0x2d4>)
 800b48e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b492:	bf94      	ite	ls
 800b494:	4690      	movls	r8, r2
 800b496:	4698      	movhi	r8, r3
 800b498:	2303      	movs	r3, #3
 800b49a:	f04f 0900 	mov.w	r9, #0
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	f02b 0304 	bic.w	r3, fp, #4
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	4633      	mov	r3, r6
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	9700      	str	r7, [sp, #0]
 800b4ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b4b0:	f000 f9d4 	bl	800b85c <_printf_common>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	f040 8090 	bne.w	800b5da <_printf_float+0x1d6>
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4be:	b011      	add	sp, #68	@ 0x44
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	4642      	mov	r2, r8
 800b4c6:	464b      	mov	r3, r9
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	4649      	mov	r1, r9
 800b4cc:	f7f5 fa9e 	bl	8000a0c <__aeabi_dcmpun>
 800b4d0:	b148      	cbz	r0, 800b4e6 <_printf_float+0xe2>
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfb8      	it	lt
 800b4d8:	232d      	movlt	r3, #45	@ 0x2d
 800b4da:	4a80      	ldr	r2, [pc, #512]	@ (800b6dc <_printf_float+0x2d8>)
 800b4dc:	bfb8      	it	lt
 800b4de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b4e2:	4b7f      	ldr	r3, [pc, #508]	@ (800b6e0 <_printf_float+0x2dc>)
 800b4e4:	e7d3      	b.n	800b48e <_printf_float+0x8a>
 800b4e6:	6863      	ldr	r3, [r4, #4]
 800b4e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	d13f      	bne.n	800b570 <_printf_float+0x16c>
 800b4f0:	2306      	movs	r3, #6
 800b4f2:	6063      	str	r3, [r4, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	9206      	str	r2, [sp, #24]
 800b4fe:	aa0e      	add	r2, sp, #56	@ 0x38
 800b500:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b504:	aa0d      	add	r2, sp, #52	@ 0x34
 800b506:	9203      	str	r2, [sp, #12]
 800b508:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b50c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	4642      	mov	r2, r8
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	4628      	mov	r0, r5
 800b518:	464b      	mov	r3, r9
 800b51a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b51c:	f7ff fed4 	bl	800b2c8 <__cvt>
 800b520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b522:	4680      	mov	r8, r0
 800b524:	2947      	cmp	r1, #71	@ 0x47
 800b526:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b528:	d128      	bne.n	800b57c <_printf_float+0x178>
 800b52a:	1cc8      	adds	r0, r1, #3
 800b52c:	db02      	blt.n	800b534 <_printf_float+0x130>
 800b52e:	6863      	ldr	r3, [r4, #4]
 800b530:	4299      	cmp	r1, r3
 800b532:	dd40      	ble.n	800b5b6 <_printf_float+0x1b2>
 800b534:	f1aa 0a02 	sub.w	sl, sl, #2
 800b538:	fa5f fa8a 	uxtb.w	sl, sl
 800b53c:	4652      	mov	r2, sl
 800b53e:	3901      	subs	r1, #1
 800b540:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b544:	910d      	str	r1, [sp, #52]	@ 0x34
 800b546:	f7ff ff23 	bl	800b390 <__exponent>
 800b54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b54c:	4681      	mov	r9, r0
 800b54e:	1813      	adds	r3, r2, r0
 800b550:	2a01      	cmp	r2, #1
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	dc02      	bgt.n	800b55c <_printf_float+0x158>
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	07d2      	lsls	r2, r2, #31
 800b55a:	d501      	bpl.n	800b560 <_printf_float+0x15c>
 800b55c:	3301      	adds	r3, #1
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b564:	2b00      	cmp	r3, #0
 800b566:	d09e      	beq.n	800b4a6 <_printf_float+0xa2>
 800b568:	232d      	movs	r3, #45	@ 0x2d
 800b56a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b56e:	e79a      	b.n	800b4a6 <_printf_float+0xa2>
 800b570:	2947      	cmp	r1, #71	@ 0x47
 800b572:	d1bf      	bne.n	800b4f4 <_printf_float+0xf0>
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1bd      	bne.n	800b4f4 <_printf_float+0xf0>
 800b578:	2301      	movs	r3, #1
 800b57a:	e7ba      	b.n	800b4f2 <_printf_float+0xee>
 800b57c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b580:	d9dc      	bls.n	800b53c <_printf_float+0x138>
 800b582:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b586:	d118      	bne.n	800b5ba <_printf_float+0x1b6>
 800b588:	2900      	cmp	r1, #0
 800b58a:	6863      	ldr	r3, [r4, #4]
 800b58c:	dd0b      	ble.n	800b5a6 <_printf_float+0x1a2>
 800b58e:	6121      	str	r1, [r4, #16]
 800b590:	b913      	cbnz	r3, 800b598 <_printf_float+0x194>
 800b592:	6822      	ldr	r2, [r4, #0]
 800b594:	07d0      	lsls	r0, r2, #31
 800b596:	d502      	bpl.n	800b59e <_printf_float+0x19a>
 800b598:	3301      	adds	r3, #1
 800b59a:	440b      	add	r3, r1
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	f04f 0900 	mov.w	r9, #0
 800b5a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b5a4:	e7dc      	b.n	800b560 <_printf_float+0x15c>
 800b5a6:	b913      	cbnz	r3, 800b5ae <_printf_float+0x1aa>
 800b5a8:	6822      	ldr	r2, [r4, #0]
 800b5aa:	07d2      	lsls	r2, r2, #31
 800b5ac:	d501      	bpl.n	800b5b2 <_printf_float+0x1ae>
 800b5ae:	3302      	adds	r3, #2
 800b5b0:	e7f4      	b.n	800b59c <_printf_float+0x198>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e7f2      	b.n	800b59c <_printf_float+0x198>
 800b5b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	db05      	blt.n	800b5cc <_printf_float+0x1c8>
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	6121      	str	r1, [r4, #16]
 800b5c4:	07d8      	lsls	r0, r3, #31
 800b5c6:	d5ea      	bpl.n	800b59e <_printf_float+0x19a>
 800b5c8:	1c4b      	adds	r3, r1, #1
 800b5ca:	e7e7      	b.n	800b59c <_printf_float+0x198>
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	bfcc      	ite	gt
 800b5d0:	2201      	movgt	r2, #1
 800b5d2:	f1c1 0202 	rsble	r2, r1, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	e7e0      	b.n	800b59c <_printf_float+0x198>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	055a      	lsls	r2, r3, #21
 800b5de:	d407      	bmi.n	800b5f0 <_printf_float+0x1ec>
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	4642      	mov	r2, r8
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d12b      	bne.n	800b646 <_printf_float+0x242>
 800b5ee:	e764      	b.n	800b4ba <_printf_float+0xb6>
 800b5f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5f4:	f240 80dc 	bls.w	800b7b0 <_printf_float+0x3ac>
 800b5f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2300      	movs	r3, #0
 800b600:	f7f5 f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 800b604:	2800      	cmp	r0, #0
 800b606:	d033      	beq.n	800b670 <_printf_float+0x26c>
 800b608:	2301      	movs	r3, #1
 800b60a:	4631      	mov	r1, r6
 800b60c:	4628      	mov	r0, r5
 800b60e:	4a35      	ldr	r2, [pc, #212]	@ (800b6e4 <_printf_float+0x2e0>)
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f af51 	beq.w	800b4ba <_printf_float+0xb6>
 800b618:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b61c:	4543      	cmp	r3, r8
 800b61e:	db02      	blt.n	800b626 <_printf_float+0x222>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	07d8      	lsls	r0, r3, #31
 800b624:	d50f      	bpl.n	800b646 <_printf_float+0x242>
 800b626:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f af42 	beq.w	800b4ba <_printf_float+0xb6>
 800b636:	f04f 0900 	mov.w	r9, #0
 800b63a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b63e:	f104 0a1a 	add.w	sl, r4, #26
 800b642:	45c8      	cmp	r8, r9
 800b644:	dc09      	bgt.n	800b65a <_printf_float+0x256>
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	079b      	lsls	r3, r3, #30
 800b64a:	f100 8102 	bmi.w	800b852 <_printf_float+0x44e>
 800b64e:	68e0      	ldr	r0, [r4, #12]
 800b650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b652:	4298      	cmp	r0, r3
 800b654:	bfb8      	it	lt
 800b656:	4618      	movlt	r0, r3
 800b658:	e731      	b.n	800b4be <_printf_float+0xba>
 800b65a:	2301      	movs	r3, #1
 800b65c:	4652      	mov	r2, sl
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	f43f af28 	beq.w	800b4ba <_printf_float+0xb6>
 800b66a:	f109 0901 	add.w	r9, r9, #1
 800b66e:	e7e8      	b.n	800b642 <_printf_float+0x23e>
 800b670:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc38      	bgt.n	800b6e8 <_printf_float+0x2e4>
 800b676:	2301      	movs	r3, #1
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	4a19      	ldr	r2, [pc, #100]	@ (800b6e4 <_printf_float+0x2e0>)
 800b67e:	47b8      	blx	r7
 800b680:	3001      	adds	r0, #1
 800b682:	f43f af1a 	beq.w	800b4ba <_printf_float+0xb6>
 800b686:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b68a:	ea59 0303 	orrs.w	r3, r9, r3
 800b68e:	d102      	bne.n	800b696 <_printf_float+0x292>
 800b690:	6823      	ldr	r3, [r4, #0]
 800b692:	07d9      	lsls	r1, r3, #31
 800b694:	d5d7      	bpl.n	800b646 <_printf_float+0x242>
 800b696:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b69a:	4631      	mov	r1, r6
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b8      	blx	r7
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	f43f af0a 	beq.w	800b4ba <_printf_float+0xb6>
 800b6a6:	f04f 0a00 	mov.w	sl, #0
 800b6aa:	f104 0b1a 	add.w	fp, r4, #26
 800b6ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6b0:	425b      	negs	r3, r3
 800b6b2:	4553      	cmp	r3, sl
 800b6b4:	dc01      	bgt.n	800b6ba <_printf_float+0x2b6>
 800b6b6:	464b      	mov	r3, r9
 800b6b8:	e793      	b.n	800b5e2 <_printf_float+0x1de>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	465a      	mov	r2, fp
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b8      	blx	r7
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f43f aef8 	beq.w	800b4ba <_printf_float+0xb6>
 800b6ca:	f10a 0a01 	add.w	sl, sl, #1
 800b6ce:	e7ee      	b.n	800b6ae <_printf_float+0x2aa>
 800b6d0:	7fefffff 	.word	0x7fefffff
 800b6d4:	0800e540 	.word	0x0800e540
 800b6d8:	0800e544 	.word	0x0800e544
 800b6dc:	0800e548 	.word	0x0800e548
 800b6e0:	0800e54c 	.word	0x0800e54c
 800b6e4:	0800e550 	.word	0x0800e550
 800b6e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b6ee:	4553      	cmp	r3, sl
 800b6f0:	bfa8      	it	ge
 800b6f2:	4653      	movge	r3, sl
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	4699      	mov	r9, r3
 800b6f8:	dc36      	bgt.n	800b768 <_printf_float+0x364>
 800b6fa:	f04f 0b00 	mov.w	fp, #0
 800b6fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b702:	f104 021a 	add.w	r2, r4, #26
 800b706:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b708:	930a      	str	r3, [sp, #40]	@ 0x28
 800b70a:	eba3 0309 	sub.w	r3, r3, r9
 800b70e:	455b      	cmp	r3, fp
 800b710:	dc31      	bgt.n	800b776 <_printf_float+0x372>
 800b712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b714:	459a      	cmp	sl, r3
 800b716:	dc3a      	bgt.n	800b78e <_printf_float+0x38a>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	07da      	lsls	r2, r3, #31
 800b71c:	d437      	bmi.n	800b78e <_printf_float+0x38a>
 800b71e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b720:	ebaa 0903 	sub.w	r9, sl, r3
 800b724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b726:	ebaa 0303 	sub.w	r3, sl, r3
 800b72a:	4599      	cmp	r9, r3
 800b72c:	bfa8      	it	ge
 800b72e:	4699      	movge	r9, r3
 800b730:	f1b9 0f00 	cmp.w	r9, #0
 800b734:	dc33      	bgt.n	800b79e <_printf_float+0x39a>
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b73e:	f104 0b1a 	add.w	fp, r4, #26
 800b742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b744:	ebaa 0303 	sub.w	r3, sl, r3
 800b748:	eba3 0309 	sub.w	r3, r3, r9
 800b74c:	4543      	cmp	r3, r8
 800b74e:	f77f af7a 	ble.w	800b646 <_printf_float+0x242>
 800b752:	2301      	movs	r3, #1
 800b754:	465a      	mov	r2, fp
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f aeac 	beq.w	800b4ba <_printf_float+0xb6>
 800b762:	f108 0801 	add.w	r8, r8, #1
 800b766:	e7ec      	b.n	800b742 <_printf_float+0x33e>
 800b768:	4642      	mov	r2, r8
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	d1c2      	bne.n	800b6fa <_printf_float+0x2f6>
 800b774:	e6a1      	b.n	800b4ba <_printf_float+0xb6>
 800b776:	2301      	movs	r3, #1
 800b778:	4631      	mov	r1, r6
 800b77a:	4628      	mov	r0, r5
 800b77c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	f43f ae9a 	beq.w	800b4ba <_printf_float+0xb6>
 800b786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b788:	f10b 0b01 	add.w	fp, fp, #1
 800b78c:	e7bb      	b.n	800b706 <_printf_float+0x302>
 800b78e:	4631      	mov	r1, r6
 800b790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b794:	4628      	mov	r0, r5
 800b796:	47b8      	blx	r7
 800b798:	3001      	adds	r0, #1
 800b79a:	d1c0      	bne.n	800b71e <_printf_float+0x31a>
 800b79c:	e68d      	b.n	800b4ba <_printf_float+0xb6>
 800b79e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	4442      	add	r2, r8
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d1c3      	bne.n	800b736 <_printf_float+0x332>
 800b7ae:	e684      	b.n	800b4ba <_printf_float+0xb6>
 800b7b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b7b4:	f1ba 0f01 	cmp.w	sl, #1
 800b7b8:	dc01      	bgt.n	800b7be <_printf_float+0x3ba>
 800b7ba:	07db      	lsls	r3, r3, #31
 800b7bc:	d536      	bpl.n	800b82c <_printf_float+0x428>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4642      	mov	r2, r8
 800b7c2:	4631      	mov	r1, r6
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	47b8      	blx	r7
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	f43f ae76 	beq.w	800b4ba <_printf_float+0xb6>
 800b7ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	47b8      	blx	r7
 800b7d8:	3001      	adds	r0, #1
 800b7da:	f43f ae6e 	beq.w	800b4ba <_printf_float+0xb6>
 800b7de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b7ea:	f7f5 f8dd 	bl	80009a8 <__aeabi_dcmpeq>
 800b7ee:	b9c0      	cbnz	r0, 800b822 <_printf_float+0x41e>
 800b7f0:	4653      	mov	r3, sl
 800b7f2:	f108 0201 	add.w	r2, r8, #1
 800b7f6:	4631      	mov	r1, r6
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	47b8      	blx	r7
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d10c      	bne.n	800b81a <_printf_float+0x416>
 800b800:	e65b      	b.n	800b4ba <_printf_float+0xb6>
 800b802:	2301      	movs	r3, #1
 800b804:	465a      	mov	r2, fp
 800b806:	4631      	mov	r1, r6
 800b808:	4628      	mov	r0, r5
 800b80a:	47b8      	blx	r7
 800b80c:	3001      	adds	r0, #1
 800b80e:	f43f ae54 	beq.w	800b4ba <_printf_float+0xb6>
 800b812:	f108 0801 	add.w	r8, r8, #1
 800b816:	45d0      	cmp	r8, sl
 800b818:	dbf3      	blt.n	800b802 <_printf_float+0x3fe>
 800b81a:	464b      	mov	r3, r9
 800b81c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b820:	e6e0      	b.n	800b5e4 <_printf_float+0x1e0>
 800b822:	f04f 0800 	mov.w	r8, #0
 800b826:	f104 0b1a 	add.w	fp, r4, #26
 800b82a:	e7f4      	b.n	800b816 <_printf_float+0x412>
 800b82c:	2301      	movs	r3, #1
 800b82e:	4642      	mov	r2, r8
 800b830:	e7e1      	b.n	800b7f6 <_printf_float+0x3f2>
 800b832:	2301      	movs	r3, #1
 800b834:	464a      	mov	r2, r9
 800b836:	4631      	mov	r1, r6
 800b838:	4628      	mov	r0, r5
 800b83a:	47b8      	blx	r7
 800b83c:	3001      	adds	r0, #1
 800b83e:	f43f ae3c 	beq.w	800b4ba <_printf_float+0xb6>
 800b842:	f108 0801 	add.w	r8, r8, #1
 800b846:	68e3      	ldr	r3, [r4, #12]
 800b848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b84a:	1a5b      	subs	r3, r3, r1
 800b84c:	4543      	cmp	r3, r8
 800b84e:	dcf0      	bgt.n	800b832 <_printf_float+0x42e>
 800b850:	e6fd      	b.n	800b64e <_printf_float+0x24a>
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	f104 0919 	add.w	r9, r4, #25
 800b85a:	e7f4      	b.n	800b846 <_printf_float+0x442>

0800b85c <_printf_common>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	4616      	mov	r6, r2
 800b862:	4698      	mov	r8, r3
 800b864:	688a      	ldr	r2, [r1, #8]
 800b866:	690b      	ldr	r3, [r1, #16]
 800b868:	4607      	mov	r7, r0
 800b86a:	4293      	cmp	r3, r2
 800b86c:	bfb8      	it	lt
 800b86e:	4613      	movlt	r3, r2
 800b870:	6033      	str	r3, [r6, #0]
 800b872:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b876:	460c      	mov	r4, r1
 800b878:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b87c:	b10a      	cbz	r2, 800b882 <_printf_common+0x26>
 800b87e:	3301      	adds	r3, #1
 800b880:	6033      	str	r3, [r6, #0]
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	0699      	lsls	r1, r3, #26
 800b886:	bf42      	ittt	mi
 800b888:	6833      	ldrmi	r3, [r6, #0]
 800b88a:	3302      	addmi	r3, #2
 800b88c:	6033      	strmi	r3, [r6, #0]
 800b88e:	6825      	ldr	r5, [r4, #0]
 800b890:	f015 0506 	ands.w	r5, r5, #6
 800b894:	d106      	bne.n	800b8a4 <_printf_common+0x48>
 800b896:	f104 0a19 	add.w	sl, r4, #25
 800b89a:	68e3      	ldr	r3, [r4, #12]
 800b89c:	6832      	ldr	r2, [r6, #0]
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	42ab      	cmp	r3, r5
 800b8a2:	dc2b      	bgt.n	800b8fc <_printf_common+0xa0>
 800b8a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	3b00      	subs	r3, #0
 800b8ac:	bf18      	it	ne
 800b8ae:	2301      	movne	r3, #1
 800b8b0:	0692      	lsls	r2, r2, #26
 800b8b2:	d430      	bmi.n	800b916 <_printf_common+0xba>
 800b8b4:	4641      	mov	r1, r8
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8bc:	47c8      	blx	r9
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d023      	beq.n	800b90a <_printf_common+0xae>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	6922      	ldr	r2, [r4, #16]
 800b8c6:	f003 0306 	and.w	r3, r3, #6
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	bf14      	ite	ne
 800b8ce:	2500      	movne	r5, #0
 800b8d0:	6833      	ldreq	r3, [r6, #0]
 800b8d2:	f04f 0600 	mov.w	r6, #0
 800b8d6:	bf08      	it	eq
 800b8d8:	68e5      	ldreq	r5, [r4, #12]
 800b8da:	f104 041a 	add.w	r4, r4, #26
 800b8de:	bf08      	it	eq
 800b8e0:	1aed      	subeq	r5, r5, r3
 800b8e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b8e6:	bf08      	it	eq
 800b8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	bfc4      	itt	gt
 800b8f0:	1a9b      	subgt	r3, r3, r2
 800b8f2:	18ed      	addgt	r5, r5, r3
 800b8f4:	42b5      	cmp	r5, r6
 800b8f6:	d11a      	bne.n	800b92e <_printf_common+0xd2>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e008      	b.n	800b90e <_printf_common+0xb2>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4652      	mov	r2, sl
 800b900:	4641      	mov	r1, r8
 800b902:	4638      	mov	r0, r7
 800b904:	47c8      	blx	r9
 800b906:	3001      	adds	r0, #1
 800b908:	d103      	bne.n	800b912 <_printf_common+0xb6>
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	3501      	adds	r5, #1
 800b914:	e7c1      	b.n	800b89a <_printf_common+0x3e>
 800b916:	2030      	movs	r0, #48	@ 0x30
 800b918:	18e1      	adds	r1, r4, r3
 800b91a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b924:	4422      	add	r2, r4
 800b926:	3302      	adds	r3, #2
 800b928:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b92c:	e7c2      	b.n	800b8b4 <_printf_common+0x58>
 800b92e:	2301      	movs	r3, #1
 800b930:	4622      	mov	r2, r4
 800b932:	4641      	mov	r1, r8
 800b934:	4638      	mov	r0, r7
 800b936:	47c8      	blx	r9
 800b938:	3001      	adds	r0, #1
 800b93a:	d0e6      	beq.n	800b90a <_printf_common+0xae>
 800b93c:	3601      	adds	r6, #1
 800b93e:	e7d9      	b.n	800b8f4 <_printf_common+0x98>

0800b940 <_printf_i>:
 800b940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b944:	7e0f      	ldrb	r7, [r1, #24]
 800b946:	4691      	mov	r9, r2
 800b948:	2f78      	cmp	r7, #120	@ 0x78
 800b94a:	4680      	mov	r8, r0
 800b94c:	460c      	mov	r4, r1
 800b94e:	469a      	mov	sl, r3
 800b950:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b956:	d807      	bhi.n	800b968 <_printf_i+0x28>
 800b958:	2f62      	cmp	r7, #98	@ 0x62
 800b95a:	d80a      	bhi.n	800b972 <_printf_i+0x32>
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	f000 80d3 	beq.w	800bb08 <_printf_i+0x1c8>
 800b962:	2f58      	cmp	r7, #88	@ 0x58
 800b964:	f000 80ba 	beq.w	800badc <_printf_i+0x19c>
 800b968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b96c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b970:	e03a      	b.n	800b9e8 <_printf_i+0xa8>
 800b972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b976:	2b15      	cmp	r3, #21
 800b978:	d8f6      	bhi.n	800b968 <_printf_i+0x28>
 800b97a:	a101      	add	r1, pc, #4	@ (adr r1, 800b980 <_printf_i+0x40>)
 800b97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b980:	0800b9d9 	.word	0x0800b9d9
 800b984:	0800b9ed 	.word	0x0800b9ed
 800b988:	0800b969 	.word	0x0800b969
 800b98c:	0800b969 	.word	0x0800b969
 800b990:	0800b969 	.word	0x0800b969
 800b994:	0800b969 	.word	0x0800b969
 800b998:	0800b9ed 	.word	0x0800b9ed
 800b99c:	0800b969 	.word	0x0800b969
 800b9a0:	0800b969 	.word	0x0800b969
 800b9a4:	0800b969 	.word	0x0800b969
 800b9a8:	0800b969 	.word	0x0800b969
 800b9ac:	0800baef 	.word	0x0800baef
 800b9b0:	0800ba17 	.word	0x0800ba17
 800b9b4:	0800baa9 	.word	0x0800baa9
 800b9b8:	0800b969 	.word	0x0800b969
 800b9bc:	0800b969 	.word	0x0800b969
 800b9c0:	0800bb11 	.word	0x0800bb11
 800b9c4:	0800b969 	.word	0x0800b969
 800b9c8:	0800ba17 	.word	0x0800ba17
 800b9cc:	0800b969 	.word	0x0800b969
 800b9d0:	0800b969 	.word	0x0800b969
 800b9d4:	0800bab1 	.word	0x0800bab1
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	1d1a      	adds	r2, r3, #4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6032      	str	r2, [r6, #0]
 800b9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e09e      	b.n	800bb2a <_printf_i+0x1ea>
 800b9ec:	6833      	ldr	r3, [r6, #0]
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	1d19      	adds	r1, r3, #4
 800b9f2:	6031      	str	r1, [r6, #0]
 800b9f4:	0606      	lsls	r6, r0, #24
 800b9f6:	d501      	bpl.n	800b9fc <_printf_i+0xbc>
 800b9f8:	681d      	ldr	r5, [r3, #0]
 800b9fa:	e003      	b.n	800ba04 <_printf_i+0xc4>
 800b9fc:	0645      	lsls	r5, r0, #25
 800b9fe:	d5fb      	bpl.n	800b9f8 <_printf_i+0xb8>
 800ba00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	da03      	bge.n	800ba10 <_printf_i+0xd0>
 800ba08:	232d      	movs	r3, #45	@ 0x2d
 800ba0a:	426d      	negs	r5, r5
 800ba0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba10:	230a      	movs	r3, #10
 800ba12:	4859      	ldr	r0, [pc, #356]	@ (800bb78 <_printf_i+0x238>)
 800ba14:	e011      	b.n	800ba3a <_printf_i+0xfa>
 800ba16:	6821      	ldr	r1, [r4, #0]
 800ba18:	6833      	ldr	r3, [r6, #0]
 800ba1a:	0608      	lsls	r0, r1, #24
 800ba1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba20:	d402      	bmi.n	800ba28 <_printf_i+0xe8>
 800ba22:	0649      	lsls	r1, r1, #25
 800ba24:	bf48      	it	mi
 800ba26:	b2ad      	uxthmi	r5, r5
 800ba28:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	bf14      	ite	ne
 800ba2e:	230a      	movne	r3, #10
 800ba30:	2308      	moveq	r3, #8
 800ba32:	4851      	ldr	r0, [pc, #324]	@ (800bb78 <_printf_i+0x238>)
 800ba34:	2100      	movs	r1, #0
 800ba36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba3a:	6866      	ldr	r6, [r4, #4]
 800ba3c:	2e00      	cmp	r6, #0
 800ba3e:	bfa8      	it	ge
 800ba40:	6821      	ldrge	r1, [r4, #0]
 800ba42:	60a6      	str	r6, [r4, #8]
 800ba44:	bfa4      	itt	ge
 800ba46:	f021 0104 	bicge.w	r1, r1, #4
 800ba4a:	6021      	strge	r1, [r4, #0]
 800ba4c:	b90d      	cbnz	r5, 800ba52 <_printf_i+0x112>
 800ba4e:	2e00      	cmp	r6, #0
 800ba50:	d04b      	beq.n	800baea <_printf_i+0x1aa>
 800ba52:	4616      	mov	r6, r2
 800ba54:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba58:	fb03 5711 	mls	r7, r3, r1, r5
 800ba5c:	5dc7      	ldrb	r7, [r0, r7]
 800ba5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba62:	462f      	mov	r7, r5
 800ba64:	42bb      	cmp	r3, r7
 800ba66:	460d      	mov	r5, r1
 800ba68:	d9f4      	bls.n	800ba54 <_printf_i+0x114>
 800ba6a:	2b08      	cmp	r3, #8
 800ba6c:	d10b      	bne.n	800ba86 <_printf_i+0x146>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	07df      	lsls	r7, r3, #31
 800ba72:	d508      	bpl.n	800ba86 <_printf_i+0x146>
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	6861      	ldr	r1, [r4, #4]
 800ba78:	4299      	cmp	r1, r3
 800ba7a:	bfde      	ittt	le
 800ba7c:	2330      	movle	r3, #48	@ 0x30
 800ba7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ba86:	1b92      	subs	r2, r2, r6
 800ba88:	6122      	str	r2, [r4, #16]
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4640      	mov	r0, r8
 800ba90:	f8cd a000 	str.w	sl, [sp]
 800ba94:	aa03      	add	r2, sp, #12
 800ba96:	f7ff fee1 	bl	800b85c <_printf_common>
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	d14a      	bne.n	800bb34 <_printf_i+0x1f4>
 800ba9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baa2:	b004      	add	sp, #16
 800baa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	f043 0320 	orr.w	r3, r3, #32
 800baae:	6023      	str	r3, [r4, #0]
 800bab0:	2778      	movs	r7, #120	@ 0x78
 800bab2:	4832      	ldr	r0, [pc, #200]	@ (800bb7c <_printf_i+0x23c>)
 800bab4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	6831      	ldr	r1, [r6, #0]
 800babc:	061f      	lsls	r7, r3, #24
 800babe:	f851 5b04 	ldr.w	r5, [r1], #4
 800bac2:	d402      	bmi.n	800baca <_printf_i+0x18a>
 800bac4:	065f      	lsls	r7, r3, #25
 800bac6:	bf48      	it	mi
 800bac8:	b2ad      	uxthmi	r5, r5
 800baca:	6031      	str	r1, [r6, #0]
 800bacc:	07d9      	lsls	r1, r3, #31
 800bace:	bf44      	itt	mi
 800bad0:	f043 0320 	orrmi.w	r3, r3, #32
 800bad4:	6023      	strmi	r3, [r4, #0]
 800bad6:	b11d      	cbz	r5, 800bae0 <_printf_i+0x1a0>
 800bad8:	2310      	movs	r3, #16
 800bada:	e7ab      	b.n	800ba34 <_printf_i+0xf4>
 800badc:	4826      	ldr	r0, [pc, #152]	@ (800bb78 <_printf_i+0x238>)
 800bade:	e7e9      	b.n	800bab4 <_printf_i+0x174>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	f023 0320 	bic.w	r3, r3, #32
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	e7f6      	b.n	800bad8 <_printf_i+0x198>
 800baea:	4616      	mov	r6, r2
 800baec:	e7bd      	b.n	800ba6a <_printf_i+0x12a>
 800baee:	6833      	ldr	r3, [r6, #0]
 800baf0:	6825      	ldr	r5, [r4, #0]
 800baf2:	1d18      	adds	r0, r3, #4
 800baf4:	6961      	ldr	r1, [r4, #20]
 800baf6:	6030      	str	r0, [r6, #0]
 800baf8:	062e      	lsls	r6, r5, #24
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	d501      	bpl.n	800bb02 <_printf_i+0x1c2>
 800bafe:	6019      	str	r1, [r3, #0]
 800bb00:	e002      	b.n	800bb08 <_printf_i+0x1c8>
 800bb02:	0668      	lsls	r0, r5, #25
 800bb04:	d5fb      	bpl.n	800bafe <_printf_i+0x1be>
 800bb06:	8019      	strh	r1, [r3, #0]
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4616      	mov	r6, r2
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	e7bc      	b.n	800ba8a <_printf_i+0x14a>
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	2100      	movs	r1, #0
 800bb14:	1d1a      	adds	r2, r3, #4
 800bb16:	6032      	str	r2, [r6, #0]
 800bb18:	681e      	ldr	r6, [r3, #0]
 800bb1a:	6862      	ldr	r2, [r4, #4]
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 fb4f 	bl	800c1c0 <memchr>
 800bb22:	b108      	cbz	r0, 800bb28 <_printf_i+0x1e8>
 800bb24:	1b80      	subs	r0, r0, r6
 800bb26:	6060      	str	r0, [r4, #4]
 800bb28:	6863      	ldr	r3, [r4, #4]
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb32:	e7aa      	b.n	800ba8a <_printf_i+0x14a>
 800bb34:	4632      	mov	r2, r6
 800bb36:	4649      	mov	r1, r9
 800bb38:	4640      	mov	r0, r8
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	47d0      	blx	sl
 800bb3e:	3001      	adds	r0, #1
 800bb40:	d0ad      	beq.n	800ba9e <_printf_i+0x15e>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	079b      	lsls	r3, r3, #30
 800bb46:	d413      	bmi.n	800bb70 <_printf_i+0x230>
 800bb48:	68e0      	ldr	r0, [r4, #12]
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	4298      	cmp	r0, r3
 800bb4e:	bfb8      	it	lt
 800bb50:	4618      	movlt	r0, r3
 800bb52:	e7a6      	b.n	800baa2 <_printf_i+0x162>
 800bb54:	2301      	movs	r3, #1
 800bb56:	4632      	mov	r2, r6
 800bb58:	4649      	mov	r1, r9
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	47d0      	blx	sl
 800bb5e:	3001      	adds	r0, #1
 800bb60:	d09d      	beq.n	800ba9e <_printf_i+0x15e>
 800bb62:	3501      	adds	r5, #1
 800bb64:	68e3      	ldr	r3, [r4, #12]
 800bb66:	9903      	ldr	r1, [sp, #12]
 800bb68:	1a5b      	subs	r3, r3, r1
 800bb6a:	42ab      	cmp	r3, r5
 800bb6c:	dcf2      	bgt.n	800bb54 <_printf_i+0x214>
 800bb6e:	e7eb      	b.n	800bb48 <_printf_i+0x208>
 800bb70:	2500      	movs	r5, #0
 800bb72:	f104 0619 	add.w	r6, r4, #25
 800bb76:	e7f5      	b.n	800bb64 <_printf_i+0x224>
 800bb78:	0800e552 	.word	0x0800e552
 800bb7c:	0800e563 	.word	0x0800e563

0800bb80 <std>:
 800bb80:	2300      	movs	r3, #0
 800bb82:	b510      	push	{r4, lr}
 800bb84:	4604      	mov	r4, r0
 800bb86:	e9c0 3300 	strd	r3, r3, [r0]
 800bb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb8e:	6083      	str	r3, [r0, #8]
 800bb90:	8181      	strh	r1, [r0, #12]
 800bb92:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb94:	81c2      	strh	r2, [r0, #14]
 800bb96:	6183      	str	r3, [r0, #24]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	2208      	movs	r2, #8
 800bb9c:	305c      	adds	r0, #92	@ 0x5c
 800bb9e:	f000 fa2d 	bl	800bffc <memset>
 800bba2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd8 <std+0x58>)
 800bba4:	6224      	str	r4, [r4, #32]
 800bba6:	6263      	str	r3, [r4, #36]	@ 0x24
 800bba8:	4b0c      	ldr	r3, [pc, #48]	@ (800bbdc <std+0x5c>)
 800bbaa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bbac:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe0 <std+0x60>)
 800bbae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe4 <std+0x64>)
 800bbb2:	6323      	str	r3, [r4, #48]	@ 0x30
 800bbb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe8 <std+0x68>)
 800bbb6:	429c      	cmp	r4, r3
 800bbb8:	d006      	beq.n	800bbc8 <std+0x48>
 800bbba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bbbe:	4294      	cmp	r4, r2
 800bbc0:	d002      	beq.n	800bbc8 <std+0x48>
 800bbc2:	33d0      	adds	r3, #208	@ 0xd0
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	d105      	bne.n	800bbd4 <std+0x54>
 800bbc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbd0:	f7f7 b807 	b.w	8002be2 <__retarget_lock_init_recursive>
 800bbd4:	bd10      	pop	{r4, pc}
 800bbd6:	bf00      	nop
 800bbd8:	0800be4d 	.word	0x0800be4d
 800bbdc:	0800be6f 	.word	0x0800be6f
 800bbe0:	0800bea7 	.word	0x0800bea7
 800bbe4:	0800becb 	.word	0x0800becb
 800bbe8:	20003dec 	.word	0x20003dec

0800bbec <stdio_exit_handler>:
 800bbec:	4a02      	ldr	r2, [pc, #8]	@ (800bbf8 <stdio_exit_handler+0xc>)
 800bbee:	4903      	ldr	r1, [pc, #12]	@ (800bbfc <stdio_exit_handler+0x10>)
 800bbf0:	4803      	ldr	r0, [pc, #12]	@ (800bc00 <stdio_exit_handler+0x14>)
 800bbf2:	f000 b869 	b.w	800bcc8 <_fwalk_sglue>
 800bbf6:	bf00      	nop
 800bbf8:	20000020 	.word	0x20000020
 800bbfc:	0800dbc9 	.word	0x0800dbc9
 800bc00:	20000030 	.word	0x20000030

0800bc04 <cleanup_stdio>:
 800bc04:	6841      	ldr	r1, [r0, #4]
 800bc06:	4b0c      	ldr	r3, [pc, #48]	@ (800bc38 <cleanup_stdio+0x34>)
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	4299      	cmp	r1, r3
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	d001      	beq.n	800bc14 <cleanup_stdio+0x10>
 800bc10:	f001 ffda 	bl	800dbc8 <_fflush_r>
 800bc14:	68a1      	ldr	r1, [r4, #8]
 800bc16:	4b09      	ldr	r3, [pc, #36]	@ (800bc3c <cleanup_stdio+0x38>)
 800bc18:	4299      	cmp	r1, r3
 800bc1a:	d002      	beq.n	800bc22 <cleanup_stdio+0x1e>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f001 ffd3 	bl	800dbc8 <_fflush_r>
 800bc22:	68e1      	ldr	r1, [r4, #12]
 800bc24:	4b06      	ldr	r3, [pc, #24]	@ (800bc40 <cleanup_stdio+0x3c>)
 800bc26:	4299      	cmp	r1, r3
 800bc28:	d004      	beq.n	800bc34 <cleanup_stdio+0x30>
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc30:	f001 bfca 	b.w	800dbc8 <_fflush_r>
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	bf00      	nop
 800bc38:	20003dec 	.word	0x20003dec
 800bc3c:	20003e54 	.word	0x20003e54
 800bc40:	20003ebc 	.word	0x20003ebc

0800bc44 <global_stdio_init.part.0>:
 800bc44:	b510      	push	{r4, lr}
 800bc46:	4b0b      	ldr	r3, [pc, #44]	@ (800bc74 <global_stdio_init.part.0+0x30>)
 800bc48:	4c0b      	ldr	r4, [pc, #44]	@ (800bc78 <global_stdio_init.part.0+0x34>)
 800bc4a:	4a0c      	ldr	r2, [pc, #48]	@ (800bc7c <global_stdio_init.part.0+0x38>)
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	2104      	movs	r1, #4
 800bc52:	2200      	movs	r2, #0
 800bc54:	f7ff ff94 	bl	800bb80 <std>
 800bc58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	2109      	movs	r1, #9
 800bc60:	f7ff ff8e 	bl	800bb80 <std>
 800bc64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc68:	2202      	movs	r2, #2
 800bc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc6e:	2112      	movs	r1, #18
 800bc70:	f7ff bf86 	b.w	800bb80 <std>
 800bc74:	20003f24 	.word	0x20003f24
 800bc78:	20003dec 	.word	0x20003dec
 800bc7c:	0800bbed 	.word	0x0800bbed

0800bc80 <__sfp_lock_acquire>:
 800bc80:	4801      	ldr	r0, [pc, #4]	@ (800bc88 <__sfp_lock_acquire+0x8>)
 800bc82:	f7f6 bfd5 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 800bc86:	bf00      	nop
 800bc88:	200007f8 	.word	0x200007f8

0800bc8c <__sfp_lock_release>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	@ (800bc94 <__sfp_lock_release+0x8>)
 800bc8e:	f7f6 bfe4 	b.w	8002c5a <__retarget_lock_release_recursive>
 800bc92:	bf00      	nop
 800bc94:	200007f8 	.word	0x200007f8

0800bc98 <__sinit>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	f7ff fff0 	bl	800bc80 <__sfp_lock_acquire>
 800bca0:	6a23      	ldr	r3, [r4, #32]
 800bca2:	b11b      	cbz	r3, 800bcac <__sinit+0x14>
 800bca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bca8:	f7ff bff0 	b.w	800bc8c <__sfp_lock_release>
 800bcac:	4b04      	ldr	r3, [pc, #16]	@ (800bcc0 <__sinit+0x28>)
 800bcae:	6223      	str	r3, [r4, #32]
 800bcb0:	4b04      	ldr	r3, [pc, #16]	@ (800bcc4 <__sinit+0x2c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f5      	bne.n	800bca4 <__sinit+0xc>
 800bcb8:	f7ff ffc4 	bl	800bc44 <global_stdio_init.part.0>
 800bcbc:	e7f2      	b.n	800bca4 <__sinit+0xc>
 800bcbe:	bf00      	nop
 800bcc0:	0800bc05 	.word	0x0800bc05
 800bcc4:	20003f24 	.word	0x20003f24

0800bcc8 <_fwalk_sglue>:
 800bcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bccc:	4607      	mov	r7, r0
 800bcce:	4688      	mov	r8, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	2600      	movs	r6, #0
 800bcd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcd8:	f1b9 0901 	subs.w	r9, r9, #1
 800bcdc:	d505      	bpl.n	800bcea <_fwalk_sglue+0x22>
 800bcde:	6824      	ldr	r4, [r4, #0]
 800bce0:	2c00      	cmp	r4, #0
 800bce2:	d1f7      	bne.n	800bcd4 <_fwalk_sglue+0xc>
 800bce4:	4630      	mov	r0, r6
 800bce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d907      	bls.n	800bd00 <_fwalk_sglue+0x38>
 800bcf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	d003      	beq.n	800bd00 <_fwalk_sglue+0x38>
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	47c0      	blx	r8
 800bcfe:	4306      	orrs	r6, r0
 800bd00:	3568      	adds	r5, #104	@ 0x68
 800bd02:	e7e9      	b.n	800bcd8 <_fwalk_sglue+0x10>

0800bd04 <iprintf>:
 800bd04:	b40f      	push	{r0, r1, r2, r3}
 800bd06:	b507      	push	{r0, r1, r2, lr}
 800bd08:	4906      	ldr	r1, [pc, #24]	@ (800bd24 <iprintf+0x20>)
 800bd0a:	ab04      	add	r3, sp, #16
 800bd0c:	6808      	ldr	r0, [r1, #0]
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd12:	6881      	ldr	r1, [r0, #8]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	f001 fdbf 	bl	800d898 <_vfiprintf_r>
 800bd1a:	b003      	add	sp, #12
 800bd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd20:	b004      	add	sp, #16
 800bd22:	4770      	bx	lr
 800bd24:	2000002c 	.word	0x2000002c

0800bd28 <_puts_r>:
 800bd28:	6a03      	ldr	r3, [r0, #32]
 800bd2a:	b570      	push	{r4, r5, r6, lr}
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	460e      	mov	r6, r1
 800bd30:	6884      	ldr	r4, [r0, #8]
 800bd32:	b90b      	cbnz	r3, 800bd38 <_puts_r+0x10>
 800bd34:	f7ff ffb0 	bl	800bc98 <__sinit>
 800bd38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd3a:	07db      	lsls	r3, r3, #31
 800bd3c:	d405      	bmi.n	800bd4a <_puts_r+0x22>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	0598      	lsls	r0, r3, #22
 800bd42:	d402      	bmi.n	800bd4a <_puts_r+0x22>
 800bd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd46:	f7f6 ff73 	bl	8002c30 <__retarget_lock_acquire_recursive>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	0719      	lsls	r1, r3, #28
 800bd4e:	d502      	bpl.n	800bd56 <_puts_r+0x2e>
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d135      	bne.n	800bdc2 <_puts_r+0x9a>
 800bd56:	4621      	mov	r1, r4
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f000 f8f9 	bl	800bf50 <__swsetup_r>
 800bd5e:	b380      	cbz	r0, 800bdc2 <_puts_r+0x9a>
 800bd60:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bd64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd66:	07da      	lsls	r2, r3, #31
 800bd68:	d405      	bmi.n	800bd76 <_puts_r+0x4e>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	059b      	lsls	r3, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_puts_r+0x4e>
 800bd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd72:	f7f6 ff72 	bl	8002c5a <__retarget_lock_release_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	bd70      	pop	{r4, r5, r6, pc}
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da04      	bge.n	800bd88 <_puts_r+0x60>
 800bd7e:	69a2      	ldr	r2, [r4, #24]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	dc17      	bgt.n	800bdb4 <_puts_r+0x8c>
 800bd84:	290a      	cmp	r1, #10
 800bd86:	d015      	beq.n	800bdb4 <_puts_r+0x8c>
 800bd88:	6823      	ldr	r3, [r4, #0]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	7019      	strb	r1, [r3, #0]
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd96:	3b01      	subs	r3, #1
 800bd98:	60a3      	str	r3, [r4, #8]
 800bd9a:	2900      	cmp	r1, #0
 800bd9c:	d1ed      	bne.n	800bd7a <_puts_r+0x52>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	da11      	bge.n	800bdc6 <_puts_r+0x9e>
 800bda2:	4622      	mov	r2, r4
 800bda4:	210a      	movs	r1, #10
 800bda6:	4628      	mov	r0, r5
 800bda8:	f000 f893 	bl	800bed2 <__swbuf_r>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d0d7      	beq.n	800bd60 <_puts_r+0x38>
 800bdb0:	250a      	movs	r5, #10
 800bdb2:	e7d7      	b.n	800bd64 <_puts_r+0x3c>
 800bdb4:	4622      	mov	r2, r4
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 f88b 	bl	800bed2 <__swbuf_r>
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	d1e7      	bne.n	800bd90 <_puts_r+0x68>
 800bdc0:	e7ce      	b.n	800bd60 <_puts_r+0x38>
 800bdc2:	3e01      	subs	r6, #1
 800bdc4:	e7e4      	b.n	800bd90 <_puts_r+0x68>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	6022      	str	r2, [r4, #0]
 800bdcc:	220a      	movs	r2, #10
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	e7ee      	b.n	800bdb0 <_puts_r+0x88>
	...

0800bdd4 <puts>:
 800bdd4:	4b02      	ldr	r3, [pc, #8]	@ (800bde0 <puts+0xc>)
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	6818      	ldr	r0, [r3, #0]
 800bdda:	f7ff bfa5 	b.w	800bd28 <_puts_r>
 800bdde:	bf00      	nop
 800bde0:	2000002c 	.word	0x2000002c

0800bde4 <sniprintf>:
 800bde4:	b40c      	push	{r2, r3}
 800bde6:	b530      	push	{r4, r5, lr}
 800bde8:	4b17      	ldr	r3, [pc, #92]	@ (800be48 <sniprintf+0x64>)
 800bdea:	1e0c      	subs	r4, r1, #0
 800bdec:	681d      	ldr	r5, [r3, #0]
 800bdee:	b09d      	sub	sp, #116	@ 0x74
 800bdf0:	da08      	bge.n	800be04 <sniprintf+0x20>
 800bdf2:	238b      	movs	r3, #139	@ 0x8b
 800bdf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	b01d      	add	sp, #116	@ 0x74
 800bdfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be00:	b002      	add	sp, #8
 800be02:	4770      	bx	lr
 800be04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800be08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be0c:	bf0c      	ite	eq
 800be0e:	4623      	moveq	r3, r4
 800be10:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	9307      	str	r3, [sp, #28]
 800be18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800be1c:	9002      	str	r0, [sp, #8]
 800be1e:	9006      	str	r0, [sp, #24]
 800be20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be24:	4628      	mov	r0, r5
 800be26:	ab21      	add	r3, sp, #132	@ 0x84
 800be28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800be2a:	a902      	add	r1, sp, #8
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	f001 fc0f 	bl	800d650 <_svfiprintf_r>
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	bfbc      	itt	lt
 800be36:	238b      	movlt	r3, #139	@ 0x8b
 800be38:	602b      	strlt	r3, [r5, #0]
 800be3a:	2c00      	cmp	r4, #0
 800be3c:	d0dd      	beq.n	800bdfa <sniprintf+0x16>
 800be3e:	2200      	movs	r2, #0
 800be40:	9b02      	ldr	r3, [sp, #8]
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e7d9      	b.n	800bdfa <sniprintf+0x16>
 800be46:	bf00      	nop
 800be48:	2000002c 	.word	0x2000002c

0800be4c <__sread>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	460c      	mov	r4, r1
 800be50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be54:	f000 f956 	bl	800c104 <_read_r>
 800be58:	2800      	cmp	r0, #0
 800be5a:	bfab      	itete	ge
 800be5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be5e:	89a3      	ldrhlt	r3, [r4, #12]
 800be60:	181b      	addge	r3, r3, r0
 800be62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be66:	bfac      	ite	ge
 800be68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be6a:	81a3      	strhlt	r3, [r4, #12]
 800be6c:	bd10      	pop	{r4, pc}

0800be6e <__swrite>:
 800be6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be72:	461f      	mov	r7, r3
 800be74:	898b      	ldrh	r3, [r1, #12]
 800be76:	4605      	mov	r5, r0
 800be78:	05db      	lsls	r3, r3, #23
 800be7a:	460c      	mov	r4, r1
 800be7c:	4616      	mov	r6, r2
 800be7e:	d505      	bpl.n	800be8c <__swrite+0x1e>
 800be80:	2302      	movs	r3, #2
 800be82:	2200      	movs	r2, #0
 800be84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be88:	f000 f92a 	bl	800c0e0 <_lseek_r>
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	4632      	mov	r2, r6
 800be90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	4628      	mov	r0, r5
 800be98:	463b      	mov	r3, r7
 800be9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bea2:	f000 b951 	b.w	800c148 <_write_r>

0800bea6 <__sseek>:
 800bea6:	b510      	push	{r4, lr}
 800bea8:	460c      	mov	r4, r1
 800beaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beae:	f000 f917 	bl	800c0e0 <_lseek_r>
 800beb2:	1c43      	adds	r3, r0, #1
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	bf15      	itete	ne
 800beb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bec2:	81a3      	strheq	r3, [r4, #12]
 800bec4:	bf18      	it	ne
 800bec6:	81a3      	strhne	r3, [r4, #12]
 800bec8:	bd10      	pop	{r4, pc}

0800beca <__sclose>:
 800beca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bece:	f000 b8a1 	b.w	800c014 <_close_r>

0800bed2 <__swbuf_r>:
 800bed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed4:	460e      	mov	r6, r1
 800bed6:	4614      	mov	r4, r2
 800bed8:	4605      	mov	r5, r0
 800beda:	b118      	cbz	r0, 800bee4 <__swbuf_r+0x12>
 800bedc:	6a03      	ldr	r3, [r0, #32]
 800bede:	b90b      	cbnz	r3, 800bee4 <__swbuf_r+0x12>
 800bee0:	f7ff feda 	bl	800bc98 <__sinit>
 800bee4:	69a3      	ldr	r3, [r4, #24]
 800bee6:	60a3      	str	r3, [r4, #8]
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	071a      	lsls	r2, r3, #28
 800beec:	d501      	bpl.n	800bef2 <__swbuf_r+0x20>
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	b943      	cbnz	r3, 800bf04 <__swbuf_r+0x32>
 800bef2:	4621      	mov	r1, r4
 800bef4:	4628      	mov	r0, r5
 800bef6:	f000 f82b 	bl	800bf50 <__swsetup_r>
 800befa:	b118      	cbz	r0, 800bf04 <__swbuf_r+0x32>
 800befc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bf00:	4638      	mov	r0, r7
 800bf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	6922      	ldr	r2, [r4, #16]
 800bf08:	b2f6      	uxtb	r6, r6
 800bf0a:	1a98      	subs	r0, r3, r2
 800bf0c:	6963      	ldr	r3, [r4, #20]
 800bf0e:	4637      	mov	r7, r6
 800bf10:	4283      	cmp	r3, r0
 800bf12:	dc05      	bgt.n	800bf20 <__swbuf_r+0x4e>
 800bf14:	4621      	mov	r1, r4
 800bf16:	4628      	mov	r0, r5
 800bf18:	f001 fe56 	bl	800dbc8 <_fflush_r>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d1ed      	bne.n	800befc <__swbuf_r+0x2a>
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	60a3      	str	r3, [r4, #8]
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	6022      	str	r2, [r4, #0]
 800bf2c:	701e      	strb	r6, [r3, #0]
 800bf2e:	6962      	ldr	r2, [r4, #20]
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d004      	beq.n	800bf40 <__swbuf_r+0x6e>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	07db      	lsls	r3, r3, #31
 800bf3a:	d5e1      	bpl.n	800bf00 <__swbuf_r+0x2e>
 800bf3c:	2e0a      	cmp	r6, #10
 800bf3e:	d1df      	bne.n	800bf00 <__swbuf_r+0x2e>
 800bf40:	4621      	mov	r1, r4
 800bf42:	4628      	mov	r0, r5
 800bf44:	f001 fe40 	bl	800dbc8 <_fflush_r>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d0d9      	beq.n	800bf00 <__swbuf_r+0x2e>
 800bf4c:	e7d6      	b.n	800befc <__swbuf_r+0x2a>
	...

0800bf50 <__swsetup_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4b29      	ldr	r3, [pc, #164]	@ (800bff8 <__swsetup_r+0xa8>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b118      	cbz	r0, 800bf64 <__swsetup_r+0x14>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swsetup_r+0x14>
 800bf60:	f7ff fe9a 	bl	800bc98 <__sinit>
 800bf64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf68:	0719      	lsls	r1, r3, #28
 800bf6a:	d422      	bmi.n	800bfb2 <__swsetup_r+0x62>
 800bf6c:	06da      	lsls	r2, r3, #27
 800bf6e:	d407      	bmi.n	800bf80 <__swsetup_r+0x30>
 800bf70:	2209      	movs	r2, #9
 800bf72:	602a      	str	r2, [r5, #0]
 800bf74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf7c:	81a3      	strh	r3, [r4, #12]
 800bf7e:	e033      	b.n	800bfe8 <__swsetup_r+0x98>
 800bf80:	0758      	lsls	r0, r3, #29
 800bf82:	d512      	bpl.n	800bfaa <__swsetup_r+0x5a>
 800bf84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf86:	b141      	cbz	r1, 800bf9a <__swsetup_r+0x4a>
 800bf88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf8c:	4299      	cmp	r1, r3
 800bf8e:	d002      	beq.n	800bf96 <__swsetup_r+0x46>
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff f89b 	bl	800b0cc <_free_r>
 800bf96:	2300      	movs	r3, #0
 800bf98:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	6063      	str	r3, [r4, #4]
 800bfa6:	6923      	ldr	r3, [r4, #16]
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	f043 0308 	orr.w	r3, r3, #8
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	b94b      	cbnz	r3, 800bfca <__swsetup_r+0x7a>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bfbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfc0:	d003      	beq.n	800bfca <__swsetup_r+0x7a>
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f001 fe4c 	bl	800dc62 <__smakebuf_r>
 800bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfce:	f013 0201 	ands.w	r2, r3, #1
 800bfd2:	d00a      	beq.n	800bfea <__swsetup_r+0x9a>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	60a2      	str	r2, [r4, #8]
 800bfd8:	6962      	ldr	r2, [r4, #20]
 800bfda:	4252      	negs	r2, r2
 800bfdc:	61a2      	str	r2, [r4, #24]
 800bfde:	6922      	ldr	r2, [r4, #16]
 800bfe0:	b942      	cbnz	r2, 800bff4 <__swsetup_r+0xa4>
 800bfe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bfe6:	d1c5      	bne.n	800bf74 <__swsetup_r+0x24>
 800bfe8:	bd38      	pop	{r3, r4, r5, pc}
 800bfea:	0799      	lsls	r1, r3, #30
 800bfec:	bf58      	it	pl
 800bfee:	6962      	ldrpl	r2, [r4, #20]
 800bff0:	60a2      	str	r2, [r4, #8]
 800bff2:	e7f4      	b.n	800bfde <__swsetup_r+0x8e>
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7f7      	b.n	800bfe8 <__swsetup_r+0x98>
 800bff8:	2000002c 	.word	0x2000002c

0800bffc <memset>:
 800bffc:	4603      	mov	r3, r0
 800bffe:	4402      	add	r2, r0
 800c000:	4293      	cmp	r3, r2
 800c002:	d100      	bne.n	800c006 <memset+0xa>
 800c004:	4770      	bx	lr
 800c006:	f803 1b01 	strb.w	r1, [r3], #1
 800c00a:	e7f9      	b.n	800c000 <memset+0x4>

0800c00c <_localeconv_r>:
 800c00c:	4800      	ldr	r0, [pc, #0]	@ (800c010 <_localeconv_r+0x4>)
 800c00e:	4770      	bx	lr
 800c010:	2000016c 	.word	0x2000016c

0800c014 <_close_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	2300      	movs	r3, #0
 800c018:	4d05      	ldr	r5, [pc, #20]	@ (800c030 <_close_r+0x1c>)
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	f7f6 fbf3 	bl	800280a <_close>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_close_r+0x1a>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_close_r+0x1a>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	20003f28 	.word	0x20003f28

0800c034 <_reclaim_reent>:
 800c034:	4b29      	ldr	r3, [pc, #164]	@ (800c0dc <_reclaim_reent+0xa8>)
 800c036:	b570      	push	{r4, r5, r6, lr}
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4604      	mov	r4, r0
 800c03c:	4283      	cmp	r3, r0
 800c03e:	d04b      	beq.n	800c0d8 <_reclaim_reent+0xa4>
 800c040:	69c3      	ldr	r3, [r0, #28]
 800c042:	b1ab      	cbz	r3, 800c070 <_reclaim_reent+0x3c>
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	b16b      	cbz	r3, 800c064 <_reclaim_reent+0x30>
 800c048:	2500      	movs	r5, #0
 800c04a:	69e3      	ldr	r3, [r4, #28]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	5959      	ldr	r1, [r3, r5]
 800c050:	2900      	cmp	r1, #0
 800c052:	d13b      	bne.n	800c0cc <_reclaim_reent+0x98>
 800c054:	3504      	adds	r5, #4
 800c056:	2d80      	cmp	r5, #128	@ 0x80
 800c058:	d1f7      	bne.n	800c04a <_reclaim_reent+0x16>
 800c05a:	69e3      	ldr	r3, [r4, #28]
 800c05c:	4620      	mov	r0, r4
 800c05e:	68d9      	ldr	r1, [r3, #12]
 800c060:	f7ff f834 	bl	800b0cc <_free_r>
 800c064:	69e3      	ldr	r3, [r4, #28]
 800c066:	6819      	ldr	r1, [r3, #0]
 800c068:	b111      	cbz	r1, 800c070 <_reclaim_reent+0x3c>
 800c06a:	4620      	mov	r0, r4
 800c06c:	f7ff f82e 	bl	800b0cc <_free_r>
 800c070:	6961      	ldr	r1, [r4, #20]
 800c072:	b111      	cbz	r1, 800c07a <_reclaim_reent+0x46>
 800c074:	4620      	mov	r0, r4
 800c076:	f7ff f829 	bl	800b0cc <_free_r>
 800c07a:	69e1      	ldr	r1, [r4, #28]
 800c07c:	b111      	cbz	r1, 800c084 <_reclaim_reent+0x50>
 800c07e:	4620      	mov	r0, r4
 800c080:	f7ff f824 	bl	800b0cc <_free_r>
 800c084:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c086:	b111      	cbz	r1, 800c08e <_reclaim_reent+0x5a>
 800c088:	4620      	mov	r0, r4
 800c08a:	f7ff f81f 	bl	800b0cc <_free_r>
 800c08e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c090:	b111      	cbz	r1, 800c098 <_reclaim_reent+0x64>
 800c092:	4620      	mov	r0, r4
 800c094:	f7ff f81a 	bl	800b0cc <_free_r>
 800c098:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c09a:	b111      	cbz	r1, 800c0a2 <_reclaim_reent+0x6e>
 800c09c:	4620      	mov	r0, r4
 800c09e:	f7ff f815 	bl	800b0cc <_free_r>
 800c0a2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c0a4:	b111      	cbz	r1, 800c0ac <_reclaim_reent+0x78>
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f7ff f810 	bl	800b0cc <_free_r>
 800c0ac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c0ae:	b111      	cbz	r1, 800c0b6 <_reclaim_reent+0x82>
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f7ff f80b 	bl	800b0cc <_free_r>
 800c0b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c0b8:	b111      	cbz	r1, 800c0c0 <_reclaim_reent+0x8c>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f7ff f806 	bl	800b0cc <_free_r>
 800c0c0:	6a23      	ldr	r3, [r4, #32]
 800c0c2:	b14b      	cbz	r3, 800c0d8 <_reclaim_reent+0xa4>
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0ca:	4718      	bx	r3
 800c0cc:	680e      	ldr	r6, [r1, #0]
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7fe fffc 	bl	800b0cc <_free_r>
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	e7bb      	b.n	800c050 <_reclaim_reent+0x1c>
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	bf00      	nop
 800c0dc:	2000002c 	.word	0x2000002c

0800c0e0 <_lseek_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4d05      	ldr	r5, [pc, #20]	@ (800c100 <_lseek_r+0x20>)
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f7f6 fbaf 	bl	8002852 <_lseek>
 800c0f4:	1c43      	adds	r3, r0, #1
 800c0f6:	d102      	bne.n	800c0fe <_lseek_r+0x1e>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	b103      	cbz	r3, 800c0fe <_lseek_r+0x1e>
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	20003f28 	.word	0x20003f28

0800c104 <_read_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	4611      	mov	r1, r2
 800c10c:	2200      	movs	r2, #0
 800c10e:	4d05      	ldr	r5, [pc, #20]	@ (800c124 <_read_r+0x20>)
 800c110:	602a      	str	r2, [r5, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	f7f6 fb5c 	bl	80027d0 <_read>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <_read_r+0x1e>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b103      	cbz	r3, 800c122 <_read_r+0x1e>
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	20003f28 	.word	0x20003f28

0800c128 <_sbrk_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	2300      	movs	r3, #0
 800c12c:	4d05      	ldr	r5, [pc, #20]	@ (800c144 <_sbrk_r+0x1c>)
 800c12e:	4604      	mov	r4, r0
 800c130:	4608      	mov	r0, r1
 800c132:	602b      	str	r3, [r5, #0]
 800c134:	f7f6 fb9a 	bl	800286c <_sbrk>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_sbrk_r+0x1a>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_sbrk_r+0x1a>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	20003f28 	.word	0x20003f28

0800c148 <_write_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4604      	mov	r4, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	4611      	mov	r1, r2
 800c150:	2200      	movs	r2, #0
 800c152:	4d05      	ldr	r5, [pc, #20]	@ (800c168 <_write_r+0x20>)
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f7f6 fc88 	bl	8002a6c <_write>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d102      	bne.n	800c166 <_write_r+0x1e>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	b103      	cbz	r3, 800c166 <_write_r+0x1e>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	20003f28 	.word	0x20003f28

0800c16c <__errno>:
 800c16c:	4b01      	ldr	r3, [pc, #4]	@ (800c174 <__errno+0x8>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	2000002c 	.word	0x2000002c

0800c178 <__libc_init_array>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	2600      	movs	r6, #0
 800c17c:	4d0c      	ldr	r5, [pc, #48]	@ (800c1b0 <__libc_init_array+0x38>)
 800c17e:	4c0d      	ldr	r4, [pc, #52]	@ (800c1b4 <__libc_init_array+0x3c>)
 800c180:	1b64      	subs	r4, r4, r5
 800c182:	10a4      	asrs	r4, r4, #2
 800c184:	42a6      	cmp	r6, r4
 800c186:	d109      	bne.n	800c19c <__libc_init_array+0x24>
 800c188:	f001 feca 	bl	800df20 <_init>
 800c18c:	2600      	movs	r6, #0
 800c18e:	4d0a      	ldr	r5, [pc, #40]	@ (800c1b8 <__libc_init_array+0x40>)
 800c190:	4c0a      	ldr	r4, [pc, #40]	@ (800c1bc <__libc_init_array+0x44>)
 800c192:	1b64      	subs	r4, r4, r5
 800c194:	10a4      	asrs	r4, r4, #2
 800c196:	42a6      	cmp	r6, r4
 800c198:	d105      	bne.n	800c1a6 <__libc_init_array+0x2e>
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1a0:	4798      	blx	r3
 800c1a2:	3601      	adds	r6, #1
 800c1a4:	e7ee      	b.n	800c184 <__libc_init_array+0xc>
 800c1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1aa:	4798      	blx	r3
 800c1ac:	3601      	adds	r6, #1
 800c1ae:	e7f2      	b.n	800c196 <__libc_init_array+0x1e>
 800c1b0:	0800e8b8 	.word	0x0800e8b8
 800c1b4:	0800e8b8 	.word	0x0800e8b8
 800c1b8:	0800e8b8 	.word	0x0800e8b8
 800c1bc:	0800e8bc 	.word	0x0800e8bc

0800c1c0 <memchr>:
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	b2c9      	uxtb	r1, r1
 800c1c6:	4402      	add	r2, r0
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	d101      	bne.n	800c1d2 <memchr+0x12>
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	e003      	b.n	800c1da <memchr+0x1a>
 800c1d2:	7804      	ldrb	r4, [r0, #0]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	428c      	cmp	r4, r1
 800c1d8:	d1f6      	bne.n	800c1c8 <memchr+0x8>
 800c1da:	bd10      	pop	{r4, pc}

0800c1dc <memcpy>:
 800c1dc:	440a      	add	r2, r1
 800c1de:	4291      	cmp	r1, r2
 800c1e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c1e4:	d100      	bne.n	800c1e8 <memcpy+0xc>
 800c1e6:	4770      	bx	lr
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ee:	4291      	cmp	r1, r2
 800c1f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1f4:	d1f9      	bne.n	800c1ea <memcpy+0xe>
 800c1f6:	bd10      	pop	{r4, pc}

0800c1f8 <quorem>:
 800c1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fc:	6903      	ldr	r3, [r0, #16]
 800c1fe:	690c      	ldr	r4, [r1, #16]
 800c200:	4607      	mov	r7, r0
 800c202:	42a3      	cmp	r3, r4
 800c204:	db7e      	blt.n	800c304 <quorem+0x10c>
 800c206:	3c01      	subs	r4, #1
 800c208:	00a3      	lsls	r3, r4, #2
 800c20a:	f100 0514 	add.w	r5, r0, #20
 800c20e:	f101 0814 	add.w	r8, r1, #20
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c218:	9301      	str	r3, [sp, #4]
 800c21a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c21e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c222:	3301      	adds	r3, #1
 800c224:	429a      	cmp	r2, r3
 800c226:	fbb2 f6f3 	udiv	r6, r2, r3
 800c22a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c22e:	d32e      	bcc.n	800c28e <quorem+0x96>
 800c230:	f04f 0a00 	mov.w	sl, #0
 800c234:	46c4      	mov	ip, r8
 800c236:	46ae      	mov	lr, r5
 800c238:	46d3      	mov	fp, sl
 800c23a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c23e:	b298      	uxth	r0, r3
 800c240:	fb06 a000 	mla	r0, r6, r0, sl
 800c244:	0c1b      	lsrs	r3, r3, #16
 800c246:	0c02      	lsrs	r2, r0, #16
 800c248:	fb06 2303 	mla	r3, r6, r3, r2
 800c24c:	f8de 2000 	ldr.w	r2, [lr]
 800c250:	b280      	uxth	r0, r0
 800c252:	b292      	uxth	r2, r2
 800c254:	1a12      	subs	r2, r2, r0
 800c256:	445a      	add	r2, fp
 800c258:	f8de 0000 	ldr.w	r0, [lr]
 800c25c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c260:	b29b      	uxth	r3, r3
 800c262:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c266:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c26a:	b292      	uxth	r2, r2
 800c26c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c270:	45e1      	cmp	r9, ip
 800c272:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c276:	f84e 2b04 	str.w	r2, [lr], #4
 800c27a:	d2de      	bcs.n	800c23a <quorem+0x42>
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	58eb      	ldr	r3, [r5, r3]
 800c280:	b92b      	cbnz	r3, 800c28e <quorem+0x96>
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	3b04      	subs	r3, #4
 800c286:	429d      	cmp	r5, r3
 800c288:	461a      	mov	r2, r3
 800c28a:	d32f      	bcc.n	800c2ec <quorem+0xf4>
 800c28c:	613c      	str	r4, [r7, #16]
 800c28e:	4638      	mov	r0, r7
 800c290:	f001 f87a 	bl	800d388 <__mcmp>
 800c294:	2800      	cmp	r0, #0
 800c296:	db25      	blt.n	800c2e4 <quorem+0xec>
 800c298:	4629      	mov	r1, r5
 800c29a:	2000      	movs	r0, #0
 800c29c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2a0:	f8d1 c000 	ldr.w	ip, [r1]
 800c2a4:	fa1f fe82 	uxth.w	lr, r2
 800c2a8:	fa1f f38c 	uxth.w	r3, ip
 800c2ac:	eba3 030e 	sub.w	r3, r3, lr
 800c2b0:	4403      	add	r3, r0
 800c2b2:	0c12      	lsrs	r2, r2, #16
 800c2b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c2b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2c2:	45c1      	cmp	r9, r8
 800c2c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2c8:	f841 3b04 	str.w	r3, [r1], #4
 800c2cc:	d2e6      	bcs.n	800c29c <quorem+0xa4>
 800c2ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2d6:	b922      	cbnz	r2, 800c2e2 <quorem+0xea>
 800c2d8:	3b04      	subs	r3, #4
 800c2da:	429d      	cmp	r5, r3
 800c2dc:	461a      	mov	r2, r3
 800c2de:	d30b      	bcc.n	800c2f8 <quorem+0x100>
 800c2e0:	613c      	str	r4, [r7, #16]
 800c2e2:	3601      	adds	r6, #1
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	b003      	add	sp, #12
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	3b04      	subs	r3, #4
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d1cb      	bne.n	800c28c <quorem+0x94>
 800c2f4:	3c01      	subs	r4, #1
 800c2f6:	e7c6      	b.n	800c286 <quorem+0x8e>
 800c2f8:	6812      	ldr	r2, [r2, #0]
 800c2fa:	3b04      	subs	r3, #4
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	d1ef      	bne.n	800c2e0 <quorem+0xe8>
 800c300:	3c01      	subs	r4, #1
 800c302:	e7ea      	b.n	800c2da <quorem+0xe2>
 800c304:	2000      	movs	r0, #0
 800c306:	e7ee      	b.n	800c2e6 <quorem+0xee>

0800c308 <_dtoa_r>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	4614      	mov	r4, r2
 800c30e:	461d      	mov	r5, r3
 800c310:	69c7      	ldr	r7, [r0, #28]
 800c312:	b097      	sub	sp, #92	@ 0x5c
 800c314:	4683      	mov	fp, r0
 800c316:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c31a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c31c:	b97f      	cbnz	r7, 800c33e <_dtoa_r+0x36>
 800c31e:	2010      	movs	r0, #16
 800c320:	f7fe ff1c 	bl	800b15c <malloc>
 800c324:	4602      	mov	r2, r0
 800c326:	f8cb 001c 	str.w	r0, [fp, #28]
 800c32a:	b920      	cbnz	r0, 800c336 <_dtoa_r+0x2e>
 800c32c:	21ef      	movs	r1, #239	@ 0xef
 800c32e:	4ba8      	ldr	r3, [pc, #672]	@ (800c5d0 <_dtoa_r+0x2c8>)
 800c330:	48a8      	ldr	r0, [pc, #672]	@ (800c5d4 <_dtoa_r+0x2cc>)
 800c332:	f001 fd0f 	bl	800dd54 <__assert_func>
 800c336:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c33a:	6007      	str	r7, [r0, #0]
 800c33c:	60c7      	str	r7, [r0, #12]
 800c33e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	b159      	cbz	r1, 800c35e <_dtoa_r+0x56>
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	2301      	movs	r3, #1
 800c34a:	4093      	lsls	r3, r2
 800c34c:	604a      	str	r2, [r1, #4]
 800c34e:	608b      	str	r3, [r1, #8]
 800c350:	4658      	mov	r0, fp
 800c352:	f000 fde1 	bl	800cf18 <_Bfree>
 800c356:	2200      	movs	r2, #0
 800c358:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	1e2b      	subs	r3, r5, #0
 800c360:	bfaf      	iteee	ge
 800c362:	2300      	movge	r3, #0
 800c364:	2201      	movlt	r2, #1
 800c366:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c36a:	9303      	strlt	r3, [sp, #12]
 800c36c:	bfa8      	it	ge
 800c36e:	6033      	strge	r3, [r6, #0]
 800c370:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c374:	4b98      	ldr	r3, [pc, #608]	@ (800c5d8 <_dtoa_r+0x2d0>)
 800c376:	bfb8      	it	lt
 800c378:	6032      	strlt	r2, [r6, #0]
 800c37a:	ea33 0308 	bics.w	r3, r3, r8
 800c37e:	d112      	bne.n	800c3a6 <_dtoa_r+0x9e>
 800c380:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c384:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c38c:	4323      	orrs	r3, r4
 800c38e:	f000 8550 	beq.w	800ce32 <_dtoa_r+0xb2a>
 800c392:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c394:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c5dc <_dtoa_r+0x2d4>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8552 	beq.w	800ce42 <_dtoa_r+0xb3a>
 800c39e:	f10a 0303 	add.w	r3, sl, #3
 800c3a2:	f000 bd4c 	b.w	800ce3e <_dtoa_r+0xb36>
 800c3a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c3ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f7f4 faf7 	bl	80009a8 <__aeabi_dcmpeq>
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	b158      	cbz	r0, 800c3d6 <_dtoa_r+0xce>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c3c2:	6013      	str	r3, [r2, #0]
 800c3c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c3c6:	b113      	cbz	r3, 800c3ce <_dtoa_r+0xc6>
 800c3c8:	4b85      	ldr	r3, [pc, #532]	@ (800c5e0 <_dtoa_r+0x2d8>)
 800c3ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c5e4 <_dtoa_r+0x2dc>
 800c3d2:	f000 bd36 	b.w	800ce42 <_dtoa_r+0xb3a>
 800c3d6:	ab14      	add	r3, sp, #80	@ 0x50
 800c3d8:	9301      	str	r3, [sp, #4]
 800c3da:	ab15      	add	r3, sp, #84	@ 0x54
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	4658      	mov	r0, fp
 800c3e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c3e4:	f001 f880 	bl	800d4e8 <__d2b>
 800c3e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c3ec:	4681      	mov	r9, r0
 800c3ee:	2e00      	cmp	r6, #0
 800c3f0:	d077      	beq.n	800c4e2 <_dtoa_r+0x1da>
 800c3f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c3fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c400:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c404:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c408:	9712      	str	r7, [sp, #72]	@ 0x48
 800c40a:	4619      	mov	r1, r3
 800c40c:	2200      	movs	r2, #0
 800c40e:	4b76      	ldr	r3, [pc, #472]	@ (800c5e8 <_dtoa_r+0x2e0>)
 800c410:	f7f3 feaa 	bl	8000168 <__aeabi_dsub>
 800c414:	a368      	add	r3, pc, #416	@ (adr r3, 800c5b8 <_dtoa_r+0x2b0>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	f7f4 f85d 	bl	80004d8 <__aeabi_dmul>
 800c41e:	a368      	add	r3, pc, #416	@ (adr r3, 800c5c0 <_dtoa_r+0x2b8>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7f3 fea2 	bl	800016c <__adddf3>
 800c428:	4604      	mov	r4, r0
 800c42a:	4630      	mov	r0, r6
 800c42c:	460d      	mov	r5, r1
 800c42e:	f7f3 ffe9 	bl	8000404 <__aeabi_i2d>
 800c432:	a365      	add	r3, pc, #404	@ (adr r3, 800c5c8 <_dtoa_r+0x2c0>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f4 f84e 	bl	80004d8 <__aeabi_dmul>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4620      	mov	r0, r4
 800c442:	4629      	mov	r1, r5
 800c444:	f7f3 fe92 	bl	800016c <__adddf3>
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	f7f4 faf4 	bl	8000a38 <__aeabi_d2iz>
 800c450:	2200      	movs	r2, #0
 800c452:	4607      	mov	r7, r0
 800c454:	2300      	movs	r3, #0
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f4 faaf 	bl	80009bc <__aeabi_dcmplt>
 800c45e:	b140      	cbz	r0, 800c472 <_dtoa_r+0x16a>
 800c460:	4638      	mov	r0, r7
 800c462:	f7f3 ffcf 	bl	8000404 <__aeabi_i2d>
 800c466:	4622      	mov	r2, r4
 800c468:	462b      	mov	r3, r5
 800c46a:	f7f4 fa9d 	bl	80009a8 <__aeabi_dcmpeq>
 800c46e:	b900      	cbnz	r0, 800c472 <_dtoa_r+0x16a>
 800c470:	3f01      	subs	r7, #1
 800c472:	2f16      	cmp	r7, #22
 800c474:	d853      	bhi.n	800c51e <_dtoa_r+0x216>
 800c476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c47a:	4b5c      	ldr	r3, [pc, #368]	@ (800c5ec <_dtoa_r+0x2e4>)
 800c47c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f4 fa9a 	bl	80009bc <__aeabi_dcmplt>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d04a      	beq.n	800c522 <_dtoa_r+0x21a>
 800c48c:	2300      	movs	r3, #0
 800c48e:	3f01      	subs	r7, #1
 800c490:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c492:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c494:	1b9b      	subs	r3, r3, r6
 800c496:	1e5a      	subs	r2, r3, #1
 800c498:	bf46      	itte	mi
 800c49a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c49e:	2300      	movmi	r3, #0
 800c4a0:	f04f 0800 	movpl.w	r8, #0
 800c4a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4a6:	bf48      	it	mi
 800c4a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c4aa:	2f00      	cmp	r7, #0
 800c4ac:	db3b      	blt.n	800c526 <_dtoa_r+0x21e>
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	970e      	str	r7, [sp, #56]	@ 0x38
 800c4b2:	443b      	add	r3, r7
 800c4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4bc:	2b09      	cmp	r3, #9
 800c4be:	d866      	bhi.n	800c58e <_dtoa_r+0x286>
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	bfc4      	itt	gt
 800c4c4:	3b04      	subgt	r3, #4
 800c4c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c4c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4ca:	bfc8      	it	gt
 800c4cc:	2400      	movgt	r4, #0
 800c4ce:	f1a3 0302 	sub.w	r3, r3, #2
 800c4d2:	bfd8      	it	le
 800c4d4:	2401      	movle	r4, #1
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d864      	bhi.n	800c5a4 <_dtoa_r+0x29c>
 800c4da:	e8df f003 	tbb	[pc, r3]
 800c4de:	382b      	.short	0x382b
 800c4e0:	5636      	.short	0x5636
 800c4e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c4e6:	441e      	add	r6, r3
 800c4e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c4ec:	2b20      	cmp	r3, #32
 800c4ee:	bfc1      	itttt	gt
 800c4f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c4f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c4fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c500:	bfd6      	itet	le
 800c502:	f1c3 0320 	rsble	r3, r3, #32
 800c506:	ea48 0003 	orrgt.w	r0, r8, r3
 800c50a:	fa04 f003 	lslle.w	r0, r4, r3
 800c50e:	f7f3 ff69 	bl	80003e4 <__aeabi_ui2d>
 800c512:	2201      	movs	r2, #1
 800c514:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c518:	3e01      	subs	r6, #1
 800c51a:	9212      	str	r2, [sp, #72]	@ 0x48
 800c51c:	e775      	b.n	800c40a <_dtoa_r+0x102>
 800c51e:	2301      	movs	r3, #1
 800c520:	e7b6      	b.n	800c490 <_dtoa_r+0x188>
 800c522:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c524:	e7b5      	b.n	800c492 <_dtoa_r+0x18a>
 800c526:	427b      	negs	r3, r7
 800c528:	930a      	str	r3, [sp, #40]	@ 0x28
 800c52a:	2300      	movs	r3, #0
 800c52c:	eba8 0807 	sub.w	r8, r8, r7
 800c530:	930e      	str	r3, [sp, #56]	@ 0x38
 800c532:	e7c2      	b.n	800c4ba <_dtoa_r+0x1b2>
 800c534:	2300      	movs	r3, #0
 800c536:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c538:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dc35      	bgt.n	800c5aa <_dtoa_r+0x2a2>
 800c53e:	2301      	movs	r3, #1
 800c540:	461a      	mov	r2, r3
 800c542:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c546:	9221      	str	r2, [sp, #132]	@ 0x84
 800c548:	e00b      	b.n	800c562 <_dtoa_r+0x25a>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7f3      	b.n	800c536 <_dtoa_r+0x22e>
 800c54e:	2300      	movs	r3, #0
 800c550:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c552:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c554:	18fb      	adds	r3, r7, r3
 800c556:	9308      	str	r3, [sp, #32]
 800c558:	3301      	adds	r3, #1
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	9307      	str	r3, [sp, #28]
 800c55e:	bfb8      	it	lt
 800c560:	2301      	movlt	r3, #1
 800c562:	2100      	movs	r1, #0
 800c564:	2204      	movs	r2, #4
 800c566:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c56a:	f102 0514 	add.w	r5, r2, #20
 800c56e:	429d      	cmp	r5, r3
 800c570:	d91f      	bls.n	800c5b2 <_dtoa_r+0x2aa>
 800c572:	6041      	str	r1, [r0, #4]
 800c574:	4658      	mov	r0, fp
 800c576:	f000 fc8f 	bl	800ce98 <_Balloc>
 800c57a:	4682      	mov	sl, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d139      	bne.n	800c5f4 <_dtoa_r+0x2ec>
 800c580:	4602      	mov	r2, r0
 800c582:	f240 11af 	movw	r1, #431	@ 0x1af
 800c586:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f0 <_dtoa_r+0x2e8>)
 800c588:	e6d2      	b.n	800c330 <_dtoa_r+0x28>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e7e0      	b.n	800c550 <_dtoa_r+0x248>
 800c58e:	2401      	movs	r4, #1
 800c590:	2300      	movs	r3, #0
 800c592:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c594:	9320      	str	r3, [sp, #128]	@ 0x80
 800c596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c59a:	2200      	movs	r2, #0
 800c59c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c5a0:	2312      	movs	r3, #18
 800c5a2:	e7d0      	b.n	800c546 <_dtoa_r+0x23e>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5a8:	e7f5      	b.n	800c596 <_dtoa_r+0x28e>
 800c5aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c5b0:	e7d7      	b.n	800c562 <_dtoa_r+0x25a>
 800c5b2:	3101      	adds	r1, #1
 800c5b4:	0052      	lsls	r2, r2, #1
 800c5b6:	e7d8      	b.n	800c56a <_dtoa_r+0x262>
 800c5b8:	636f4361 	.word	0x636f4361
 800c5bc:	3fd287a7 	.word	0x3fd287a7
 800c5c0:	8b60c8b3 	.word	0x8b60c8b3
 800c5c4:	3fc68a28 	.word	0x3fc68a28
 800c5c8:	509f79fb 	.word	0x509f79fb
 800c5cc:	3fd34413 	.word	0x3fd34413
 800c5d0:	0800e581 	.word	0x0800e581
 800c5d4:	0800e598 	.word	0x0800e598
 800c5d8:	7ff00000 	.word	0x7ff00000
 800c5dc:	0800e57d 	.word	0x0800e57d
 800c5e0:	0800e551 	.word	0x0800e551
 800c5e4:	0800e550 	.word	0x0800e550
 800c5e8:	3ff80000 	.word	0x3ff80000
 800c5ec:	0800e690 	.word	0x0800e690
 800c5f0:	0800e5f0 	.word	0x0800e5f0
 800c5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5f8:	6018      	str	r0, [r3, #0]
 800c5fa:	9b07      	ldr	r3, [sp, #28]
 800c5fc:	2b0e      	cmp	r3, #14
 800c5fe:	f200 80a4 	bhi.w	800c74a <_dtoa_r+0x442>
 800c602:	2c00      	cmp	r4, #0
 800c604:	f000 80a1 	beq.w	800c74a <_dtoa_r+0x442>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	dd33      	ble.n	800c674 <_dtoa_r+0x36c>
 800c60c:	4b86      	ldr	r3, [pc, #536]	@ (800c828 <_dtoa_r+0x520>)
 800c60e:	f007 020f 	and.w	r2, r7, #15
 800c612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c616:	05f8      	lsls	r0, r7, #23
 800c618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c61c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c620:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c624:	d516      	bpl.n	800c654 <_dtoa_r+0x34c>
 800c626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c62a:	4b80      	ldr	r3, [pc, #512]	@ (800c82c <_dtoa_r+0x524>)
 800c62c:	2603      	movs	r6, #3
 800c62e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c632:	f7f4 f87b 	bl	800072c <__aeabi_ddiv>
 800c636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63a:	f004 040f 	and.w	r4, r4, #15
 800c63e:	4d7b      	ldr	r5, [pc, #492]	@ (800c82c <_dtoa_r+0x524>)
 800c640:	b954      	cbnz	r4, 800c658 <_dtoa_r+0x350>
 800c642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64a:	f7f4 f86f 	bl	800072c <__aeabi_ddiv>
 800c64e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c652:	e028      	b.n	800c6a6 <_dtoa_r+0x39e>
 800c654:	2602      	movs	r6, #2
 800c656:	e7f2      	b.n	800c63e <_dtoa_r+0x336>
 800c658:	07e1      	lsls	r1, r4, #31
 800c65a:	d508      	bpl.n	800c66e <_dtoa_r+0x366>
 800c65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c660:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c664:	f7f3 ff38 	bl	80004d8 <__aeabi_dmul>
 800c668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c66c:	3601      	adds	r6, #1
 800c66e:	1064      	asrs	r4, r4, #1
 800c670:	3508      	adds	r5, #8
 800c672:	e7e5      	b.n	800c640 <_dtoa_r+0x338>
 800c674:	f000 80d2 	beq.w	800c81c <_dtoa_r+0x514>
 800c678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c67c:	427c      	negs	r4, r7
 800c67e:	4b6a      	ldr	r3, [pc, #424]	@ (800c828 <_dtoa_r+0x520>)
 800c680:	f004 020f 	and.w	r2, r4, #15
 800c684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68c:	f7f3 ff24 	bl	80004d8 <__aeabi_dmul>
 800c690:	2602      	movs	r6, #2
 800c692:	2300      	movs	r3, #0
 800c694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c698:	4d64      	ldr	r5, [pc, #400]	@ (800c82c <_dtoa_r+0x524>)
 800c69a:	1124      	asrs	r4, r4, #4
 800c69c:	2c00      	cmp	r4, #0
 800c69e:	f040 80b2 	bne.w	800c806 <_dtoa_r+0x4fe>
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1d3      	bne.n	800c64e <_dtoa_r+0x346>
 800c6a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c6aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 80b7 	beq.w	800c820 <_dtoa_r+0x518>
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	4b5d      	ldr	r3, [pc, #372]	@ (800c830 <_dtoa_r+0x528>)
 800c6ba:	f7f4 f97f 	bl	80009bc <__aeabi_dcmplt>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f000 80ae 	beq.w	800c820 <_dtoa_r+0x518>
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80aa 	beq.w	800c820 <_dtoa_r+0x518>
 800c6cc:	9b08      	ldr	r3, [sp, #32]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dd37      	ble.n	800c742 <_dtoa_r+0x43a>
 800c6d2:	1e7b      	subs	r3, r7, #1
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	9304      	str	r3, [sp, #16]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4b55      	ldr	r3, [pc, #340]	@ (800c834 <_dtoa_r+0x52c>)
 800c6de:	f7f3 fefb 	bl	80004d8 <__aeabi_dmul>
 800c6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e6:	9c08      	ldr	r4, [sp, #32]
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f7f3 fe8a 	bl	8000404 <__aeabi_i2d>
 800c6f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6f4:	f7f3 fef0 	bl	80004d8 <__aeabi_dmul>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c838 <_dtoa_r+0x530>)
 800c6fc:	f7f3 fd36 	bl	800016c <__adddf3>
 800c700:	4605      	mov	r5, r0
 800c702:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c706:	2c00      	cmp	r4, #0
 800c708:	f040 809a 	bne.w	800c840 <_dtoa_r+0x538>
 800c70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c710:	2200      	movs	r2, #0
 800c712:	4b4a      	ldr	r3, [pc, #296]	@ (800c83c <_dtoa_r+0x534>)
 800c714:	f7f3 fd28 	bl	8000168 <__aeabi_dsub>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c720:	462a      	mov	r2, r5
 800c722:	4633      	mov	r3, r6
 800c724:	f7f4 f968 	bl	80009f8 <__aeabi_dcmpgt>
 800c728:	2800      	cmp	r0, #0
 800c72a:	f040 828e 	bne.w	800cc4a <_dtoa_r+0x942>
 800c72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c732:	462a      	mov	r2, r5
 800c734:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c738:	f7f4 f940 	bl	80009bc <__aeabi_dcmplt>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f040 8127 	bne.w	800c990 <_dtoa_r+0x688>
 800c742:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c746:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c74a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f2c0 8163 	blt.w	800ca18 <_dtoa_r+0x710>
 800c752:	2f0e      	cmp	r7, #14
 800c754:	f300 8160 	bgt.w	800ca18 <_dtoa_r+0x710>
 800c758:	4b33      	ldr	r3, [pc, #204]	@ (800c828 <_dtoa_r+0x520>)
 800c75a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c75e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c762:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c766:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c768:	2b00      	cmp	r3, #0
 800c76a:	da03      	bge.n	800c774 <_dtoa_r+0x46c>
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f340 8100 	ble.w	800c974 <_dtoa_r+0x66c>
 800c774:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c778:	4656      	mov	r6, sl
 800c77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f7f3 ffd3 	bl	800072c <__aeabi_ddiv>
 800c786:	f7f4 f957 	bl	8000a38 <__aeabi_d2iz>
 800c78a:	4680      	mov	r8, r0
 800c78c:	f7f3 fe3a 	bl	8000404 <__aeabi_i2d>
 800c790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c794:	f7f3 fea0 	bl	80004d8 <__aeabi_dmul>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4620      	mov	r0, r4
 800c79e:	4629      	mov	r1, r5
 800c7a0:	f7f3 fce2 	bl	8000168 <__aeabi_dsub>
 800c7a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c7a8:	9d07      	ldr	r5, [sp, #28]
 800c7aa:	f806 4b01 	strb.w	r4, [r6], #1
 800c7ae:	eba6 040a 	sub.w	r4, r6, sl
 800c7b2:	42a5      	cmp	r5, r4
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	f040 8116 	bne.w	800c9e8 <_dtoa_r+0x6e0>
 800c7bc:	f7f3 fcd6 	bl	800016c <__adddf3>
 800c7c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	460d      	mov	r5, r1
 800c7c8:	f7f4 f916 	bl	80009f8 <__aeabi_dcmpgt>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f040 80f8 	bne.w	800c9c2 <_dtoa_r+0x6ba>
 800c7d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	f7f4 f8e5 	bl	80009a8 <__aeabi_dcmpeq>
 800c7de:	b118      	cbz	r0, 800c7e8 <_dtoa_r+0x4e0>
 800c7e0:	f018 0f01 	tst.w	r8, #1
 800c7e4:	f040 80ed 	bne.w	800c9c2 <_dtoa_r+0x6ba>
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	4658      	mov	r0, fp
 800c7ec:	f000 fb94 	bl	800cf18 <_Bfree>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	7033      	strb	r3, [r6, #0]
 800c7f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c7f6:	3701      	adds	r7, #1
 800c7f8:	601f      	str	r7, [r3, #0]
 800c7fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 8320 	beq.w	800ce42 <_dtoa_r+0xb3a>
 800c802:	601e      	str	r6, [r3, #0]
 800c804:	e31d      	b.n	800ce42 <_dtoa_r+0xb3a>
 800c806:	07e2      	lsls	r2, r4, #31
 800c808:	d505      	bpl.n	800c816 <_dtoa_r+0x50e>
 800c80a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c80e:	f7f3 fe63 	bl	80004d8 <__aeabi_dmul>
 800c812:	2301      	movs	r3, #1
 800c814:	3601      	adds	r6, #1
 800c816:	1064      	asrs	r4, r4, #1
 800c818:	3508      	adds	r5, #8
 800c81a:	e73f      	b.n	800c69c <_dtoa_r+0x394>
 800c81c:	2602      	movs	r6, #2
 800c81e:	e742      	b.n	800c6a6 <_dtoa_r+0x39e>
 800c820:	9c07      	ldr	r4, [sp, #28]
 800c822:	9704      	str	r7, [sp, #16]
 800c824:	e761      	b.n	800c6ea <_dtoa_r+0x3e2>
 800c826:	bf00      	nop
 800c828:	0800e690 	.word	0x0800e690
 800c82c:	0800e668 	.word	0x0800e668
 800c830:	3ff00000 	.word	0x3ff00000
 800c834:	40240000 	.word	0x40240000
 800c838:	401c0000 	.word	0x401c0000
 800c83c:	40140000 	.word	0x40140000
 800c840:	4b70      	ldr	r3, [pc, #448]	@ (800ca04 <_dtoa_r+0x6fc>)
 800c842:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c848:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c84c:	4454      	add	r4, sl
 800c84e:	2900      	cmp	r1, #0
 800c850:	d045      	beq.n	800c8de <_dtoa_r+0x5d6>
 800c852:	2000      	movs	r0, #0
 800c854:	496c      	ldr	r1, [pc, #432]	@ (800ca08 <_dtoa_r+0x700>)
 800c856:	f7f3 ff69 	bl	800072c <__aeabi_ddiv>
 800c85a:	4633      	mov	r3, r6
 800c85c:	462a      	mov	r2, r5
 800c85e:	f7f3 fc83 	bl	8000168 <__aeabi_dsub>
 800c862:	4656      	mov	r6, sl
 800c864:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c86c:	f7f4 f8e4 	bl	8000a38 <__aeabi_d2iz>
 800c870:	4605      	mov	r5, r0
 800c872:	f7f3 fdc7 	bl	8000404 <__aeabi_i2d>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c87e:	f7f3 fc73 	bl	8000168 <__aeabi_dsub>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	3530      	adds	r5, #48	@ 0x30
 800c888:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c88c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c890:	f806 5b01 	strb.w	r5, [r6], #1
 800c894:	f7f4 f892 	bl	80009bc <__aeabi_dcmplt>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d163      	bne.n	800c964 <_dtoa_r+0x65c>
 800c89c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	495a      	ldr	r1, [pc, #360]	@ (800ca0c <_dtoa_r+0x704>)
 800c8a4:	f7f3 fc60 	bl	8000168 <__aeabi_dsub>
 800c8a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8ac:	f7f4 f886 	bl	80009bc <__aeabi_dcmplt>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f040 8087 	bne.w	800c9c4 <_dtoa_r+0x6bc>
 800c8b6:	42a6      	cmp	r6, r4
 800c8b8:	f43f af43 	beq.w	800c742 <_dtoa_r+0x43a>
 800c8bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4b53      	ldr	r3, [pc, #332]	@ (800ca10 <_dtoa_r+0x708>)
 800c8c4:	f7f3 fe08 	bl	80004d8 <__aeabi_dmul>
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d2:	4b4f      	ldr	r3, [pc, #316]	@ (800ca10 <_dtoa_r+0x708>)
 800c8d4:	f7f3 fe00 	bl	80004d8 <__aeabi_dmul>
 800c8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8dc:	e7c4      	b.n	800c868 <_dtoa_r+0x560>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f7f3 fdf9 	bl	80004d8 <__aeabi_dmul>
 800c8e6:	4656      	mov	r6, sl
 800c8e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f2:	f7f4 f8a1 	bl	8000a38 <__aeabi_d2iz>
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	f7f3 fd84 	bl	8000404 <__aeabi_i2d>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c904:	f7f3 fc30 	bl	8000168 <__aeabi_dsub>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	3530      	adds	r5, #48	@ 0x30
 800c90e:	f806 5b01 	strb.w	r5, [r6], #1
 800c912:	42a6      	cmp	r6, r4
 800c914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c918:	f04f 0200 	mov.w	r2, #0
 800c91c:	d124      	bne.n	800c968 <_dtoa_r+0x660>
 800c91e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c922:	4b39      	ldr	r3, [pc, #228]	@ (800ca08 <_dtoa_r+0x700>)
 800c924:	f7f3 fc22 	bl	800016c <__adddf3>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c930:	f7f4 f862 	bl	80009f8 <__aeabi_dcmpgt>
 800c934:	2800      	cmp	r0, #0
 800c936:	d145      	bne.n	800c9c4 <_dtoa_r+0x6bc>
 800c938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c93c:	2000      	movs	r0, #0
 800c93e:	4932      	ldr	r1, [pc, #200]	@ (800ca08 <_dtoa_r+0x700>)
 800c940:	f7f3 fc12 	bl	8000168 <__aeabi_dsub>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c94c:	f7f4 f836 	bl	80009bc <__aeabi_dcmplt>
 800c950:	2800      	cmp	r0, #0
 800c952:	f43f aef6 	beq.w	800c742 <_dtoa_r+0x43a>
 800c956:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c958:	1e73      	subs	r3, r6, #1
 800c95a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c95c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c960:	2b30      	cmp	r3, #48	@ 0x30
 800c962:	d0f8      	beq.n	800c956 <_dtoa_r+0x64e>
 800c964:	9f04      	ldr	r7, [sp, #16]
 800c966:	e73f      	b.n	800c7e8 <_dtoa_r+0x4e0>
 800c968:	4b29      	ldr	r3, [pc, #164]	@ (800ca10 <_dtoa_r+0x708>)
 800c96a:	f7f3 fdb5 	bl	80004d8 <__aeabi_dmul>
 800c96e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c972:	e7bc      	b.n	800c8ee <_dtoa_r+0x5e6>
 800c974:	d10c      	bne.n	800c990 <_dtoa_r+0x688>
 800c976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c97a:	2200      	movs	r2, #0
 800c97c:	4b25      	ldr	r3, [pc, #148]	@ (800ca14 <_dtoa_r+0x70c>)
 800c97e:	f7f3 fdab 	bl	80004d8 <__aeabi_dmul>
 800c982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c986:	f7f4 f82d 	bl	80009e4 <__aeabi_dcmpge>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	f000 815b 	beq.w	800cc46 <_dtoa_r+0x93e>
 800c990:	2400      	movs	r4, #0
 800c992:	4625      	mov	r5, r4
 800c994:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c996:	4656      	mov	r6, sl
 800c998:	43db      	mvns	r3, r3
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	2700      	movs	r7, #0
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4658      	mov	r0, fp
 800c9a2:	f000 fab9 	bl	800cf18 <_Bfree>
 800c9a6:	2d00      	cmp	r5, #0
 800c9a8:	d0dc      	beq.n	800c964 <_dtoa_r+0x65c>
 800c9aa:	b12f      	cbz	r7, 800c9b8 <_dtoa_r+0x6b0>
 800c9ac:	42af      	cmp	r7, r5
 800c9ae:	d003      	beq.n	800c9b8 <_dtoa_r+0x6b0>
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	4658      	mov	r0, fp
 800c9b4:	f000 fab0 	bl	800cf18 <_Bfree>
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4658      	mov	r0, fp
 800c9bc:	f000 faac 	bl	800cf18 <_Bfree>
 800c9c0:	e7d0      	b.n	800c964 <_dtoa_r+0x65c>
 800c9c2:	9704      	str	r7, [sp, #16]
 800c9c4:	4633      	mov	r3, r6
 800c9c6:	461e      	mov	r6, r3
 800c9c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9cc:	2a39      	cmp	r2, #57	@ 0x39
 800c9ce:	d107      	bne.n	800c9e0 <_dtoa_r+0x6d8>
 800c9d0:	459a      	cmp	sl, r3
 800c9d2:	d1f8      	bne.n	800c9c6 <_dtoa_r+0x6be>
 800c9d4:	9a04      	ldr	r2, [sp, #16]
 800c9d6:	3201      	adds	r2, #1
 800c9d8:	9204      	str	r2, [sp, #16]
 800c9da:	2230      	movs	r2, #48	@ 0x30
 800c9dc:	f88a 2000 	strb.w	r2, [sl]
 800c9e0:	781a      	ldrb	r2, [r3, #0]
 800c9e2:	3201      	adds	r2, #1
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	e7bd      	b.n	800c964 <_dtoa_r+0x65c>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	4b09      	ldr	r3, [pc, #36]	@ (800ca10 <_dtoa_r+0x708>)
 800c9ec:	f7f3 fd74 	bl	80004d8 <__aeabi_dmul>
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	f7f3 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f43f aebc 	beq.w	800c77a <_dtoa_r+0x472>
 800ca02:	e6f1      	b.n	800c7e8 <_dtoa_r+0x4e0>
 800ca04:	0800e690 	.word	0x0800e690
 800ca08:	3fe00000 	.word	0x3fe00000
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	40240000 	.word	0x40240000
 800ca14:	40140000 	.word	0x40140000
 800ca18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	f000 80db 	beq.w	800cbd6 <_dtoa_r+0x8ce>
 800ca20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca22:	2a01      	cmp	r2, #1
 800ca24:	f300 80bf 	bgt.w	800cba6 <_dtoa_r+0x89e>
 800ca28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca2a:	2a00      	cmp	r2, #0
 800ca2c:	f000 80b7 	beq.w	800cb9e <_dtoa_r+0x896>
 800ca30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ca34:	4646      	mov	r6, r8
 800ca36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	441a      	add	r2, r3
 800ca3e:	4658      	mov	r0, fp
 800ca40:	4498      	add	r8, r3
 800ca42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca44:	f000 fb1c 	bl	800d080 <__i2b>
 800ca48:	4605      	mov	r5, r0
 800ca4a:	b15e      	cbz	r6, 800ca64 <_dtoa_r+0x75c>
 800ca4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dd08      	ble.n	800ca64 <_dtoa_r+0x75c>
 800ca52:	42b3      	cmp	r3, r6
 800ca54:	bfa8      	it	ge
 800ca56:	4633      	movge	r3, r6
 800ca58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca5a:	eba8 0803 	sub.w	r8, r8, r3
 800ca5e:	1af6      	subs	r6, r6, r3
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca66:	b1f3      	cbz	r3, 800caa6 <_dtoa_r+0x79e>
 800ca68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 80b7 	beq.w	800cbde <_dtoa_r+0x8d6>
 800ca70:	b18c      	cbz	r4, 800ca96 <_dtoa_r+0x78e>
 800ca72:	4629      	mov	r1, r5
 800ca74:	4622      	mov	r2, r4
 800ca76:	4658      	mov	r0, fp
 800ca78:	f000 fbc0 	bl	800d1fc <__pow5mult>
 800ca7c:	464a      	mov	r2, r9
 800ca7e:	4601      	mov	r1, r0
 800ca80:	4605      	mov	r5, r0
 800ca82:	4658      	mov	r0, fp
 800ca84:	f000 fb12 	bl	800d0ac <__multiply>
 800ca88:	4649      	mov	r1, r9
 800ca8a:	9004      	str	r0, [sp, #16]
 800ca8c:	4658      	mov	r0, fp
 800ca8e:	f000 fa43 	bl	800cf18 <_Bfree>
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	4699      	mov	r9, r3
 800ca96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca98:	1b1a      	subs	r2, r3, r4
 800ca9a:	d004      	beq.n	800caa6 <_dtoa_r+0x79e>
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	4658      	mov	r0, fp
 800caa0:	f000 fbac 	bl	800d1fc <__pow5mult>
 800caa4:	4681      	mov	r9, r0
 800caa6:	2101      	movs	r1, #1
 800caa8:	4658      	mov	r0, fp
 800caaa:	f000 fae9 	bl	800d080 <__i2b>
 800caae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab0:	4604      	mov	r4, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 81c9 	beq.w	800ce4a <_dtoa_r+0xb42>
 800cab8:	461a      	mov	r2, r3
 800caba:	4601      	mov	r1, r0
 800cabc:	4658      	mov	r0, fp
 800cabe:	f000 fb9d 	bl	800d1fc <__pow5mult>
 800cac2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cac4:	4604      	mov	r4, r0
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	f300 808f 	bgt.w	800cbea <_dtoa_r+0x8e2>
 800cacc:	9b02      	ldr	r3, [sp, #8]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f040 8087 	bne.w	800cbe2 <_dtoa_r+0x8da>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f040 8083 	bne.w	800cbe6 <_dtoa_r+0x8de>
 800cae0:	9b03      	ldr	r3, [sp, #12]
 800cae2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cae6:	0d1b      	lsrs	r3, r3, #20
 800cae8:	051b      	lsls	r3, r3, #20
 800caea:	b12b      	cbz	r3, 800caf8 <_dtoa_r+0x7f0>
 800caec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caee:	f108 0801 	add.w	r8, r8, #1
 800caf2:	3301      	adds	r3, #1
 800caf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf6:	2301      	movs	r3, #1
 800caf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 81aa 	beq.w	800ce56 <_dtoa_r+0xb4e>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb08:	6918      	ldr	r0, [r3, #16]
 800cb0a:	f000 fa6d 	bl	800cfe8 <__hi0bits>
 800cb0e:	f1c0 0020 	rsb	r0, r0, #32
 800cb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb14:	4418      	add	r0, r3
 800cb16:	f010 001f 	ands.w	r0, r0, #31
 800cb1a:	d071      	beq.n	800cc00 <_dtoa_r+0x8f8>
 800cb1c:	f1c0 0320 	rsb	r3, r0, #32
 800cb20:	2b04      	cmp	r3, #4
 800cb22:	dd65      	ble.n	800cbf0 <_dtoa_r+0x8e8>
 800cb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb26:	f1c0 001c 	rsb	r0, r0, #28
 800cb2a:	4403      	add	r3, r0
 800cb2c:	4480      	add	r8, r0
 800cb2e:	4406      	add	r6, r0
 800cb30:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb32:	f1b8 0f00 	cmp.w	r8, #0
 800cb36:	dd05      	ble.n	800cb44 <_dtoa_r+0x83c>
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4642      	mov	r2, r8
 800cb3c:	4658      	mov	r0, fp
 800cb3e:	f000 fbb7 	bl	800d2b0 <__lshift>
 800cb42:	4681      	mov	r9, r0
 800cb44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dd05      	ble.n	800cb56 <_dtoa_r+0x84e>
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4658      	mov	r0, fp
 800cb50:	f000 fbae 	bl	800d2b0 <__lshift>
 800cb54:	4604      	mov	r4, r0
 800cb56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d053      	beq.n	800cc04 <_dtoa_r+0x8fc>
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	4648      	mov	r0, r9
 800cb60:	f000 fc12 	bl	800d388 <__mcmp>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	da4d      	bge.n	800cc04 <_dtoa_r+0x8fc>
 800cb68:	1e7b      	subs	r3, r7, #1
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	9304      	str	r3, [sp, #16]
 800cb6e:	220a      	movs	r2, #10
 800cb70:	2300      	movs	r3, #0
 800cb72:	4658      	mov	r0, fp
 800cb74:	f000 f9f2 	bl	800cf5c <__multadd>
 800cb78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb7a:	4681      	mov	r9, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 816c 	beq.w	800ce5a <_dtoa_r+0xb52>
 800cb82:	2300      	movs	r3, #0
 800cb84:	4629      	mov	r1, r5
 800cb86:	220a      	movs	r2, #10
 800cb88:	4658      	mov	r0, fp
 800cb8a:	f000 f9e7 	bl	800cf5c <__multadd>
 800cb8e:	9b08      	ldr	r3, [sp, #32]
 800cb90:	4605      	mov	r5, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	dc61      	bgt.n	800cc5a <_dtoa_r+0x952>
 800cb96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	dc3b      	bgt.n	800cc14 <_dtoa_r+0x90c>
 800cb9c:	e05d      	b.n	800cc5a <_dtoa_r+0x952>
 800cb9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cba0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cba4:	e746      	b.n	800ca34 <_dtoa_r+0x72c>
 800cba6:	9b07      	ldr	r3, [sp, #28]
 800cba8:	1e5c      	subs	r4, r3, #1
 800cbaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbac:	42a3      	cmp	r3, r4
 800cbae:	bfbf      	itttt	lt
 800cbb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cbb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cbb4:	1ae3      	sublt	r3, r4, r3
 800cbb6:	18d2      	addlt	r2, r2, r3
 800cbb8:	bfa8      	it	ge
 800cbba:	1b1c      	subge	r4, r3, r4
 800cbbc:	9b07      	ldr	r3, [sp, #28]
 800cbbe:	bfbe      	ittt	lt
 800cbc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cbc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cbc4:	2400      	movlt	r4, #0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfb5      	itete	lt
 800cbca:	eba8 0603 	sublt.w	r6, r8, r3
 800cbce:	4646      	movge	r6, r8
 800cbd0:	2300      	movlt	r3, #0
 800cbd2:	9b07      	ldrge	r3, [sp, #28]
 800cbd4:	e730      	b.n	800ca38 <_dtoa_r+0x730>
 800cbd6:	4646      	mov	r6, r8
 800cbd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cbda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cbdc:	e735      	b.n	800ca4a <_dtoa_r+0x742>
 800cbde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cbe0:	e75c      	b.n	800ca9c <_dtoa_r+0x794>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e788      	b.n	800caf8 <_dtoa_r+0x7f0>
 800cbe6:	9b02      	ldr	r3, [sp, #8]
 800cbe8:	e786      	b.n	800caf8 <_dtoa_r+0x7f0>
 800cbea:	2300      	movs	r3, #0
 800cbec:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbee:	e788      	b.n	800cb02 <_dtoa_r+0x7fa>
 800cbf0:	d09f      	beq.n	800cb32 <_dtoa_r+0x82a>
 800cbf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbf4:	331c      	adds	r3, #28
 800cbf6:	441a      	add	r2, r3
 800cbf8:	4498      	add	r8, r3
 800cbfa:	441e      	add	r6, r3
 800cbfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbfe:	e798      	b.n	800cb32 <_dtoa_r+0x82a>
 800cc00:	4603      	mov	r3, r0
 800cc02:	e7f6      	b.n	800cbf2 <_dtoa_r+0x8ea>
 800cc04:	9b07      	ldr	r3, [sp, #28]
 800cc06:	9704      	str	r7, [sp, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	dc20      	bgt.n	800cc4e <_dtoa_r+0x946>
 800cc0c:	9308      	str	r3, [sp, #32]
 800cc0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	dd1e      	ble.n	800cc52 <_dtoa_r+0x94a>
 800cc14:	9b08      	ldr	r3, [sp, #32]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f47f aebc 	bne.w	800c994 <_dtoa_r+0x68c>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	2205      	movs	r2, #5
 800cc20:	4658      	mov	r0, fp
 800cc22:	f000 f99b 	bl	800cf5c <__multadd>
 800cc26:	4601      	mov	r1, r0
 800cc28:	4604      	mov	r4, r0
 800cc2a:	4648      	mov	r0, r9
 800cc2c:	f000 fbac 	bl	800d388 <__mcmp>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	f77f aeaf 	ble.w	800c994 <_dtoa_r+0x68c>
 800cc36:	2331      	movs	r3, #49	@ 0x31
 800cc38:	4656      	mov	r6, sl
 800cc3a:	f806 3b01 	strb.w	r3, [r6], #1
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	3301      	adds	r3, #1
 800cc42:	9304      	str	r3, [sp, #16]
 800cc44:	e6aa      	b.n	800c99c <_dtoa_r+0x694>
 800cc46:	9c07      	ldr	r4, [sp, #28]
 800cc48:	9704      	str	r7, [sp, #16]
 800cc4a:	4625      	mov	r5, r4
 800cc4c:	e7f3      	b.n	800cc36 <_dtoa_r+0x92e>
 800cc4e:	9b07      	ldr	r3, [sp, #28]
 800cc50:	9308      	str	r3, [sp, #32]
 800cc52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 8104 	beq.w	800ce62 <_dtoa_r+0xb5a>
 800cc5a:	2e00      	cmp	r6, #0
 800cc5c:	dd05      	ble.n	800cc6a <_dtoa_r+0x962>
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4632      	mov	r2, r6
 800cc62:	4658      	mov	r0, fp
 800cc64:	f000 fb24 	bl	800d2b0 <__lshift>
 800cc68:	4605      	mov	r5, r0
 800cc6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d05a      	beq.n	800cd26 <_dtoa_r+0xa1e>
 800cc70:	4658      	mov	r0, fp
 800cc72:	6869      	ldr	r1, [r5, #4]
 800cc74:	f000 f910 	bl	800ce98 <_Balloc>
 800cc78:	4606      	mov	r6, r0
 800cc7a:	b928      	cbnz	r0, 800cc88 <_dtoa_r+0x980>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc82:	4b83      	ldr	r3, [pc, #524]	@ (800ce90 <_dtoa_r+0xb88>)
 800cc84:	f7ff bb54 	b.w	800c330 <_dtoa_r+0x28>
 800cc88:	692a      	ldr	r2, [r5, #16]
 800cc8a:	f105 010c 	add.w	r1, r5, #12
 800cc8e:	3202      	adds	r2, #2
 800cc90:	0092      	lsls	r2, r2, #2
 800cc92:	300c      	adds	r0, #12
 800cc94:	f7ff faa2 	bl	800c1dc <memcpy>
 800cc98:	2201      	movs	r2, #1
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4658      	mov	r0, fp
 800cc9e:	f000 fb07 	bl	800d2b0 <__lshift>
 800cca2:	462f      	mov	r7, r5
 800cca4:	4605      	mov	r5, r0
 800cca6:	f10a 0301 	add.w	r3, sl, #1
 800ccaa:	9307      	str	r3, [sp, #28]
 800ccac:	9b08      	ldr	r3, [sp, #32]
 800ccae:	4453      	add	r3, sl
 800ccb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccb2:	9b02      	ldr	r3, [sp, #8]
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccba:	9b07      	ldr	r3, [sp, #28]
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	4648      	mov	r0, r9
 800ccc2:	9302      	str	r3, [sp, #8]
 800ccc4:	f7ff fa98 	bl	800c1f8 <quorem>
 800ccc8:	4639      	mov	r1, r7
 800ccca:	9008      	str	r0, [sp, #32]
 800cccc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ccd0:	4648      	mov	r0, r9
 800ccd2:	f000 fb59 	bl	800d388 <__mcmp>
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	9009      	str	r0, [sp, #36]	@ 0x24
 800ccda:	4621      	mov	r1, r4
 800ccdc:	4658      	mov	r0, fp
 800ccde:	f000 fb6f 	bl	800d3c0 <__mdiff>
 800cce2:	68c2      	ldr	r2, [r0, #12]
 800cce4:	4606      	mov	r6, r0
 800cce6:	bb02      	cbnz	r2, 800cd2a <_dtoa_r+0xa22>
 800cce8:	4601      	mov	r1, r0
 800ccea:	4648      	mov	r0, r9
 800ccec:	f000 fb4c 	bl	800d388 <__mcmp>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4658      	mov	r0, fp
 800ccf6:	920c      	str	r2, [sp, #48]	@ 0x30
 800ccf8:	f000 f90e 	bl	800cf18 <_Bfree>
 800ccfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ccfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd00:	9e07      	ldr	r6, [sp, #28]
 800cd02:	ea43 0102 	orr.w	r1, r3, r2
 800cd06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd08:	4319      	orrs	r1, r3
 800cd0a:	d110      	bne.n	800cd2e <_dtoa_r+0xa26>
 800cd0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd10:	d029      	beq.n	800cd66 <_dtoa_r+0xa5e>
 800cd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dd02      	ble.n	800cd1e <_dtoa_r+0xa16>
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cd1e:	9b02      	ldr	r3, [sp, #8]
 800cd20:	f883 8000 	strb.w	r8, [r3]
 800cd24:	e63b      	b.n	800c99e <_dtoa_r+0x696>
 800cd26:	4628      	mov	r0, r5
 800cd28:	e7bb      	b.n	800cca2 <_dtoa_r+0x99a>
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	e7e1      	b.n	800ccf2 <_dtoa_r+0x9ea>
 800cd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	db04      	blt.n	800cd3e <_dtoa_r+0xa36>
 800cd34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cd36:	430b      	orrs	r3, r1
 800cd38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd3a:	430b      	orrs	r3, r1
 800cd3c:	d120      	bne.n	800cd80 <_dtoa_r+0xa78>
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	dded      	ble.n	800cd1e <_dtoa_r+0xa16>
 800cd42:	4649      	mov	r1, r9
 800cd44:	2201      	movs	r2, #1
 800cd46:	4658      	mov	r0, fp
 800cd48:	f000 fab2 	bl	800d2b0 <__lshift>
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4681      	mov	r9, r0
 800cd50:	f000 fb1a 	bl	800d388 <__mcmp>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	dc03      	bgt.n	800cd60 <_dtoa_r+0xa58>
 800cd58:	d1e1      	bne.n	800cd1e <_dtoa_r+0xa16>
 800cd5a:	f018 0f01 	tst.w	r8, #1
 800cd5e:	d0de      	beq.n	800cd1e <_dtoa_r+0xa16>
 800cd60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd64:	d1d8      	bne.n	800cd18 <_dtoa_r+0xa10>
 800cd66:	2339      	movs	r3, #57	@ 0x39
 800cd68:	9a02      	ldr	r2, [sp, #8]
 800cd6a:	7013      	strb	r3, [r2, #0]
 800cd6c:	4633      	mov	r3, r6
 800cd6e:	461e      	mov	r6, r3
 800cd70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	2a39      	cmp	r2, #57	@ 0x39
 800cd78:	d052      	beq.n	800ce20 <_dtoa_r+0xb18>
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e60e      	b.n	800c99e <_dtoa_r+0x696>
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	dd07      	ble.n	800cd94 <_dtoa_r+0xa8c>
 800cd84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd88:	d0ed      	beq.n	800cd66 <_dtoa_r+0xa5e>
 800cd8a:	9a02      	ldr	r2, [sp, #8]
 800cd8c:	f108 0301 	add.w	r3, r8, #1
 800cd90:	7013      	strb	r3, [r2, #0]
 800cd92:	e604      	b.n	800c99e <_dtoa_r+0x696>
 800cd94:	9b07      	ldr	r3, [sp, #28]
 800cd96:	9a07      	ldr	r2, [sp, #28]
 800cd98:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cd9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d028      	beq.n	800cdf4 <_dtoa_r+0xaec>
 800cda2:	4649      	mov	r1, r9
 800cda4:	2300      	movs	r3, #0
 800cda6:	220a      	movs	r2, #10
 800cda8:	4658      	mov	r0, fp
 800cdaa:	f000 f8d7 	bl	800cf5c <__multadd>
 800cdae:	42af      	cmp	r7, r5
 800cdb0:	4681      	mov	r9, r0
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	f04f 020a 	mov.w	r2, #10
 800cdba:	4639      	mov	r1, r7
 800cdbc:	4658      	mov	r0, fp
 800cdbe:	d107      	bne.n	800cdd0 <_dtoa_r+0xac8>
 800cdc0:	f000 f8cc 	bl	800cf5c <__multadd>
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	9b07      	ldr	r3, [sp, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9307      	str	r3, [sp, #28]
 800cdce:	e774      	b.n	800ccba <_dtoa_r+0x9b2>
 800cdd0:	f000 f8c4 	bl	800cf5c <__multadd>
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	2300      	movs	r3, #0
 800cdda:	220a      	movs	r2, #10
 800cddc:	4658      	mov	r0, fp
 800cdde:	f000 f8bd 	bl	800cf5c <__multadd>
 800cde2:	4605      	mov	r5, r0
 800cde4:	e7f0      	b.n	800cdc8 <_dtoa_r+0xac0>
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	2700      	movs	r7, #0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bfcc      	ite	gt
 800cdee:	461e      	movgt	r6, r3
 800cdf0:	2601      	movle	r6, #1
 800cdf2:	4456      	add	r6, sl
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	4658      	mov	r0, fp
 800cdfa:	f000 fa59 	bl	800d2b0 <__lshift>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4681      	mov	r9, r0
 800ce02:	f000 fac1 	bl	800d388 <__mcmp>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	dcb0      	bgt.n	800cd6c <_dtoa_r+0xa64>
 800ce0a:	d102      	bne.n	800ce12 <_dtoa_r+0xb0a>
 800ce0c:	f018 0f01 	tst.w	r8, #1
 800ce10:	d1ac      	bne.n	800cd6c <_dtoa_r+0xa64>
 800ce12:	4633      	mov	r3, r6
 800ce14:	461e      	mov	r6, r3
 800ce16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce1a:	2a30      	cmp	r2, #48	@ 0x30
 800ce1c:	d0fa      	beq.n	800ce14 <_dtoa_r+0xb0c>
 800ce1e:	e5be      	b.n	800c99e <_dtoa_r+0x696>
 800ce20:	459a      	cmp	sl, r3
 800ce22:	d1a4      	bne.n	800cd6e <_dtoa_r+0xa66>
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	3301      	adds	r3, #1
 800ce28:	9304      	str	r3, [sp, #16]
 800ce2a:	2331      	movs	r3, #49	@ 0x31
 800ce2c:	f88a 3000 	strb.w	r3, [sl]
 800ce30:	e5b5      	b.n	800c99e <_dtoa_r+0x696>
 800ce32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ce34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ce94 <_dtoa_r+0xb8c>
 800ce38:	b11b      	cbz	r3, 800ce42 <_dtoa_r+0xb3a>
 800ce3a:	f10a 0308 	add.w	r3, sl, #8
 800ce3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	4650      	mov	r0, sl
 800ce44:	b017      	add	sp, #92	@ 0x5c
 800ce46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	f77f ae3d 	ble.w	800cacc <_dtoa_r+0x7c4>
 800ce52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce54:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce56:	2001      	movs	r0, #1
 800ce58:	e65b      	b.n	800cb12 <_dtoa_r+0x80a>
 800ce5a:	9b08      	ldr	r3, [sp, #32]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f77f aed6 	ble.w	800cc0e <_dtoa_r+0x906>
 800ce62:	4656      	mov	r6, sl
 800ce64:	4621      	mov	r1, r4
 800ce66:	4648      	mov	r0, r9
 800ce68:	f7ff f9c6 	bl	800c1f8 <quorem>
 800ce6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce70:	9b08      	ldr	r3, [sp, #32]
 800ce72:	f806 8b01 	strb.w	r8, [r6], #1
 800ce76:	eba6 020a 	sub.w	r2, r6, sl
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	ddb3      	ble.n	800cde6 <_dtoa_r+0xade>
 800ce7e:	4649      	mov	r1, r9
 800ce80:	2300      	movs	r3, #0
 800ce82:	220a      	movs	r2, #10
 800ce84:	4658      	mov	r0, fp
 800ce86:	f000 f869 	bl	800cf5c <__multadd>
 800ce8a:	4681      	mov	r9, r0
 800ce8c:	e7ea      	b.n	800ce64 <_dtoa_r+0xb5c>
 800ce8e:	bf00      	nop
 800ce90:	0800e5f0 	.word	0x0800e5f0
 800ce94:	0800e574 	.word	0x0800e574

0800ce98 <_Balloc>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	69c6      	ldr	r6, [r0, #28]
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	460d      	mov	r5, r1
 800cea0:	b976      	cbnz	r6, 800cec0 <_Balloc+0x28>
 800cea2:	2010      	movs	r0, #16
 800cea4:	f7fe f95a 	bl	800b15c <malloc>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	61e0      	str	r0, [r4, #28]
 800ceac:	b920      	cbnz	r0, 800ceb8 <_Balloc+0x20>
 800ceae:	216b      	movs	r1, #107	@ 0x6b
 800ceb0:	4b17      	ldr	r3, [pc, #92]	@ (800cf10 <_Balloc+0x78>)
 800ceb2:	4818      	ldr	r0, [pc, #96]	@ (800cf14 <_Balloc+0x7c>)
 800ceb4:	f000 ff4e 	bl	800dd54 <__assert_func>
 800ceb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cebc:	6006      	str	r6, [r0, #0]
 800cebe:	60c6      	str	r6, [r0, #12]
 800cec0:	69e6      	ldr	r6, [r4, #28]
 800cec2:	68f3      	ldr	r3, [r6, #12]
 800cec4:	b183      	cbz	r3, 800cee8 <_Balloc+0x50>
 800cec6:	69e3      	ldr	r3, [r4, #28]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cece:	b9b8      	cbnz	r0, 800cf00 <_Balloc+0x68>
 800ced0:	2101      	movs	r1, #1
 800ced2:	fa01 f605 	lsl.w	r6, r1, r5
 800ced6:	1d72      	adds	r2, r6, #5
 800ced8:	4620      	mov	r0, r4
 800ceda:	0092      	lsls	r2, r2, #2
 800cedc:	f000 ff58 	bl	800dd90 <_calloc_r>
 800cee0:	b160      	cbz	r0, 800cefc <_Balloc+0x64>
 800cee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cee6:	e00e      	b.n	800cf06 <_Balloc+0x6e>
 800cee8:	2221      	movs	r2, #33	@ 0x21
 800ceea:	2104      	movs	r1, #4
 800ceec:	4620      	mov	r0, r4
 800ceee:	f000 ff4f 	bl	800dd90 <_calloc_r>
 800cef2:	69e3      	ldr	r3, [r4, #28]
 800cef4:	60f0      	str	r0, [r6, #12]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d1e4      	bne.n	800cec6 <_Balloc+0x2e>
 800cefc:	2000      	movs	r0, #0
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
 800cf00:	6802      	ldr	r2, [r0, #0]
 800cf02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf06:	2300      	movs	r3, #0
 800cf08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf0c:	e7f7      	b.n	800cefe <_Balloc+0x66>
 800cf0e:	bf00      	nop
 800cf10:	0800e581 	.word	0x0800e581
 800cf14:	0800e601 	.word	0x0800e601

0800cf18 <_Bfree>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	69c6      	ldr	r6, [r0, #28]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b976      	cbnz	r6, 800cf40 <_Bfree+0x28>
 800cf22:	2010      	movs	r0, #16
 800cf24:	f7fe f91a 	bl	800b15c <malloc>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	61e8      	str	r0, [r5, #28]
 800cf2c:	b920      	cbnz	r0, 800cf38 <_Bfree+0x20>
 800cf2e:	218f      	movs	r1, #143	@ 0x8f
 800cf30:	4b08      	ldr	r3, [pc, #32]	@ (800cf54 <_Bfree+0x3c>)
 800cf32:	4809      	ldr	r0, [pc, #36]	@ (800cf58 <_Bfree+0x40>)
 800cf34:	f000 ff0e 	bl	800dd54 <__assert_func>
 800cf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf3c:	6006      	str	r6, [r0, #0]
 800cf3e:	60c6      	str	r6, [r0, #12]
 800cf40:	b13c      	cbz	r4, 800cf52 <_Bfree+0x3a>
 800cf42:	69eb      	ldr	r3, [r5, #28]
 800cf44:	6862      	ldr	r2, [r4, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf4c:	6021      	str	r1, [r4, #0]
 800cf4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
 800cf54:	0800e581 	.word	0x0800e581
 800cf58:	0800e601 	.word	0x0800e601

0800cf5c <__multadd>:
 800cf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf60:	4607      	mov	r7, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	461e      	mov	r6, r3
 800cf66:	2000      	movs	r0, #0
 800cf68:	690d      	ldr	r5, [r1, #16]
 800cf6a:	f101 0c14 	add.w	ip, r1, #20
 800cf6e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf72:	3001      	adds	r0, #1
 800cf74:	b299      	uxth	r1, r3
 800cf76:	fb02 6101 	mla	r1, r2, r1, r6
 800cf7a:	0c1e      	lsrs	r6, r3, #16
 800cf7c:	0c0b      	lsrs	r3, r1, #16
 800cf7e:	fb02 3306 	mla	r3, r2, r6, r3
 800cf82:	b289      	uxth	r1, r1
 800cf84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf88:	4285      	cmp	r5, r0
 800cf8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf8e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf92:	dcec      	bgt.n	800cf6e <__multadd+0x12>
 800cf94:	b30e      	cbz	r6, 800cfda <__multadd+0x7e>
 800cf96:	68a3      	ldr	r3, [r4, #8]
 800cf98:	42ab      	cmp	r3, r5
 800cf9a:	dc19      	bgt.n	800cfd0 <__multadd+0x74>
 800cf9c:	6861      	ldr	r1, [r4, #4]
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	f7ff ff79 	bl	800ce98 <_Balloc>
 800cfa6:	4680      	mov	r8, r0
 800cfa8:	b928      	cbnz	r0, 800cfb6 <__multadd+0x5a>
 800cfaa:	4602      	mov	r2, r0
 800cfac:	21ba      	movs	r1, #186	@ 0xba
 800cfae:	4b0c      	ldr	r3, [pc, #48]	@ (800cfe0 <__multadd+0x84>)
 800cfb0:	480c      	ldr	r0, [pc, #48]	@ (800cfe4 <__multadd+0x88>)
 800cfb2:	f000 fecf 	bl	800dd54 <__assert_func>
 800cfb6:	6922      	ldr	r2, [r4, #16]
 800cfb8:	f104 010c 	add.w	r1, r4, #12
 800cfbc:	3202      	adds	r2, #2
 800cfbe:	0092      	lsls	r2, r2, #2
 800cfc0:	300c      	adds	r0, #12
 800cfc2:	f7ff f90b 	bl	800c1dc <memcpy>
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4638      	mov	r0, r7
 800cfca:	f7ff ffa5 	bl	800cf18 <_Bfree>
 800cfce:	4644      	mov	r4, r8
 800cfd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfd4:	3501      	adds	r5, #1
 800cfd6:	615e      	str	r6, [r3, #20]
 800cfd8:	6125      	str	r5, [r4, #16]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe0:	0800e5f0 	.word	0x0800e5f0
 800cfe4:	0800e601 	.word	0x0800e601

0800cfe8 <__hi0bits>:
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cfee:	bf3a      	itte	cc
 800cff0:	0403      	lslcc	r3, r0, #16
 800cff2:	2010      	movcc	r0, #16
 800cff4:	2000      	movcs	r0, #0
 800cff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cffa:	bf3c      	itt	cc
 800cffc:	021b      	lslcc	r3, r3, #8
 800cffe:	3008      	addcc	r0, #8
 800d000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d004:	bf3c      	itt	cc
 800d006:	011b      	lslcc	r3, r3, #4
 800d008:	3004      	addcc	r0, #4
 800d00a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d00e:	bf3c      	itt	cc
 800d010:	009b      	lslcc	r3, r3, #2
 800d012:	3002      	addcc	r0, #2
 800d014:	2b00      	cmp	r3, #0
 800d016:	db05      	blt.n	800d024 <__hi0bits+0x3c>
 800d018:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d01c:	f100 0001 	add.w	r0, r0, #1
 800d020:	bf08      	it	eq
 800d022:	2020      	moveq	r0, #32
 800d024:	4770      	bx	lr

0800d026 <__lo0bits>:
 800d026:	6803      	ldr	r3, [r0, #0]
 800d028:	4602      	mov	r2, r0
 800d02a:	f013 0007 	ands.w	r0, r3, #7
 800d02e:	d00b      	beq.n	800d048 <__lo0bits+0x22>
 800d030:	07d9      	lsls	r1, r3, #31
 800d032:	d421      	bmi.n	800d078 <__lo0bits+0x52>
 800d034:	0798      	lsls	r0, r3, #30
 800d036:	bf49      	itett	mi
 800d038:	085b      	lsrmi	r3, r3, #1
 800d03a:	089b      	lsrpl	r3, r3, #2
 800d03c:	2001      	movmi	r0, #1
 800d03e:	6013      	strmi	r3, [r2, #0]
 800d040:	bf5c      	itt	pl
 800d042:	2002      	movpl	r0, #2
 800d044:	6013      	strpl	r3, [r2, #0]
 800d046:	4770      	bx	lr
 800d048:	b299      	uxth	r1, r3
 800d04a:	b909      	cbnz	r1, 800d050 <__lo0bits+0x2a>
 800d04c:	2010      	movs	r0, #16
 800d04e:	0c1b      	lsrs	r3, r3, #16
 800d050:	b2d9      	uxtb	r1, r3
 800d052:	b909      	cbnz	r1, 800d058 <__lo0bits+0x32>
 800d054:	3008      	adds	r0, #8
 800d056:	0a1b      	lsrs	r3, r3, #8
 800d058:	0719      	lsls	r1, r3, #28
 800d05a:	bf04      	itt	eq
 800d05c:	091b      	lsreq	r3, r3, #4
 800d05e:	3004      	addeq	r0, #4
 800d060:	0799      	lsls	r1, r3, #30
 800d062:	bf04      	itt	eq
 800d064:	089b      	lsreq	r3, r3, #2
 800d066:	3002      	addeq	r0, #2
 800d068:	07d9      	lsls	r1, r3, #31
 800d06a:	d403      	bmi.n	800d074 <__lo0bits+0x4e>
 800d06c:	085b      	lsrs	r3, r3, #1
 800d06e:	f100 0001 	add.w	r0, r0, #1
 800d072:	d003      	beq.n	800d07c <__lo0bits+0x56>
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	4770      	bx	lr
 800d078:	2000      	movs	r0, #0
 800d07a:	4770      	bx	lr
 800d07c:	2020      	movs	r0, #32
 800d07e:	4770      	bx	lr

0800d080 <__i2b>:
 800d080:	b510      	push	{r4, lr}
 800d082:	460c      	mov	r4, r1
 800d084:	2101      	movs	r1, #1
 800d086:	f7ff ff07 	bl	800ce98 <_Balloc>
 800d08a:	4602      	mov	r2, r0
 800d08c:	b928      	cbnz	r0, 800d09a <__i2b+0x1a>
 800d08e:	f240 1145 	movw	r1, #325	@ 0x145
 800d092:	4b04      	ldr	r3, [pc, #16]	@ (800d0a4 <__i2b+0x24>)
 800d094:	4804      	ldr	r0, [pc, #16]	@ (800d0a8 <__i2b+0x28>)
 800d096:	f000 fe5d 	bl	800dd54 <__assert_func>
 800d09a:	2301      	movs	r3, #1
 800d09c:	6144      	str	r4, [r0, #20]
 800d09e:	6103      	str	r3, [r0, #16]
 800d0a0:	bd10      	pop	{r4, pc}
 800d0a2:	bf00      	nop
 800d0a4:	0800e5f0 	.word	0x0800e5f0
 800d0a8:	0800e601 	.word	0x0800e601

0800d0ac <__multiply>:
 800d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	690a      	ldr	r2, [r1, #16]
 800d0b4:	6923      	ldr	r3, [r4, #16]
 800d0b6:	460f      	mov	r7, r1
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	bfa2      	ittt	ge
 800d0bc:	4623      	movge	r3, r4
 800d0be:	460c      	movge	r4, r1
 800d0c0:	461f      	movge	r7, r3
 800d0c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d0c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d0ca:	68a3      	ldr	r3, [r4, #8]
 800d0cc:	6861      	ldr	r1, [r4, #4]
 800d0ce:	eb0a 0609 	add.w	r6, sl, r9
 800d0d2:	42b3      	cmp	r3, r6
 800d0d4:	b085      	sub	sp, #20
 800d0d6:	bfb8      	it	lt
 800d0d8:	3101      	addlt	r1, #1
 800d0da:	f7ff fedd 	bl	800ce98 <_Balloc>
 800d0de:	b930      	cbnz	r0, 800d0ee <__multiply+0x42>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d0e6:	4b43      	ldr	r3, [pc, #268]	@ (800d1f4 <__multiply+0x148>)
 800d0e8:	4843      	ldr	r0, [pc, #268]	@ (800d1f8 <__multiply+0x14c>)
 800d0ea:	f000 fe33 	bl	800dd54 <__assert_func>
 800d0ee:	f100 0514 	add.w	r5, r0, #20
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0fa:	4543      	cmp	r3, r8
 800d0fc:	d321      	bcc.n	800d142 <__multiply+0x96>
 800d0fe:	f107 0114 	add.w	r1, r7, #20
 800d102:	f104 0214 	add.w	r2, r4, #20
 800d106:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d10a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d10e:	9302      	str	r3, [sp, #8]
 800d110:	1b13      	subs	r3, r2, r4
 800d112:	3b15      	subs	r3, #21
 800d114:	f023 0303 	bic.w	r3, r3, #3
 800d118:	3304      	adds	r3, #4
 800d11a:	f104 0715 	add.w	r7, r4, #21
 800d11e:	42ba      	cmp	r2, r7
 800d120:	bf38      	it	cc
 800d122:	2304      	movcc	r3, #4
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	9b02      	ldr	r3, [sp, #8]
 800d128:	9103      	str	r1, [sp, #12]
 800d12a:	428b      	cmp	r3, r1
 800d12c:	d80c      	bhi.n	800d148 <__multiply+0x9c>
 800d12e:	2e00      	cmp	r6, #0
 800d130:	dd03      	ble.n	800d13a <__multiply+0x8e>
 800d132:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d136:	2b00      	cmp	r3, #0
 800d138:	d05a      	beq.n	800d1f0 <__multiply+0x144>
 800d13a:	6106      	str	r6, [r0, #16]
 800d13c:	b005      	add	sp, #20
 800d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d142:	f843 2b04 	str.w	r2, [r3], #4
 800d146:	e7d8      	b.n	800d0fa <__multiply+0x4e>
 800d148:	f8b1 a000 	ldrh.w	sl, [r1]
 800d14c:	f1ba 0f00 	cmp.w	sl, #0
 800d150:	d023      	beq.n	800d19a <__multiply+0xee>
 800d152:	46a9      	mov	r9, r5
 800d154:	f04f 0c00 	mov.w	ip, #0
 800d158:	f104 0e14 	add.w	lr, r4, #20
 800d15c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d160:	f8d9 3000 	ldr.w	r3, [r9]
 800d164:	fa1f fb87 	uxth.w	fp, r7
 800d168:	b29b      	uxth	r3, r3
 800d16a:	fb0a 330b 	mla	r3, sl, fp, r3
 800d16e:	4463      	add	r3, ip
 800d170:	f8d9 c000 	ldr.w	ip, [r9]
 800d174:	0c3f      	lsrs	r7, r7, #16
 800d176:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d17a:	fb0a c707 	mla	r7, sl, r7, ip
 800d17e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d182:	b29b      	uxth	r3, r3
 800d184:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d188:	4572      	cmp	r2, lr
 800d18a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d18e:	f849 3b04 	str.w	r3, [r9], #4
 800d192:	d8e3      	bhi.n	800d15c <__multiply+0xb0>
 800d194:	9b01      	ldr	r3, [sp, #4]
 800d196:	f845 c003 	str.w	ip, [r5, r3]
 800d19a:	9b03      	ldr	r3, [sp, #12]
 800d19c:	3104      	adds	r1, #4
 800d19e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1a2:	f1b9 0f00 	cmp.w	r9, #0
 800d1a6:	d021      	beq.n	800d1ec <__multiply+0x140>
 800d1a8:	46ae      	mov	lr, r5
 800d1aa:	f04f 0a00 	mov.w	sl, #0
 800d1ae:	682b      	ldr	r3, [r5, #0]
 800d1b0:	f104 0c14 	add.w	ip, r4, #20
 800d1b4:	f8bc b000 	ldrh.w	fp, [ip]
 800d1b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	fb09 770b 	mla	r7, r9, fp, r7
 800d1c2:	4457      	add	r7, sl
 800d1c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d1c8:	f84e 3b04 	str.w	r3, [lr], #4
 800d1cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1d4:	f8be 3000 	ldrh.w	r3, [lr]
 800d1d8:	4562      	cmp	r2, ip
 800d1da:	fb09 330a 	mla	r3, r9, sl, r3
 800d1de:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d1e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1e6:	d8e5      	bhi.n	800d1b4 <__multiply+0x108>
 800d1e8:	9f01      	ldr	r7, [sp, #4]
 800d1ea:	51eb      	str	r3, [r5, r7]
 800d1ec:	3504      	adds	r5, #4
 800d1ee:	e79a      	b.n	800d126 <__multiply+0x7a>
 800d1f0:	3e01      	subs	r6, #1
 800d1f2:	e79c      	b.n	800d12e <__multiply+0x82>
 800d1f4:	0800e5f0 	.word	0x0800e5f0
 800d1f8:	0800e601 	.word	0x0800e601

0800d1fc <__pow5mult>:
 800d1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d200:	4615      	mov	r5, r2
 800d202:	f012 0203 	ands.w	r2, r2, #3
 800d206:	4607      	mov	r7, r0
 800d208:	460e      	mov	r6, r1
 800d20a:	d007      	beq.n	800d21c <__pow5mult+0x20>
 800d20c:	4c25      	ldr	r4, [pc, #148]	@ (800d2a4 <__pow5mult+0xa8>)
 800d20e:	3a01      	subs	r2, #1
 800d210:	2300      	movs	r3, #0
 800d212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d216:	f7ff fea1 	bl	800cf5c <__multadd>
 800d21a:	4606      	mov	r6, r0
 800d21c:	10ad      	asrs	r5, r5, #2
 800d21e:	d03d      	beq.n	800d29c <__pow5mult+0xa0>
 800d220:	69fc      	ldr	r4, [r7, #28]
 800d222:	b97c      	cbnz	r4, 800d244 <__pow5mult+0x48>
 800d224:	2010      	movs	r0, #16
 800d226:	f7fd ff99 	bl	800b15c <malloc>
 800d22a:	4602      	mov	r2, r0
 800d22c:	61f8      	str	r0, [r7, #28]
 800d22e:	b928      	cbnz	r0, 800d23c <__pow5mult+0x40>
 800d230:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d234:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a8 <__pow5mult+0xac>)
 800d236:	481d      	ldr	r0, [pc, #116]	@ (800d2ac <__pow5mult+0xb0>)
 800d238:	f000 fd8c 	bl	800dd54 <__assert_func>
 800d23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d240:	6004      	str	r4, [r0, #0]
 800d242:	60c4      	str	r4, [r0, #12]
 800d244:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d24c:	b94c      	cbnz	r4, 800d262 <__pow5mult+0x66>
 800d24e:	f240 2171 	movw	r1, #625	@ 0x271
 800d252:	4638      	mov	r0, r7
 800d254:	f7ff ff14 	bl	800d080 <__i2b>
 800d258:	2300      	movs	r3, #0
 800d25a:	4604      	mov	r4, r0
 800d25c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d260:	6003      	str	r3, [r0, #0]
 800d262:	f04f 0900 	mov.w	r9, #0
 800d266:	07eb      	lsls	r3, r5, #31
 800d268:	d50a      	bpl.n	800d280 <__pow5mult+0x84>
 800d26a:	4631      	mov	r1, r6
 800d26c:	4622      	mov	r2, r4
 800d26e:	4638      	mov	r0, r7
 800d270:	f7ff ff1c 	bl	800d0ac <__multiply>
 800d274:	4680      	mov	r8, r0
 800d276:	4631      	mov	r1, r6
 800d278:	4638      	mov	r0, r7
 800d27a:	f7ff fe4d 	bl	800cf18 <_Bfree>
 800d27e:	4646      	mov	r6, r8
 800d280:	106d      	asrs	r5, r5, #1
 800d282:	d00b      	beq.n	800d29c <__pow5mult+0xa0>
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	b938      	cbnz	r0, 800d298 <__pow5mult+0x9c>
 800d288:	4622      	mov	r2, r4
 800d28a:	4621      	mov	r1, r4
 800d28c:	4638      	mov	r0, r7
 800d28e:	f7ff ff0d 	bl	800d0ac <__multiply>
 800d292:	6020      	str	r0, [r4, #0]
 800d294:	f8c0 9000 	str.w	r9, [r0]
 800d298:	4604      	mov	r4, r0
 800d29a:	e7e4      	b.n	800d266 <__pow5mult+0x6a>
 800d29c:	4630      	mov	r0, r6
 800d29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a2:	bf00      	nop
 800d2a4:	0800e65c 	.word	0x0800e65c
 800d2a8:	0800e581 	.word	0x0800e581
 800d2ac:	0800e601 	.word	0x0800e601

0800d2b0 <__lshift>:
 800d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	6849      	ldr	r1, [r1, #4]
 800d2be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2c8:	f108 0601 	add.w	r6, r8, #1
 800d2cc:	42b3      	cmp	r3, r6
 800d2ce:	db0b      	blt.n	800d2e8 <__lshift+0x38>
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff fde1 	bl	800ce98 <_Balloc>
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	b948      	cbnz	r0, 800d2ee <__lshift+0x3e>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d2e0:	4b27      	ldr	r3, [pc, #156]	@ (800d380 <__lshift+0xd0>)
 800d2e2:	4828      	ldr	r0, [pc, #160]	@ (800d384 <__lshift+0xd4>)
 800d2e4:	f000 fd36 	bl	800dd54 <__assert_func>
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	e7ee      	b.n	800d2cc <__lshift+0x1c>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f100 0114 	add.w	r1, r0, #20
 800d2f4:	f100 0210 	add.w	r2, r0, #16
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	4553      	cmp	r3, sl
 800d2fc:	db33      	blt.n	800d366 <__lshift+0xb6>
 800d2fe:	6920      	ldr	r0, [r4, #16]
 800d300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d304:	f104 0314 	add.w	r3, r4, #20
 800d308:	f019 091f 	ands.w	r9, r9, #31
 800d30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d314:	d02b      	beq.n	800d36e <__lshift+0xbe>
 800d316:	468a      	mov	sl, r1
 800d318:	2200      	movs	r2, #0
 800d31a:	f1c9 0e20 	rsb	lr, r9, #32
 800d31e:	6818      	ldr	r0, [r3, #0]
 800d320:	fa00 f009 	lsl.w	r0, r0, r9
 800d324:	4310      	orrs	r0, r2
 800d326:	f84a 0b04 	str.w	r0, [sl], #4
 800d32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32e:	459c      	cmp	ip, r3
 800d330:	fa22 f20e 	lsr.w	r2, r2, lr
 800d334:	d8f3      	bhi.n	800d31e <__lshift+0x6e>
 800d336:	ebac 0304 	sub.w	r3, ip, r4
 800d33a:	3b15      	subs	r3, #21
 800d33c:	f023 0303 	bic.w	r3, r3, #3
 800d340:	3304      	adds	r3, #4
 800d342:	f104 0015 	add.w	r0, r4, #21
 800d346:	4584      	cmp	ip, r0
 800d348:	bf38      	it	cc
 800d34a:	2304      	movcc	r3, #4
 800d34c:	50ca      	str	r2, [r1, r3]
 800d34e:	b10a      	cbz	r2, 800d354 <__lshift+0xa4>
 800d350:	f108 0602 	add.w	r6, r8, #2
 800d354:	3e01      	subs	r6, #1
 800d356:	4638      	mov	r0, r7
 800d358:	4621      	mov	r1, r4
 800d35a:	612e      	str	r6, [r5, #16]
 800d35c:	f7ff fddc 	bl	800cf18 <_Bfree>
 800d360:	4628      	mov	r0, r5
 800d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d366:	f842 0f04 	str.w	r0, [r2, #4]!
 800d36a:	3301      	adds	r3, #1
 800d36c:	e7c5      	b.n	800d2fa <__lshift+0x4a>
 800d36e:	3904      	subs	r1, #4
 800d370:	f853 2b04 	ldr.w	r2, [r3], #4
 800d374:	459c      	cmp	ip, r3
 800d376:	f841 2f04 	str.w	r2, [r1, #4]!
 800d37a:	d8f9      	bhi.n	800d370 <__lshift+0xc0>
 800d37c:	e7ea      	b.n	800d354 <__lshift+0xa4>
 800d37e:	bf00      	nop
 800d380:	0800e5f0 	.word	0x0800e5f0
 800d384:	0800e601 	.word	0x0800e601

0800d388 <__mcmp>:
 800d388:	4603      	mov	r3, r0
 800d38a:	690a      	ldr	r2, [r1, #16]
 800d38c:	6900      	ldr	r0, [r0, #16]
 800d38e:	b530      	push	{r4, r5, lr}
 800d390:	1a80      	subs	r0, r0, r2
 800d392:	d10e      	bne.n	800d3b2 <__mcmp+0x2a>
 800d394:	3314      	adds	r3, #20
 800d396:	3114      	adds	r1, #20
 800d398:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d39c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3a8:	4295      	cmp	r5, r2
 800d3aa:	d003      	beq.n	800d3b4 <__mcmp+0x2c>
 800d3ac:	d205      	bcs.n	800d3ba <__mcmp+0x32>
 800d3ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3b2:	bd30      	pop	{r4, r5, pc}
 800d3b4:	42a3      	cmp	r3, r4
 800d3b6:	d3f3      	bcc.n	800d3a0 <__mcmp+0x18>
 800d3b8:	e7fb      	b.n	800d3b2 <__mcmp+0x2a>
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	e7f9      	b.n	800d3b2 <__mcmp+0x2a>
	...

0800d3c0 <__mdiff>:
 800d3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4689      	mov	r9, r1
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4648      	mov	r0, r9
 800d3cc:	4614      	mov	r4, r2
 800d3ce:	f7ff ffdb 	bl	800d388 <__mcmp>
 800d3d2:	1e05      	subs	r5, r0, #0
 800d3d4:	d112      	bne.n	800d3fc <__mdiff+0x3c>
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7ff fd5d 	bl	800ce98 <_Balloc>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	b928      	cbnz	r0, 800d3ee <__mdiff+0x2e>
 800d3e2:	f240 2137 	movw	r1, #567	@ 0x237
 800d3e6:	4b3e      	ldr	r3, [pc, #248]	@ (800d4e0 <__mdiff+0x120>)
 800d3e8:	483e      	ldr	r0, [pc, #248]	@ (800d4e4 <__mdiff+0x124>)
 800d3ea:	f000 fcb3 	bl	800dd54 <__assert_func>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	b003      	add	sp, #12
 800d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fc:	bfbc      	itt	lt
 800d3fe:	464b      	movlt	r3, r9
 800d400:	46a1      	movlt	r9, r4
 800d402:	4630      	mov	r0, r6
 800d404:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d408:	bfba      	itte	lt
 800d40a:	461c      	movlt	r4, r3
 800d40c:	2501      	movlt	r5, #1
 800d40e:	2500      	movge	r5, #0
 800d410:	f7ff fd42 	bl	800ce98 <_Balloc>
 800d414:	4602      	mov	r2, r0
 800d416:	b918      	cbnz	r0, 800d420 <__mdiff+0x60>
 800d418:	f240 2145 	movw	r1, #581	@ 0x245
 800d41c:	4b30      	ldr	r3, [pc, #192]	@ (800d4e0 <__mdiff+0x120>)
 800d41e:	e7e3      	b.n	800d3e8 <__mdiff+0x28>
 800d420:	f100 0b14 	add.w	fp, r0, #20
 800d424:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d428:	f109 0310 	add.w	r3, r9, #16
 800d42c:	60c5      	str	r5, [r0, #12]
 800d42e:	f04f 0c00 	mov.w	ip, #0
 800d432:	f109 0514 	add.w	r5, r9, #20
 800d436:	46d9      	mov	r9, fp
 800d438:	6926      	ldr	r6, [r4, #16]
 800d43a:	f104 0e14 	add.w	lr, r4, #20
 800d43e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d442:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d44e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d452:	b281      	uxth	r1, r0
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	fa1f f38a 	uxth.w	r3, sl
 800d45a:	1a5b      	subs	r3, r3, r1
 800d45c:	0c00      	lsrs	r0, r0, #16
 800d45e:	4463      	add	r3, ip
 800d460:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d464:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d468:	b29b      	uxth	r3, r3
 800d46a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d46e:	4576      	cmp	r6, lr
 800d470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d474:	f849 3b04 	str.w	r3, [r9], #4
 800d478:	d8e6      	bhi.n	800d448 <__mdiff+0x88>
 800d47a:	1b33      	subs	r3, r6, r4
 800d47c:	3b15      	subs	r3, #21
 800d47e:	f023 0303 	bic.w	r3, r3, #3
 800d482:	3415      	adds	r4, #21
 800d484:	3304      	adds	r3, #4
 800d486:	42a6      	cmp	r6, r4
 800d488:	bf38      	it	cc
 800d48a:	2304      	movcc	r3, #4
 800d48c:	441d      	add	r5, r3
 800d48e:	445b      	add	r3, fp
 800d490:	461e      	mov	r6, r3
 800d492:	462c      	mov	r4, r5
 800d494:	4544      	cmp	r4, r8
 800d496:	d30e      	bcc.n	800d4b6 <__mdiff+0xf6>
 800d498:	f108 0103 	add.w	r1, r8, #3
 800d49c:	1b49      	subs	r1, r1, r5
 800d49e:	f021 0103 	bic.w	r1, r1, #3
 800d4a2:	3d03      	subs	r5, #3
 800d4a4:	45a8      	cmp	r8, r5
 800d4a6:	bf38      	it	cc
 800d4a8:	2100      	movcc	r1, #0
 800d4aa:	440b      	add	r3, r1
 800d4ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4b0:	b199      	cbz	r1, 800d4da <__mdiff+0x11a>
 800d4b2:	6117      	str	r7, [r2, #16]
 800d4b4:	e79e      	b.n	800d3f4 <__mdiff+0x34>
 800d4b6:	46e6      	mov	lr, ip
 800d4b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4bc:	fa1f fc81 	uxth.w	ip, r1
 800d4c0:	44f4      	add	ip, lr
 800d4c2:	0c08      	lsrs	r0, r1, #16
 800d4c4:	4471      	add	r1, lr
 800d4c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d4ca:	b289      	uxth	r1, r1
 800d4cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d4d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4d4:	f846 1b04 	str.w	r1, [r6], #4
 800d4d8:	e7dc      	b.n	800d494 <__mdiff+0xd4>
 800d4da:	3f01      	subs	r7, #1
 800d4dc:	e7e6      	b.n	800d4ac <__mdiff+0xec>
 800d4de:	bf00      	nop
 800d4e0:	0800e5f0 	.word	0x0800e5f0
 800d4e4:	0800e601 	.word	0x0800e601

0800d4e8 <__d2b>:
 800d4e8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d4ec:	2101      	movs	r1, #1
 800d4ee:	4690      	mov	r8, r2
 800d4f0:	4699      	mov	r9, r3
 800d4f2:	9e08      	ldr	r6, [sp, #32]
 800d4f4:	f7ff fcd0 	bl	800ce98 <_Balloc>
 800d4f8:	4604      	mov	r4, r0
 800d4fa:	b930      	cbnz	r0, 800d50a <__d2b+0x22>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	f240 310f 	movw	r1, #783	@ 0x30f
 800d502:	4b23      	ldr	r3, [pc, #140]	@ (800d590 <__d2b+0xa8>)
 800d504:	4823      	ldr	r0, [pc, #140]	@ (800d594 <__d2b+0xac>)
 800d506:	f000 fc25 	bl	800dd54 <__assert_func>
 800d50a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d50e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d512:	b10d      	cbz	r5, 800d518 <__d2b+0x30>
 800d514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	f1b8 0300 	subs.w	r3, r8, #0
 800d51e:	d024      	beq.n	800d56a <__d2b+0x82>
 800d520:	4668      	mov	r0, sp
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	f7ff fd7f 	bl	800d026 <__lo0bits>
 800d528:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d52c:	b1d8      	cbz	r0, 800d566 <__d2b+0x7e>
 800d52e:	f1c0 0320 	rsb	r3, r0, #32
 800d532:	fa02 f303 	lsl.w	r3, r2, r3
 800d536:	430b      	orrs	r3, r1
 800d538:	40c2      	lsrs	r2, r0
 800d53a:	6163      	str	r3, [r4, #20]
 800d53c:	9201      	str	r2, [sp, #4]
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	bf0c      	ite	eq
 800d544:	2201      	moveq	r2, #1
 800d546:	2202      	movne	r2, #2
 800d548:	61a3      	str	r3, [r4, #24]
 800d54a:	6122      	str	r2, [r4, #16]
 800d54c:	b1ad      	cbz	r5, 800d57a <__d2b+0x92>
 800d54e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d552:	4405      	add	r5, r0
 800d554:	6035      	str	r5, [r6, #0]
 800d556:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55c:	6018      	str	r0, [r3, #0]
 800d55e:	4620      	mov	r0, r4
 800d560:	b002      	add	sp, #8
 800d562:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d566:	6161      	str	r1, [r4, #20]
 800d568:	e7e9      	b.n	800d53e <__d2b+0x56>
 800d56a:	a801      	add	r0, sp, #4
 800d56c:	f7ff fd5b 	bl	800d026 <__lo0bits>
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	6163      	str	r3, [r4, #20]
 800d576:	3020      	adds	r0, #32
 800d578:	e7e7      	b.n	800d54a <__d2b+0x62>
 800d57a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d57e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d582:	6030      	str	r0, [r6, #0]
 800d584:	6918      	ldr	r0, [r3, #16]
 800d586:	f7ff fd2f 	bl	800cfe8 <__hi0bits>
 800d58a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d58e:	e7e4      	b.n	800d55a <__d2b+0x72>
 800d590:	0800e5f0 	.word	0x0800e5f0
 800d594:	0800e601 	.word	0x0800e601

0800d598 <__ssputs_r>:
 800d598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d59c:	461f      	mov	r7, r3
 800d59e:	688e      	ldr	r6, [r1, #8]
 800d5a0:	4682      	mov	sl, r0
 800d5a2:	42be      	cmp	r6, r7
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	4690      	mov	r8, r2
 800d5a8:	680b      	ldr	r3, [r1, #0]
 800d5aa:	d82d      	bhi.n	800d608 <__ssputs_r+0x70>
 800d5ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5b4:	d026      	beq.n	800d604 <__ssputs_r+0x6c>
 800d5b6:	6965      	ldr	r5, [r4, #20]
 800d5b8:	6909      	ldr	r1, [r1, #16]
 800d5ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5be:	eba3 0901 	sub.w	r9, r3, r1
 800d5c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5c6:	1c7b      	adds	r3, r7, #1
 800d5c8:	444b      	add	r3, r9
 800d5ca:	106d      	asrs	r5, r5, #1
 800d5cc:	429d      	cmp	r5, r3
 800d5ce:	bf38      	it	cc
 800d5d0:	461d      	movcc	r5, r3
 800d5d2:	0553      	lsls	r3, r2, #21
 800d5d4:	d527      	bpl.n	800d626 <__ssputs_r+0x8e>
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7fd fdea 	bl	800b1b0 <_malloc_r>
 800d5dc:	4606      	mov	r6, r0
 800d5de:	b360      	cbz	r0, 800d63a <__ssputs_r+0xa2>
 800d5e0:	464a      	mov	r2, r9
 800d5e2:	6921      	ldr	r1, [r4, #16]
 800d5e4:	f7fe fdfa 	bl	800c1dc <memcpy>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	6126      	str	r6, [r4, #16]
 800d5f6:	444e      	add	r6, r9
 800d5f8:	6026      	str	r6, [r4, #0]
 800d5fa:	463e      	mov	r6, r7
 800d5fc:	6165      	str	r5, [r4, #20]
 800d5fe:	eba5 0509 	sub.w	r5, r5, r9
 800d602:	60a5      	str	r5, [r4, #8]
 800d604:	42be      	cmp	r6, r7
 800d606:	d900      	bls.n	800d60a <__ssputs_r+0x72>
 800d608:	463e      	mov	r6, r7
 800d60a:	4632      	mov	r2, r6
 800d60c:	4641      	mov	r1, r8
 800d60e:	6820      	ldr	r0, [r4, #0]
 800d610:	f000 fb63 	bl	800dcda <memmove>
 800d614:	2000      	movs	r0, #0
 800d616:	68a3      	ldr	r3, [r4, #8]
 800d618:	1b9b      	subs	r3, r3, r6
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	4433      	add	r3, r6
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d626:	462a      	mov	r2, r5
 800d628:	f000 fbd8 	bl	800dddc <_realloc_r>
 800d62c:	4606      	mov	r6, r0
 800d62e:	2800      	cmp	r0, #0
 800d630:	d1e0      	bne.n	800d5f4 <__ssputs_r+0x5c>
 800d632:	4650      	mov	r0, sl
 800d634:	6921      	ldr	r1, [r4, #16]
 800d636:	f7fd fd49 	bl	800b0cc <_free_r>
 800d63a:	230c      	movs	r3, #12
 800d63c:	f8ca 3000 	str.w	r3, [sl]
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d64a:	81a3      	strh	r3, [r4, #12]
 800d64c:	e7e9      	b.n	800d622 <__ssputs_r+0x8a>
	...

0800d650 <_svfiprintf_r>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	4698      	mov	r8, r3
 800d656:	898b      	ldrh	r3, [r1, #12]
 800d658:	4607      	mov	r7, r0
 800d65a:	061b      	lsls	r3, r3, #24
 800d65c:	460d      	mov	r5, r1
 800d65e:	4614      	mov	r4, r2
 800d660:	b09d      	sub	sp, #116	@ 0x74
 800d662:	d510      	bpl.n	800d686 <_svfiprintf_r+0x36>
 800d664:	690b      	ldr	r3, [r1, #16]
 800d666:	b973      	cbnz	r3, 800d686 <_svfiprintf_r+0x36>
 800d668:	2140      	movs	r1, #64	@ 0x40
 800d66a:	f7fd fda1 	bl	800b1b0 <_malloc_r>
 800d66e:	6028      	str	r0, [r5, #0]
 800d670:	6128      	str	r0, [r5, #16]
 800d672:	b930      	cbnz	r0, 800d682 <_svfiprintf_r+0x32>
 800d674:	230c      	movs	r3, #12
 800d676:	603b      	str	r3, [r7, #0]
 800d678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d67c:	b01d      	add	sp, #116	@ 0x74
 800d67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d682:	2340      	movs	r3, #64	@ 0x40
 800d684:	616b      	str	r3, [r5, #20]
 800d686:	2300      	movs	r3, #0
 800d688:	9309      	str	r3, [sp, #36]	@ 0x24
 800d68a:	2320      	movs	r3, #32
 800d68c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d690:	2330      	movs	r3, #48	@ 0x30
 800d692:	f04f 0901 	mov.w	r9, #1
 800d696:	f8cd 800c 	str.w	r8, [sp, #12]
 800d69a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d834 <_svfiprintf_r+0x1e4>
 800d69e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6a2:	4623      	mov	r3, r4
 800d6a4:	469a      	mov	sl, r3
 800d6a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6aa:	b10a      	cbz	r2, 800d6b0 <_svfiprintf_r+0x60>
 800d6ac:	2a25      	cmp	r2, #37	@ 0x25
 800d6ae:	d1f9      	bne.n	800d6a4 <_svfiprintf_r+0x54>
 800d6b0:	ebba 0b04 	subs.w	fp, sl, r4
 800d6b4:	d00b      	beq.n	800d6ce <_svfiprintf_r+0x7e>
 800d6b6:	465b      	mov	r3, fp
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f7ff ff6b 	bl	800d598 <__ssputs_r>
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	f000 80a7 	beq.w	800d816 <_svfiprintf_r+0x1c6>
 800d6c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ca:	445a      	add	r2, fp
 800d6cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 809f 	beq.w	800d816 <_svfiprintf_r+0x1c6>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6e2:	f10a 0a01 	add.w	sl, sl, #1
 800d6e6:	9304      	str	r3, [sp, #16]
 800d6e8:	9307      	str	r3, [sp, #28]
 800d6ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6f0:	4654      	mov	r4, sl
 800d6f2:	2205      	movs	r2, #5
 800d6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f8:	484e      	ldr	r0, [pc, #312]	@ (800d834 <_svfiprintf_r+0x1e4>)
 800d6fa:	f7fe fd61 	bl	800c1c0 <memchr>
 800d6fe:	9a04      	ldr	r2, [sp, #16]
 800d700:	b9d8      	cbnz	r0, 800d73a <_svfiprintf_r+0xea>
 800d702:	06d0      	lsls	r0, r2, #27
 800d704:	bf44      	itt	mi
 800d706:	2320      	movmi	r3, #32
 800d708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d70c:	0711      	lsls	r1, r2, #28
 800d70e:	bf44      	itt	mi
 800d710:	232b      	movmi	r3, #43	@ 0x2b
 800d712:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d716:	f89a 3000 	ldrb.w	r3, [sl]
 800d71a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d71c:	d015      	beq.n	800d74a <_svfiprintf_r+0xfa>
 800d71e:	4654      	mov	r4, sl
 800d720:	2000      	movs	r0, #0
 800d722:	f04f 0c0a 	mov.w	ip, #10
 800d726:	9a07      	ldr	r2, [sp, #28]
 800d728:	4621      	mov	r1, r4
 800d72a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d72e:	3b30      	subs	r3, #48	@ 0x30
 800d730:	2b09      	cmp	r3, #9
 800d732:	d94b      	bls.n	800d7cc <_svfiprintf_r+0x17c>
 800d734:	b1b0      	cbz	r0, 800d764 <_svfiprintf_r+0x114>
 800d736:	9207      	str	r2, [sp, #28]
 800d738:	e014      	b.n	800d764 <_svfiprintf_r+0x114>
 800d73a:	eba0 0308 	sub.w	r3, r0, r8
 800d73e:	fa09 f303 	lsl.w	r3, r9, r3
 800d742:	4313      	orrs	r3, r2
 800d744:	46a2      	mov	sl, r4
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	e7d2      	b.n	800d6f0 <_svfiprintf_r+0xa0>
 800d74a:	9b03      	ldr	r3, [sp, #12]
 800d74c:	1d19      	adds	r1, r3, #4
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	9103      	str	r1, [sp, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	bfbb      	ittet	lt
 800d756:	425b      	neglt	r3, r3
 800d758:	f042 0202 	orrlt.w	r2, r2, #2
 800d75c:	9307      	strge	r3, [sp, #28]
 800d75e:	9307      	strlt	r3, [sp, #28]
 800d760:	bfb8      	it	lt
 800d762:	9204      	strlt	r2, [sp, #16]
 800d764:	7823      	ldrb	r3, [r4, #0]
 800d766:	2b2e      	cmp	r3, #46	@ 0x2e
 800d768:	d10a      	bne.n	800d780 <_svfiprintf_r+0x130>
 800d76a:	7863      	ldrb	r3, [r4, #1]
 800d76c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d76e:	d132      	bne.n	800d7d6 <_svfiprintf_r+0x186>
 800d770:	9b03      	ldr	r3, [sp, #12]
 800d772:	3402      	adds	r4, #2
 800d774:	1d1a      	adds	r2, r3, #4
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	9203      	str	r2, [sp, #12]
 800d77a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d77e:	9305      	str	r3, [sp, #20]
 800d780:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d838 <_svfiprintf_r+0x1e8>
 800d784:	2203      	movs	r2, #3
 800d786:	4650      	mov	r0, sl
 800d788:	7821      	ldrb	r1, [r4, #0]
 800d78a:	f7fe fd19 	bl	800c1c0 <memchr>
 800d78e:	b138      	cbz	r0, 800d7a0 <_svfiprintf_r+0x150>
 800d790:	2240      	movs	r2, #64	@ 0x40
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	eba0 000a 	sub.w	r0, r0, sl
 800d798:	4082      	lsls	r2, r0
 800d79a:	4313      	orrs	r3, r2
 800d79c:	3401      	adds	r4, #1
 800d79e:	9304      	str	r3, [sp, #16]
 800d7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a4:	2206      	movs	r2, #6
 800d7a6:	4825      	ldr	r0, [pc, #148]	@ (800d83c <_svfiprintf_r+0x1ec>)
 800d7a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ac:	f7fe fd08 	bl	800c1c0 <memchr>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d036      	beq.n	800d822 <_svfiprintf_r+0x1d2>
 800d7b4:	4b22      	ldr	r3, [pc, #136]	@ (800d840 <_svfiprintf_r+0x1f0>)
 800d7b6:	bb1b      	cbnz	r3, 800d800 <_svfiprintf_r+0x1b0>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	3307      	adds	r3, #7
 800d7bc:	f023 0307 	bic.w	r3, r3, #7
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	9303      	str	r3, [sp, #12]
 800d7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c6:	4433      	add	r3, r6
 800d7c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ca:	e76a      	b.n	800d6a2 <_svfiprintf_r+0x52>
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7d4:	e7a8      	b.n	800d728 <_svfiprintf_r+0xd8>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f04f 0c0a 	mov.w	ip, #10
 800d7dc:	4619      	mov	r1, r3
 800d7de:	3401      	adds	r4, #1
 800d7e0:	9305      	str	r3, [sp, #20]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7e8:	3a30      	subs	r2, #48	@ 0x30
 800d7ea:	2a09      	cmp	r2, #9
 800d7ec:	d903      	bls.n	800d7f6 <_svfiprintf_r+0x1a6>
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0c6      	beq.n	800d780 <_svfiprintf_r+0x130>
 800d7f2:	9105      	str	r1, [sp, #20]
 800d7f4:	e7c4      	b.n	800d780 <_svfiprintf_r+0x130>
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7fe:	e7f0      	b.n	800d7e2 <_svfiprintf_r+0x192>
 800d800:	ab03      	add	r3, sp, #12
 800d802:	9300      	str	r3, [sp, #0]
 800d804:	462a      	mov	r2, r5
 800d806:	4638      	mov	r0, r7
 800d808:	4b0e      	ldr	r3, [pc, #56]	@ (800d844 <_svfiprintf_r+0x1f4>)
 800d80a:	a904      	add	r1, sp, #16
 800d80c:	f7fd fdfa 	bl	800b404 <_printf_float>
 800d810:	1c42      	adds	r2, r0, #1
 800d812:	4606      	mov	r6, r0
 800d814:	d1d6      	bne.n	800d7c4 <_svfiprintf_r+0x174>
 800d816:	89ab      	ldrh	r3, [r5, #12]
 800d818:	065b      	lsls	r3, r3, #25
 800d81a:	f53f af2d 	bmi.w	800d678 <_svfiprintf_r+0x28>
 800d81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d820:	e72c      	b.n	800d67c <_svfiprintf_r+0x2c>
 800d822:	ab03      	add	r3, sp, #12
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	462a      	mov	r2, r5
 800d828:	4638      	mov	r0, r7
 800d82a:	4b06      	ldr	r3, [pc, #24]	@ (800d844 <_svfiprintf_r+0x1f4>)
 800d82c:	a904      	add	r1, sp, #16
 800d82e:	f7fe f887 	bl	800b940 <_printf_i>
 800d832:	e7ed      	b.n	800d810 <_svfiprintf_r+0x1c0>
 800d834:	0800e758 	.word	0x0800e758
 800d838:	0800e75e 	.word	0x0800e75e
 800d83c:	0800e762 	.word	0x0800e762
 800d840:	0800b405 	.word	0x0800b405
 800d844:	0800d599 	.word	0x0800d599

0800d848 <__sfputc_r>:
 800d848:	6893      	ldr	r3, [r2, #8]
 800d84a:	b410      	push	{r4}
 800d84c:	3b01      	subs	r3, #1
 800d84e:	2b00      	cmp	r3, #0
 800d850:	6093      	str	r3, [r2, #8]
 800d852:	da07      	bge.n	800d864 <__sfputc_r+0x1c>
 800d854:	6994      	ldr	r4, [r2, #24]
 800d856:	42a3      	cmp	r3, r4
 800d858:	db01      	blt.n	800d85e <__sfputc_r+0x16>
 800d85a:	290a      	cmp	r1, #10
 800d85c:	d102      	bne.n	800d864 <__sfputc_r+0x1c>
 800d85e:	bc10      	pop	{r4}
 800d860:	f7fe bb37 	b.w	800bed2 <__swbuf_r>
 800d864:	6813      	ldr	r3, [r2, #0]
 800d866:	1c58      	adds	r0, r3, #1
 800d868:	6010      	str	r0, [r2, #0]
 800d86a:	7019      	strb	r1, [r3, #0]
 800d86c:	4608      	mov	r0, r1
 800d86e:	bc10      	pop	{r4}
 800d870:	4770      	bx	lr

0800d872 <__sfputs_r>:
 800d872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d874:	4606      	mov	r6, r0
 800d876:	460f      	mov	r7, r1
 800d878:	4614      	mov	r4, r2
 800d87a:	18d5      	adds	r5, r2, r3
 800d87c:	42ac      	cmp	r4, r5
 800d87e:	d101      	bne.n	800d884 <__sfputs_r+0x12>
 800d880:	2000      	movs	r0, #0
 800d882:	e007      	b.n	800d894 <__sfputs_r+0x22>
 800d884:	463a      	mov	r2, r7
 800d886:	4630      	mov	r0, r6
 800d888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d88c:	f7ff ffdc 	bl	800d848 <__sfputc_r>
 800d890:	1c43      	adds	r3, r0, #1
 800d892:	d1f3      	bne.n	800d87c <__sfputs_r+0xa>
 800d894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d898 <_vfiprintf_r>:
 800d898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89c:	460d      	mov	r5, r1
 800d89e:	4614      	mov	r4, r2
 800d8a0:	4698      	mov	r8, r3
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	b09d      	sub	sp, #116	@ 0x74
 800d8a6:	b118      	cbz	r0, 800d8b0 <_vfiprintf_r+0x18>
 800d8a8:	6a03      	ldr	r3, [r0, #32]
 800d8aa:	b90b      	cbnz	r3, 800d8b0 <_vfiprintf_r+0x18>
 800d8ac:	f7fe f9f4 	bl	800bc98 <__sinit>
 800d8b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8b2:	07d9      	lsls	r1, r3, #31
 800d8b4:	d405      	bmi.n	800d8c2 <_vfiprintf_r+0x2a>
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	059a      	lsls	r2, r3, #22
 800d8ba:	d402      	bmi.n	800d8c2 <_vfiprintf_r+0x2a>
 800d8bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8be:	f7f5 f9b7 	bl	8002c30 <__retarget_lock_acquire_recursive>
 800d8c2:	89ab      	ldrh	r3, [r5, #12]
 800d8c4:	071b      	lsls	r3, r3, #28
 800d8c6:	d501      	bpl.n	800d8cc <_vfiprintf_r+0x34>
 800d8c8:	692b      	ldr	r3, [r5, #16]
 800d8ca:	b99b      	cbnz	r3, 800d8f4 <_vfiprintf_r+0x5c>
 800d8cc:	4629      	mov	r1, r5
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f7fe fb3e 	bl	800bf50 <__swsetup_r>
 800d8d4:	b170      	cbz	r0, 800d8f4 <_vfiprintf_r+0x5c>
 800d8d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8d8:	07dc      	lsls	r4, r3, #31
 800d8da:	d504      	bpl.n	800d8e6 <_vfiprintf_r+0x4e>
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8e0:	b01d      	add	sp, #116	@ 0x74
 800d8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e6:	89ab      	ldrh	r3, [r5, #12]
 800d8e8:	0598      	lsls	r0, r3, #22
 800d8ea:	d4f7      	bmi.n	800d8dc <_vfiprintf_r+0x44>
 800d8ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8ee:	f7f5 f9b4 	bl	8002c5a <__retarget_lock_release_recursive>
 800d8f2:	e7f3      	b.n	800d8dc <_vfiprintf_r+0x44>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8f8:	2320      	movs	r3, #32
 800d8fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8fe:	2330      	movs	r3, #48	@ 0x30
 800d900:	f04f 0901 	mov.w	r9, #1
 800d904:	f8cd 800c 	str.w	r8, [sp, #12]
 800d908:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800dab4 <_vfiprintf_r+0x21c>
 800d90c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d910:	4623      	mov	r3, r4
 800d912:	469a      	mov	sl, r3
 800d914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d918:	b10a      	cbz	r2, 800d91e <_vfiprintf_r+0x86>
 800d91a:	2a25      	cmp	r2, #37	@ 0x25
 800d91c:	d1f9      	bne.n	800d912 <_vfiprintf_r+0x7a>
 800d91e:	ebba 0b04 	subs.w	fp, sl, r4
 800d922:	d00b      	beq.n	800d93c <_vfiprintf_r+0xa4>
 800d924:	465b      	mov	r3, fp
 800d926:	4622      	mov	r2, r4
 800d928:	4629      	mov	r1, r5
 800d92a:	4630      	mov	r0, r6
 800d92c:	f7ff ffa1 	bl	800d872 <__sfputs_r>
 800d930:	3001      	adds	r0, #1
 800d932:	f000 80a7 	beq.w	800da84 <_vfiprintf_r+0x1ec>
 800d936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d938:	445a      	add	r2, fp
 800d93a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d93c:	f89a 3000 	ldrb.w	r3, [sl]
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 809f 	beq.w	800da84 <_vfiprintf_r+0x1ec>
 800d946:	2300      	movs	r3, #0
 800d948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d950:	f10a 0a01 	add.w	sl, sl, #1
 800d954:	9304      	str	r3, [sp, #16]
 800d956:	9307      	str	r3, [sp, #28]
 800d958:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d95c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d95e:	4654      	mov	r4, sl
 800d960:	2205      	movs	r2, #5
 800d962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d966:	4853      	ldr	r0, [pc, #332]	@ (800dab4 <_vfiprintf_r+0x21c>)
 800d968:	f7fe fc2a 	bl	800c1c0 <memchr>
 800d96c:	9a04      	ldr	r2, [sp, #16]
 800d96e:	b9d8      	cbnz	r0, 800d9a8 <_vfiprintf_r+0x110>
 800d970:	06d1      	lsls	r1, r2, #27
 800d972:	bf44      	itt	mi
 800d974:	2320      	movmi	r3, #32
 800d976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d97a:	0713      	lsls	r3, r2, #28
 800d97c:	bf44      	itt	mi
 800d97e:	232b      	movmi	r3, #43	@ 0x2b
 800d980:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d984:	f89a 3000 	ldrb.w	r3, [sl]
 800d988:	2b2a      	cmp	r3, #42	@ 0x2a
 800d98a:	d015      	beq.n	800d9b8 <_vfiprintf_r+0x120>
 800d98c:	4654      	mov	r4, sl
 800d98e:	2000      	movs	r0, #0
 800d990:	f04f 0c0a 	mov.w	ip, #10
 800d994:	9a07      	ldr	r2, [sp, #28]
 800d996:	4621      	mov	r1, r4
 800d998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d99c:	3b30      	subs	r3, #48	@ 0x30
 800d99e:	2b09      	cmp	r3, #9
 800d9a0:	d94b      	bls.n	800da3a <_vfiprintf_r+0x1a2>
 800d9a2:	b1b0      	cbz	r0, 800d9d2 <_vfiprintf_r+0x13a>
 800d9a4:	9207      	str	r2, [sp, #28]
 800d9a6:	e014      	b.n	800d9d2 <_vfiprintf_r+0x13a>
 800d9a8:	eba0 0308 	sub.w	r3, r0, r8
 800d9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	46a2      	mov	sl, r4
 800d9b4:	9304      	str	r3, [sp, #16]
 800d9b6:	e7d2      	b.n	800d95e <_vfiprintf_r+0xc6>
 800d9b8:	9b03      	ldr	r3, [sp, #12]
 800d9ba:	1d19      	adds	r1, r3, #4
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	9103      	str	r1, [sp, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	bfbb      	ittet	lt
 800d9c4:	425b      	neglt	r3, r3
 800d9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d9ca:	9307      	strge	r3, [sp, #28]
 800d9cc:	9307      	strlt	r3, [sp, #28]
 800d9ce:	bfb8      	it	lt
 800d9d0:	9204      	strlt	r2, [sp, #16]
 800d9d2:	7823      	ldrb	r3, [r4, #0]
 800d9d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9d6:	d10a      	bne.n	800d9ee <_vfiprintf_r+0x156>
 800d9d8:	7863      	ldrb	r3, [r4, #1]
 800d9da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9dc:	d132      	bne.n	800da44 <_vfiprintf_r+0x1ac>
 800d9de:	9b03      	ldr	r3, [sp, #12]
 800d9e0:	3402      	adds	r4, #2
 800d9e2:	1d1a      	adds	r2, r3, #4
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	9203      	str	r2, [sp, #12]
 800d9e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9ec:	9305      	str	r3, [sp, #20]
 800d9ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dab8 <_vfiprintf_r+0x220>
 800d9f2:	2203      	movs	r2, #3
 800d9f4:	4650      	mov	r0, sl
 800d9f6:	7821      	ldrb	r1, [r4, #0]
 800d9f8:	f7fe fbe2 	bl	800c1c0 <memchr>
 800d9fc:	b138      	cbz	r0, 800da0e <_vfiprintf_r+0x176>
 800d9fe:	2240      	movs	r2, #64	@ 0x40
 800da00:	9b04      	ldr	r3, [sp, #16]
 800da02:	eba0 000a 	sub.w	r0, r0, sl
 800da06:	4082      	lsls	r2, r0
 800da08:	4313      	orrs	r3, r2
 800da0a:	3401      	adds	r4, #1
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da12:	2206      	movs	r2, #6
 800da14:	4829      	ldr	r0, [pc, #164]	@ (800dabc <_vfiprintf_r+0x224>)
 800da16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da1a:	f7fe fbd1 	bl	800c1c0 <memchr>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d03f      	beq.n	800daa2 <_vfiprintf_r+0x20a>
 800da22:	4b27      	ldr	r3, [pc, #156]	@ (800dac0 <_vfiprintf_r+0x228>)
 800da24:	bb1b      	cbnz	r3, 800da6e <_vfiprintf_r+0x1d6>
 800da26:	9b03      	ldr	r3, [sp, #12]
 800da28:	3307      	adds	r3, #7
 800da2a:	f023 0307 	bic.w	r3, r3, #7
 800da2e:	3308      	adds	r3, #8
 800da30:	9303      	str	r3, [sp, #12]
 800da32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da34:	443b      	add	r3, r7
 800da36:	9309      	str	r3, [sp, #36]	@ 0x24
 800da38:	e76a      	b.n	800d910 <_vfiprintf_r+0x78>
 800da3a:	460c      	mov	r4, r1
 800da3c:	2001      	movs	r0, #1
 800da3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da42:	e7a8      	b.n	800d996 <_vfiprintf_r+0xfe>
 800da44:	2300      	movs	r3, #0
 800da46:	f04f 0c0a 	mov.w	ip, #10
 800da4a:	4619      	mov	r1, r3
 800da4c:	3401      	adds	r4, #1
 800da4e:	9305      	str	r3, [sp, #20]
 800da50:	4620      	mov	r0, r4
 800da52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da56:	3a30      	subs	r2, #48	@ 0x30
 800da58:	2a09      	cmp	r2, #9
 800da5a:	d903      	bls.n	800da64 <_vfiprintf_r+0x1cc>
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0c6      	beq.n	800d9ee <_vfiprintf_r+0x156>
 800da60:	9105      	str	r1, [sp, #20]
 800da62:	e7c4      	b.n	800d9ee <_vfiprintf_r+0x156>
 800da64:	4604      	mov	r4, r0
 800da66:	2301      	movs	r3, #1
 800da68:	fb0c 2101 	mla	r1, ip, r1, r2
 800da6c:	e7f0      	b.n	800da50 <_vfiprintf_r+0x1b8>
 800da6e:	ab03      	add	r3, sp, #12
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	462a      	mov	r2, r5
 800da74:	4630      	mov	r0, r6
 800da76:	4b13      	ldr	r3, [pc, #76]	@ (800dac4 <_vfiprintf_r+0x22c>)
 800da78:	a904      	add	r1, sp, #16
 800da7a:	f7fd fcc3 	bl	800b404 <_printf_float>
 800da7e:	4607      	mov	r7, r0
 800da80:	1c78      	adds	r0, r7, #1
 800da82:	d1d6      	bne.n	800da32 <_vfiprintf_r+0x19a>
 800da84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da86:	07d9      	lsls	r1, r3, #31
 800da88:	d405      	bmi.n	800da96 <_vfiprintf_r+0x1fe>
 800da8a:	89ab      	ldrh	r3, [r5, #12]
 800da8c:	059a      	lsls	r2, r3, #22
 800da8e:	d402      	bmi.n	800da96 <_vfiprintf_r+0x1fe>
 800da90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da92:	f7f5 f8e2 	bl	8002c5a <__retarget_lock_release_recursive>
 800da96:	89ab      	ldrh	r3, [r5, #12]
 800da98:	065b      	lsls	r3, r3, #25
 800da9a:	f53f af1f 	bmi.w	800d8dc <_vfiprintf_r+0x44>
 800da9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800daa0:	e71e      	b.n	800d8e0 <_vfiprintf_r+0x48>
 800daa2:	ab03      	add	r3, sp, #12
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	462a      	mov	r2, r5
 800daa8:	4630      	mov	r0, r6
 800daaa:	4b06      	ldr	r3, [pc, #24]	@ (800dac4 <_vfiprintf_r+0x22c>)
 800daac:	a904      	add	r1, sp, #16
 800daae:	f7fd ff47 	bl	800b940 <_printf_i>
 800dab2:	e7e4      	b.n	800da7e <_vfiprintf_r+0x1e6>
 800dab4:	0800e758 	.word	0x0800e758
 800dab8:	0800e75e 	.word	0x0800e75e
 800dabc:	0800e762 	.word	0x0800e762
 800dac0:	0800b405 	.word	0x0800b405
 800dac4:	0800d873 	.word	0x0800d873

0800dac8 <__sflush_r>:
 800dac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dace:	0716      	lsls	r6, r2, #28
 800dad0:	4605      	mov	r5, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	d454      	bmi.n	800db80 <__sflush_r+0xb8>
 800dad6:	684b      	ldr	r3, [r1, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dc02      	bgt.n	800dae2 <__sflush_r+0x1a>
 800dadc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	dd48      	ble.n	800db74 <__sflush_r+0xac>
 800dae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dae4:	2e00      	cmp	r6, #0
 800dae6:	d045      	beq.n	800db74 <__sflush_r+0xac>
 800dae8:	2300      	movs	r3, #0
 800daea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800daee:	682f      	ldr	r7, [r5, #0]
 800daf0:	6a21      	ldr	r1, [r4, #32]
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	d030      	beq.n	800db58 <__sflush_r+0x90>
 800daf6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800daf8:	89a3      	ldrh	r3, [r4, #12]
 800dafa:	0759      	lsls	r1, r3, #29
 800dafc:	d505      	bpl.n	800db0a <__sflush_r+0x42>
 800dafe:	6863      	ldr	r3, [r4, #4]
 800db00:	1ad2      	subs	r2, r2, r3
 800db02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db04:	b10b      	cbz	r3, 800db0a <__sflush_r+0x42>
 800db06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db08:	1ad2      	subs	r2, r2, r3
 800db0a:	2300      	movs	r3, #0
 800db0c:	4628      	mov	r0, r5
 800db0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db10:	6a21      	ldr	r1, [r4, #32]
 800db12:	47b0      	blx	r6
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	89a3      	ldrh	r3, [r4, #12]
 800db18:	d106      	bne.n	800db28 <__sflush_r+0x60>
 800db1a:	6829      	ldr	r1, [r5, #0]
 800db1c:	291d      	cmp	r1, #29
 800db1e:	d82b      	bhi.n	800db78 <__sflush_r+0xb0>
 800db20:	4a28      	ldr	r2, [pc, #160]	@ (800dbc4 <__sflush_r+0xfc>)
 800db22:	410a      	asrs	r2, r1
 800db24:	07d6      	lsls	r6, r2, #31
 800db26:	d427      	bmi.n	800db78 <__sflush_r+0xb0>
 800db28:	2200      	movs	r2, #0
 800db2a:	6062      	str	r2, [r4, #4]
 800db2c:	6922      	ldr	r2, [r4, #16]
 800db2e:	04d9      	lsls	r1, r3, #19
 800db30:	6022      	str	r2, [r4, #0]
 800db32:	d504      	bpl.n	800db3e <__sflush_r+0x76>
 800db34:	1c42      	adds	r2, r0, #1
 800db36:	d101      	bne.n	800db3c <__sflush_r+0x74>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b903      	cbnz	r3, 800db3e <__sflush_r+0x76>
 800db3c:	6560      	str	r0, [r4, #84]	@ 0x54
 800db3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db40:	602f      	str	r7, [r5, #0]
 800db42:	b1b9      	cbz	r1, 800db74 <__sflush_r+0xac>
 800db44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db48:	4299      	cmp	r1, r3
 800db4a:	d002      	beq.n	800db52 <__sflush_r+0x8a>
 800db4c:	4628      	mov	r0, r5
 800db4e:	f7fd fabd 	bl	800b0cc <_free_r>
 800db52:	2300      	movs	r3, #0
 800db54:	6363      	str	r3, [r4, #52]	@ 0x34
 800db56:	e00d      	b.n	800db74 <__sflush_r+0xac>
 800db58:	2301      	movs	r3, #1
 800db5a:	4628      	mov	r0, r5
 800db5c:	47b0      	blx	r6
 800db5e:	4602      	mov	r2, r0
 800db60:	1c50      	adds	r0, r2, #1
 800db62:	d1c9      	bne.n	800daf8 <__sflush_r+0x30>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d0c6      	beq.n	800daf8 <__sflush_r+0x30>
 800db6a:	2b1d      	cmp	r3, #29
 800db6c:	d001      	beq.n	800db72 <__sflush_r+0xaa>
 800db6e:	2b16      	cmp	r3, #22
 800db70:	d11d      	bne.n	800dbae <__sflush_r+0xe6>
 800db72:	602f      	str	r7, [r5, #0]
 800db74:	2000      	movs	r0, #0
 800db76:	e021      	b.n	800dbbc <__sflush_r+0xf4>
 800db78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db7c:	b21b      	sxth	r3, r3
 800db7e:	e01a      	b.n	800dbb6 <__sflush_r+0xee>
 800db80:	690f      	ldr	r7, [r1, #16]
 800db82:	2f00      	cmp	r7, #0
 800db84:	d0f6      	beq.n	800db74 <__sflush_r+0xac>
 800db86:	0793      	lsls	r3, r2, #30
 800db88:	bf18      	it	ne
 800db8a:	2300      	movne	r3, #0
 800db8c:	680e      	ldr	r6, [r1, #0]
 800db8e:	bf08      	it	eq
 800db90:	694b      	ldreq	r3, [r1, #20]
 800db92:	1bf6      	subs	r6, r6, r7
 800db94:	600f      	str	r7, [r1, #0]
 800db96:	608b      	str	r3, [r1, #8]
 800db98:	2e00      	cmp	r6, #0
 800db9a:	ddeb      	ble.n	800db74 <__sflush_r+0xac>
 800db9c:	4633      	mov	r3, r6
 800db9e:	463a      	mov	r2, r7
 800dba0:	4628      	mov	r0, r5
 800dba2:	6a21      	ldr	r1, [r4, #32]
 800dba4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dba8:	47e0      	blx	ip
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	dc07      	bgt.n	800dbbe <__sflush_r+0xf6>
 800dbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbbe:	4407      	add	r7, r0
 800dbc0:	1a36      	subs	r6, r6, r0
 800dbc2:	e7e9      	b.n	800db98 <__sflush_r+0xd0>
 800dbc4:	dfbffffe 	.word	0xdfbffffe

0800dbc8 <_fflush_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	690b      	ldr	r3, [r1, #16]
 800dbcc:	4605      	mov	r5, r0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	b913      	cbnz	r3, 800dbd8 <_fflush_r+0x10>
 800dbd2:	2500      	movs	r5, #0
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	bd38      	pop	{r3, r4, r5, pc}
 800dbd8:	b118      	cbz	r0, 800dbe2 <_fflush_r+0x1a>
 800dbda:	6a03      	ldr	r3, [r0, #32]
 800dbdc:	b90b      	cbnz	r3, 800dbe2 <_fflush_r+0x1a>
 800dbde:	f7fe f85b 	bl	800bc98 <__sinit>
 800dbe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d0f3      	beq.n	800dbd2 <_fflush_r+0xa>
 800dbea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbec:	07d0      	lsls	r0, r2, #31
 800dbee:	d404      	bmi.n	800dbfa <_fflush_r+0x32>
 800dbf0:	0599      	lsls	r1, r3, #22
 800dbf2:	d402      	bmi.n	800dbfa <_fflush_r+0x32>
 800dbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbf6:	f7f5 f81b 	bl	8002c30 <__retarget_lock_acquire_recursive>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	f7ff ff63 	bl	800dac8 <__sflush_r>
 800dc02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc04:	4605      	mov	r5, r0
 800dc06:	07da      	lsls	r2, r3, #31
 800dc08:	d4e4      	bmi.n	800dbd4 <_fflush_r+0xc>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	059b      	lsls	r3, r3, #22
 800dc0e:	d4e1      	bmi.n	800dbd4 <_fflush_r+0xc>
 800dc10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc12:	f7f5 f822 	bl	8002c5a <__retarget_lock_release_recursive>
 800dc16:	e7dd      	b.n	800dbd4 <_fflush_r+0xc>

0800dc18 <__swhatbuf_r>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc20:	4615      	mov	r5, r2
 800dc22:	2900      	cmp	r1, #0
 800dc24:	461e      	mov	r6, r3
 800dc26:	b096      	sub	sp, #88	@ 0x58
 800dc28:	da0c      	bge.n	800dc44 <__swhatbuf_r+0x2c>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc32:	bf14      	ite	ne
 800dc34:	2340      	movne	r3, #64	@ 0x40
 800dc36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	6031      	str	r1, [r6, #0]
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	b016      	add	sp, #88	@ 0x58
 800dc42:	bd70      	pop	{r4, r5, r6, pc}
 800dc44:	466a      	mov	r2, sp
 800dc46:	f000 f863 	bl	800dd10 <_fstat_r>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	dbed      	blt.n	800dc2a <__swhatbuf_r+0x12>
 800dc4e:	9901      	ldr	r1, [sp, #4]
 800dc50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc58:	4259      	negs	r1, r3
 800dc5a:	4159      	adcs	r1, r3
 800dc5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc60:	e7eb      	b.n	800dc3a <__swhatbuf_r+0x22>

0800dc62 <__smakebuf_r>:
 800dc62:	898b      	ldrh	r3, [r1, #12]
 800dc64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc66:	079d      	lsls	r5, r3, #30
 800dc68:	4606      	mov	r6, r0
 800dc6a:	460c      	mov	r4, r1
 800dc6c:	d507      	bpl.n	800dc7e <__smakebuf_r+0x1c>
 800dc6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	6123      	str	r3, [r4, #16]
 800dc76:	2301      	movs	r3, #1
 800dc78:	6163      	str	r3, [r4, #20]
 800dc7a:	b003      	add	sp, #12
 800dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7e:	466a      	mov	r2, sp
 800dc80:	ab01      	add	r3, sp, #4
 800dc82:	f7ff ffc9 	bl	800dc18 <__swhatbuf_r>
 800dc86:	9f00      	ldr	r7, [sp, #0]
 800dc88:	4605      	mov	r5, r0
 800dc8a:	4639      	mov	r1, r7
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	f7fd fa8f 	bl	800b1b0 <_malloc_r>
 800dc92:	b948      	cbnz	r0, 800dca8 <__smakebuf_r+0x46>
 800dc94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc98:	059a      	lsls	r2, r3, #22
 800dc9a:	d4ee      	bmi.n	800dc7a <__smakebuf_r+0x18>
 800dc9c:	f023 0303 	bic.w	r3, r3, #3
 800dca0:	f043 0302 	orr.w	r3, r3, #2
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	e7e2      	b.n	800dc6e <__smakebuf_r+0xc>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcb2:	81a3      	strh	r3, [r4, #12]
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	6020      	str	r0, [r4, #0]
 800dcb8:	b15b      	cbz	r3, 800dcd2 <__smakebuf_r+0x70>
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcc0:	f000 f838 	bl	800dd34 <_isatty_r>
 800dcc4:	b128      	cbz	r0, 800dcd2 <__smakebuf_r+0x70>
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	f023 0303 	bic.w	r3, r3, #3
 800dccc:	f043 0301 	orr.w	r3, r3, #1
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	431d      	orrs	r5, r3
 800dcd6:	81a5      	strh	r5, [r4, #12]
 800dcd8:	e7cf      	b.n	800dc7a <__smakebuf_r+0x18>

0800dcda <memmove>:
 800dcda:	4288      	cmp	r0, r1
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	eb01 0402 	add.w	r4, r1, r2
 800dce2:	d902      	bls.n	800dcea <memmove+0x10>
 800dce4:	4284      	cmp	r4, r0
 800dce6:	4623      	mov	r3, r4
 800dce8:	d807      	bhi.n	800dcfa <memmove+0x20>
 800dcea:	1e43      	subs	r3, r0, #1
 800dcec:	42a1      	cmp	r1, r4
 800dcee:	d008      	beq.n	800dd02 <memmove+0x28>
 800dcf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcf8:	e7f8      	b.n	800dcec <memmove+0x12>
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	4402      	add	r2, r0
 800dcfe:	428a      	cmp	r2, r1
 800dd00:	d100      	bne.n	800dd04 <memmove+0x2a>
 800dd02:	bd10      	pop	{r4, pc}
 800dd04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd08:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd0c:	e7f7      	b.n	800dcfe <memmove+0x24>
	...

0800dd10 <_fstat_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	2300      	movs	r3, #0
 800dd14:	4d06      	ldr	r5, [pc, #24]	@ (800dd30 <_fstat_r+0x20>)
 800dd16:	4604      	mov	r4, r0
 800dd18:	4608      	mov	r0, r1
 800dd1a:	4611      	mov	r1, r2
 800dd1c:	602b      	str	r3, [r5, #0]
 800dd1e:	f7f4 fd7f 	bl	8002820 <_fstat>
 800dd22:	1c43      	adds	r3, r0, #1
 800dd24:	d102      	bne.n	800dd2c <_fstat_r+0x1c>
 800dd26:	682b      	ldr	r3, [r5, #0]
 800dd28:	b103      	cbz	r3, 800dd2c <_fstat_r+0x1c>
 800dd2a:	6023      	str	r3, [r4, #0]
 800dd2c:	bd38      	pop	{r3, r4, r5, pc}
 800dd2e:	bf00      	nop
 800dd30:	20003f28 	.word	0x20003f28

0800dd34 <_isatty_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	2300      	movs	r3, #0
 800dd38:	4d05      	ldr	r5, [pc, #20]	@ (800dd50 <_isatty_r+0x1c>)
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	602b      	str	r3, [r5, #0]
 800dd40:	f7f4 fd7d 	bl	800283e <_isatty>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	d102      	bne.n	800dd4e <_isatty_r+0x1a>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	b103      	cbz	r3, 800dd4e <_isatty_r+0x1a>
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	20003f28 	.word	0x20003f28

0800dd54 <__assert_func>:
 800dd54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd56:	4614      	mov	r4, r2
 800dd58:	461a      	mov	r2, r3
 800dd5a:	4b09      	ldr	r3, [pc, #36]	@ (800dd80 <__assert_func+0x2c>)
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68d8      	ldr	r0, [r3, #12]
 800dd62:	b954      	cbnz	r4, 800dd7a <__assert_func+0x26>
 800dd64:	4b07      	ldr	r3, [pc, #28]	@ (800dd84 <__assert_func+0x30>)
 800dd66:	461c      	mov	r4, r3
 800dd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd6c:	9100      	str	r1, [sp, #0]
 800dd6e:	462b      	mov	r3, r5
 800dd70:	4905      	ldr	r1, [pc, #20]	@ (800dd88 <__assert_func+0x34>)
 800dd72:	f000 f86f 	bl	800de54 <fiprintf>
 800dd76:	f000 f87f 	bl	800de78 <abort>
 800dd7a:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <__assert_func+0x38>)
 800dd7c:	e7f4      	b.n	800dd68 <__assert_func+0x14>
 800dd7e:	bf00      	nop
 800dd80:	2000002c 	.word	0x2000002c
 800dd84:	0800e7ae 	.word	0x0800e7ae
 800dd88:	0800e780 	.word	0x0800e780
 800dd8c:	0800e773 	.word	0x0800e773

0800dd90 <_calloc_r>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	fba1 5402 	umull	r5, r4, r1, r2
 800dd96:	b93c      	cbnz	r4, 800dda8 <_calloc_r+0x18>
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7fd fa09 	bl	800b1b0 <_malloc_r>
 800dd9e:	4606      	mov	r6, r0
 800dda0:	b928      	cbnz	r0, 800ddae <_calloc_r+0x1e>
 800dda2:	2600      	movs	r6, #0
 800dda4:	4630      	mov	r0, r6
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	220c      	movs	r2, #12
 800ddaa:	6002      	str	r2, [r0, #0]
 800ddac:	e7f9      	b.n	800dda2 <_calloc_r+0x12>
 800ddae:	462a      	mov	r2, r5
 800ddb0:	4621      	mov	r1, r4
 800ddb2:	f7fe f923 	bl	800bffc <memset>
 800ddb6:	e7f5      	b.n	800dda4 <_calloc_r+0x14>

0800ddb8 <__ascii_mbtowc>:
 800ddb8:	b082      	sub	sp, #8
 800ddba:	b901      	cbnz	r1, 800ddbe <__ascii_mbtowc+0x6>
 800ddbc:	a901      	add	r1, sp, #4
 800ddbe:	b142      	cbz	r2, 800ddd2 <__ascii_mbtowc+0x1a>
 800ddc0:	b14b      	cbz	r3, 800ddd6 <__ascii_mbtowc+0x1e>
 800ddc2:	7813      	ldrb	r3, [r2, #0]
 800ddc4:	600b      	str	r3, [r1, #0]
 800ddc6:	7812      	ldrb	r2, [r2, #0]
 800ddc8:	1e10      	subs	r0, r2, #0
 800ddca:	bf18      	it	ne
 800ddcc:	2001      	movne	r0, #1
 800ddce:	b002      	add	sp, #8
 800ddd0:	4770      	bx	lr
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	e7fb      	b.n	800ddce <__ascii_mbtowc+0x16>
 800ddd6:	f06f 0001 	mvn.w	r0, #1
 800ddda:	e7f8      	b.n	800ddce <__ascii_mbtowc+0x16>

0800dddc <_realloc_r>:
 800dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde0:	4680      	mov	r8, r0
 800dde2:	4615      	mov	r5, r2
 800dde4:	460c      	mov	r4, r1
 800dde6:	b921      	cbnz	r1, 800ddf2 <_realloc_r+0x16>
 800dde8:	4611      	mov	r1, r2
 800ddea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddee:	f7fd b9df 	b.w	800b1b0 <_malloc_r>
 800ddf2:	b92a      	cbnz	r2, 800de00 <_realloc_r+0x24>
 800ddf4:	f7fd f96a 	bl	800b0cc <_free_r>
 800ddf8:	2400      	movs	r4, #0
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	f000 f841 	bl	800de86 <_malloc_usable_size_r>
 800de04:	4285      	cmp	r5, r0
 800de06:	4606      	mov	r6, r0
 800de08:	d802      	bhi.n	800de10 <_realloc_r+0x34>
 800de0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de0e:	d8f4      	bhi.n	800ddfa <_realloc_r+0x1e>
 800de10:	4629      	mov	r1, r5
 800de12:	4640      	mov	r0, r8
 800de14:	f7fd f9cc 	bl	800b1b0 <_malloc_r>
 800de18:	4607      	mov	r7, r0
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d0ec      	beq.n	800ddf8 <_realloc_r+0x1c>
 800de1e:	42b5      	cmp	r5, r6
 800de20:	462a      	mov	r2, r5
 800de22:	4621      	mov	r1, r4
 800de24:	bf28      	it	cs
 800de26:	4632      	movcs	r2, r6
 800de28:	f7fe f9d8 	bl	800c1dc <memcpy>
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f7fd f94c 	bl	800b0cc <_free_r>
 800de34:	463c      	mov	r4, r7
 800de36:	e7e0      	b.n	800ddfa <_realloc_r+0x1e>

0800de38 <__ascii_wctomb>:
 800de38:	4603      	mov	r3, r0
 800de3a:	4608      	mov	r0, r1
 800de3c:	b141      	cbz	r1, 800de50 <__ascii_wctomb+0x18>
 800de3e:	2aff      	cmp	r2, #255	@ 0xff
 800de40:	d904      	bls.n	800de4c <__ascii_wctomb+0x14>
 800de42:	228a      	movs	r2, #138	@ 0x8a
 800de44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	4770      	bx	lr
 800de4c:	2001      	movs	r0, #1
 800de4e:	700a      	strb	r2, [r1, #0]
 800de50:	4770      	bx	lr
	...

0800de54 <fiprintf>:
 800de54:	b40e      	push	{r1, r2, r3}
 800de56:	b503      	push	{r0, r1, lr}
 800de58:	4601      	mov	r1, r0
 800de5a:	ab03      	add	r3, sp, #12
 800de5c:	4805      	ldr	r0, [pc, #20]	@ (800de74 <fiprintf+0x20>)
 800de5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de62:	6800      	ldr	r0, [r0, #0]
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	f7ff fd17 	bl	800d898 <_vfiprintf_r>
 800de6a:	b002      	add	sp, #8
 800de6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de70:	b003      	add	sp, #12
 800de72:	4770      	bx	lr
 800de74:	2000002c 	.word	0x2000002c

0800de78 <abort>:
 800de78:	2006      	movs	r0, #6
 800de7a:	b508      	push	{r3, lr}
 800de7c:	f000 f834 	bl	800dee8 <raise>
 800de80:	2001      	movs	r0, #1
 800de82:	f7f4 fc9a 	bl	80027ba <_exit>

0800de86 <_malloc_usable_size_r>:
 800de86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8a:	1f18      	subs	r0, r3, #4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	bfbc      	itt	lt
 800de90:	580b      	ldrlt	r3, [r1, r0]
 800de92:	18c0      	addlt	r0, r0, r3
 800de94:	4770      	bx	lr

0800de96 <_raise_r>:
 800de96:	291f      	cmp	r1, #31
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4605      	mov	r5, r0
 800de9c:	460c      	mov	r4, r1
 800de9e:	d904      	bls.n	800deaa <_raise_r+0x14>
 800dea0:	2316      	movs	r3, #22
 800dea2:	6003      	str	r3, [r0, #0]
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dea8:	bd38      	pop	{r3, r4, r5, pc}
 800deaa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800deac:	b112      	cbz	r2, 800deb4 <_raise_r+0x1e>
 800deae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800deb2:	b94b      	cbnz	r3, 800dec8 <_raise_r+0x32>
 800deb4:	4628      	mov	r0, r5
 800deb6:	f000 f831 	bl	800df1c <_getpid_r>
 800deba:	4622      	mov	r2, r4
 800debc:	4601      	mov	r1, r0
 800debe:	4628      	mov	r0, r5
 800dec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec4:	f000 b818 	b.w	800def8 <_kill_r>
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d00a      	beq.n	800dee2 <_raise_r+0x4c>
 800decc:	1c59      	adds	r1, r3, #1
 800dece:	d103      	bne.n	800ded8 <_raise_r+0x42>
 800ded0:	2316      	movs	r3, #22
 800ded2:	6003      	str	r3, [r0, #0]
 800ded4:	2001      	movs	r0, #1
 800ded6:	e7e7      	b.n	800dea8 <_raise_r+0x12>
 800ded8:	2100      	movs	r1, #0
 800deda:	4620      	mov	r0, r4
 800dedc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dee0:	4798      	blx	r3
 800dee2:	2000      	movs	r0, #0
 800dee4:	e7e0      	b.n	800dea8 <_raise_r+0x12>
	...

0800dee8 <raise>:
 800dee8:	4b02      	ldr	r3, [pc, #8]	@ (800def4 <raise+0xc>)
 800deea:	4601      	mov	r1, r0
 800deec:	6818      	ldr	r0, [r3, #0]
 800deee:	f7ff bfd2 	b.w	800de96 <_raise_r>
 800def2:	bf00      	nop
 800def4:	2000002c 	.word	0x2000002c

0800def8 <_kill_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	2300      	movs	r3, #0
 800defc:	4d06      	ldr	r5, [pc, #24]	@ (800df18 <_kill_r+0x20>)
 800defe:	4604      	mov	r4, r0
 800df00:	4608      	mov	r0, r1
 800df02:	4611      	mov	r1, r2
 800df04:	602b      	str	r3, [r5, #0]
 800df06:	f7f4 fc48 	bl	800279a <_kill>
 800df0a:	1c43      	adds	r3, r0, #1
 800df0c:	d102      	bne.n	800df14 <_kill_r+0x1c>
 800df0e:	682b      	ldr	r3, [r5, #0]
 800df10:	b103      	cbz	r3, 800df14 <_kill_r+0x1c>
 800df12:	6023      	str	r3, [r4, #0]
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	bf00      	nop
 800df18:	20003f28 	.word	0x20003f28

0800df1c <_getpid_r>:
 800df1c:	f7f4 bc36 	b.w	800278c <_getpid>

0800df20 <_init>:
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df22:	bf00      	nop
 800df24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df26:	bc08      	pop	{r3}
 800df28:	469e      	mov	lr, r3
 800df2a:	4770      	bx	lr

0800df2c <_fini>:
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	bf00      	nop
 800df30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df32:	bc08      	pop	{r3}
 800df34:	469e      	mov	lr, r3
 800df36:	4770      	bx	lr
