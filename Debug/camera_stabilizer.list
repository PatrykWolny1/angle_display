
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080078b8  080078b8  000088b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c78  08007c78  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c78  08007c78  00008c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c80  08007c80  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c84  08007c84  00008c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007c88  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  200001d4  08007e5c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b08  08007e5c  00009b08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a520  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f56  00000000  00000000  0002371d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00027678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001327  00000000  00000000  00028f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000522b  00000000  00000000  0002a23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da2b  00000000  00000000  0002f46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b5f1  00000000  00000000  0004ce95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000758c  00000000  00000000  000e84cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000efa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080078a0 	.word	0x080078a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080078a0 	.word	0x080078a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	200c      	movs	r0, #12
 8000aac:	f001 fa3d 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f001 fa56 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2105      	movs	r1, #5
 8000aba:	200d      	movs	r0, #13
 8000abc:	f001 fa35 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ac0:	200d      	movs	r0, #13
 8000ac2:	f001 fa4e 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2010      	movs	r0, #16
 8000acc:	f001 fa2d 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ad0:	2010      	movs	r0, #16
 8000ad2:	f001 fa46 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2011      	movs	r0, #17
 8000adc:	f001 fa25 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ae0:	2011      	movs	r0, #17
 8000ae2:	f001 fa3e 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a40      	ldr	r2, [pc, #256]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b3e      	ldr	r3, [pc, #248]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b3b      	ldr	r3, [pc, #236]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a3a      	ldr	r2, [pc, #232]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b38      	ldr	r3, [pc, #224]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b35      	ldr	r3, [pc, #212]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a34      	ldr	r2, [pc, #208]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b32      	ldr	r3, [pc, #200]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a2e      	ldr	r2, [pc, #184]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0x11c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4829      	ldr	r0, [pc, #164]	@ (8000c14 <MX_GPIO_Init+0x120>)
 8000b6e:	f001 fd9f 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2106      	movs	r1, #6
 8000b76:	4828      	ldr	r0, [pc, #160]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000b78:	f001 fd9a 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	4826      	ldr	r0, [pc, #152]	@ (8000c1c <MX_GPIO_Init+0x128>)
 8000b84:	f001 fd94 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <MX_GPIO_Init+0x12c>)
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	481d      	ldr	r0, [pc, #116]	@ (8000c14 <MX_GPIO_Init+0x120>)
 8000b9e:	f001 fc03 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4816      	ldr	r0, [pc, #88]	@ (8000c14 <MX_GPIO_Init+0x120>)
 8000bba:	f001 fbf5 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <MX_GPIO_Init+0x124>)
 8000bd6:	f001 fbe7 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <MX_GPIO_Init+0x128>)
 8000bf4:	f001 fbd8 	bl	80023a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	2028      	movs	r0, #40	@ 0x28
 8000bfe:	f001 f994 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f001 f9ad 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40011000 	.word	0x40011000
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	10110000 	.word	0x10110000

08000c24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <MX_I2C1_Init+0x54>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c30:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x58>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <MX_I2C1_Init+0x50>)
 8000c62:	f001 fd5f 	bl	8002724 <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f98c 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200001f0 	.word	0x200001f0
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	00061a80 	.word	0x00061a80

08000c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d10 <HAL_I2C_MspInit+0x90>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d132      	bne.n	8000d06 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <HAL_I2C_MspInit+0x98>)
 8000cce:	f001 fb6b 	bl	80023a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_I2C_MspInit+0x9c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d1c <HAL_I2C_MspInit+0x9c>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_I2C_MspInit+0x94>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	@ 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40005400 	.word	0x40005400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	40010000 	.word	0x40010000

08000d20 <Motor_Init>:
    {0, 1, 0, 0, 0, 1},  // Step 4
    {0, 1, 1, 0, 0, 0},  // Step 5
    {1, 0, 0, 1, 0, 0}   // Step 6
};
void Motor_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    // Ensure the driver is enabled
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Set VIO/NSTDBY high
 8000d24:	2201      	movs	r2, #1
 8000d26:	2108      	movs	r1, #8
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <Motor_Init+0x14>)
 8000d2a:	f001 fcc1 	bl	80026b0 <HAL_GPIO_WritePin>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40011000 	.word	0x40011000

08000d38 <Motor_Start>:

// Function to start the motor
void Motor_Start(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    // Start PWM on all channels
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // UH
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <Motor_Start+0x38>)
 8000d40:	f002 fbf2 	bl	8003528 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // UL
 8000d44:	2104      	movs	r1, #4
 8000d46:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <Motor_Start+0x38>)
 8000d48:	f002 fbee 	bl	8003528 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // VH
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <Motor_Start+0x38>)
 8000d50:	f002 fbea 	bl	8003528 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // VL
 8000d54:	210c      	movs	r1, #12
 8000d56:	4806      	ldr	r0, [pc, #24]	@ (8000d70 <Motor_Start+0x38>)
 8000d58:	f002 fbe6 	bl	8003528 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // WH
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <Motor_Start+0x3c>)
 8000d60:	f002 fbe2 	bl	8003528 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // WL
 8000d64:	2104      	movs	r1, #4
 8000d66:	4803      	ldr	r0, [pc, #12]	@ (8000d74 <Motor_Start+0x3c>)
 8000d68:	f002 fbde 	bl	8003528 <HAL_TIM_PWM_Start>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	200002e8 	.word	0x200002e8
 8000d74:	20000330 	.word	0x20000330

08000d78 <Set_Phase>:
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);  // WL
}

// Function to set the current phase based on the commutation table
void Set_Phase(uint8_t step, uint8_t duty_cycle)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	4613      	mov	r3, r2
 8000d86:	71bb      	strb	r3, [r7, #6]
    // Set PWM duty cycle for each phase based on the commutation table
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, commutation_table[step][0] ? duty_cycle : 0); // UH
 8000d88:	79fa      	ldrb	r2, [r7, #7]
 8000d8a:	4934      	ldr	r1, [pc, #208]	@ (8000e5c <Set_Phase+0xe4>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	440b      	add	r3, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <Set_Phase+0x28>
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	e000      	b.n	8000da2 <Set_Phase+0x2a>
 8000da0:	2300      	movs	r3, #0
 8000da2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e60 <Set_Phase+0xe8>)
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, commutation_table[step][1] ? duty_cycle : 0); // UL
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	492c      	ldr	r1, [pc, #176]	@ (8000e5c <Set_Phase+0xe4>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	3301      	adds	r3, #1
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <Set_Phase+0x4a>
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	e000      	b.n	8000dc4 <Set_Phase+0x4c>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	4a26      	ldr	r2, [pc, #152]	@ (8000e60 <Set_Phase+0xe8>)
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, commutation_table[step][2] ? duty_cycle : 0); // VH
 8000dca:	79fa      	ldrb	r2, [r7, #7]
 8000dcc:	4923      	ldr	r1, [pc, #140]	@ (8000e5c <Set_Phase+0xe4>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3302      	adds	r3, #2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <Set_Phase+0x6c>
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	e000      	b.n	8000de6 <Set_Phase+0x6e>
 8000de4:	2300      	movs	r3, #0
 8000de6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e60 <Set_Phase+0xe8>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, commutation_table[step][3] ? duty_cycle : 0); // VL
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	491b      	ldr	r1, [pc, #108]	@ (8000e5c <Set_Phase+0xe4>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	440b      	add	r3, r1
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <Set_Phase+0x8e>
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	e000      	b.n	8000e08 <Set_Phase+0x90>
 8000e06:	2300      	movs	r3, #0
 8000e08:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <Set_Phase+0xe8>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutation_table[step][4] ? duty_cycle : 0); // WH
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	4912      	ldr	r1, [pc, #72]	@ (8000e5c <Set_Phase+0xe4>)
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <Set_Phase+0xb0>
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	e000      	b.n	8000e2a <Set_Phase+0xb2>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <Set_Phase+0xec>)
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, commutation_table[step][5] ? duty_cycle : 0); // WL
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	490a      	ldr	r1, [pc, #40]	@ (8000e5c <Set_Phase+0xe4>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3305      	adds	r3, #5
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <Set_Phase+0xd2>
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	e000      	b.n	8000e4c <Set_Phase+0xd4>
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <Set_Phase+0xec>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	080078b8 	.word	0x080078b8
 8000e60:	200002e8 	.word	0x200002e8
 8000e64:	20000330 	.word	0x20000330

08000e68 <main>:
//        // Delay between steps (adjust for speed control)
//        HAL_Delay(DELAY_BETWEEN_STEPS);
//    }
//}

int main(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
    HAL_Init();
 8000e6e:	f000 ff51 	bl	8001d14 <HAL_Init>
    SystemClock_Config();
 8000e72:	f000 f835 	bl	8000ee0 <SystemClock_Config>
    MX_GPIO_Init();
 8000e76:	f7ff fe3d 	bl	8000af4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000e7a:	f7ff fed3 	bl	8000c24 <MX_I2C1_Init>
    MX_SPI2_Init();
 8000e7e:	f000 f889 	bl	8000f94 <MX_SPI2_Init>
	HAL_SPI_MspInit(&hspi2);
 8000e82:	4815      	ldr	r0, [pc, #84]	@ (8000ed8 <main+0x70>)
 8000e84:	f000 f8bc 	bl	8001000 <HAL_SPI_MspInit>
    MX_USART3_UART_Init();
 8000e88:	f000 fcc4 	bl	8001814 <MX_USART3_UART_Init>
    MX_USART2_UART_Init();
 8000e8c:	f000 fc98 	bl	80017c0 <MX_USART2_UART_Init>
    MX_DMA_Init();
 8000e90:	f7ff fdfa 	bl	8000a88 <MX_DMA_Init>
    MX_TIM2_Init();
 8000e94:	f000 fb06 	bl	80014a4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000e98:	f000 fb7e 	bl	8001598 <MX_TIM3_Init>
    // Initialize the motor driver
    Motor_Init();
 8000e9c:	f7ff ff40 	bl	8000d20 <Motor_Init>

    // Start the motor
    Motor_Start();
 8000ea0:	f7ff ff4a 	bl	8000d38 <Motor_Start>

    // Stop the motor after rotation
//    Motor_Stop();

    // Main loop
    uint8_t step = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	71fb      	strb	r3, [r7, #7]
    while (1)
    {
		// Set the current commutation phase with 50% duty cycle
		Set_Phase(step, 40);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2128      	movs	r1, #40	@ 0x28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff63 	bl	8000d78 <Set_Phase>

		// Move to the next step
		step = (step + 1) % COMMUTATION_STEPS;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <main+0x74>)
 8000eb8:	fb83 3102 	smull	r3, r1, r3, r2
 8000ebc:	17d3      	asrs	r3, r2, #31
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	440b      	add	r3, r1
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	1ad1      	subs	r1, r2, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71fb      	strb	r3, [r7, #7]
		// Delay between steps (adjust for motor speed)
		HAL_Delay(10);
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f000 ff52 	bl	8001d78 <HAL_Delay>
		Set_Phase(step, 40);
 8000ed4:	bf00      	nop
 8000ed6:	e7e7      	b.n	8000ea8 <main+0x40>
 8000ed8:	20000244 	.word	0x20000244
 8000edc:	2aaaaaab 	.word	0x2aaaaaab

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b090      	sub	sp, #64	@ 0x40
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2228      	movs	r2, #40	@ 0x28
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f004 ff40 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f16:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fd43 	bl	80029ac <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f2c:	f000 f82c 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 ffb0 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f56:	f000 f817 	bl	8000f88 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3740      	adds	r7, #64	@ 0x40
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f76:	f000 fee3 	bl	8001d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <Error_Handler+0x8>

08000f94 <MX_SPI2_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <MX_SPI2_Init+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fe0:	220a      	movs	r2, #10
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_SPI2_Init+0x64>)
 8000fe6:	f002 f921 	bl	800322c <HAL_SPI_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ff0:	f7ff ffca 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000244 	.word	0x20000244
 8000ffc:	40003800 	.word	0x40003800

08001000 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a3e      	ldr	r2, [pc, #248]	@ (8001114 <HAL_SPI_MspInit+0x114>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d13e      	bne.n	800109e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001020:	4b3d      	ldr	r3, [pc, #244]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a3c      	ldr	r2, [pc, #240]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 8001026:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a36      	ldr	r2, [pc, #216]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001050:	2328      	movs	r3, #40	@ 0x28
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	482e      	ldr	r0, [pc, #184]	@ (800111c <HAL_SPI_MspInit+0x11c>)
 8001064:	f001 f9a0 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001068:	2310      	movs	r3, #16
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4828      	ldr	r0, [pc, #160]	@ (800111c <HAL_SPI_MspInit+0x11c>)
 800107c:	f001 f994 	bl	80023a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <HAL_SPI_MspInit+0x120>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001088:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001096:	4a22      	ldr	r2, [pc, #136]	@ (8001120 <HAL_SPI_MspInit+0x120>)
 8001098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800109c:	e036      	b.n	800110c <HAL_SPI_MspInit+0x10c>
  else if(spiHandle->Instance==SPI2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a20      	ldr	r2, [pc, #128]	@ (8001124 <HAL_SPI_MspInit+0x124>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d131      	bne.n	800110c <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b2:	61d3      	str	r3, [r2, #28]
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_SPI_MspInit+0x118>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010d8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	@ (800111c <HAL_SPI_MspInit+0x11c>)
 80010ee:	f001 f95b 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_SPI_MspInit+0x11c>)
 8001108:	f001 f94e 	bl	80023a8 <HAL_GPIO_Init>
}
 800110c:	bf00      	nop
 800110e:	3730      	adds	r7, #48	@ 0x30
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013000 	.word	0x40013000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40010000 	.word	0x40010000
 8001124:	40003800 	.word	0x40003800

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_MspInit+0x68>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_MspInit+0x68>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_MspInit+0x68>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_MspInit+0x68>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <HAL_MspInit+0x68>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <HAL_MspInit+0x68>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	210f      	movs	r1, #15
 8001162:	f06f 0001 	mvn.w	r0, #1
 8001166:	f000 fee0 	bl	8001f2a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_MspInit+0x6c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_MspInit+0x6c>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <HAL_InitTick+0xd0>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <HAL_InitTick+0xd0>)
 80011b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_InitTick+0xd0>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 ffdd 	bl	8003190 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011d6:	f001 ffc7 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
 80011da:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <HAL_InitTick+0xd4>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	3b01      	subs	r3, #1
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_InitTick+0xd8>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <HAL_InitTick+0xdc>)
 80011ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_InitTick+0xd8>)
 80011f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_InitTick+0xd8>)
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <HAL_InitTick+0xd8>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <HAL_InitTick+0xd8>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_InitTick+0xd8>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_InitTick+0xd8>)
 8001212:	f002 f88f 	bl	8003334 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800121c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11b      	bne.n	800125c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <HAL_InitTick+0xd8>)
 8001226:	f002 f8dd 	bl	80033e4 <HAL_TIM_Base_Start_IT>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001230:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001238:	2019      	movs	r0, #25
 800123a:	f000 fe92 	bl	8001f62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d808      	bhi.n	8001256 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2019      	movs	r0, #25
 800124a:	f000 fe6e 	bl	8001f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_InitTick+0xe0>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e002      	b.n	800125c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001260:	4618      	mov	r0, r3
 8001262:	3730      	adds	r7, #48	@ 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	431bde83 	.word	0x431bde83
 8001270:	2000029c 	.word	0x2000029c
 8001274:	40012c00 	.word	0x40012c00
 8001278:	20000004 	.word	0x20000004

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DMA1_Channel2_IRQHandler+0x10>)
 80012b6:	f000 ff71 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000490 	.word	0x20000490

080012c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <DMA1_Channel3_IRQHandler+0x10>)
 80012ca:	f000 ff67 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200004d4 	.word	0x200004d4

080012d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA1_Channel6_IRQHandler+0x10>)
 80012de:	f000 ff5d 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000408 	.word	0x20000408

080012ec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA1_Channel7_IRQHandler+0x10>)
 80012f2:	f000 ff53 	bl	800219c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000044c 	.word	0x2000044c

08001300 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <TIM1_UP_IRQHandler+0x10>)
 8001306:	f002 f9b1 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000029c 	.word	0x2000029c

08001314 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <USART2_IRQHandler+0x10>)
 800131a:	f002 fee3 	bl	80040e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000378 	.word	0x20000378

08001328 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <USART3_IRQHandler+0x10>)
 800132e:	f002 fed9 	bl	80040e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200003c0 	.word	0x200003c0

0800133c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001340:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001344:	f001 f9cc 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <_kill>:

int _kill(int pid, int sig)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001364:	f004 fd68 	bl	8005e38 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	2216      	movs	r2, #22
 800136c:	601a      	str	r2, [r3, #0]
  return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_exit>:

void _exit (int status)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001382:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffe7 	bl	800135a <_kill>
  while (1) {}    /* Make sure we hang here */
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <_exit+0x12>

08001390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
  }

  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:
  }
  return len;
}

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f0:	605a      	str	r2, [r3, #4]
  return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
	...

0800142c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800145c:	f004 fcec 	bl	8005e38 <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001472:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20005000 	.word	0x20005000
 800148c:	00000400 	.word	0x00000400
 8001490:	200002e4 	.word	0x200002e4
 8001494:	20000b08 	.word	0x20000b08

08001498 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c6:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42;
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014dc:	222a      	movs	r2, #42	@ 0x2a
 80014de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ec:	4829      	ldr	r0, [pc, #164]	@ (8001594 <MX_TIM2_Init+0xf0>)
 80014ee:	f001 ffcb 	bl	8003488 <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fd46 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4619      	mov	r1, r3
 800150a:	4822      	ldr	r0, [pc, #136]	@ (8001594 <MX_TIM2_Init+0xf0>)
 800150c:	f002 fc9e 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001516:	f7ff fd37 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800151e:	2332      	movs	r3, #50	@ 0x32
 8001520:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	4818      	ldr	r0, [pc, #96]	@ (8001594 <MX_TIM2_Init+0xf0>)
 8001532:	f002 f98b 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800153c:	f7ff fd24 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2204      	movs	r2, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MX_TIM2_Init+0xf0>)
 8001548:	f002 f980 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001552:	f7ff fd19 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2208      	movs	r2, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <MX_TIM2_Init+0xf0>)
 8001562:	f002 f973 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800156c:	f7ff fd0c 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	220c      	movs	r2, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <MX_TIM2_Init+0xf0>)
 8001578:	f002 f968 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8001582:	f7ff fd01 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <MX_TIM2_Init+0xf0>)
 8001588:	f000 f89a 	bl	80016c0 <HAL_TIM_MspPostInit>

}
 800158c:	bf00      	nop
 800158e:	3728      	adds	r7, #40	@ 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002e8 	.word	0x200002e8

08001598 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015bc:	4a27      	ldr	r2, [pc, #156]	@ (800165c <MX_TIM3_Init+0xc4>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42;
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015ce:	222a      	movs	r2, #42	@ 0x2a
 80015d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015de:	481e      	ldr	r0, [pc, #120]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015e0:	f001 ff52 	bl	8003488 <HAL_TIM_PWM_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80015ea:	f7ff fccd 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	4619      	mov	r1, r3
 80015fc:	4816      	ldr	r0, [pc, #88]	@ (8001658 <MX_TIM3_Init+0xc0>)
 80015fe:	f002 fc25 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001608:	f7ff fcbe 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160c:	2360      	movs	r3, #96	@ 0x60
 800160e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001610:	2332      	movs	r3, #50	@ 0x32
 8001612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	@ (8001658 <MX_TIM3_Init+0xc0>)
 8001624:	f002 f912 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800162e:	f7ff fcab 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2204      	movs	r2, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <MX_TIM3_Init+0xc0>)
 800163a:	f002 f907 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001644:	f7ff fca0 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	@ (8001658 <MX_TIM3_Init+0xc0>)
 800164a:	f000 f839 	bl	80016c0 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000330 	.word	0x20000330
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001670:	d10c      	bne.n	800168c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800168a:	e010      	b.n	80016ae <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_TIM_PWM_MspInit+0x5c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d10b      	bne.n	80016ae <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_TIM_PWM_MspInit+0x58>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40000400 	.word	0x40000400

080016c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016de:	d143      	bne.n	8001768 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a2b      	ldr	r2, [pc, #172]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001710:	2303      	movs	r3, #3
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4823      	ldr	r0, [pc, #140]	@ (80017b0 <HAL_TIM_MspPostInit+0xf0>)
 8001724:	f000 fe40 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001728:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2302      	movs	r3, #2
 8001734:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <HAL_TIM_MspPostInit+0xf4>)
 800173e:	f000 fe33 	bl	80023a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001742:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_TIM_MspPostInit+0xf8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <HAL_TIM_MspPostInit+0xf8>)
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001766:	e01c      	b.n	80017a2 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a13      	ldr	r2, [pc, #76]	@ (80017bc <HAL_TIM_MspPostInit+0xfc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d117      	bne.n	80017a2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_TIM_MspPostInit+0xec>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800178a:	23c0      	movs	r3, #192	@ 0xc0
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <HAL_TIM_MspPostInit+0xf0>)
 800179e:	f000 fe03 	bl	80023a8 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	@ 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40000400 	.word	0x40000400

080017c0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <MX_USART2_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_USART2_UART_Init+0x4c>)
 80017f8:	f002 fb98 	bl	8003f2c <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f7ff fbc1 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000378 	.word	0x20000378
 8001810:	40004400 	.word	0x40004400

08001814 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <MX_USART3_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_USART3_UART_Init+0x4c>)
 800184c:	f002 fb6e 	bl	8003f2c <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f7ff fb97 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200003c0 	.word	0x200003c0
 8001864:	40004800 	.word	0x40004800

08001868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a90      	ldr	r2, [pc, #576]	@ (8001ac4 <HAL_UART_MspInit+0x25c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d178      	bne.n	800197a <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001888:	4b8f      	ldr	r3, [pc, #572]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a88      	ldr	r2, [pc, #544]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b86      	ldr	r3, [pc, #536]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018b8:	230c      	movs	r3, #12
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2302      	movs	r3, #2
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4880      	ldr	r0, [pc, #512]	@ (8001acc <HAL_UART_MspInit+0x264>)
 80018cc:	f000 fd6c 	bl	80023a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80018d0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018d2:	4a80      	ldr	r2, [pc, #512]	@ (8001ad4 <HAL_UART_MspInit+0x26c>)
 80018d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018dc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018e4:	2280      	movs	r2, #128	@ 0x80
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e8:	4b79      	ldr	r3, [pc, #484]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ee:	4b78      	ldr	r3, [pc, #480]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80018f4:	4b76      	ldr	r3, [pc, #472]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018f6:	2220      	movs	r2, #32
 80018f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018fa:	4b75      	ldr	r3, [pc, #468]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001900:	4873      	ldr	r0, [pc, #460]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 8001902:	f000 fb3d 	bl	8001f80 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 800190c:	f7ff fb3c 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a6f      	ldr	r2, [pc, #444]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 8001914:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001916:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad0 <HAL_UART_MspInit+0x268>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800191c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 800191e:	4a6f      	ldr	r2, [pc, #444]	@ (8001adc <HAL_UART_MspInit+0x274>)
 8001920:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001922:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001924:	2210      	movs	r2, #16
 8001926:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001928:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800192e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001934:	4b68      	ldr	r3, [pc, #416]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193a:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001940:	4b65      	ldr	r3, [pc, #404]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001942:	2220      	movs	r2, #32
 8001944:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800194c:	4862      	ldr	r0, [pc, #392]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 800194e:	f000 fb17 	bl	8001f80 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001958:	f7ff fb16 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001960:	639a      	str	r2, [r3, #56]	@ 0x38
 8001962:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad8 <HAL_UART_MspInit+0x270>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2105      	movs	r1, #5
 800196c:	2026      	movs	r0, #38	@ 0x26
 800196e:	f000 fadc 	bl	8001f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001972:	2026      	movs	r0, #38	@ 0x26
 8001974:	f000 faf5 	bl	8001f62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001978:	e09f      	b.n	8001aba <HAL_UART_MspInit+0x252>
  else if(uartHandle->Instance==USART3)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <HAL_UART_MspInit+0x278>)
 8001980:	4293      	cmp	r3, r2
 8001982:	f040 809a 	bne.w	8001aba <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001986:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4a49      	ldr	r2, [pc, #292]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6193      	str	r3, [r2, #24]
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_UART_MspInit+0x260>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4846      	ldr	r0, [pc, #280]	@ (8001ae4 <HAL_UART_MspInit+0x27c>)
 80019cc:	f000 fcec 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	483f      	ldr	r0, [pc, #252]	@ (8001ae4 <HAL_UART_MspInit+0x27c>)
 80019e6:	f000 fcdf 	bl	80023a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80019ea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_UART_MspInit+0x280>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a08:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <HAL_UART_MspInit+0x280>)
 8001a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0c:	6053      	str	r3, [r2, #4]
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a10:	4a37      	ldr	r2, [pc, #220]	@ (8001af0 <HAL_UART_MspInit+0x288>)
 8001a12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a16:	2210      	movs	r2, #16
 8001a18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1a:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a20:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a32:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a40:	482a      	ldr	r0, [pc, #168]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a42:	f000 fa9d 	bl	8001f80 <HAL_DMA_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 8001a4c:	f7ff fa9c 	bl	8000f88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a26      	ldr	r2, [pc, #152]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a56:	4a25      	ldr	r2, [pc, #148]	@ (8001aec <HAL_UART_MspInit+0x284>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a5e:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <HAL_UART_MspInit+0x290>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a68:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a6e:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a70:	2280      	movs	r2, #128	@ 0x80
 8001a72:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a82:	2220      	movs	r2, #32
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a8e:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001a90:	f000 fa76 	bl	8001f80 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_MspInit+0x236>
      Error_Handler();
 8001a9a:	f7ff fa75 	bl	8000f88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001aa4:	4a13      	ldr	r2, [pc, #76]	@ (8001af4 <HAL_UART_MspInit+0x28c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	2027      	movs	r0, #39	@ 0x27
 8001ab0:	f000 fa3b 	bl	8001f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ab4:	2027      	movs	r0, #39	@ 0x27
 8001ab6:	f000 fa54 	bl	8001f62 <HAL_NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	@ 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	20000408 	.word	0x20000408
 8001ad4:	4002006c 	.word	0x4002006c
 8001ad8:	2000044c 	.word	0x2000044c
 8001adc:	40020080 	.word	0x40020080
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	20000490 	.word	0x20000490
 8001af0:	4002001c 	.word	0x4002001c
 8001af4:	200004d4 	.word	0x200004d4
 8001af8:	40020030 	.word	0x40020030

08001afc <_write>:
 */

#include "write_printf.h"
extern UART_HandleTypeDef huart2;

int _write(int file, char *data, int len) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <_write+0x28>)
 8001b14:	f002 fa5a 	bl	8003fcc <HAL_UART_Transmit>
    return len;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000378 	.word	0x20000378

08001b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff fcb6 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b2e:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b30:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a09      	ldr	r2, [pc, #36]	@ (8001b68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b44:	4c09      	ldr	r4, [pc, #36]	@ (8001b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f004 f977 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b56:	f7ff f987 	bl	8000e68 <main>
  bx lr
 8001b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b64:	08007c88 	.word	0x08007c88
  ldr r2, =_sbss
 8001b68:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b6c:	20000b08 	.word	0x20000b08

08001b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_2_IRQHandler>

08001b72 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
 8001b84:	f7ff fa00 	bl	8000f88 <Error_Handler>
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e007      	b.n	8001ba2 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	2100      	movs	r1, #0
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d9f4      	bls.n	8001b92 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	721a      	strb	r2, [r3, #8]
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
}
 8001bc6:	bf00      	nop
 8001bc8:	f7ff f9de 	bl	8000f88 <Error_Handler>
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7a1b      	ldrb	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d905      	bls.n	8001be4 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
 8001bdc:	f7ff f9d4 	bl	8000f88 <Error_Handler>
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7a1b      	ldrb	r3, [r3, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	b2d1      	uxtb	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	7211      	strb	r1, [r2, #8]
 8001bf0:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8001bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	60fa      	str	r2, [r7, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c28:	b672      	cpsid	i
}
 8001c2a:	bf00      	nop
 8001c2c:	f7ff f9ac 	bl	8000f88 <Error_Handler>
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7a1b      	ldrb	r3, [r3, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7a1b      	ldrb	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d905      	bls.n	8001c54 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
 8001c4c:	f7ff f99c 	bl	8000f88 <Error_Handler>
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7a1b      	ldrb	r3, [r3, #8]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c68:	bf00      	nop
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001c80:	f004 f8da 	bl	8005e38 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2216      	movs	r2, #22
 8001c88:	601a      	str	r2, [r3, #0]
    return;
 8001c8a:	e016      	b.n	8001cba <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f003 f9c5 	bl	800501c <malloc>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff63 	bl	8001b72 <stm32_lock_init>
    return;
 8001cac:	e005      	b.n	8001cba <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cae:	b672      	cpsid	i
}
 8001cb0:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001cb2:	f7ff f969 	bl	8000f88 <Error_Handler>
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <__retarget_lock_init_recursive+0x44>
}
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cce:	b672      	cpsid	i
}
 8001cd0:	bf00      	nop
 8001cd2:	f7ff f959 	bl	8000f88 <Error_Handler>
 8001cd6:	bf00      	nop
 8001cd8:	e7fd      	b.n	8001cd6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff6a 	bl	8001bb6 <stm32_lock_acquire>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf8:	b672      	cpsid	i
}
 8001cfa:	bf00      	nop
 8001cfc:	f7ff f944 	bl	8000f88 <Error_Handler>
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff87 	bl	8001c1a <stm32_lock_release>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_Init+0x28>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_Init+0x28>)
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f000 f8f5 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	f7ff fa34 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d30:	f7ff f9fa 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40022000 	.word	0x40022000

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20000530 	.word	0x20000530

08001d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000530 	.word	0x20000530

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffe0 	bl	8001d64 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4906      	ldr	r1, [pc, #24]	@ (8001e58 <__NVIC_EnableIRQ+0x34>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100

08001e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0a      	blt.n	8001e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <__NVIC_SetPriority+0x4c>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	0112      	lsls	r2, r2, #4
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e84:	e00a      	b.n	8001e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	@ (8001eac <__NVIC_SetPriority+0x50>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	3b04      	subs	r3, #4
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	761a      	strb	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	@ 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f1c3 0307 	rsb	r3, r3, #7
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	bf28      	it	cs
 8001ece:	2304      	movcs	r3, #4
 8001ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d902      	bls.n	8001ee0 <NVIC_EncodePriority+0x30>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b03      	subs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <NVIC_EncodePriority+0x32>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	4313      	orrs	r3, r2
         );
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	@ 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff4f 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff64 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ffb2 	bl	8001eb0 <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff81 	bl	8001e5c <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff57 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e043      	b.n	800201e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_DMA_Init+0xa8>)
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a22      	ldr	r2, [pc, #136]	@ (800202c <HAL_DMA_Init+0xac>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	009a      	lsls	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <HAL_DMA_Init+0xb0>)
 8001fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	bffdfff8 	.word	0xbffdfff8
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	40020000 	.word	0x40020000

08002034 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d008      	beq.n	800205e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2204      	movs	r2, #4
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e020      	b.n	80020a0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020e 	bic.w	r2, r2, #14
 800206c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d005      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2204      	movs	r2, #4
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
 80020ce:	e051      	b.n	8002174 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 020e 	bic.w	r2, r2, #14
 80020de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a22      	ldr	r2, [pc, #136]	@ (8002180 <HAL_DMA_Abort_IT+0xd4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d029      	beq.n	800214e <HAL_DMA_Abort_IT+0xa2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	@ (8002184 <HAL_DMA_Abort_IT+0xd8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_DMA_Abort_IT+0x9e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1f      	ldr	r2, [pc, #124]	@ (8002188 <HAL_DMA_Abort_IT+0xdc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01a      	beq.n	8002144 <HAL_DMA_Abort_IT+0x98>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_DMA_Abort_IT+0xe0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d012      	beq.n	800213e <HAL_DMA_Abort_IT+0x92>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <HAL_DMA_Abort_IT+0xe4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00a      	beq.n	8002138 <HAL_DMA_Abort_IT+0x8c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_DMA_Abort_IT+0xe8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_DMA_Abort_IT+0x86>
 800212c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002130:	e00e      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002136:	e00b      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002138:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213c:	e008      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800213e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002142:	e005      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	e002      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800214a:	2310      	movs	r3, #16
 800214c:	e000      	b.n	8002150 <HAL_DMA_Abort_IT+0xa4>
 800214e:	2301      	movs	r3, #1
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_DMA_Abort_IT+0xec>)
 8002152:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
    } 
  }
  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020008 	.word	0x40020008
 8002184:	4002001c 	.word	0x4002001c
 8002188:	40020030 	.word	0x40020030
 800218c:	40020044 	.word	0x40020044
 8002190:	40020058 	.word	0x40020058
 8002194:	4002006c 	.word	0x4002006c
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	2204      	movs	r2, #4
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d04f      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04a      	beq.n	8002264 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	@ (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d029      	beq.n	800224a <HAL_DMA_IRQHandler+0xae>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0xaa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	@ (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01a      	beq.n	8002240 <HAL_DMA_IRQHandler+0xa4>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a62      	ldr	r2, [pc, #392]	@ (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0x9e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a60      	ldr	r2, [pc, #384]	@ (800239c <HAL_DMA_IRQHandler+0x200>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00a      	beq.n	8002234 <HAL_DMA_IRQHandler+0x98>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	@ (80023a0 <HAL_DMA_IRQHandler+0x204>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d102      	bne.n	800222e <HAL_DMA_IRQHandler+0x92>
 8002228:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800222c:	e00e      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800222e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002232:	e00b      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002234:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002238:	e008      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800223a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800223e:	e005      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002244:	e002      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 8002246:	2340      	movs	r3, #64	@ 0x40
 8002248:	e000      	b.n	800224c <HAL_DMA_IRQHandler+0xb0>
 800224a:	2304      	movs	r3, #4
 800224c:	4a55      	ldr	r2, [pc, #340]	@ (80023a4 <HAL_DMA_IRQHandler+0x208>)
 800224e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8094 	beq.w	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002262:	e08e      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	2202      	movs	r2, #2
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d056      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d051      	beq.n	8002322 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020a 	bic.w	r2, r2, #10
 800229a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a38      	ldr	r2, [pc, #224]	@ (800238c <HAL_DMA_IRQHandler+0x1f0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d029      	beq.n	8002302 <HAL_DMA_IRQHandler+0x166>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a37      	ldr	r2, [pc, #220]	@ (8002390 <HAL_DMA_IRQHandler+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMA_IRQHandler+0x162>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	@ (8002394 <HAL_DMA_IRQHandler+0x1f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x15c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a34      	ldr	r2, [pc, #208]	@ (8002398 <HAL_DMA_IRQHandler+0x1fc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d012      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x156>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a32      	ldr	r2, [pc, #200]	@ (800239c <HAL_DMA_IRQHandler+0x200>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x150>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a31      	ldr	r2, [pc, #196]	@ (80023a0 <HAL_DMA_IRQHandler+0x204>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_DMA_IRQHandler+0x14a>
 80022e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022e4:	e00e      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ea:	e00b      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f0:	e008      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f6:	e005      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022fc:	e002      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 80022fe:	2320      	movs	r3, #32
 8002300:	e000      	b.n	8002304 <HAL_DMA_IRQHandler+0x168>
 8002302:	2302      	movs	r3, #2
 8002304:	4a27      	ldr	r2, [pc, #156]	@ (80023a4 <HAL_DMA_IRQHandler+0x208>)
 8002306:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	d034      	beq.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002320:	e02f      	b.n	8002382 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 020e 	bic.w	r2, r2, #14
 800234a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
    }
  }
  return;
 8002382:	bf00      	nop
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020008 	.word	0x40020008
 8002390:	4002001c 	.word	0x4002001c
 8002394:	40020030 	.word	0x40020030
 8002398:	40020044 	.word	0x40020044
 800239c:	40020058 	.word	0x40020058
 80023a0:	4002006c 	.word	0x4002006c
 80023a4:	40020000 	.word	0x40020000

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b08b      	sub	sp, #44	@ 0x2c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e169      	b.n	8002690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023bc:	2201      	movs	r2, #1
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8158 	bne.w	800268a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a9a      	ldr	r2, [pc, #616]	@ (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023e4:	4a98      	ldr	r2, [pc, #608]	@ (8002648 <HAL_GPIO_Init+0x2a0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d875      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023ea:	4a98      	ldr	r2, [pc, #608]	@ (800264c <HAL_GPIO_Init+0x2a4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d058      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023f0:	4a96      	ldr	r2, [pc, #600]	@ (800264c <HAL_GPIO_Init+0x2a4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d86f      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 80023f6:	4a96      	ldr	r2, [pc, #600]	@ (8002650 <HAL_GPIO_Init+0x2a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d052      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 80023fc:	4a94      	ldr	r2, [pc, #592]	@ (8002650 <HAL_GPIO_Init+0x2a8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d869      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002402:	4a94      	ldr	r2, [pc, #592]	@ (8002654 <HAL_GPIO_Init+0x2ac>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d04c      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002408:	4a92      	ldr	r2, [pc, #584]	@ (8002654 <HAL_GPIO_Init+0x2ac>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d863      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800240e:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <HAL_GPIO_Init+0x2b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d046      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
 8002414:	4a90      	ldr	r2, [pc, #576]	@ (8002658 <HAL_GPIO_Init+0x2b0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d85d      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 800241a:	2b12      	cmp	r3, #18
 800241c:	d82a      	bhi.n	8002474 <HAL_GPIO_Init+0xcc>
 800241e:	2b12      	cmp	r3, #18
 8002420:	d859      	bhi.n	80024d6 <HAL_GPIO_Init+0x12e>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_GPIO_Init+0x80>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	080024a3 	.word	0x080024a3
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800248f 	.word	0x0800248f
 8002434:	080024d1 	.word	0x080024d1
 8002438:	080024d7 	.word	0x080024d7
 800243c:	080024d7 	.word	0x080024d7
 8002440:	080024d7 	.word	0x080024d7
 8002444:	080024d7 	.word	0x080024d7
 8002448:	080024d7 	.word	0x080024d7
 800244c:	080024d7 	.word	0x080024d7
 8002450:	080024d7 	.word	0x080024d7
 8002454:	080024d7 	.word	0x080024d7
 8002458:	080024d7 	.word	0x080024d7
 800245c:	080024d7 	.word	0x080024d7
 8002460:	080024d7 	.word	0x080024d7
 8002464:	080024d7 	.word	0x080024d7
 8002468:	080024d7 	.word	0x080024d7
 800246c:	08002485 	.word	0x08002485
 8002470:	08002499 	.word	0x08002499
 8002474:	4a79      	ldr	r2, [pc, #484]	@ (800265c <HAL_GPIO_Init+0x2b4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e029      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e024      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01f      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e01a      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e013      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e009      	b.n	80024d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x130>
          break;
 80024d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	@ 0xff
 80024dc:	d801      	bhi.n	80024e2 <HAL_GPIO_Init+0x13a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	e001      	b.n	80024e6 <HAL_GPIO_Init+0x13e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2bff      	cmp	r3, #255	@ 0xff
 80024ec:	d802      	bhi.n	80024f4 <HAL_GPIO_Init+0x14c>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x152>
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	3b08      	subs	r3, #8
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	210f      	movs	r1, #15
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	401a      	ands	r2, r3
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80b1 	beq.w	800268a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002528:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_GPIO_Init+0x2b8>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002540:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <HAL_GPIO_Init+0x2bc>)
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a40      	ldr	r2, [pc, #256]	@ (8002668 <HAL_GPIO_Init+0x2c0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d013      	beq.n	8002594 <HAL_GPIO_Init+0x1ec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3f      	ldr	r2, [pc, #252]	@ (800266c <HAL_GPIO_Init+0x2c4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00d      	beq.n	8002590 <HAL_GPIO_Init+0x1e8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a3e      	ldr	r2, [pc, #248]	@ (8002670 <HAL_GPIO_Init+0x2c8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <HAL_GPIO_Init+0x1e4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a3d      	ldr	r2, [pc, #244]	@ (8002674 <HAL_GPIO_Init+0x2cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_GPIO_Init+0x1e0>
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002588:	2304      	movs	r3, #4
 800258a:	e004      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 800258c:	2302      	movs	r3, #2
 800258e:	e002      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_GPIO_Init+0x1ee>
 8002594:	2300      	movs	r3, #0
 8002596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	4093      	lsls	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a6:	492f      	ldr	r1, [pc, #188]	@ (8002664 <HAL_GPIO_Init+0x2bc>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	492c      	ldr	r1, [pc, #176]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4928      	ldr	r1, [pc, #160]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e8:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4922      	ldr	r1, [pc, #136]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	491e      	ldr	r1, [pc, #120]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002600:	4013      	ands	r3, r2
 8002602:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4918      	ldr	r1, [pc, #96]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261e:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	43db      	mvns	r3, r3
 8002626:	4914      	ldr	r1, [pc, #80]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d021      	beq.n	800267c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	490e      	ldr	r1, [pc, #56]	@ (8002678 <HAL_GPIO_Init+0x2d0>)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e021      	b.n	800268a <HAL_GPIO_Init+0x2e2>
 8002646:	bf00      	nop
 8002648:	10320000 	.word	0x10320000
 800264c:	10310000 	.word	0x10310000
 8002650:	10220000 	.word	0x10220000
 8002654:	10210000 	.word	0x10210000
 8002658:	10120000 	.word	0x10120000
 800265c:	10110000 	.word	0x10110000
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	40010800 	.word	0x40010800
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40011000 	.word	0x40011000
 8002674:	40011400 	.word	0x40011400
 8002678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800267c:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <HAL_GPIO_Init+0x304>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	43db      	mvns	r3, r3
 8002684:	4909      	ldr	r1, [pc, #36]	@ (80026ac <HAL_GPIO_Init+0x304>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f ae8e 	bne.w	80023bc <HAL_GPIO_Init+0x14>
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	372c      	adds	r7, #44	@ 0x2c
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40010400 	.word	0x40010400

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f6:	4a05      	ldr	r2, [pc, #20]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f806 	bl	8002710 <HAL_GPIO_EXTI_Callback>
  }
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e12b      	b.n	800298e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fa98 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	@ 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f000 fcda 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a81      	ldr	r2, [pc, #516]	@ (8002998 <HAL_I2C_Init+0x274>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a80      	ldr	r2, [pc, #512]	@ (800299c <HAL_I2C_Init+0x278>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	@ (80029a0 <HAL_I2C_Init+0x27c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e7      	b.n	800298e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	@ (80029a4 <HAL_I2C_Init+0x280>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002998 <HAL_I2C_Init+0x274>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a69      	ldr	r2, [pc, #420]	@ (80029a8 <HAL_I2C_Init+0x284>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	495c      	ldr	r1, [pc, #368]	@ (8002998 <HAL_I2C_Init+0x274>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x13c>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x138>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e051      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 800285c:	2304      	movs	r3, #4
 800285e:	e04f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_I2C_Init+0x168>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_I2C_Init+0x18e>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x196>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10e      	bne.n	80028e0 <HAL_I2C_Init+0x1bc>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1e58      	subs	r0, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	460b      	mov	r3, r1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	440b      	add	r3, r1
 80028d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028de:	e00f      	b.n	8002900 <HAL_I2C_Init+0x1dc>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6809      	ldr	r1, [r1, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800292e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6911      	ldr	r1, [r2, #16]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	000186a0 	.word	0x000186a0
 800299c:	001e847f 	.word	0x001e847f
 80029a0:	003d08ff 	.word	0x003d08ff
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e272      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8087 	beq.w	8002ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029cc:	4b92      	ldr	r3, [pc, #584]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d112      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
 80029e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b89      	ldr	r3, [pc, #548]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d06c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d168      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e24c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x76>
 8002a14:	4b80      	ldr	r3, [pc, #512]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a7f      	ldr	r2, [pc, #508]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7a      	ldr	r2, [pc, #488]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b78      	ldr	r3, [pc, #480]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a77      	ldr	r2, [pc, #476]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0xbc>
 8002a4e:	4b72      	ldr	r3, [pc, #456]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a71      	ldr	r2, [pc, #452]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xd4>
 8002a68:	4b6b      	ldr	r3, [pc, #428]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b68      	ldr	r3, [pc, #416]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a67      	ldr	r2, [pc, #412]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f96c 	bl	8001d64 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f968 	bl	8001d64 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	@ 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e200      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xe4>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f958 	bl	8001d64 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f954 	bl	8001d64 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1ec      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b53      	ldr	r3, [pc, #332]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x10c>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002af2:	4b49      	ldr	r3, [pc, #292]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
 8002afe:	4b46      	ldr	r3, [pc, #280]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b43      	ldr	r3, [pc, #268]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c0      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4939      	ldr	r1, [pc, #228]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7ff f90d 	bl	8001d64 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7ff f909 	bl	8001d64 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2d      	ldr	r3, [pc, #180]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4927      	ldr	r1, [pc, #156]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b26      	ldr	r3, [pc, #152]	@ (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff f8ec 	bl	8001d64 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7ff f8e8 	bl	8001d64 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e180      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d03a      	beq.n	8002c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d019      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f8cc 	bl	8001d64 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f8c8 	bl	8001d64 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e160      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f000 fafe 	bl	80031f0 <RCC_Delay>
 8002bf4:	e01c      	b.n	8002c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7ff f8b2 	bl	8001d64 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c02:	e00f      	b.n	8002c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c04:	f7ff f8ae 	bl	8001d64 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d908      	bls.n	8002c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e146      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	42420000 	.word	0x42420000
 8002c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c24:	4b92      	ldr	r3, [pc, #584]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e9      	bne.n	8002c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a6 	beq.w	8002d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b8b      	ldr	r3, [pc, #556]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b88      	ldr	r3, [pc, #544]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4a87      	ldr	r2, [pc, #540]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	61d3      	str	r3, [r2, #28]
 8002c5a:	4b85      	ldr	r3, [pc, #532]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b82      	ldr	r3, [pc, #520]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b7f      	ldr	r3, [pc, #508]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7ff f86f 	bl	8001d64 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7ff f86b 	bl	8001d64 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	@ 0x64
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e103      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b75      	ldr	r3, [pc, #468]	@ (8002e74 <HAL_RCC_OscConfig+0x4c8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x312>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	e02d      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	4a69      	ldr	r2, [pc, #420]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	6213      	str	r3, [r2, #32]
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	6213      	str	r3, [r2, #32]
 8002cde:	e01c      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d10c      	bne.n	8002d02 <HAL_RCC_OscConfig+0x356>
 8002ce8:	4b61      	ldr	r3, [pc, #388]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a60      	ldr	r2, [pc, #384]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6213      	str	r3, [r2, #32]
 8002cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e00b      	b.n	8002d1a <HAL_RCC_OscConfig+0x36e>
 8002d02:	4b5b      	ldr	r3, [pc, #364]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4a5a      	ldr	r2, [pc, #360]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	6213      	str	r3, [r2, #32]
 8002d0e:	4b58      	ldr	r3, [pc, #352]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4a57      	ldr	r2, [pc, #348]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	f023 0304 	bic.w	r3, r3, #4
 8002d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d015      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d22:	f7ff f81f 	bl	8001d64 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7ff f81b 	bl	8001d64 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0b1      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d40:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ee      	beq.n	8002d2a <HAL_RCC_OscConfig+0x37e>
 8002d4c:	e014      	b.n	8002d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f809 	bl	8001d64 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff f805 	bl	8001d64 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e09b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6c:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ee      	bne.n	8002d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d94:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d061      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d146      	bne.n	8002e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b33      	ldr	r3, [pc, #204]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dae:	f7fe ffd9 	bl	8001d64 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe ffd5 	bl	8001d64 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e06d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d108      	bne.n	8002df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	4921      	ldr	r1, [pc, #132]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a19      	ldr	r1, [r3, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	430b      	orrs	r3, r1
 8002e02:	491b      	ldr	r1, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e08:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe ffa9 	bl	8001d64 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe ffa5 	bl	8001d64 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46a>
 8002e34:	e035      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ff92 	bl	8001d64 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe ff8e 	bl	8001d64 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e026      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x498>
 8002e62:	e01e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e019      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
 8002e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_OscConfig+0x500>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0d0      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d910      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b67      	ldr	r3, [pc, #412]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	4965      	ldr	r1, [pc, #404]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a52      	ldr	r2, [pc, #328]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d040      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e073      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4936      	ldr	r1, [pc, #216]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fee0 	bl	8001d64 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fedc 	bl	8001d64 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e053      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d210      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 0207 	bic.w	r2, r3, #7
 8002fe6:	4922      	ldr	r1, [pc, #136]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800302a:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1cc>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe f89a 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40022000 	.word	0x40022000
 8003074:	40021000 	.word	0x40021000
 8003078:	080078dc 	.word	0x080078dc
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	2300      	movs	r3, #0
 8003098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800309e:	4b1e      	ldr	r3, [pc, #120]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x30>
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x36>
 80030b2:	e027      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030b6:	613b      	str	r3, [r7, #16]
      break;
 80030b8:	e027      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0c9b      	lsrs	r3, r3, #18
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d010      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030d2:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	0c5b      	lsrs	r3, r3, #17
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	4a11      	ldr	r2, [pc, #68]	@ (8003124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030de:	5cd3      	ldrb	r3, [r2, r3]
 80030e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 80030e6:	fb03 f202 	mul.w	r2, r3, r2
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	613b      	str	r3, [r7, #16]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetSysClockFreq+0x98>)
 8003106:	613b      	str	r3, [r7, #16]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	693b      	ldr	r3, [r7, #16]
}
 800310c:	4618      	mov	r0, r3
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	080078f4 	.word	0x080078f4
 8003124:	08007904 	.word	0x08007904
 8003128:	003d0900 	.word	0x003d0900

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b02      	ldr	r3, [pc, #8]	@ (800313c <HAL_RCC_GetHCLKFreq+0x10>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	20000000 	.word	0x20000000

08003140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003144:	f7ff fff2 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4903      	ldr	r1, [pc, #12]	@ (8003164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800315c:	4618      	mov	r0, r3
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	080078ec 	.word	0x080078ec

08003168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800316c:	f7ff ffde 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	0adb      	lsrs	r3, r3, #11
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	@ (800318c <HAL_RCC_GetPCLK2Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	080078ec 	.word	0x080078ec

08003190 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	220f      	movs	r2, #15
 800319e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <HAL_RCC_GetClockConfig+0x58>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	@ (80031e8 <HAL_RCC_GetClockConfig+0x58>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	@ (80031e8 <HAL_RCC_GetClockConfig+0x58>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <HAL_RCC_GetClockConfig+0x58>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	08db      	lsrs	r3, r3, #3
 80031ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RCC_GetClockConfig+0x5c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40022000 	.word	0x40022000

080031f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <RCC_Delay+0x34>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <RCC_Delay+0x38>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800320c:	bf00      	nop
  }
  while (Delay --);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <RCC_Delay+0x1c>
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	20000000 	.word	0x20000000
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e076      	b.n	800332c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d108      	bne.n	8003258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800324e:	d009      	beq.n	8003264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
 8003256:	e005      	b.n	8003264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd febe 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800329a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	0c1a      	lsrs	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f002 0204 	and.w	r2, r2, #4
 800330a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800331a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f839 	bl	80033d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 fb50 	bl	8003a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e03a      	b.n	8003472 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a18      	ldr	r2, [pc, #96]	@ (800347c <HAL_TIM_Base_Start_IT+0x98>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x58>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x58>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <HAL_TIM_Base_Start_IT+0x9c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x58>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a13      	ldr	r2, [pc, #76]	@ (8003484 <HAL_TIM_Base_Start_IT+0xa0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800

08003488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e041      	b.n	800351e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe f8d6 	bl	8001660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 faa6 	bl	8003a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_TIM_PWM_Start+0x24>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e022      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d109      	bne.n	8003566 <HAL_TIM_PWM_Start+0x3e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e015      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d109      	bne.n	8003580 <HAL_TIM_PWM_Start+0x58>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e008      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e05e      	b.n	8003658 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0x82>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start+0x92>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xa2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fc12 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_TIM_PWM_Start+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d107      	bne.n	80035fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <HAL_TIM_PWM_Start+0x138>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_TIM_PWM_Start+0xfa>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d009      	beq.n	8003622 <HAL_TIM_PWM_Start+0xfa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <HAL_TIM_PWM_Start+0x13c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_TIM_PWM_Start+0xfa>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a12      	ldr	r2, [pc, #72]	@ (8003668 <HAL_TIM_PWM_Start+0x140>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d111      	bne.n	8003646 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d010      	beq.n	8003656 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	e007      	b.n	8003656 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800

0800366c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0202 	mvn.w	r2, #2
 80036a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f993 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f986 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f995 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0204 	mvn.w	r2, #4
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f96d 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f960 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f96f 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f947 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f93a 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f949 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f921 	bl	80039e2 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f914 	bl	80039d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f923 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fd fbc6 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fb8f 	bl	8003f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8f3 	bl	8003a06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb62 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003866:	2302      	movs	r3, #2
 8003868:	e0ae      	b.n	80039c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	f200 809f 	bhi.w	80039b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080039b9 	.word	0x080039b9
 8003888:	080039b9 	.word	0x080039b9
 800388c:	080039b9 	.word	0x080039b9
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080039b9 	.word	0x080039b9
 8003898:	080039b9 	.word	0x080039b9
 800389c:	080039b9 	.word	0x080039b9
 80038a0:	08003937 	.word	0x08003937
 80038a4:	080039b9 	.word	0x080039b9
 80038a8:	080039b9 	.word	0x080039b9
 80038ac:	080039b9 	.word	0x080039b9
 80038b0:	08003977 	.word	0x08003977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f91a 	bl	8003af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0208 	orr.w	r2, r2, #8
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
      break;
 80038f2:	e064      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f960 	bl	8003bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800390e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6999      	ldr	r1, [r3, #24]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
      break;
 8003934:	e043      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f9a9 	bl	8003c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0208 	orr.w	r2, r2, #8
 8003950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0204 	bic.w	r2, r2, #4
 8003960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	61da      	str	r2, [r3, #28]
      break;
 8003974:	e023      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 f9f3 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]
      break;
 80039b6:	e002      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	75fb      	strb	r3, [r7, #23]
      break;
 80039bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae8 <TIM_Base_SetConfig+0xd0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x30>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x30>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003aec <TIM_Base_SetConfig+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x30>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2b      	ldr	r2, [pc, #172]	@ (8003af0 <TIM_Base_SetConfig+0xd8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <TIM_Base_SetConfig+0xd0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00b      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a68:	d007      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <TIM_Base_SetConfig+0xd4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_Base_SetConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <TIM_Base_SetConfig+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae8 <TIM_Base_SetConfig+0xd0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d103      	bne.n	8003ac0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f023 0201 	bic.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	611a      	str	r2, [r3, #16]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0201 	bic.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00

08003bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f023 0210 	bic.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10d      	bne.n	8003c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	@ (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8003e00 <TIM_OC4_SetConfig+0x98>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e046      	b.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb0:	d009      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40000400 	.word	0x40000400
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e042      	b.n	8003fc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fc88 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fd63 	bl	8004a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d175      	bne.n	80040d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_UART_Transmit+0x2c>
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e06e      	b.n	80040da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2221      	movs	r2, #33	@ 0x21
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400a:	f7fd feab 	bl	8001d64 <HAL_GetTick>
 800400e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	88fa      	ldrh	r2, [r7, #6]
 800401a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d108      	bne.n	8004038 <HAL_UART_Transmit+0x6c>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e003      	b.n	8004040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004040:	e02e      	b.n	80040a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fb01 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e03a      	b.n	80040da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	3302      	adds	r3, #2
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	e007      	b.n	8004092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	781a      	ldrb	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3301      	adds	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1cb      	bne.n	8004042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2140      	movs	r1, #64	@ 0x40
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 facd 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b0ba      	sub	sp, #232	@ 0xe8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_UART_IRQHandler+0x66>
 8004136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fbbc 	bl	80048c0 <UART_Receive_IT>
      return;
 8004148:	e25b      	b.n	8004602 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800414a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80de 	beq.w	8004310 <HAL_UART_IRQHandler+0x22c>
 8004154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004164:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80d1 	beq.w	8004310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_UART_IRQHandler+0xae>
 800417a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_UART_IRQHandler+0xd2>
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	f043 0202 	orr.w	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_UART_IRQHandler+0xf6>
 80041c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f043 0204 	orr.w	r2, r3, #4
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d011      	beq.n	800420a <HAL_UART_IRQHandler+0x126>
 80041e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f043 0208 	orr.w	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 81f2 	beq.w	80045f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_UART_IRQHandler+0x14e>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fb47 	bl	80048c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_UART_IRQHandler+0x17a>
 8004256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d04f      	beq.n	80042fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fa51 	bl	8004706 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d041      	beq.n	80042f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800428c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3314      	adds	r3, #20
 800429a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800429e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1d9      	bne.n	8004272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ca:	4a7e      	ldr	r2, [pc, #504]	@ (80044c4 <HAL_UART_IRQHandler+0x3e0>)
 80042cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd feea 	bl	80020ac <HAL_DMA_Abort_IT>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042e8:	4610      	mov	r0, r2
 80042ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	e00e      	b.n	800430c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f99c 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f4:	e00a      	b.n	800430c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f998 	bl	800462c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	e006      	b.n	800430c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f994 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800430a:	e175      	b.n	80045f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	bf00      	nop
    return;
 800430e:	e173      	b.n	80045f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	f040 814f 	bne.w	80045b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8148 	beq.w	80045b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8141 	beq.w	80045b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80b6 	beq.w	80044c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8145 	beq.w	80045fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800437a:	429a      	cmp	r2, r3
 800437c:	f080 813e 	bcs.w	80045fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004386:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b20      	cmp	r3, #32
 8004390:	f000 8088 	beq.w	80044a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1d9      	bne.n	8004394 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004404:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004408:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800440c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004416:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e1      	bne.n	80043e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3314      	adds	r3, #20
 8004422:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800442c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004440:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004442:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004446:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800444e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e3      	bne.n	800441c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004474:	f023 0310 	bic.w	r3, r3, #16
 8004478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004486:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004488:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800448c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd fdc8 	bl	8002034 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8bf 	bl	800463e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044c0:	e09c      	b.n	80045fc <HAL_UART_IRQHandler+0x518>
 80044c2:	bf00      	nop
 80044c4:	080047cb 	.word	0x080047cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 808e 	beq.w	8004600 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8089 	beq.w	8004600 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004512:	647a      	str	r2, [r7, #68]	@ 0x44
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e3      	bne.n	80044ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	623b      	str	r3, [r7, #32]
   return(result);
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800454a:	633a      	str	r2, [r7, #48]	@ 0x30
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	60fb      	str	r3, [r7, #12]
   return(result);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004590:	61fa      	str	r2, [r7, #28]
 8004592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	617b      	str	r3, [r7, #20]
   return(result);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f844 	bl	800463e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b6:	e023      	b.n	8004600 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_UART_IRQHandler+0x4f4>
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f90e 	bl	80047f2 <UART_Transmit_IT>
    return;
 80045d6:	e014      	b.n	8004602 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <HAL_UART_IRQHandler+0x51e>
 80045e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f94d 	bl	8004890 <UART_EndTransmit_IT>
    return;
 80045f6:	e004      	b.n	8004602 <HAL_UART_IRQHandler+0x51e>
    return;
 80045f8:	bf00      	nop
 80045fa:	e002      	b.n	8004602 <HAL_UART_IRQHandler+0x51e>
      return;
 80045fc:	bf00      	nop
 80045fe:	e000      	b.n	8004602 <HAL_UART_IRQHandler+0x51e>
      return;
 8004600:	bf00      	nop
  }
}
 8004602:	37e8      	adds	r7, #232	@ 0xe8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	e03b      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466c:	d037      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fd fb79 	bl	8001d64 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	6a3a      	ldr	r2, [r7, #32]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <UART_WaitOnFlagUntilTimeout+0x30>
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e03a      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d023      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d020      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d01d      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d116      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f81d 	bl	8004706 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2208      	movs	r2, #8
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e00f      	b.n	80046fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d0b4      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004706:	b480      	push	{r7}
 8004708:	b095      	sub	sp, #84	@ 0x54
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	330c      	adds	r3, #12
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800472e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800473c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e5      	bne.n	800470e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	61fb      	str	r3, [r7, #28]
   return(result);
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e5      	bne.n	8004742 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477a:	2b01      	cmp	r3, #1
 800477c:	d119      	bne.n	80047b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	330c      	adds	r3, #12
 8004784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	60bb      	str	r3, [r7, #8]
   return(result);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0310 	bic.w	r3, r3, #16
 8004794:	647b      	str	r3, [r7, #68]	@ 0x44
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479e:	61ba      	str	r2, [r7, #24]
 80047a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	613b      	str	r3, [r7, #16]
   return(result);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047c0:	bf00      	nop
 80047c2:	3754      	adds	r7, #84	@ 0x54
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr

080047ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff ff21 	bl	800462c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b21      	cmp	r3, #33	@ 0x21
 8004804:	d13e      	bne.n	8004884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480e:	d114      	bne.n	800483a <UART_Transmit_IT+0x48>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	621a      	str	r2, [r3, #32]
 8004838:	e008      	b.n	800484c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6211      	str	r1, [r2, #32]
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29b      	uxth	r3, r3
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4619      	mov	r1, r3
 800485a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10f      	bne.n	8004880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800486e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800487e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	e000      	b.n	8004886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004884:	2302      	movs	r3, #2
  }
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7ff fea9 	bl	8004608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b22      	cmp	r3, #34	@ 0x22
 80048d2:	f040 80ae 	bne.w	8004a32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048de:	d117      	bne.n	8004910 <UART_Receive_IT+0x50>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	b29a      	uxth	r2, r3
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	629a      	str	r2, [r3, #40]	@ 0x28
 800490e:	e026      	b.n	800495e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004922:	d007      	beq.n	8004934 <UART_Receive_IT+0x74>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <UART_Receive_IT+0x82>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e008      	b.n	8004954 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4619      	mov	r1, r3
 800496c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800496e:	2b00      	cmp	r3, #0
 8004970:	d15d      	bne.n	8004a2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0220 	bic.w	r2, r2, #32
 8004980:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004990:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d135      	bne.n	8004a24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d10a      	bne.n	8004a16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fe0e 	bl	800463e <HAL_UARTEx_RxEventCallback>
 8004a22:	e002      	b.n	8004a2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff fdf8 	bl	800461a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e002      	b.n	8004a34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	@ 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a76:	f023 030c 	bic.w	r3, r3, #12
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b50 <UART_SetConfig+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fe fb60 	bl	8003168 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	e002      	b.n	8004ab2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aac:	f7fe fb48 	bl	8003140 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009a      	lsls	r2, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	4a22      	ldr	r2, [pc, #136]	@ (8004b54 <UART_SetConfig+0x118>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	0119      	lsls	r1, r3, #4
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009a      	lsls	r2, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b54 <UART_SetConfig+0x118>)
 8004aea:	fba3 0302 	umull	r0, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2064      	movs	r0, #100	@ 0x64
 8004af2:	fb00 f303 	mul.w	r3, r0, r3
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	3332      	adds	r3, #50	@ 0x32
 8004afc:	4a15      	ldr	r2, [pc, #84]	@ (8004b54 <UART_SetConfig+0x118>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b08:	4419      	add	r1, r3
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009a      	lsls	r2, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b20:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <UART_SetConfig+0x118>)
 8004b22:	fba3 0302 	umull	r0, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2064      	movs	r0, #100	@ 0x64
 8004b2a:	fb00 f303 	mul.w	r3, r0, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	@ 0x32
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <UART_SetConfig+0x118>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	440a      	add	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40013800 	.word	0x40013800
 8004b54:	51eb851f 	.word	0x51eb851f

08004b58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <SysTick_Handler+0x1c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b60:	f000 f994 	bl	8004e8c <xTaskGetSchedulerState>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b6a:	f000 f9ed 	bl	8004f48 <xPortSysTickHandler>
  }
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010

08004b78 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6892      	ldr	r2, [r2, #8]
 8004bd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d103      	bne.n	8004bf2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	1e5a      	subs	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d58 <xTaskIncrementTick+0x148>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 8090 	bne.w	8004d44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c24:	4b4d      	ldr	r3, [pc, #308]	@ (8004d5c <xTaskIncrementTick+0x14c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d5c <xTaskIncrementTick+0x14c>)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d121      	bne.n	8004c7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c38:	4b49      	ldr	r3, [pc, #292]	@ (8004d60 <xTaskIncrementTick+0x150>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	603b      	str	r3, [r7, #0]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <xTaskIncrementTick+0x46>
 8004c5a:	4b41      	ldr	r3, [pc, #260]	@ (8004d60 <xTaskIncrementTick+0x150>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	4b40      	ldr	r3, [pc, #256]	@ (8004d64 <xTaskIncrementTick+0x154>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3e      	ldr	r2, [pc, #248]	@ (8004d60 <xTaskIncrementTick+0x150>)
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4a3e      	ldr	r2, [pc, #248]	@ (8004d64 <xTaskIncrementTick+0x154>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d68 <xTaskIncrementTick+0x158>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a3c      	ldr	r2, [pc, #240]	@ (8004d68 <xTaskIncrementTick+0x158>)
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	f000 f8e8 	bl	8004e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <xTaskIncrementTick+0x15c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d349      	bcc.n	8004d1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c86:	4b36      	ldr	r3, [pc, #216]	@ (8004d60 <xTaskIncrementTick+0x150>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d104      	bne.n	8004c9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c90:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <xTaskIncrementTick+0x15c>)
 8004c92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c96:	601a      	str	r2, [r3, #0]
					break;
 8004c98:	e03f      	b.n	8004d1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <xTaskIncrementTick+0x150>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d203      	bcs.n	8004cba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8004d6c <xTaskIncrementTick+0x15c>)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cb8:	e02f      	b.n	8004d1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff7d 	bl	8004bbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff74 	bl	8004bbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cda:	4b25      	ldr	r3, [pc, #148]	@ (8004d70 <xTaskIncrementTick+0x160>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d903      	bls.n	8004cea <xTaskIncrementTick+0xda>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	4a22      	ldr	r2, [pc, #136]	@ (8004d70 <xTaskIncrementTick+0x160>)
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d74 <xTaskIncrementTick+0x164>)
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7ff ff39 	bl	8004b78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <xTaskIncrementTick+0x168>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b8      	bcc.n	8004c86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d18:	e7b5      	b.n	8004c86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d1a:	4b17      	ldr	r3, [pc, #92]	@ (8004d78 <xTaskIncrementTick+0x168>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d20:	4914      	ldr	r1, [pc, #80]	@ (8004d74 <xTaskIncrementTick+0x164>)
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d901      	bls.n	8004d36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d36:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <xTaskIncrementTick+0x16c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e004      	b.n	8004d4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d44:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <xTaskIncrementTick+0x170>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d80 <xTaskIncrementTick+0x170>)
 8004d4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200009bc 	.word	0x200009bc
 8004d5c:	200009a0 	.word	0x200009a0
 8004d60:	20000998 	.word	0x20000998
 8004d64:	2000099c 	.word	0x2000099c
 8004d68:	200009b4 	.word	0x200009b4
 8004d6c:	200009b8 	.word	0x200009b8
 8004d70:	200009a4 	.word	0x200009a4
 8004d74:	20000538 	.word	0x20000538
 8004d78:	20000534 	.word	0x20000534
 8004d7c:	200009b0 	.word	0x200009b0
 8004d80:	200009ac 	.word	0x200009ac

08004d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <vTaskSwitchContext+0xb0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <vTaskSwitchContext+0xb4>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d98:	e047      	b.n	8004e2a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d9a:	4b27      	ldr	r3, [pc, #156]	@ (8004e38 <vTaskSwitchContext+0xb4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da0:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <vTaskSwitchContext+0xb8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e011      	b.n	8004dcc <vTaskSwitchContext+0x48>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <vTaskSwitchContext+0x3e>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	491c      	ldr	r1, [pc, #112]	@ (8004e40 <vTaskSwitchContext+0xbc>)
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0e3      	beq.n	8004da8 <vTaskSwitchContext+0x24>
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <vTaskSwitchContext+0xbc>)
 8004dec:	4413      	add	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3308      	adds	r3, #8
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d104      	bne.n	8004e10 <vTaskSwitchContext+0x8c>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a0b      	ldr	r2, [pc, #44]	@ (8004e44 <vTaskSwitchContext+0xc0>)
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <vTaskSwitchContext+0xb8>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e20:	4b08      	ldr	r3, [pc, #32]	@ (8004e44 <vTaskSwitchContext+0xc0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3354      	adds	r3, #84	@ 0x54
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <vTaskSwitchContext+0xc4>)
 8004e28:	6013      	str	r3, [r2, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	200009bc 	.word	0x200009bc
 8004e38:	200009b0 	.word	0x200009b0
 8004e3c:	200009a4 	.word	0x200009a4
 8004e40:	20000538 	.word	0x20000538
 8004e44:	20000534 	.word	0x20000534
 8004e48:	20000018 	.word	0x20000018

08004e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <prvResetNextTaskUnblockTime+0x38>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e64:	e008      	b.n	8004e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e66:	4b07      	ldr	r3, [pc, #28]	@ (8004e84 <prvResetNextTaskUnblockTime+0x38>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <prvResetNextTaskUnblockTime+0x3c>)
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000998 	.word	0x20000998
 8004e88:	200009b8 	.word	0x200009b8

08004e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <xTaskGetSchedulerState+0x34>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	e008      	b.n	8004eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <xTaskGetSchedulerState+0x38>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	e001      	b.n	8004eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eb2:	687b      	ldr	r3, [r7, #4]
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	200009a8 	.word	0x200009a8
 8004ec4:	200009bc 	.word	0x200009bc
	...

08004ed0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ed0:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <pxCurrentTCBConst2>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004eda:	f380 8809 	msr	PSP, r0
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004eee:	4770      	bx	lr

08004ef0 <pxCurrentTCBConst2>:
 8004ef0:	20000534 	.word	0x20000534
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
	...

08004f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f00:	f3ef 8009 	mrs	r0, PSP
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <pxCurrentTCBConst>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f10:	6010      	str	r0, [r2, #0]
 8004f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f1a:	f380 8811 	msr	BASEPRI, r0
 8004f1e:	f7ff ff31 	bl	8004d84 <vTaskSwitchContext>
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f2e:	6819      	ldr	r1, [r3, #0]
 8004f30:	6808      	ldr	r0, [r1, #0]
 8004f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f36:	f380 8809 	msr	PSP, r0
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	4770      	bx	lr

08004f40 <pxCurrentTCBConst>:
 8004f40:	20000534 	.word	0x20000534
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f62:	f7ff fe55 	bl	8004c10 <xTaskIncrementTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <xPortSysTickHandler+0x40>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f383 8811 	msr	BASEPRI, r3
}
 8004f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <_free_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4605      	mov	r5, r0
 8004f90:	2900      	cmp	r1, #0
 8004f92:	d040      	beq.n	8005016 <_free_r+0x8a>
 8004f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f98:	1f0c      	subs	r4, r1, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bfb8      	it	lt
 8004f9e:	18e4      	addlt	r4, r4, r3
 8004fa0:	f000 f8e6 	bl	8005170 <__malloc_lock>
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <_free_r+0x8c>)
 8004fa6:	6813      	ldr	r3, [r2, #0]
 8004fa8:	b933      	cbnz	r3, 8004fb8 <_free_r+0x2c>
 8004faa:	6063      	str	r3, [r4, #4]
 8004fac:	6014      	str	r4, [r2, #0]
 8004fae:	4628      	mov	r0, r5
 8004fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fb4:	f000 b8e2 	b.w	800517c <__malloc_unlock>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d908      	bls.n	8004fce <_free_r+0x42>
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	1821      	adds	r1, r4, r0
 8004fc0:	428b      	cmp	r3, r1
 8004fc2:	bf01      	itttt	eq
 8004fc4:	6819      	ldreq	r1, [r3, #0]
 8004fc6:	685b      	ldreq	r3, [r3, #4]
 8004fc8:	1809      	addeq	r1, r1, r0
 8004fca:	6021      	streq	r1, [r4, #0]
 8004fcc:	e7ed      	b.n	8004faa <_free_r+0x1e>
 8004fce:	461a      	mov	r2, r3
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b10b      	cbz	r3, 8004fd8 <_free_r+0x4c>
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d9fa      	bls.n	8004fce <_free_r+0x42>
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	1850      	adds	r0, r2, r1
 8004fdc:	42a0      	cmp	r0, r4
 8004fde:	d10b      	bne.n	8004ff8 <_free_r+0x6c>
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	1850      	adds	r0, r2, r1
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	d1e0      	bne.n	8004fae <_free_r+0x22>
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	4408      	add	r0, r1
 8004ff2:	6010      	str	r0, [r2, #0]
 8004ff4:	6053      	str	r3, [r2, #4]
 8004ff6:	e7da      	b.n	8004fae <_free_r+0x22>
 8004ff8:	d902      	bls.n	8005000 <_free_r+0x74>
 8004ffa:	230c      	movs	r3, #12
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	e7d6      	b.n	8004fae <_free_r+0x22>
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	1821      	adds	r1, r4, r0
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1809      	addeq	r1, r1, r0
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6054      	str	r4, [r2, #4]
 8005014:	e7cb      	b.n	8004fae <_free_r+0x22>
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200009c4 	.word	0x200009c4

0800501c <malloc>:
 800501c:	4b02      	ldr	r3, [pc, #8]	@ (8005028 <malloc+0xc>)
 800501e:	4601      	mov	r1, r0
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	f000 b825 	b.w	8005070 <_malloc_r>
 8005026:	bf00      	nop
 8005028:	20000018 	.word	0x20000018

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0f      	ldr	r6, [pc, #60]	@ (800506c <sbrk_aligned+0x40>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 fedc 	bl	8005df4 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fed7 	bl	8005df4 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d103      	bne.n	8005052 <sbrk_aligned+0x26>
 800504a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800504e:	4620      	mov	r0, r4
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d0f8      	beq.n	800504e <sbrk_aligned+0x22>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fec8 	bl	8005df4 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d1f2      	bne.n	800504e <sbrk_aligned+0x22>
 8005068:	e7ef      	b.n	800504a <sbrk_aligned+0x1e>
 800506a:	bf00      	nop
 800506c:	200009c0 	.word	0x200009c0

08005070 <_malloc_r>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	1ccd      	adds	r5, r1, #3
 8005076:	f025 0503 	bic.w	r5, r5, #3
 800507a:	3508      	adds	r5, #8
 800507c:	2d0c      	cmp	r5, #12
 800507e:	bf38      	it	cc
 8005080:	250c      	movcc	r5, #12
 8005082:	2d00      	cmp	r5, #0
 8005084:	4606      	mov	r6, r0
 8005086:	db01      	blt.n	800508c <_malloc_r+0x1c>
 8005088:	42a9      	cmp	r1, r5
 800508a:	d904      	bls.n	8005096 <_malloc_r+0x26>
 800508c:	230c      	movs	r3, #12
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	2000      	movs	r0, #0
 8005092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800516c <_malloc_r+0xfc>
 800509a:	f000 f869 	bl	8005170 <__malloc_lock>
 800509e:	f8d8 3000 	ldr.w	r3, [r8]
 80050a2:	461c      	mov	r4, r3
 80050a4:	bb44      	cbnz	r4, 80050f8 <_malloc_r+0x88>
 80050a6:	4629      	mov	r1, r5
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7ff ffbf 	bl	800502c <sbrk_aligned>
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	4604      	mov	r4, r0
 80050b2:	d158      	bne.n	8005166 <_malloc_r+0xf6>
 80050b4:	f8d8 4000 	ldr.w	r4, [r8]
 80050b8:	4627      	mov	r7, r4
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d143      	bne.n	8005146 <_malloc_r+0xd6>
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d04b      	beq.n	800515a <_malloc_r+0xea>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	4639      	mov	r1, r7
 80050c6:	4630      	mov	r0, r6
 80050c8:	eb04 0903 	add.w	r9, r4, r3
 80050cc:	f000 fe92 	bl	8005df4 <_sbrk_r>
 80050d0:	4581      	cmp	r9, r0
 80050d2:	d142      	bne.n	800515a <_malloc_r+0xea>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	4630      	mov	r0, r6
 80050d8:	1a6d      	subs	r5, r5, r1
 80050da:	4629      	mov	r1, r5
 80050dc:	f7ff ffa6 	bl	800502c <sbrk_aligned>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d03a      	beq.n	800515a <_malloc_r+0xea>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	442b      	add	r3, r5
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	f8d8 3000 	ldr.w	r3, [r8]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	bb62      	cbnz	r2, 800514c <_malloc_r+0xdc>
 80050f2:	f8c8 7000 	str.w	r7, [r8]
 80050f6:	e00f      	b.n	8005118 <_malloc_r+0xa8>
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	1b52      	subs	r2, r2, r5
 80050fc:	d420      	bmi.n	8005140 <_malloc_r+0xd0>
 80050fe:	2a0b      	cmp	r2, #11
 8005100:	d917      	bls.n	8005132 <_malloc_r+0xc2>
 8005102:	1961      	adds	r1, r4, r5
 8005104:	42a3      	cmp	r3, r4
 8005106:	6025      	str	r5, [r4, #0]
 8005108:	bf18      	it	ne
 800510a:	6059      	strne	r1, [r3, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	bf08      	it	eq
 8005110:	f8c8 1000 	streq.w	r1, [r8]
 8005114:	5162      	str	r2, [r4, r5]
 8005116:	604b      	str	r3, [r1, #4]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f82f 	bl	800517c <__malloc_unlock>
 800511e:	f104 000b 	add.w	r0, r4, #11
 8005122:	1d23      	adds	r3, r4, #4
 8005124:	f020 0007 	bic.w	r0, r0, #7
 8005128:	1ac2      	subs	r2, r0, r3
 800512a:	bf1c      	itt	ne
 800512c:	1a1b      	subne	r3, r3, r0
 800512e:	50a3      	strne	r3, [r4, r2]
 8005130:	e7af      	b.n	8005092 <_malloc_r+0x22>
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	42a3      	cmp	r3, r4
 8005136:	bf0c      	ite	eq
 8005138:	f8c8 2000 	streq.w	r2, [r8]
 800513c:	605a      	strne	r2, [r3, #4]
 800513e:	e7eb      	b.n	8005118 <_malloc_r+0xa8>
 8005140:	4623      	mov	r3, r4
 8005142:	6864      	ldr	r4, [r4, #4]
 8005144:	e7ae      	b.n	80050a4 <_malloc_r+0x34>
 8005146:	463c      	mov	r4, r7
 8005148:	687f      	ldr	r7, [r7, #4]
 800514a:	e7b6      	b.n	80050ba <_malloc_r+0x4a>
 800514c:	461a      	mov	r2, r3
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	42a3      	cmp	r3, r4
 8005152:	d1fb      	bne.n	800514c <_malloc_r+0xdc>
 8005154:	2300      	movs	r3, #0
 8005156:	6053      	str	r3, [r2, #4]
 8005158:	e7de      	b.n	8005118 <_malloc_r+0xa8>
 800515a:	230c      	movs	r3, #12
 800515c:	4630      	mov	r0, r6
 800515e:	6033      	str	r3, [r6, #0]
 8005160:	f000 f80c 	bl	800517c <__malloc_unlock>
 8005164:	e794      	b.n	8005090 <_malloc_r+0x20>
 8005166:	6005      	str	r5, [r0, #0]
 8005168:	e7d6      	b.n	8005118 <_malloc_r+0xa8>
 800516a:	bf00      	nop
 800516c:	200009c4 	.word	0x200009c4

08005170 <__malloc_lock>:
 8005170:	4801      	ldr	r0, [pc, #4]	@ (8005178 <__malloc_lock+0x8>)
 8005172:	f7fc bda5 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	20000524 	.word	0x20000524

0800517c <__malloc_unlock>:
 800517c:	4801      	ldr	r0, [pc, #4]	@ (8005184 <__malloc_unlock+0x8>)
 800517e:	f7fc bdb4 	b.w	8001cea <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	20000524 	.word	0x20000524

08005188 <__cvt>:
 8005188:	2b00      	cmp	r3, #0
 800518a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800518e:	461d      	mov	r5, r3
 8005190:	bfbb      	ittet	lt
 8005192:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005196:	461d      	movlt	r5, r3
 8005198:	2300      	movge	r3, #0
 800519a:	232d      	movlt	r3, #45	@ 0x2d
 800519c:	b088      	sub	sp, #32
 800519e:	4614      	mov	r4, r2
 80051a0:	bfb8      	it	lt
 80051a2:	4614      	movlt	r4, r2
 80051a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80051a8:	7013      	strb	r3, [r2, #0]
 80051aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80051b0:	f023 0820 	bic.w	r8, r3, #32
 80051b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051b8:	d005      	beq.n	80051c6 <__cvt+0x3e>
 80051ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051be:	d100      	bne.n	80051c2 <__cvt+0x3a>
 80051c0:	3601      	adds	r6, #1
 80051c2:	2302      	movs	r3, #2
 80051c4:	e000      	b.n	80051c8 <__cvt+0x40>
 80051c6:	2303      	movs	r3, #3
 80051c8:	aa07      	add	r2, sp, #28
 80051ca:	9204      	str	r2, [sp, #16]
 80051cc:	aa06      	add	r2, sp, #24
 80051ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051d2:	e9cd 3600 	strd	r3, r6, [sp]
 80051d6:	4622      	mov	r2, r4
 80051d8:	462b      	mov	r3, r5
 80051da:	f000 fefd 	bl	8005fd8 <_dtoa_r>
 80051de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80051e2:	4607      	mov	r7, r0
 80051e4:	d119      	bne.n	800521a <__cvt+0x92>
 80051e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80051e8:	07db      	lsls	r3, r3, #31
 80051ea:	d50e      	bpl.n	800520a <__cvt+0x82>
 80051ec:	eb00 0906 	add.w	r9, r0, r6
 80051f0:	2200      	movs	r2, #0
 80051f2:	2300      	movs	r3, #0
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb fbd6 	bl	80009a8 <__aeabi_dcmpeq>
 80051fc:	b108      	cbz	r0, 8005202 <__cvt+0x7a>
 80051fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005202:	2230      	movs	r2, #48	@ 0x30
 8005204:	9b07      	ldr	r3, [sp, #28]
 8005206:	454b      	cmp	r3, r9
 8005208:	d31e      	bcc.n	8005248 <__cvt+0xc0>
 800520a:	4638      	mov	r0, r7
 800520c:	9b07      	ldr	r3, [sp, #28]
 800520e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005210:	1bdb      	subs	r3, r3, r7
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	b008      	add	sp, #32
 8005216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800521e:	eb00 0906 	add.w	r9, r0, r6
 8005222:	d1e5      	bne.n	80051f0 <__cvt+0x68>
 8005224:	7803      	ldrb	r3, [r0, #0]
 8005226:	2b30      	cmp	r3, #48	@ 0x30
 8005228:	d10a      	bne.n	8005240 <__cvt+0xb8>
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fbb9 	bl	80009a8 <__aeabi_dcmpeq>
 8005236:	b918      	cbnz	r0, 8005240 <__cvt+0xb8>
 8005238:	f1c6 0601 	rsb	r6, r6, #1
 800523c:	f8ca 6000 	str.w	r6, [sl]
 8005240:	f8da 3000 	ldr.w	r3, [sl]
 8005244:	4499      	add	r9, r3
 8005246:	e7d3      	b.n	80051f0 <__cvt+0x68>
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	9107      	str	r1, [sp, #28]
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e7d9      	b.n	8005204 <__cvt+0x7c>

08005250 <__exponent>:
 8005250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005252:	2900      	cmp	r1, #0
 8005254:	bfb6      	itet	lt
 8005256:	232d      	movlt	r3, #45	@ 0x2d
 8005258:	232b      	movge	r3, #43	@ 0x2b
 800525a:	4249      	neglt	r1, r1
 800525c:	2909      	cmp	r1, #9
 800525e:	7002      	strb	r2, [r0, #0]
 8005260:	7043      	strb	r3, [r0, #1]
 8005262:	dd29      	ble.n	80052b8 <__exponent+0x68>
 8005264:	f10d 0307 	add.w	r3, sp, #7
 8005268:	461d      	mov	r5, r3
 800526a:	270a      	movs	r7, #10
 800526c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005270:	461a      	mov	r2, r3
 8005272:	fb07 1416 	mls	r4, r7, r6, r1
 8005276:	3430      	adds	r4, #48	@ 0x30
 8005278:	f802 4c01 	strb.w	r4, [r2, #-1]
 800527c:	460c      	mov	r4, r1
 800527e:	2c63      	cmp	r4, #99	@ 0x63
 8005280:	4631      	mov	r1, r6
 8005282:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005286:	dcf1      	bgt.n	800526c <__exponent+0x1c>
 8005288:	3130      	adds	r1, #48	@ 0x30
 800528a:	1e94      	subs	r4, r2, #2
 800528c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005290:	4623      	mov	r3, r4
 8005292:	1c41      	adds	r1, r0, #1
 8005294:	42ab      	cmp	r3, r5
 8005296:	d30a      	bcc.n	80052ae <__exponent+0x5e>
 8005298:	f10d 0309 	add.w	r3, sp, #9
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	42ac      	cmp	r4, r5
 80052a0:	bf88      	it	hi
 80052a2:	2300      	movhi	r3, #0
 80052a4:	3302      	adds	r3, #2
 80052a6:	4403      	add	r3, r0
 80052a8:	1a18      	subs	r0, r3, r0
 80052aa:	b003      	add	sp, #12
 80052ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052b6:	e7ed      	b.n	8005294 <__exponent+0x44>
 80052b8:	2330      	movs	r3, #48	@ 0x30
 80052ba:	3130      	adds	r1, #48	@ 0x30
 80052bc:	7083      	strb	r3, [r0, #2]
 80052be:	70c1      	strb	r1, [r0, #3]
 80052c0:	1d03      	adds	r3, r0, #4
 80052c2:	e7f1      	b.n	80052a8 <__exponent+0x58>

080052c4 <_printf_float>:
 80052c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	b091      	sub	sp, #68	@ 0x44
 80052ca:	460c      	mov	r4, r1
 80052cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80052d0:	4616      	mov	r6, r2
 80052d2:	461f      	mov	r7, r3
 80052d4:	4605      	mov	r5, r0
 80052d6:	f000 fd55 	bl	8005d84 <_localeconv_r>
 80052da:	6803      	ldr	r3, [r0, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	9308      	str	r3, [sp, #32]
 80052e0:	f7fa ff36 	bl	8000150 <strlen>
 80052e4:	2300      	movs	r3, #0
 80052e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80052e8:	f8d8 3000 	ldr.w	r3, [r8]
 80052ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80052ee:	3307      	adds	r3, #7
 80052f0:	f023 0307 	bic.w	r3, r3, #7
 80052f4:	f103 0208 	add.w	r2, r3, #8
 80052f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80052fc:	f8d4 b000 	ldr.w	fp, [r4]
 8005300:	f8c8 2000 	str.w	r2, [r8]
 8005304:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005308:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800530c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800530e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005312:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005316:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800531a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800531e:	4b9c      	ldr	r3, [pc, #624]	@ (8005590 <_printf_float+0x2cc>)
 8005320:	f7fb fb74 	bl	8000a0c <__aeabi_dcmpun>
 8005324:	bb70      	cbnz	r0, 8005384 <_printf_float+0xc0>
 8005326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800532a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800532e:	4b98      	ldr	r3, [pc, #608]	@ (8005590 <_printf_float+0x2cc>)
 8005330:	f7fb fb4e 	bl	80009d0 <__aeabi_dcmple>
 8005334:	bb30      	cbnz	r0, 8005384 <_printf_float+0xc0>
 8005336:	2200      	movs	r2, #0
 8005338:	2300      	movs	r3, #0
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fb fb3d 	bl	80009bc <__aeabi_dcmplt>
 8005342:	b110      	cbz	r0, 800534a <_printf_float+0x86>
 8005344:	232d      	movs	r3, #45	@ 0x2d
 8005346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800534a:	4a92      	ldr	r2, [pc, #584]	@ (8005594 <_printf_float+0x2d0>)
 800534c:	4b92      	ldr	r3, [pc, #584]	@ (8005598 <_printf_float+0x2d4>)
 800534e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005352:	bf94      	ite	ls
 8005354:	4690      	movls	r8, r2
 8005356:	4698      	movhi	r8, r3
 8005358:	2303      	movs	r3, #3
 800535a:	f04f 0900 	mov.w	r9, #0
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	f02b 0304 	bic.w	r3, fp, #4
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	4633      	mov	r3, r6
 8005368:	4621      	mov	r1, r4
 800536a:	4628      	mov	r0, r5
 800536c:	9700      	str	r7, [sp, #0]
 800536e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005370:	f000 f9d4 	bl	800571c <_printf_common>
 8005374:	3001      	adds	r0, #1
 8005376:	f040 8090 	bne.w	800549a <_printf_float+0x1d6>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800537e:	b011      	add	sp, #68	@ 0x44
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb fb3e 	bl	8000a0c <__aeabi_dcmpun>
 8005390:	b148      	cbz	r0, 80053a6 <_printf_float+0xe2>
 8005392:	464b      	mov	r3, r9
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfb8      	it	lt
 8005398:	232d      	movlt	r3, #45	@ 0x2d
 800539a:	4a80      	ldr	r2, [pc, #512]	@ (800559c <_printf_float+0x2d8>)
 800539c:	bfb8      	it	lt
 800539e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053a2:	4b7f      	ldr	r3, [pc, #508]	@ (80055a0 <_printf_float+0x2dc>)
 80053a4:	e7d3      	b.n	800534e <_printf_float+0x8a>
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	d13f      	bne.n	8005430 <_printf_float+0x16c>
 80053b0:	2306      	movs	r3, #6
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80053ba:	6023      	str	r3, [r4, #0]
 80053bc:	9206      	str	r2, [sp, #24]
 80053be:	aa0e      	add	r2, sp, #56	@ 0x38
 80053c0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80053c4:	aa0d      	add	r2, sp, #52	@ 0x34
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80053cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	4642      	mov	r2, r8
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4628      	mov	r0, r5
 80053d8:	464b      	mov	r3, r9
 80053da:	910a      	str	r1, [sp, #40]	@ 0x28
 80053dc:	f7ff fed4 	bl	8005188 <__cvt>
 80053e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80053e2:	4680      	mov	r8, r0
 80053e4:	2947      	cmp	r1, #71	@ 0x47
 80053e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80053e8:	d128      	bne.n	800543c <_printf_float+0x178>
 80053ea:	1cc8      	adds	r0, r1, #3
 80053ec:	db02      	blt.n	80053f4 <_printf_float+0x130>
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	4299      	cmp	r1, r3
 80053f2:	dd40      	ble.n	8005476 <_printf_float+0x1b2>
 80053f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80053f8:	fa5f fa8a 	uxtb.w	sl, sl
 80053fc:	4652      	mov	r2, sl
 80053fe:	3901      	subs	r1, #1
 8005400:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005404:	910d      	str	r1, [sp, #52]	@ 0x34
 8005406:	f7ff ff23 	bl	8005250 <__exponent>
 800540a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800540c:	4681      	mov	r9, r0
 800540e:	1813      	adds	r3, r2, r0
 8005410:	2a01      	cmp	r2, #1
 8005412:	6123      	str	r3, [r4, #16]
 8005414:	dc02      	bgt.n	800541c <_printf_float+0x158>
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	07d2      	lsls	r2, r2, #31
 800541a:	d501      	bpl.n	8005420 <_printf_float+0x15c>
 800541c:	3301      	adds	r3, #1
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005424:	2b00      	cmp	r3, #0
 8005426:	d09e      	beq.n	8005366 <_printf_float+0xa2>
 8005428:	232d      	movs	r3, #45	@ 0x2d
 800542a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800542e:	e79a      	b.n	8005366 <_printf_float+0xa2>
 8005430:	2947      	cmp	r1, #71	@ 0x47
 8005432:	d1bf      	bne.n	80053b4 <_printf_float+0xf0>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1bd      	bne.n	80053b4 <_printf_float+0xf0>
 8005438:	2301      	movs	r3, #1
 800543a:	e7ba      	b.n	80053b2 <_printf_float+0xee>
 800543c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005440:	d9dc      	bls.n	80053fc <_printf_float+0x138>
 8005442:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005446:	d118      	bne.n	800547a <_printf_float+0x1b6>
 8005448:	2900      	cmp	r1, #0
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	dd0b      	ble.n	8005466 <_printf_float+0x1a2>
 800544e:	6121      	str	r1, [r4, #16]
 8005450:	b913      	cbnz	r3, 8005458 <_printf_float+0x194>
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	07d0      	lsls	r0, r2, #31
 8005456:	d502      	bpl.n	800545e <_printf_float+0x19a>
 8005458:	3301      	adds	r3, #1
 800545a:	440b      	add	r3, r1
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	f04f 0900 	mov.w	r9, #0
 8005462:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005464:	e7dc      	b.n	8005420 <_printf_float+0x15c>
 8005466:	b913      	cbnz	r3, 800546e <_printf_float+0x1aa>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	07d2      	lsls	r2, r2, #31
 800546c:	d501      	bpl.n	8005472 <_printf_float+0x1ae>
 800546e:	3302      	adds	r3, #2
 8005470:	e7f4      	b.n	800545c <_printf_float+0x198>
 8005472:	2301      	movs	r3, #1
 8005474:	e7f2      	b.n	800545c <_printf_float+0x198>
 8005476:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800547a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800547c:	4299      	cmp	r1, r3
 800547e:	db05      	blt.n	800548c <_printf_float+0x1c8>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	6121      	str	r1, [r4, #16]
 8005484:	07d8      	lsls	r0, r3, #31
 8005486:	d5ea      	bpl.n	800545e <_printf_float+0x19a>
 8005488:	1c4b      	adds	r3, r1, #1
 800548a:	e7e7      	b.n	800545c <_printf_float+0x198>
 800548c:	2900      	cmp	r1, #0
 800548e:	bfcc      	ite	gt
 8005490:	2201      	movgt	r2, #1
 8005492:	f1c1 0202 	rsble	r2, r1, #2
 8005496:	4413      	add	r3, r2
 8005498:	e7e0      	b.n	800545c <_printf_float+0x198>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	055a      	lsls	r2, r3, #21
 800549e:	d407      	bmi.n	80054b0 <_printf_float+0x1ec>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	4642      	mov	r2, r8
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d12b      	bne.n	8005506 <_printf_float+0x242>
 80054ae:	e764      	b.n	800537a <_printf_float+0xb6>
 80054b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054b4:	f240 80dc 	bls.w	8005670 <_printf_float+0x3ac>
 80054b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054bc:	2200      	movs	r2, #0
 80054be:	2300      	movs	r3, #0
 80054c0:	f7fb fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d033      	beq.n	8005530 <_printf_float+0x26c>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	4a35      	ldr	r2, [pc, #212]	@ (80055a4 <_printf_float+0x2e0>)
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f af51 	beq.w	800537a <_printf_float+0xb6>
 80054d8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80054dc:	4543      	cmp	r3, r8
 80054de:	db02      	blt.n	80054e6 <_printf_float+0x222>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	07d8      	lsls	r0, r3, #31
 80054e4:	d50f      	bpl.n	8005506 <_printf_float+0x242>
 80054e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f af42 	beq.w	800537a <_printf_float+0xb6>
 80054f6:	f04f 0900 	mov.w	r9, #0
 80054fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80054fe:	f104 0a1a 	add.w	sl, r4, #26
 8005502:	45c8      	cmp	r8, r9
 8005504:	dc09      	bgt.n	800551a <_printf_float+0x256>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	079b      	lsls	r3, r3, #30
 800550a:	f100 8102 	bmi.w	8005712 <_printf_float+0x44e>
 800550e:	68e0      	ldr	r0, [r4, #12]
 8005510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005512:	4298      	cmp	r0, r3
 8005514:	bfb8      	it	lt
 8005516:	4618      	movlt	r0, r3
 8005518:	e731      	b.n	800537e <_printf_float+0xba>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f af28 	beq.w	800537a <_printf_float+0xb6>
 800552a:	f109 0901 	add.w	r9, r9, #1
 800552e:	e7e8      	b.n	8005502 <_printf_float+0x23e>
 8005530:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005532:	2b00      	cmp	r3, #0
 8005534:	dc38      	bgt.n	80055a8 <_printf_float+0x2e4>
 8005536:	2301      	movs	r3, #1
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	4a19      	ldr	r2, [pc, #100]	@ (80055a4 <_printf_float+0x2e0>)
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f af1a 	beq.w	800537a <_printf_float+0xb6>
 8005546:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800554a:	ea59 0303 	orrs.w	r3, r9, r3
 800554e:	d102      	bne.n	8005556 <_printf_float+0x292>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07d9      	lsls	r1, r3, #31
 8005554:	d5d7      	bpl.n	8005506 <_printf_float+0x242>
 8005556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	f43f af0a 	beq.w	800537a <_printf_float+0xb6>
 8005566:	f04f 0a00 	mov.w	sl, #0
 800556a:	f104 0b1a 	add.w	fp, r4, #26
 800556e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005570:	425b      	negs	r3, r3
 8005572:	4553      	cmp	r3, sl
 8005574:	dc01      	bgt.n	800557a <_printf_float+0x2b6>
 8005576:	464b      	mov	r3, r9
 8005578:	e793      	b.n	80054a2 <_printf_float+0x1de>
 800557a:	2301      	movs	r3, #1
 800557c:	465a      	mov	r2, fp
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	f43f aef8 	beq.w	800537a <_printf_float+0xb6>
 800558a:	f10a 0a01 	add.w	sl, sl, #1
 800558e:	e7ee      	b.n	800556e <_printf_float+0x2aa>
 8005590:	7fefffff 	.word	0x7fefffff
 8005594:	08007906 	.word	0x08007906
 8005598:	0800790a 	.word	0x0800790a
 800559c:	0800790e 	.word	0x0800790e
 80055a0:	08007912 	.word	0x08007912
 80055a4:	08007916 	.word	0x08007916
 80055a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055aa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80055ae:	4553      	cmp	r3, sl
 80055b0:	bfa8      	it	ge
 80055b2:	4653      	movge	r3, sl
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	4699      	mov	r9, r3
 80055b8:	dc36      	bgt.n	8005628 <_printf_float+0x364>
 80055ba:	f04f 0b00 	mov.w	fp, #0
 80055be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055c2:	f104 021a 	add.w	r2, r4, #26
 80055c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ca:	eba3 0309 	sub.w	r3, r3, r9
 80055ce:	455b      	cmp	r3, fp
 80055d0:	dc31      	bgt.n	8005636 <_printf_float+0x372>
 80055d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055d4:	459a      	cmp	sl, r3
 80055d6:	dc3a      	bgt.n	800564e <_printf_float+0x38a>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	07da      	lsls	r2, r3, #31
 80055dc:	d437      	bmi.n	800564e <_printf_float+0x38a>
 80055de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055e0:	ebaa 0903 	sub.w	r9, sl, r3
 80055e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055e6:	ebaa 0303 	sub.w	r3, sl, r3
 80055ea:	4599      	cmp	r9, r3
 80055ec:	bfa8      	it	ge
 80055ee:	4699      	movge	r9, r3
 80055f0:	f1b9 0f00 	cmp.w	r9, #0
 80055f4:	dc33      	bgt.n	800565e <_printf_float+0x39a>
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055fe:	f104 0b1a 	add.w	fp, r4, #26
 8005602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005604:	ebaa 0303 	sub.w	r3, sl, r3
 8005608:	eba3 0309 	sub.w	r3, r3, r9
 800560c:	4543      	cmp	r3, r8
 800560e:	f77f af7a 	ble.w	8005506 <_printf_float+0x242>
 8005612:	2301      	movs	r3, #1
 8005614:	465a      	mov	r2, fp
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f aeac 	beq.w	800537a <_printf_float+0xb6>
 8005622:	f108 0801 	add.w	r8, r8, #1
 8005626:	e7ec      	b.n	8005602 <_printf_float+0x33e>
 8005628:	4642      	mov	r2, r8
 800562a:	4631      	mov	r1, r6
 800562c:	4628      	mov	r0, r5
 800562e:	47b8      	blx	r7
 8005630:	3001      	adds	r0, #1
 8005632:	d1c2      	bne.n	80055ba <_printf_float+0x2f6>
 8005634:	e6a1      	b.n	800537a <_printf_float+0xb6>
 8005636:	2301      	movs	r3, #1
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	920a      	str	r2, [sp, #40]	@ 0x28
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae9a 	beq.w	800537a <_printf_float+0xb6>
 8005646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005648:	f10b 0b01 	add.w	fp, fp, #1
 800564c:	e7bb      	b.n	80055c6 <_printf_float+0x302>
 800564e:	4631      	mov	r1, r6
 8005650:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	d1c0      	bne.n	80055de <_printf_float+0x31a>
 800565c:	e68d      	b.n	800537a <_printf_float+0xb6>
 800565e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005660:	464b      	mov	r3, r9
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	4442      	add	r2, r8
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	d1c3      	bne.n	80055f6 <_printf_float+0x332>
 800566e:	e684      	b.n	800537a <_printf_float+0xb6>
 8005670:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005674:	f1ba 0f01 	cmp.w	sl, #1
 8005678:	dc01      	bgt.n	800567e <_printf_float+0x3ba>
 800567a:	07db      	lsls	r3, r3, #31
 800567c:	d536      	bpl.n	80056ec <_printf_float+0x428>
 800567e:	2301      	movs	r3, #1
 8005680:	4642      	mov	r2, r8
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	f43f ae76 	beq.w	800537a <_printf_float+0xb6>
 800568e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	f43f ae6e 	beq.w	800537a <_printf_float+0xb6>
 800569e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80056aa:	f7fb f97d 	bl	80009a8 <__aeabi_dcmpeq>
 80056ae:	b9c0      	cbnz	r0, 80056e2 <_printf_float+0x41e>
 80056b0:	4653      	mov	r3, sl
 80056b2:	f108 0201 	add.w	r2, r8, #1
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b8      	blx	r7
 80056bc:	3001      	adds	r0, #1
 80056be:	d10c      	bne.n	80056da <_printf_float+0x416>
 80056c0:	e65b      	b.n	800537a <_printf_float+0xb6>
 80056c2:	2301      	movs	r3, #1
 80056c4:	465a      	mov	r2, fp
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f ae54 	beq.w	800537a <_printf_float+0xb6>
 80056d2:	f108 0801 	add.w	r8, r8, #1
 80056d6:	45d0      	cmp	r8, sl
 80056d8:	dbf3      	blt.n	80056c2 <_printf_float+0x3fe>
 80056da:	464b      	mov	r3, r9
 80056dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80056e0:	e6e0      	b.n	80054a4 <_printf_float+0x1e0>
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	f104 0b1a 	add.w	fp, r4, #26
 80056ea:	e7f4      	b.n	80056d6 <_printf_float+0x412>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4642      	mov	r2, r8
 80056f0:	e7e1      	b.n	80056b6 <_printf_float+0x3f2>
 80056f2:	2301      	movs	r3, #1
 80056f4:	464a      	mov	r2, r9
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f ae3c 	beq.w	800537a <_printf_float+0xb6>
 8005702:	f108 0801 	add.w	r8, r8, #1
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	4543      	cmp	r3, r8
 800570e:	dcf0      	bgt.n	80056f2 <_printf_float+0x42e>
 8005710:	e6fd      	b.n	800550e <_printf_float+0x24a>
 8005712:	f04f 0800 	mov.w	r8, #0
 8005716:	f104 0919 	add.w	r9, r4, #25
 800571a:	e7f4      	b.n	8005706 <_printf_float+0x442>

0800571c <_printf_common>:
 800571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	4616      	mov	r6, r2
 8005722:	4698      	mov	r8, r3
 8005724:	688a      	ldr	r2, [r1, #8]
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4607      	mov	r7, r0
 800572a:	4293      	cmp	r3, r2
 800572c:	bfb8      	it	lt
 800572e:	4613      	movlt	r3, r2
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005736:	460c      	mov	r4, r1
 8005738:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800573c:	b10a      	cbz	r2, 8005742 <_printf_common+0x26>
 800573e:	3301      	adds	r3, #1
 8005740:	6033      	str	r3, [r6, #0]
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	0699      	lsls	r1, r3, #26
 8005746:	bf42      	ittt	mi
 8005748:	6833      	ldrmi	r3, [r6, #0]
 800574a:	3302      	addmi	r3, #2
 800574c:	6033      	strmi	r3, [r6, #0]
 800574e:	6825      	ldr	r5, [r4, #0]
 8005750:	f015 0506 	ands.w	r5, r5, #6
 8005754:	d106      	bne.n	8005764 <_printf_common+0x48>
 8005756:	f104 0a19 	add.w	sl, r4, #25
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	6832      	ldr	r2, [r6, #0]
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	42ab      	cmp	r3, r5
 8005762:	dc2b      	bgt.n	80057bc <_printf_common+0xa0>
 8005764:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	3b00      	subs	r3, #0
 800576c:	bf18      	it	ne
 800576e:	2301      	movne	r3, #1
 8005770:	0692      	lsls	r2, r2, #26
 8005772:	d430      	bmi.n	80057d6 <_printf_common+0xba>
 8005774:	4641      	mov	r1, r8
 8005776:	4638      	mov	r0, r7
 8005778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800577c:	47c8      	blx	r9
 800577e:	3001      	adds	r0, #1
 8005780:	d023      	beq.n	80057ca <_printf_common+0xae>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	6922      	ldr	r2, [r4, #16]
 8005786:	f003 0306 	and.w	r3, r3, #6
 800578a:	2b04      	cmp	r3, #4
 800578c:	bf14      	ite	ne
 800578e:	2500      	movne	r5, #0
 8005790:	6833      	ldreq	r3, [r6, #0]
 8005792:	f04f 0600 	mov.w	r6, #0
 8005796:	bf08      	it	eq
 8005798:	68e5      	ldreq	r5, [r4, #12]
 800579a:	f104 041a 	add.w	r4, r4, #26
 800579e:	bf08      	it	eq
 80057a0:	1aed      	subeq	r5, r5, r3
 80057a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80057a6:	bf08      	it	eq
 80057a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bfc4      	itt	gt
 80057b0:	1a9b      	subgt	r3, r3, r2
 80057b2:	18ed      	addgt	r5, r5, r3
 80057b4:	42b5      	cmp	r5, r6
 80057b6:	d11a      	bne.n	80057ee <_printf_common+0xd2>
 80057b8:	2000      	movs	r0, #0
 80057ba:	e008      	b.n	80057ce <_printf_common+0xb2>
 80057bc:	2301      	movs	r3, #1
 80057be:	4652      	mov	r2, sl
 80057c0:	4641      	mov	r1, r8
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c8      	blx	r9
 80057c6:	3001      	adds	r0, #1
 80057c8:	d103      	bne.n	80057d2 <_printf_common+0xb6>
 80057ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	3501      	adds	r5, #1
 80057d4:	e7c1      	b.n	800575a <_printf_common+0x3e>
 80057d6:	2030      	movs	r0, #48	@ 0x30
 80057d8:	18e1      	adds	r1, r4, r3
 80057da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80057e4:	4422      	add	r2, r4
 80057e6:	3302      	adds	r3, #2
 80057e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80057ec:	e7c2      	b.n	8005774 <_printf_common+0x58>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4622      	mov	r2, r4
 80057f2:	4641      	mov	r1, r8
 80057f4:	4638      	mov	r0, r7
 80057f6:	47c8      	blx	r9
 80057f8:	3001      	adds	r0, #1
 80057fa:	d0e6      	beq.n	80057ca <_printf_common+0xae>
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7d9      	b.n	80057b4 <_printf_common+0x98>

08005800 <_printf_i>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	7e0f      	ldrb	r7, [r1, #24]
 8005806:	4691      	mov	r9, r2
 8005808:	2f78      	cmp	r7, #120	@ 0x78
 800580a:	4680      	mov	r8, r0
 800580c:	460c      	mov	r4, r1
 800580e:	469a      	mov	sl, r3
 8005810:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005812:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005816:	d807      	bhi.n	8005828 <_printf_i+0x28>
 8005818:	2f62      	cmp	r7, #98	@ 0x62
 800581a:	d80a      	bhi.n	8005832 <_printf_i+0x32>
 800581c:	2f00      	cmp	r7, #0
 800581e:	f000 80d3 	beq.w	80059c8 <_printf_i+0x1c8>
 8005822:	2f58      	cmp	r7, #88	@ 0x58
 8005824:	f000 80ba 	beq.w	800599c <_printf_i+0x19c>
 8005828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800582c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005830:	e03a      	b.n	80058a8 <_printf_i+0xa8>
 8005832:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005836:	2b15      	cmp	r3, #21
 8005838:	d8f6      	bhi.n	8005828 <_printf_i+0x28>
 800583a:	a101      	add	r1, pc, #4	@ (adr r1, 8005840 <_printf_i+0x40>)
 800583c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005840:	08005899 	.word	0x08005899
 8005844:	080058ad 	.word	0x080058ad
 8005848:	08005829 	.word	0x08005829
 800584c:	08005829 	.word	0x08005829
 8005850:	08005829 	.word	0x08005829
 8005854:	08005829 	.word	0x08005829
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005829 	.word	0x08005829
 8005860:	08005829 	.word	0x08005829
 8005864:	08005829 	.word	0x08005829
 8005868:	08005829 	.word	0x08005829
 800586c:	080059af 	.word	0x080059af
 8005870:	080058d7 	.word	0x080058d7
 8005874:	08005969 	.word	0x08005969
 8005878:	08005829 	.word	0x08005829
 800587c:	08005829 	.word	0x08005829
 8005880:	080059d1 	.word	0x080059d1
 8005884:	08005829 	.word	0x08005829
 8005888:	080058d7 	.word	0x080058d7
 800588c:	08005829 	.word	0x08005829
 8005890:	08005829 	.word	0x08005829
 8005894:	08005971 	.word	0x08005971
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6032      	str	r2, [r6, #0]
 80058a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058a8:	2301      	movs	r3, #1
 80058aa:	e09e      	b.n	80059ea <_printf_i+0x1ea>
 80058ac:	6833      	ldr	r3, [r6, #0]
 80058ae:	6820      	ldr	r0, [r4, #0]
 80058b0:	1d19      	adds	r1, r3, #4
 80058b2:	6031      	str	r1, [r6, #0]
 80058b4:	0606      	lsls	r6, r0, #24
 80058b6:	d501      	bpl.n	80058bc <_printf_i+0xbc>
 80058b8:	681d      	ldr	r5, [r3, #0]
 80058ba:	e003      	b.n	80058c4 <_printf_i+0xc4>
 80058bc:	0645      	lsls	r5, r0, #25
 80058be:	d5fb      	bpl.n	80058b8 <_printf_i+0xb8>
 80058c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058c4:	2d00      	cmp	r5, #0
 80058c6:	da03      	bge.n	80058d0 <_printf_i+0xd0>
 80058c8:	232d      	movs	r3, #45	@ 0x2d
 80058ca:	426d      	negs	r5, r5
 80058cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058d0:	230a      	movs	r3, #10
 80058d2:	4859      	ldr	r0, [pc, #356]	@ (8005a38 <_printf_i+0x238>)
 80058d4:	e011      	b.n	80058fa <_printf_i+0xfa>
 80058d6:	6821      	ldr	r1, [r4, #0]
 80058d8:	6833      	ldr	r3, [r6, #0]
 80058da:	0608      	lsls	r0, r1, #24
 80058dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80058e0:	d402      	bmi.n	80058e8 <_printf_i+0xe8>
 80058e2:	0649      	lsls	r1, r1, #25
 80058e4:	bf48      	it	mi
 80058e6:	b2ad      	uxthmi	r5, r5
 80058e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	bf14      	ite	ne
 80058ee:	230a      	movne	r3, #10
 80058f0:	2308      	moveq	r3, #8
 80058f2:	4851      	ldr	r0, [pc, #324]	@ (8005a38 <_printf_i+0x238>)
 80058f4:	2100      	movs	r1, #0
 80058f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058fa:	6866      	ldr	r6, [r4, #4]
 80058fc:	2e00      	cmp	r6, #0
 80058fe:	bfa8      	it	ge
 8005900:	6821      	ldrge	r1, [r4, #0]
 8005902:	60a6      	str	r6, [r4, #8]
 8005904:	bfa4      	itt	ge
 8005906:	f021 0104 	bicge.w	r1, r1, #4
 800590a:	6021      	strge	r1, [r4, #0]
 800590c:	b90d      	cbnz	r5, 8005912 <_printf_i+0x112>
 800590e:	2e00      	cmp	r6, #0
 8005910:	d04b      	beq.n	80059aa <_printf_i+0x1aa>
 8005912:	4616      	mov	r6, r2
 8005914:	fbb5 f1f3 	udiv	r1, r5, r3
 8005918:	fb03 5711 	mls	r7, r3, r1, r5
 800591c:	5dc7      	ldrb	r7, [r0, r7]
 800591e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005922:	462f      	mov	r7, r5
 8005924:	42bb      	cmp	r3, r7
 8005926:	460d      	mov	r5, r1
 8005928:	d9f4      	bls.n	8005914 <_printf_i+0x114>
 800592a:	2b08      	cmp	r3, #8
 800592c:	d10b      	bne.n	8005946 <_printf_i+0x146>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	07df      	lsls	r7, r3, #31
 8005932:	d508      	bpl.n	8005946 <_printf_i+0x146>
 8005934:	6923      	ldr	r3, [r4, #16]
 8005936:	6861      	ldr	r1, [r4, #4]
 8005938:	4299      	cmp	r1, r3
 800593a:	bfde      	ittt	le
 800593c:	2330      	movle	r3, #48	@ 0x30
 800593e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005942:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005946:	1b92      	subs	r2, r2, r6
 8005948:	6122      	str	r2, [r4, #16]
 800594a:	464b      	mov	r3, r9
 800594c:	4621      	mov	r1, r4
 800594e:	4640      	mov	r0, r8
 8005950:	f8cd a000 	str.w	sl, [sp]
 8005954:	aa03      	add	r2, sp, #12
 8005956:	f7ff fee1 	bl	800571c <_printf_common>
 800595a:	3001      	adds	r0, #1
 800595c:	d14a      	bne.n	80059f4 <_printf_i+0x1f4>
 800595e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005962:	b004      	add	sp, #16
 8005964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	2778      	movs	r7, #120	@ 0x78
 8005972:	4832      	ldr	r0, [pc, #200]	@ (8005a3c <_printf_i+0x23c>)
 8005974:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	6831      	ldr	r1, [r6, #0]
 800597c:	061f      	lsls	r7, r3, #24
 800597e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005982:	d402      	bmi.n	800598a <_printf_i+0x18a>
 8005984:	065f      	lsls	r7, r3, #25
 8005986:	bf48      	it	mi
 8005988:	b2ad      	uxthmi	r5, r5
 800598a:	6031      	str	r1, [r6, #0]
 800598c:	07d9      	lsls	r1, r3, #31
 800598e:	bf44      	itt	mi
 8005990:	f043 0320 	orrmi.w	r3, r3, #32
 8005994:	6023      	strmi	r3, [r4, #0]
 8005996:	b11d      	cbz	r5, 80059a0 <_printf_i+0x1a0>
 8005998:	2310      	movs	r3, #16
 800599a:	e7ab      	b.n	80058f4 <_printf_i+0xf4>
 800599c:	4826      	ldr	r0, [pc, #152]	@ (8005a38 <_printf_i+0x238>)
 800599e:	e7e9      	b.n	8005974 <_printf_i+0x174>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	f023 0320 	bic.w	r3, r3, #32
 80059a6:	6023      	str	r3, [r4, #0]
 80059a8:	e7f6      	b.n	8005998 <_printf_i+0x198>
 80059aa:	4616      	mov	r6, r2
 80059ac:	e7bd      	b.n	800592a <_printf_i+0x12a>
 80059ae:	6833      	ldr	r3, [r6, #0]
 80059b0:	6825      	ldr	r5, [r4, #0]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6961      	ldr	r1, [r4, #20]
 80059b6:	6030      	str	r0, [r6, #0]
 80059b8:	062e      	lsls	r6, r5, #24
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	d501      	bpl.n	80059c2 <_printf_i+0x1c2>
 80059be:	6019      	str	r1, [r3, #0]
 80059c0:	e002      	b.n	80059c8 <_printf_i+0x1c8>
 80059c2:	0668      	lsls	r0, r5, #25
 80059c4:	d5fb      	bpl.n	80059be <_printf_i+0x1be>
 80059c6:	8019      	strh	r1, [r3, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	4616      	mov	r6, r2
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	e7bc      	b.n	800594a <_printf_i+0x14a>
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	2100      	movs	r1, #0
 80059d4:	1d1a      	adds	r2, r3, #4
 80059d6:	6032      	str	r2, [r6, #0]
 80059d8:	681e      	ldr	r6, [r3, #0]
 80059da:	6862      	ldr	r2, [r4, #4]
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 fa55 	bl	8005e8c <memchr>
 80059e2:	b108      	cbz	r0, 80059e8 <_printf_i+0x1e8>
 80059e4:	1b80      	subs	r0, r0, r6
 80059e6:	6060      	str	r0, [r4, #4]
 80059e8:	6863      	ldr	r3, [r4, #4]
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	2300      	movs	r3, #0
 80059ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f2:	e7aa      	b.n	800594a <_printf_i+0x14a>
 80059f4:	4632      	mov	r2, r6
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	47d0      	blx	sl
 80059fe:	3001      	adds	r0, #1
 8005a00:	d0ad      	beq.n	800595e <_printf_i+0x15e>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	079b      	lsls	r3, r3, #30
 8005a06:	d413      	bmi.n	8005a30 <_printf_i+0x230>
 8005a08:	68e0      	ldr	r0, [r4, #12]
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	bfb8      	it	lt
 8005a10:	4618      	movlt	r0, r3
 8005a12:	e7a6      	b.n	8005962 <_printf_i+0x162>
 8005a14:	2301      	movs	r3, #1
 8005a16:	4632      	mov	r2, r6
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	47d0      	blx	sl
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d09d      	beq.n	800595e <_printf_i+0x15e>
 8005a22:	3501      	adds	r5, #1
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1a5b      	subs	r3, r3, r1
 8005a2a:	42ab      	cmp	r3, r5
 8005a2c:	dcf2      	bgt.n	8005a14 <_printf_i+0x214>
 8005a2e:	e7eb      	b.n	8005a08 <_printf_i+0x208>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f104 0619 	add.w	r6, r4, #25
 8005a36:	e7f5      	b.n	8005a24 <_printf_i+0x224>
 8005a38:	08007918 	.word	0x08007918
 8005a3c:	08007929 	.word	0x08007929

08005a40 <std>:
 8005a40:	2300      	movs	r3, #0
 8005a42:	b510      	push	{r4, lr}
 8005a44:	4604      	mov	r4, r0
 8005a46:	e9c0 3300 	strd	r3, r3, [r0]
 8005a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a4e:	6083      	str	r3, [r0, #8]
 8005a50:	8181      	strh	r1, [r0, #12]
 8005a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a54:	81c2      	strh	r2, [r0, #14]
 8005a56:	6183      	str	r3, [r0, #24]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	305c      	adds	r0, #92	@ 0x5c
 8005a5e:	f000 f989 	bl	8005d74 <memset>
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <std+0x58>)
 8005a64:	6224      	str	r4, [r4, #32]
 8005a66:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <std+0x5c>)
 8005a6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <std+0x60>)
 8005a6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a70:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <std+0x64>)
 8005a72:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a74:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa8 <std+0x68>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d006      	beq.n	8005a88 <std+0x48>
 8005a7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a7e:	4294      	cmp	r4, r2
 8005a80:	d002      	beq.n	8005a88 <std+0x48>
 8005a82:	33d0      	adds	r3, #208	@ 0xd0
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d105      	bne.n	8005a94 <std+0x54>
 8005a88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7fc b8ef 	b.w	8001c72 <__retarget_lock_init_recursive>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	08005bc5 	.word	0x08005bc5
 8005a9c:	08005be7 	.word	0x08005be7
 8005aa0:	08005c1f 	.word	0x08005c1f
 8005aa4:	08005c43 	.word	0x08005c43
 8005aa8:	200009c8 	.word	0x200009c8

08005aac <stdio_exit_handler>:
 8005aac:	4a02      	ldr	r2, [pc, #8]	@ (8005ab8 <stdio_exit_handler+0xc>)
 8005aae:	4903      	ldr	r1, [pc, #12]	@ (8005abc <stdio_exit_handler+0x10>)
 8005ab0:	4803      	ldr	r0, [pc, #12]	@ (8005ac0 <stdio_exit_handler+0x14>)
 8005ab2:	f000 b869 	b.w	8005b88 <_fwalk_sglue>
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c
 8005abc:	080075e9 	.word	0x080075e9
 8005ac0:	2000001c 	.word	0x2000001c

08005ac4 <cleanup_stdio>:
 8005ac4:	6841      	ldr	r1, [r0, #4]
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <cleanup_stdio+0x34>)
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	4299      	cmp	r1, r3
 8005acc:	4604      	mov	r4, r0
 8005ace:	d001      	beq.n	8005ad4 <cleanup_stdio+0x10>
 8005ad0:	f001 fd8a 	bl	80075e8 <_fflush_r>
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <cleanup_stdio+0x38>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <cleanup_stdio+0x1e>
 8005adc:	4620      	mov	r0, r4
 8005ade:	f001 fd83 	bl	80075e8 <_fflush_r>
 8005ae2:	68e1      	ldr	r1, [r4, #12]
 8005ae4:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <cleanup_stdio+0x3c>)
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d004      	beq.n	8005af4 <cleanup_stdio+0x30>
 8005aea:	4620      	mov	r0, r4
 8005aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af0:	f001 bd7a 	b.w	80075e8 <_fflush_r>
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	bf00      	nop
 8005af8:	200009c8 	.word	0x200009c8
 8005afc:	20000a30 	.word	0x20000a30
 8005b00:	20000a98 	.word	0x20000a98

08005b04 <global_stdio_init.part.0>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <global_stdio_init.part.0+0x30>)
 8005b08:	4c0b      	ldr	r4, [pc, #44]	@ (8005b38 <global_stdio_init.part.0+0x34>)
 8005b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b3c <global_stdio_init.part.0+0x38>)
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	2104      	movs	r1, #4
 8005b12:	2200      	movs	r2, #0
 8005b14:	f7ff ff94 	bl	8005a40 <std>
 8005b18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2109      	movs	r1, #9
 8005b20:	f7ff ff8e 	bl	8005a40 <std>
 8005b24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b28:	2202      	movs	r2, #2
 8005b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2e:	2112      	movs	r1, #18
 8005b30:	f7ff bf86 	b.w	8005a40 <std>
 8005b34:	20000b00 	.word	0x20000b00
 8005b38:	200009c8 	.word	0x200009c8
 8005b3c:	08005aad 	.word	0x08005aad

08005b40 <__sfp_lock_acquire>:
 8005b40:	4801      	ldr	r0, [pc, #4]	@ (8005b48 <__sfp_lock_acquire+0x8>)
 8005b42:	f7fc b8bd 	b.w	8001cc0 <__retarget_lock_acquire_recursive>
 8005b46:	bf00      	nop
 8005b48:	20000518 	.word	0x20000518

08005b4c <__sfp_lock_release>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	@ (8005b54 <__sfp_lock_release+0x8>)
 8005b4e:	f7fc b8cc 	b.w	8001cea <__retarget_lock_release_recursive>
 8005b52:	bf00      	nop
 8005b54:	20000518 	.word	0x20000518

08005b58 <__sinit>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	f7ff fff0 	bl	8005b40 <__sfp_lock_acquire>
 8005b60:	6a23      	ldr	r3, [r4, #32]
 8005b62:	b11b      	cbz	r3, 8005b6c <__sinit+0x14>
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	f7ff bff0 	b.w	8005b4c <__sfp_lock_release>
 8005b6c:	4b04      	ldr	r3, [pc, #16]	@ (8005b80 <__sinit+0x28>)
 8005b6e:	6223      	str	r3, [r4, #32]
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <__sinit+0x2c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f5      	bne.n	8005b64 <__sinit+0xc>
 8005b78:	f7ff ffc4 	bl	8005b04 <global_stdio_init.part.0>
 8005b7c:	e7f2      	b.n	8005b64 <__sinit+0xc>
 8005b7e:	bf00      	nop
 8005b80:	08005ac5 	.word	0x08005ac5
 8005b84:	20000b00 	.word	0x20000b00

08005b88 <_fwalk_sglue>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	4688      	mov	r8, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	2600      	movs	r6, #0
 8005b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b98:	f1b9 0901 	subs.w	r9, r9, #1
 8005b9c:	d505      	bpl.n	8005baa <_fwalk_sglue+0x22>
 8005b9e:	6824      	ldr	r4, [r4, #0]
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f7      	bne.n	8005b94 <_fwalk_sglue+0xc>
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d907      	bls.n	8005bc0 <_fwalk_sglue+0x38>
 8005bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	d003      	beq.n	8005bc0 <_fwalk_sglue+0x38>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c0      	blx	r8
 8005bbe:	4306      	orrs	r6, r0
 8005bc0:	3568      	adds	r5, #104	@ 0x68
 8005bc2:	e7e9      	b.n	8005b98 <_fwalk_sglue+0x10>

08005bc4 <__sread>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bcc:	f000 f900 	bl	8005dd0 <_read_r>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	bfab      	itete	ge
 8005bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd8:	181b      	addge	r3, r3, r0
 8005bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bde:	bfac      	ite	ge
 8005be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005be2:	81a3      	strhlt	r3, [r4, #12]
 8005be4:	bd10      	pop	{r4, pc}

08005be6 <__swrite>:
 8005be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	461f      	mov	r7, r3
 8005bec:	898b      	ldrh	r3, [r1, #12]
 8005bee:	4605      	mov	r5, r0
 8005bf0:	05db      	lsls	r3, r3, #23
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	d505      	bpl.n	8005c04 <__swrite+0x1e>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	f000 f8d4 	bl	8005dac <_lseek_r>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	4632      	mov	r2, r6
 8005c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c0c:	81a3      	strh	r3, [r4, #12]
 8005c0e:	4628      	mov	r0, r5
 8005c10:	463b      	mov	r3, r7
 8005c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1a:	f000 b8fb 	b.w	8005e14 <_write_r>

08005c1e <__sseek>:
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	460c      	mov	r4, r1
 8005c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c26:	f000 f8c1 	bl	8005dac <_lseek_r>
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	bf15      	itete	ne
 8005c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c3a:	81a3      	strheq	r3, [r4, #12]
 8005c3c:	bf18      	it	ne
 8005c3e:	81a3      	strhne	r3, [r4, #12]
 8005c40:	bd10      	pop	{r4, pc}

08005c42 <__sclose>:
 8005c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c46:	f000 b8a1 	b.w	8005d8c <_close_r>

08005c4a <__swbuf_r>:
 8005c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	4614      	mov	r4, r2
 8005c50:	4605      	mov	r5, r0
 8005c52:	b118      	cbz	r0, 8005c5c <__swbuf_r+0x12>
 8005c54:	6a03      	ldr	r3, [r0, #32]
 8005c56:	b90b      	cbnz	r3, 8005c5c <__swbuf_r+0x12>
 8005c58:	f7ff ff7e 	bl	8005b58 <__sinit>
 8005c5c:	69a3      	ldr	r3, [r4, #24]
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	071a      	lsls	r2, r3, #28
 8005c64:	d501      	bpl.n	8005c6a <__swbuf_r+0x20>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b943      	cbnz	r3, 8005c7c <__swbuf_r+0x32>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f82b 	bl	8005cc8 <__swsetup_r>
 8005c72:	b118      	cbz	r0, 8005c7c <__swbuf_r+0x32>
 8005c74:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005c78:	4638      	mov	r0, r7
 8005c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	6922      	ldr	r2, [r4, #16]
 8005c80:	b2f6      	uxtb	r6, r6
 8005c82:	1a98      	subs	r0, r3, r2
 8005c84:	6963      	ldr	r3, [r4, #20]
 8005c86:	4637      	mov	r7, r6
 8005c88:	4283      	cmp	r3, r0
 8005c8a:	dc05      	bgt.n	8005c98 <__swbuf_r+0x4e>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f001 fcaa 	bl	80075e8 <_fflush_r>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d1ed      	bne.n	8005c74 <__swbuf_r+0x2a>
 8005c98:	68a3      	ldr	r3, [r4, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	6022      	str	r2, [r4, #0]
 8005ca4:	701e      	strb	r6, [r3, #0]
 8005ca6:	6962      	ldr	r2, [r4, #20]
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d004      	beq.n	8005cb8 <__swbuf_r+0x6e>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d5e1      	bpl.n	8005c78 <__swbuf_r+0x2e>
 8005cb4:	2e0a      	cmp	r6, #10
 8005cb6:	d1df      	bne.n	8005c78 <__swbuf_r+0x2e>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f001 fc94 	bl	80075e8 <_fflush_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0d9      	beq.n	8005c78 <__swbuf_r+0x2e>
 8005cc4:	e7d6      	b.n	8005c74 <__swbuf_r+0x2a>
	...

08005cc8 <__swsetup_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4b29      	ldr	r3, [pc, #164]	@ (8005d70 <__swsetup_r+0xa8>)
 8005ccc:	4605      	mov	r5, r0
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	b118      	cbz	r0, 8005cdc <__swsetup_r+0x14>
 8005cd4:	6a03      	ldr	r3, [r0, #32]
 8005cd6:	b90b      	cbnz	r3, 8005cdc <__swsetup_r+0x14>
 8005cd8:	f7ff ff3e 	bl	8005b58 <__sinit>
 8005cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce0:	0719      	lsls	r1, r3, #28
 8005ce2:	d422      	bmi.n	8005d2a <__swsetup_r+0x62>
 8005ce4:	06da      	lsls	r2, r3, #27
 8005ce6:	d407      	bmi.n	8005cf8 <__swsetup_r+0x30>
 8005ce8:	2209      	movs	r2, #9
 8005cea:	602a      	str	r2, [r5, #0]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	e033      	b.n	8005d60 <__swsetup_r+0x98>
 8005cf8:	0758      	lsls	r0, r3, #29
 8005cfa:	d512      	bpl.n	8005d22 <__swsetup_r+0x5a>
 8005cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cfe:	b141      	cbz	r1, 8005d12 <__swsetup_r+0x4a>
 8005d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d04:	4299      	cmp	r1, r3
 8005d06:	d002      	beq.n	8005d0e <__swsetup_r+0x46>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f7ff f93f 	bl	8004f8c <_free_r>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f043 0308 	orr.w	r3, r3, #8
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	b94b      	cbnz	r3, 8005d42 <__swsetup_r+0x7a>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d38:	d003      	beq.n	8005d42 <__swsetup_r+0x7a>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f001 fca0 	bl	8007682 <__smakebuf_r>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	f013 0201 	ands.w	r2, r3, #1
 8005d4a:	d00a      	beq.n	8005d62 <__swsetup_r+0x9a>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60a2      	str	r2, [r4, #8]
 8005d50:	6962      	ldr	r2, [r4, #20]
 8005d52:	4252      	negs	r2, r2
 8005d54:	61a2      	str	r2, [r4, #24]
 8005d56:	6922      	ldr	r2, [r4, #16]
 8005d58:	b942      	cbnz	r2, 8005d6c <__swsetup_r+0xa4>
 8005d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d5e:	d1c5      	bne.n	8005cec <__swsetup_r+0x24>
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	0799      	lsls	r1, r3, #30
 8005d64:	bf58      	it	pl
 8005d66:	6962      	ldrpl	r2, [r4, #20]
 8005d68:	60a2      	str	r2, [r4, #8]
 8005d6a:	e7f4      	b.n	8005d56 <__swsetup_r+0x8e>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7f7      	b.n	8005d60 <__swsetup_r+0x98>
 8005d70:	20000018 	.word	0x20000018

08005d74 <memset>:
 8005d74:	4603      	mov	r3, r0
 8005d76:	4402      	add	r2, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <_localeconv_r>:
 8005d84:	4800      	ldr	r0, [pc, #0]	@ (8005d88 <_localeconv_r+0x4>)
 8005d86:	4770      	bx	lr
 8005d88:	20000158 	.word	0x20000158

08005d8c <_close_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4d05      	ldr	r5, [pc, #20]	@ (8005da8 <_close_r+0x1c>)
 8005d92:	4604      	mov	r4, r0
 8005d94:	4608      	mov	r0, r1
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	f7fb fb17 	bl	80013ca <_close>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d102      	bne.n	8005da6 <_close_r+0x1a>
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	b103      	cbz	r3, 8005da6 <_close_r+0x1a>
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	bd38      	pop	{r3, r4, r5, pc}
 8005da8:	20000b04 	.word	0x20000b04

08005dac <_lseek_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	2200      	movs	r2, #0
 8005db6:	4d05      	ldr	r5, [pc, #20]	@ (8005dcc <_lseek_r+0x20>)
 8005db8:	602a      	str	r2, [r5, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f7fb fb29 	bl	8001412 <_lseek>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_lseek_r+0x1e>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_lseek_r+0x1e>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	20000b04 	.word	0x20000b04

08005dd0 <_read_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4d05      	ldr	r5, [pc, #20]	@ (8005df0 <_read_r+0x20>)
 8005ddc:	602a      	str	r2, [r5, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f7fb fad6 	bl	8001390 <_read>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_read_r+0x1e>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_read_r+0x1e>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000b04 	.word	0x20000b04

08005df4 <_sbrk_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	2300      	movs	r3, #0
 8005df8:	4d05      	ldr	r5, [pc, #20]	@ (8005e10 <_sbrk_r+0x1c>)
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	f7fb fb14 	bl	800142c <_sbrk>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_sbrk_r+0x1a>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_sbrk_r+0x1a>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000b04 	.word	0x20000b04

08005e14 <_write_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4d05      	ldr	r5, [pc, #20]	@ (8005e34 <_write_r+0x20>)
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f7fb fe6a 	bl	8001afc <_write>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_write_r+0x1e>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_write_r+0x1e>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000b04 	.word	0x20000b04

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	@ (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000018 	.word	0x20000018

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	2600      	movs	r6, #0
 8005e48:	4d0c      	ldr	r5, [pc, #48]	@ (8005e7c <__libc_init_array+0x38>)
 8005e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	f001 fd24 	bl	80078a0 <_init>
 8005e58:	2600      	movs	r6, #0
 8005e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8005e84 <__libc_init_array+0x40>)
 8005e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8005e88 <__libc_init_array+0x44>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08007c80 	.word	0x08007c80
 8005e80:	08007c80 	.word	0x08007c80
 8005e84:	08007c80 	.word	0x08007c80
 8005e88:	08007c84 	.word	0x08007c84

08005e8c <memchr>:
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	b2c9      	uxtb	r1, r1
 8005e92:	4402      	add	r2, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	d101      	bne.n	8005e9e <memchr+0x12>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e003      	b.n	8005ea6 <memchr+0x1a>
 8005e9e:	7804      	ldrb	r4, [r0, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	428c      	cmp	r4, r1
 8005ea4:	d1f6      	bne.n	8005e94 <memchr+0x8>
 8005ea6:	bd10      	pop	{r4, pc}

08005ea8 <memcpy>:
 8005ea8:	440a      	add	r2, r1
 8005eaa:	4291      	cmp	r1, r2
 8005eac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005eb0:	d100      	bne.n	8005eb4 <memcpy+0xc>
 8005eb2:	4770      	bx	lr
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec0:	d1f9      	bne.n	8005eb6 <memcpy+0xe>
 8005ec2:	bd10      	pop	{r4, pc}

08005ec4 <quorem>:
 8005ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	6903      	ldr	r3, [r0, #16]
 8005eca:	690c      	ldr	r4, [r1, #16]
 8005ecc:	4607      	mov	r7, r0
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	db7e      	blt.n	8005fd0 <quorem+0x10c>
 8005ed2:	3c01      	subs	r4, #1
 8005ed4:	00a3      	lsls	r3, r4, #2
 8005ed6:	f100 0514 	add.w	r5, r0, #20
 8005eda:	f101 0814 	add.w	r8, r1, #20
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ef6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005efa:	d32e      	bcc.n	8005f5a <quorem+0x96>
 8005efc:	f04f 0a00 	mov.w	sl, #0
 8005f00:	46c4      	mov	ip, r8
 8005f02:	46ae      	mov	lr, r5
 8005f04:	46d3      	mov	fp, sl
 8005f06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f0a:	b298      	uxth	r0, r3
 8005f0c:	fb06 a000 	mla	r0, r6, r0, sl
 8005f10:	0c1b      	lsrs	r3, r3, #16
 8005f12:	0c02      	lsrs	r2, r0, #16
 8005f14:	fb06 2303 	mla	r3, r6, r3, r2
 8005f18:	f8de 2000 	ldr.w	r2, [lr]
 8005f1c:	b280      	uxth	r0, r0
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	1a12      	subs	r2, r2, r0
 8005f22:	445a      	add	r2, fp
 8005f24:	f8de 0000 	ldr.w	r0, [lr]
 8005f28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005f32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005f36:	b292      	uxth	r2, r2
 8005f38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005f3c:	45e1      	cmp	r9, ip
 8005f3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f42:	f84e 2b04 	str.w	r2, [lr], #4
 8005f46:	d2de      	bcs.n	8005f06 <quorem+0x42>
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	58eb      	ldr	r3, [r5, r3]
 8005f4c:	b92b      	cbnz	r3, 8005f5a <quorem+0x96>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	3b04      	subs	r3, #4
 8005f52:	429d      	cmp	r5, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	d32f      	bcc.n	8005fb8 <quorem+0xf4>
 8005f58:	613c      	str	r4, [r7, #16]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f001 f87c 	bl	8007058 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	db25      	blt.n	8005fb0 <quorem+0xec>
 8005f64:	4629      	mov	r1, r5
 8005f66:	2000      	movs	r0, #0
 8005f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f6c:	f8d1 c000 	ldr.w	ip, [r1]
 8005f70:	fa1f fe82 	uxth.w	lr, r2
 8005f74:	fa1f f38c 	uxth.w	r3, ip
 8005f78:	eba3 030e 	sub.w	r3, r3, lr
 8005f7c:	4403      	add	r3, r0
 8005f7e:	0c12      	lsrs	r2, r2, #16
 8005f80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	45c1      	cmp	r9, r8
 8005f90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f94:	f841 3b04 	str.w	r3, [r1], #4
 8005f98:	d2e6      	bcs.n	8005f68 <quorem+0xa4>
 8005f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fa2:	b922      	cbnz	r2, 8005fae <quorem+0xea>
 8005fa4:	3b04      	subs	r3, #4
 8005fa6:	429d      	cmp	r5, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	d30b      	bcc.n	8005fc4 <quorem+0x100>
 8005fac:	613c      	str	r4, [r7, #16]
 8005fae:	3601      	adds	r6, #1
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	b003      	add	sp, #12
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	3b04      	subs	r3, #4
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	d1cb      	bne.n	8005f58 <quorem+0x94>
 8005fc0:	3c01      	subs	r4, #1
 8005fc2:	e7c6      	b.n	8005f52 <quorem+0x8e>
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	3b04      	subs	r3, #4
 8005fc8:	2a00      	cmp	r2, #0
 8005fca:	d1ef      	bne.n	8005fac <quorem+0xe8>
 8005fcc:	3c01      	subs	r4, #1
 8005fce:	e7ea      	b.n	8005fa6 <quorem+0xe2>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e7ee      	b.n	8005fb2 <quorem+0xee>
 8005fd4:	0000      	movs	r0, r0
	...

08005fd8 <_dtoa_r>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4614      	mov	r4, r2
 8005fde:	461d      	mov	r5, r3
 8005fe0:	69c7      	ldr	r7, [r0, #28]
 8005fe2:	b097      	sub	sp, #92	@ 0x5c
 8005fe4:	4683      	mov	fp, r0
 8005fe6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005fea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005fec:	b97f      	cbnz	r7, 800600e <_dtoa_r+0x36>
 8005fee:	2010      	movs	r0, #16
 8005ff0:	f7ff f814 	bl	800501c <malloc>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ffa:	b920      	cbnz	r0, 8006006 <_dtoa_r+0x2e>
 8005ffc:	21ef      	movs	r1, #239	@ 0xef
 8005ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80062a0 <_dtoa_r+0x2c8>)
 8006000:	48a8      	ldr	r0, [pc, #672]	@ (80062a4 <_dtoa_r+0x2cc>)
 8006002:	f001 fb9d 	bl	8007740 <__assert_func>
 8006006:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800600a:	6007      	str	r7, [r0, #0]
 800600c:	60c7      	str	r7, [r0, #12]
 800600e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	b159      	cbz	r1, 800602e <_dtoa_r+0x56>
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	2301      	movs	r3, #1
 800601a:	4093      	lsls	r3, r2
 800601c:	604a      	str	r2, [r1, #4]
 800601e:	608b      	str	r3, [r1, #8]
 8006020:	4658      	mov	r0, fp
 8006022:	f000 fde1 	bl	8006be8 <_Bfree>
 8006026:	2200      	movs	r2, #0
 8006028:	f8db 301c 	ldr.w	r3, [fp, #28]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	1e2b      	subs	r3, r5, #0
 8006030:	bfaf      	iteee	ge
 8006032:	2300      	movge	r3, #0
 8006034:	2201      	movlt	r2, #1
 8006036:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800603a:	9303      	strlt	r3, [sp, #12]
 800603c:	bfa8      	it	ge
 800603e:	6033      	strge	r3, [r6, #0]
 8006040:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006044:	4b98      	ldr	r3, [pc, #608]	@ (80062a8 <_dtoa_r+0x2d0>)
 8006046:	bfb8      	it	lt
 8006048:	6032      	strlt	r2, [r6, #0]
 800604a:	ea33 0308 	bics.w	r3, r3, r8
 800604e:	d112      	bne.n	8006076 <_dtoa_r+0x9e>
 8006050:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006054:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800605c:	4323      	orrs	r3, r4
 800605e:	f000 8550 	beq.w	8006b02 <_dtoa_r+0xb2a>
 8006062:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006064:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80062ac <_dtoa_r+0x2d4>
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8552 	beq.w	8006b12 <_dtoa_r+0xb3a>
 800606e:	f10a 0303 	add.w	r3, sl, #3
 8006072:	f000 bd4c 	b.w	8006b0e <_dtoa_r+0xb36>
 8006076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800607a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800607e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	2300      	movs	r3, #0
 8006086:	f7fa fc8f 	bl	80009a8 <__aeabi_dcmpeq>
 800608a:	4607      	mov	r7, r0
 800608c:	b158      	cbz	r0, 80060a6 <_dtoa_r+0xce>
 800608e:	2301      	movs	r3, #1
 8006090:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006096:	b113      	cbz	r3, 800609e <_dtoa_r+0xc6>
 8006098:	4b85      	ldr	r3, [pc, #532]	@ (80062b0 <_dtoa_r+0x2d8>)
 800609a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80062b4 <_dtoa_r+0x2dc>
 80060a2:	f000 bd36 	b.w	8006b12 <_dtoa_r+0xb3a>
 80060a6:	ab14      	add	r3, sp, #80	@ 0x50
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	ab15      	add	r3, sp, #84	@ 0x54
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4658      	mov	r0, fp
 80060b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80060b4:	f001 f880 	bl	80071b8 <__d2b>
 80060b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80060bc:	4681      	mov	r9, r0
 80060be:	2e00      	cmp	r6, #0
 80060c0:	d077      	beq.n	80061b2 <_dtoa_r+0x1da>
 80060c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80060cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80060d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80060d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80060da:	4619      	mov	r1, r3
 80060dc:	2200      	movs	r2, #0
 80060de:	4b76      	ldr	r3, [pc, #472]	@ (80062b8 <_dtoa_r+0x2e0>)
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006288 <_dtoa_r+0x2b0>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa f9f5 	bl	80004d8 <__aeabi_dmul>
 80060ee:	a368      	add	r3, pc, #416	@ (adr r3, 8006290 <_dtoa_r+0x2b8>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f7fa f83a 	bl	800016c <__adddf3>
 80060f8:	4604      	mov	r4, r0
 80060fa:	4630      	mov	r0, r6
 80060fc:	460d      	mov	r5, r1
 80060fe:	f7fa f981 	bl	8000404 <__aeabi_i2d>
 8006102:	a365      	add	r3, pc, #404	@ (adr r3, 8006298 <_dtoa_r+0x2c0>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4620      	mov	r0, r4
 8006112:	4629      	mov	r1, r5
 8006114:	f7fa f82a 	bl	800016c <__adddf3>
 8006118:	4604      	mov	r4, r0
 800611a:	460d      	mov	r5, r1
 800611c:	f7fa fc8c 	bl	8000a38 <__aeabi_d2iz>
 8006120:	2200      	movs	r2, #0
 8006122:	4607      	mov	r7, r0
 8006124:	2300      	movs	r3, #0
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fc47 	bl	80009bc <__aeabi_dcmplt>
 800612e:	b140      	cbz	r0, 8006142 <_dtoa_r+0x16a>
 8006130:	4638      	mov	r0, r7
 8006132:	f7fa f967 	bl	8000404 <__aeabi_i2d>
 8006136:	4622      	mov	r2, r4
 8006138:	462b      	mov	r3, r5
 800613a:	f7fa fc35 	bl	80009a8 <__aeabi_dcmpeq>
 800613e:	b900      	cbnz	r0, 8006142 <_dtoa_r+0x16a>
 8006140:	3f01      	subs	r7, #1
 8006142:	2f16      	cmp	r7, #22
 8006144:	d853      	bhi.n	80061ee <_dtoa_r+0x216>
 8006146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800614a:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <_dtoa_r+0x2e4>)
 800614c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006154:	f7fa fc32 	bl	80009bc <__aeabi_dcmplt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d04a      	beq.n	80061f2 <_dtoa_r+0x21a>
 800615c:	2300      	movs	r3, #0
 800615e:	3f01      	subs	r7, #1
 8006160:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006162:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006164:	1b9b      	subs	r3, r3, r6
 8006166:	1e5a      	subs	r2, r3, #1
 8006168:	bf46      	itte	mi
 800616a:	f1c3 0801 	rsbmi	r8, r3, #1
 800616e:	2300      	movmi	r3, #0
 8006170:	f04f 0800 	movpl.w	r8, #0
 8006174:	9209      	str	r2, [sp, #36]	@ 0x24
 8006176:	bf48      	it	mi
 8006178:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800617a:	2f00      	cmp	r7, #0
 800617c:	db3b      	blt.n	80061f6 <_dtoa_r+0x21e>
 800617e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006180:	970e      	str	r7, [sp, #56]	@ 0x38
 8006182:	443b      	add	r3, r7
 8006184:	9309      	str	r3, [sp, #36]	@ 0x24
 8006186:	2300      	movs	r3, #0
 8006188:	930a      	str	r3, [sp, #40]	@ 0x28
 800618a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800618c:	2b09      	cmp	r3, #9
 800618e:	d866      	bhi.n	800625e <_dtoa_r+0x286>
 8006190:	2b05      	cmp	r3, #5
 8006192:	bfc4      	itt	gt
 8006194:	3b04      	subgt	r3, #4
 8006196:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006198:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800619a:	bfc8      	it	gt
 800619c:	2400      	movgt	r4, #0
 800619e:	f1a3 0302 	sub.w	r3, r3, #2
 80061a2:	bfd8      	it	le
 80061a4:	2401      	movle	r4, #1
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d864      	bhi.n	8006274 <_dtoa_r+0x29c>
 80061aa:	e8df f003 	tbb	[pc, r3]
 80061ae:	382b      	.short	0x382b
 80061b0:	5636      	.short	0x5636
 80061b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80061b6:	441e      	add	r6, r3
 80061b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80061bc:	2b20      	cmp	r3, #32
 80061be:	bfc1      	itttt	gt
 80061c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80061c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80061cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80061d0:	bfd6      	itet	le
 80061d2:	f1c3 0320 	rsble	r3, r3, #32
 80061d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061da:	fa04 f003 	lslle.w	r0, r4, r3
 80061de:	f7fa f901 	bl	80003e4 <__aeabi_ui2d>
 80061e2:	2201      	movs	r2, #1
 80061e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061e8:	3e01      	subs	r6, #1
 80061ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80061ec:	e775      	b.n	80060da <_dtoa_r+0x102>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7b6      	b.n	8006160 <_dtoa_r+0x188>
 80061f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80061f4:	e7b5      	b.n	8006162 <_dtoa_r+0x18a>
 80061f6:	427b      	negs	r3, r7
 80061f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061fa:	2300      	movs	r3, #0
 80061fc:	eba8 0807 	sub.w	r8, r8, r7
 8006200:	930e      	str	r3, [sp, #56]	@ 0x38
 8006202:	e7c2      	b.n	800618a <_dtoa_r+0x1b2>
 8006204:	2300      	movs	r3, #0
 8006206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc35      	bgt.n	800627a <_dtoa_r+0x2a2>
 800620e:	2301      	movs	r3, #1
 8006210:	461a      	mov	r2, r3
 8006212:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006216:	9221      	str	r2, [sp, #132]	@ 0x84
 8006218:	e00b      	b.n	8006232 <_dtoa_r+0x25a>
 800621a:	2301      	movs	r3, #1
 800621c:	e7f3      	b.n	8006206 <_dtoa_r+0x22e>
 800621e:	2300      	movs	r3, #0
 8006220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006222:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	9308      	str	r3, [sp, #32]
 8006228:	3301      	adds	r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	bfb8      	it	lt
 8006230:	2301      	movlt	r3, #1
 8006232:	2100      	movs	r1, #0
 8006234:	2204      	movs	r2, #4
 8006236:	f8db 001c 	ldr.w	r0, [fp, #28]
 800623a:	f102 0514 	add.w	r5, r2, #20
 800623e:	429d      	cmp	r5, r3
 8006240:	d91f      	bls.n	8006282 <_dtoa_r+0x2aa>
 8006242:	6041      	str	r1, [r0, #4]
 8006244:	4658      	mov	r0, fp
 8006246:	f000 fc8f 	bl	8006b68 <_Balloc>
 800624a:	4682      	mov	sl, r0
 800624c:	2800      	cmp	r0, #0
 800624e:	d139      	bne.n	80062c4 <_dtoa_r+0x2ec>
 8006250:	4602      	mov	r2, r0
 8006252:	f240 11af 	movw	r1, #431	@ 0x1af
 8006256:	4b1a      	ldr	r3, [pc, #104]	@ (80062c0 <_dtoa_r+0x2e8>)
 8006258:	e6d2      	b.n	8006000 <_dtoa_r+0x28>
 800625a:	2301      	movs	r3, #1
 800625c:	e7e0      	b.n	8006220 <_dtoa_r+0x248>
 800625e:	2401      	movs	r4, #1
 8006260:	2300      	movs	r3, #0
 8006262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006264:	9320      	str	r3, [sp, #128]	@ 0x80
 8006266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800626a:	2200      	movs	r2, #0
 800626c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006270:	2312      	movs	r3, #18
 8006272:	e7d0      	b.n	8006216 <_dtoa_r+0x23e>
 8006274:	2301      	movs	r3, #1
 8006276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006278:	e7f5      	b.n	8006266 <_dtoa_r+0x28e>
 800627a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800627c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006280:	e7d7      	b.n	8006232 <_dtoa_r+0x25a>
 8006282:	3101      	adds	r1, #1
 8006284:	0052      	lsls	r2, r2, #1
 8006286:	e7d8      	b.n	800623a <_dtoa_r+0x262>
 8006288:	636f4361 	.word	0x636f4361
 800628c:	3fd287a7 	.word	0x3fd287a7
 8006290:	8b60c8b3 	.word	0x8b60c8b3
 8006294:	3fc68a28 	.word	0x3fc68a28
 8006298:	509f79fb 	.word	0x509f79fb
 800629c:	3fd34413 	.word	0x3fd34413
 80062a0:	08007947 	.word	0x08007947
 80062a4:	0800795e 	.word	0x0800795e
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	08007943 	.word	0x08007943
 80062b0:	08007917 	.word	0x08007917
 80062b4:	08007916 	.word	0x08007916
 80062b8:	3ff80000 	.word	0x3ff80000
 80062bc:	08007a58 	.word	0x08007a58
 80062c0:	080079b6 	.word	0x080079b6
 80062c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	9b07      	ldr	r3, [sp, #28]
 80062cc:	2b0e      	cmp	r3, #14
 80062ce:	f200 80a4 	bhi.w	800641a <_dtoa_r+0x442>
 80062d2:	2c00      	cmp	r4, #0
 80062d4:	f000 80a1 	beq.w	800641a <_dtoa_r+0x442>
 80062d8:	2f00      	cmp	r7, #0
 80062da:	dd33      	ble.n	8006344 <_dtoa_r+0x36c>
 80062dc:	4b86      	ldr	r3, [pc, #536]	@ (80064f8 <_dtoa_r+0x520>)
 80062de:	f007 020f 	and.w	r2, r7, #15
 80062e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e6:	05f8      	lsls	r0, r7, #23
 80062e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062f4:	d516      	bpl.n	8006324 <_dtoa_r+0x34c>
 80062f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062fa:	4b80      	ldr	r3, [pc, #512]	@ (80064fc <_dtoa_r+0x524>)
 80062fc:	2603      	movs	r6, #3
 80062fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006302:	f7fa fa13 	bl	800072c <__aeabi_ddiv>
 8006306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800630a:	f004 040f 	and.w	r4, r4, #15
 800630e:	4d7b      	ldr	r5, [pc, #492]	@ (80064fc <_dtoa_r+0x524>)
 8006310:	b954      	cbnz	r4, 8006328 <_dtoa_r+0x350>
 8006312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800631a:	f7fa fa07 	bl	800072c <__aeabi_ddiv>
 800631e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006322:	e028      	b.n	8006376 <_dtoa_r+0x39e>
 8006324:	2602      	movs	r6, #2
 8006326:	e7f2      	b.n	800630e <_dtoa_r+0x336>
 8006328:	07e1      	lsls	r1, r4, #31
 800632a:	d508      	bpl.n	800633e <_dtoa_r+0x366>
 800632c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006330:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006334:	f7fa f8d0 	bl	80004d8 <__aeabi_dmul>
 8006338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800633c:	3601      	adds	r6, #1
 800633e:	1064      	asrs	r4, r4, #1
 8006340:	3508      	adds	r5, #8
 8006342:	e7e5      	b.n	8006310 <_dtoa_r+0x338>
 8006344:	f000 80d2 	beq.w	80064ec <_dtoa_r+0x514>
 8006348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800634c:	427c      	negs	r4, r7
 800634e:	4b6a      	ldr	r3, [pc, #424]	@ (80064f8 <_dtoa_r+0x520>)
 8006350:	f004 020f 	and.w	r2, r4, #15
 8006354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	2602      	movs	r6, #2
 8006362:	2300      	movs	r3, #0
 8006364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006368:	4d64      	ldr	r5, [pc, #400]	@ (80064fc <_dtoa_r+0x524>)
 800636a:	1124      	asrs	r4, r4, #4
 800636c:	2c00      	cmp	r4, #0
 800636e:	f040 80b2 	bne.w	80064d6 <_dtoa_r+0x4fe>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d3      	bne.n	800631e <_dtoa_r+0x346>
 8006376:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800637a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80b7 	beq.w	80064f0 <_dtoa_r+0x518>
 8006382:	2200      	movs	r2, #0
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	4b5d      	ldr	r3, [pc, #372]	@ (8006500 <_dtoa_r+0x528>)
 800638a:	f7fa fb17 	bl	80009bc <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f000 80ae 	beq.w	80064f0 <_dtoa_r+0x518>
 8006394:	9b07      	ldr	r3, [sp, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80aa 	beq.w	80064f0 <_dtoa_r+0x518>
 800639c:	9b08      	ldr	r3, [sp, #32]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dd37      	ble.n	8006412 <_dtoa_r+0x43a>
 80063a2:	1e7b      	subs	r3, r7, #1
 80063a4:	4620      	mov	r0, r4
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	2200      	movs	r2, #0
 80063aa:	4629      	mov	r1, r5
 80063ac:	4b55      	ldr	r3, [pc, #340]	@ (8006504 <_dtoa_r+0x52c>)
 80063ae:	f7fa f893 	bl	80004d8 <__aeabi_dmul>
 80063b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b6:	9c08      	ldr	r4, [sp, #32]
 80063b8:	3601      	adds	r6, #1
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7fa f822 	bl	8000404 <__aeabi_i2d>
 80063c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c4:	f7fa f888 	bl	80004d8 <__aeabi_dmul>
 80063c8:	2200      	movs	r2, #0
 80063ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006508 <_dtoa_r+0x530>)
 80063cc:	f7f9 fece 	bl	800016c <__adddf3>
 80063d0:	4605      	mov	r5, r0
 80063d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063d6:	2c00      	cmp	r4, #0
 80063d8:	f040 809a 	bne.w	8006510 <_dtoa_r+0x538>
 80063dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e0:	2200      	movs	r2, #0
 80063e2:	4b4a      	ldr	r3, [pc, #296]	@ (800650c <_dtoa_r+0x534>)
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4633      	mov	r3, r6
 80063f4:	f7fa fb00 	bl	80009f8 <__aeabi_dcmpgt>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	f040 828e 	bne.w	800691a <_dtoa_r+0x942>
 80063fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006402:	462a      	mov	r2, r5
 8006404:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006408:	f7fa fad8 	bl	80009bc <__aeabi_dcmplt>
 800640c:	2800      	cmp	r0, #0
 800640e:	f040 8127 	bne.w	8006660 <_dtoa_r+0x688>
 8006412:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006416:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800641a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800641c:	2b00      	cmp	r3, #0
 800641e:	f2c0 8163 	blt.w	80066e8 <_dtoa_r+0x710>
 8006422:	2f0e      	cmp	r7, #14
 8006424:	f300 8160 	bgt.w	80066e8 <_dtoa_r+0x710>
 8006428:	4b33      	ldr	r3, [pc, #204]	@ (80064f8 <_dtoa_r+0x520>)
 800642a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800642e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006438:	2b00      	cmp	r3, #0
 800643a:	da03      	bge.n	8006444 <_dtoa_r+0x46c>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f340 8100 	ble.w	8006644 <_dtoa_r+0x66c>
 8006444:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006448:	4656      	mov	r6, sl
 800644a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7fa f96b 	bl	800072c <__aeabi_ddiv>
 8006456:	f7fa faef 	bl	8000a38 <__aeabi_d2iz>
 800645a:	4680      	mov	r8, r0
 800645c:	f7f9 ffd2 	bl	8000404 <__aeabi_i2d>
 8006460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006464:	f7fa f838 	bl	80004d8 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7f9 fe7a 	bl	8000168 <__aeabi_dsub>
 8006474:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006478:	9d07      	ldr	r5, [sp, #28]
 800647a:	f806 4b01 	strb.w	r4, [r6], #1
 800647e:	eba6 040a 	sub.w	r4, r6, sl
 8006482:	42a5      	cmp	r5, r4
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	f040 8116 	bne.w	80066b8 <_dtoa_r+0x6e0>
 800648c:	f7f9 fe6e 	bl	800016c <__adddf3>
 8006490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006494:	4604      	mov	r4, r0
 8006496:	460d      	mov	r5, r1
 8006498:	f7fa faae 	bl	80009f8 <__aeabi_dcmpgt>
 800649c:	2800      	cmp	r0, #0
 800649e:	f040 80f8 	bne.w	8006692 <_dtoa_r+0x6ba>
 80064a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80064ae:	b118      	cbz	r0, 80064b8 <_dtoa_r+0x4e0>
 80064b0:	f018 0f01 	tst.w	r8, #1
 80064b4:	f040 80ed 	bne.w	8006692 <_dtoa_r+0x6ba>
 80064b8:	4649      	mov	r1, r9
 80064ba:	4658      	mov	r0, fp
 80064bc:	f000 fb94 	bl	8006be8 <_Bfree>
 80064c0:	2300      	movs	r3, #0
 80064c2:	7033      	strb	r3, [r6, #0]
 80064c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80064c6:	3701      	adds	r7, #1
 80064c8:	601f      	str	r7, [r3, #0]
 80064ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8320 	beq.w	8006b12 <_dtoa_r+0xb3a>
 80064d2:	601e      	str	r6, [r3, #0]
 80064d4:	e31d      	b.n	8006b12 <_dtoa_r+0xb3a>
 80064d6:	07e2      	lsls	r2, r4, #31
 80064d8:	d505      	bpl.n	80064e6 <_dtoa_r+0x50e>
 80064da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064de:	f7f9 fffb 	bl	80004d8 <__aeabi_dmul>
 80064e2:	2301      	movs	r3, #1
 80064e4:	3601      	adds	r6, #1
 80064e6:	1064      	asrs	r4, r4, #1
 80064e8:	3508      	adds	r5, #8
 80064ea:	e73f      	b.n	800636c <_dtoa_r+0x394>
 80064ec:	2602      	movs	r6, #2
 80064ee:	e742      	b.n	8006376 <_dtoa_r+0x39e>
 80064f0:	9c07      	ldr	r4, [sp, #28]
 80064f2:	9704      	str	r7, [sp, #16]
 80064f4:	e761      	b.n	80063ba <_dtoa_r+0x3e2>
 80064f6:	bf00      	nop
 80064f8:	08007a58 	.word	0x08007a58
 80064fc:	08007a30 	.word	0x08007a30
 8006500:	3ff00000 	.word	0x3ff00000
 8006504:	40240000 	.word	0x40240000
 8006508:	401c0000 	.word	0x401c0000
 800650c:	40140000 	.word	0x40140000
 8006510:	4b70      	ldr	r3, [pc, #448]	@ (80066d4 <_dtoa_r+0x6fc>)
 8006512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006518:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800651c:	4454      	add	r4, sl
 800651e:	2900      	cmp	r1, #0
 8006520:	d045      	beq.n	80065ae <_dtoa_r+0x5d6>
 8006522:	2000      	movs	r0, #0
 8006524:	496c      	ldr	r1, [pc, #432]	@ (80066d8 <_dtoa_r+0x700>)
 8006526:	f7fa f901 	bl	800072c <__aeabi_ddiv>
 800652a:	4633      	mov	r3, r6
 800652c:	462a      	mov	r2, r5
 800652e:	f7f9 fe1b 	bl	8000168 <__aeabi_dsub>
 8006532:	4656      	mov	r6, sl
 8006534:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800653c:	f7fa fa7c 	bl	8000a38 <__aeabi_d2iz>
 8006540:	4605      	mov	r5, r0
 8006542:	f7f9 ff5f 	bl	8000404 <__aeabi_i2d>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654e:	f7f9 fe0b 	bl	8000168 <__aeabi_dsub>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	3530      	adds	r5, #48	@ 0x30
 8006558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800655c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006560:	f806 5b01 	strb.w	r5, [r6], #1
 8006564:	f7fa fa2a 	bl	80009bc <__aeabi_dcmplt>
 8006568:	2800      	cmp	r0, #0
 800656a:	d163      	bne.n	8006634 <_dtoa_r+0x65c>
 800656c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006570:	2000      	movs	r0, #0
 8006572:	495a      	ldr	r1, [pc, #360]	@ (80066dc <_dtoa_r+0x704>)
 8006574:	f7f9 fdf8 	bl	8000168 <__aeabi_dsub>
 8006578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800657c:	f7fa fa1e 	bl	80009bc <__aeabi_dcmplt>
 8006580:	2800      	cmp	r0, #0
 8006582:	f040 8087 	bne.w	8006694 <_dtoa_r+0x6bc>
 8006586:	42a6      	cmp	r6, r4
 8006588:	f43f af43 	beq.w	8006412 <_dtoa_r+0x43a>
 800658c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006590:	2200      	movs	r2, #0
 8006592:	4b53      	ldr	r3, [pc, #332]	@ (80066e0 <_dtoa_r+0x708>)
 8006594:	f7f9 ffa0 	bl	80004d8 <__aeabi_dmul>
 8006598:	2200      	movs	r2, #0
 800659a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800659e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a2:	4b4f      	ldr	r3, [pc, #316]	@ (80066e0 <_dtoa_r+0x708>)
 80065a4:	f7f9 ff98 	bl	80004d8 <__aeabi_dmul>
 80065a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ac:	e7c4      	b.n	8006538 <_dtoa_r+0x560>
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7f9 ff91 	bl	80004d8 <__aeabi_dmul>
 80065b6:	4656      	mov	r6, sl
 80065b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80065be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065c2:	f7fa fa39 	bl	8000a38 <__aeabi_d2iz>
 80065c6:	4605      	mov	r5, r0
 80065c8:	f7f9 ff1c 	bl	8000404 <__aeabi_i2d>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	3530      	adds	r5, #48	@ 0x30
 80065de:	f806 5b01 	strb.w	r5, [r6], #1
 80065e2:	42a6      	cmp	r6, r4
 80065e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	d124      	bne.n	8006638 <_dtoa_r+0x660>
 80065ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80065f2:	4b39      	ldr	r3, [pc, #228]	@ (80066d8 <_dtoa_r+0x700>)
 80065f4:	f7f9 fdba 	bl	800016c <__adddf3>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006600:	f7fa f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8006604:	2800      	cmp	r0, #0
 8006606:	d145      	bne.n	8006694 <_dtoa_r+0x6bc>
 8006608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800660c:	2000      	movs	r0, #0
 800660e:	4932      	ldr	r1, [pc, #200]	@ (80066d8 <_dtoa_r+0x700>)
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800661c:	f7fa f9ce 	bl	80009bc <__aeabi_dcmplt>
 8006620:	2800      	cmp	r0, #0
 8006622:	f43f aef6 	beq.w	8006412 <_dtoa_r+0x43a>
 8006626:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006628:	1e73      	subs	r3, r6, #1
 800662a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800662c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006630:	2b30      	cmp	r3, #48	@ 0x30
 8006632:	d0f8      	beq.n	8006626 <_dtoa_r+0x64e>
 8006634:	9f04      	ldr	r7, [sp, #16]
 8006636:	e73f      	b.n	80064b8 <_dtoa_r+0x4e0>
 8006638:	4b29      	ldr	r3, [pc, #164]	@ (80066e0 <_dtoa_r+0x708>)
 800663a:	f7f9 ff4d 	bl	80004d8 <__aeabi_dmul>
 800663e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006642:	e7bc      	b.n	80065be <_dtoa_r+0x5e6>
 8006644:	d10c      	bne.n	8006660 <_dtoa_r+0x688>
 8006646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800664a:	2200      	movs	r2, #0
 800664c:	4b25      	ldr	r3, [pc, #148]	@ (80066e4 <_dtoa_r+0x70c>)
 800664e:	f7f9 ff43 	bl	80004d8 <__aeabi_dmul>
 8006652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006656:	f7fa f9c5 	bl	80009e4 <__aeabi_dcmpge>
 800665a:	2800      	cmp	r0, #0
 800665c:	f000 815b 	beq.w	8006916 <_dtoa_r+0x93e>
 8006660:	2400      	movs	r4, #0
 8006662:	4625      	mov	r5, r4
 8006664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006666:	4656      	mov	r6, sl
 8006668:	43db      	mvns	r3, r3
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	2700      	movs	r7, #0
 800666e:	4621      	mov	r1, r4
 8006670:	4658      	mov	r0, fp
 8006672:	f000 fab9 	bl	8006be8 <_Bfree>
 8006676:	2d00      	cmp	r5, #0
 8006678:	d0dc      	beq.n	8006634 <_dtoa_r+0x65c>
 800667a:	b12f      	cbz	r7, 8006688 <_dtoa_r+0x6b0>
 800667c:	42af      	cmp	r7, r5
 800667e:	d003      	beq.n	8006688 <_dtoa_r+0x6b0>
 8006680:	4639      	mov	r1, r7
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fab0 	bl	8006be8 <_Bfree>
 8006688:	4629      	mov	r1, r5
 800668a:	4658      	mov	r0, fp
 800668c:	f000 faac 	bl	8006be8 <_Bfree>
 8006690:	e7d0      	b.n	8006634 <_dtoa_r+0x65c>
 8006692:	9704      	str	r7, [sp, #16]
 8006694:	4633      	mov	r3, r6
 8006696:	461e      	mov	r6, r3
 8006698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669c:	2a39      	cmp	r2, #57	@ 0x39
 800669e:	d107      	bne.n	80066b0 <_dtoa_r+0x6d8>
 80066a0:	459a      	cmp	sl, r3
 80066a2:	d1f8      	bne.n	8006696 <_dtoa_r+0x6be>
 80066a4:	9a04      	ldr	r2, [sp, #16]
 80066a6:	3201      	adds	r2, #1
 80066a8:	9204      	str	r2, [sp, #16]
 80066aa:	2230      	movs	r2, #48	@ 0x30
 80066ac:	f88a 2000 	strb.w	r2, [sl]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	3201      	adds	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e7bd      	b.n	8006634 <_dtoa_r+0x65c>
 80066b8:	2200      	movs	r2, #0
 80066ba:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <_dtoa_r+0x708>)
 80066bc:	f7f9 ff0c 	bl	80004d8 <__aeabi_dmul>
 80066c0:	2200      	movs	r2, #0
 80066c2:	2300      	movs	r3, #0
 80066c4:	4604      	mov	r4, r0
 80066c6:	460d      	mov	r5, r1
 80066c8:	f7fa f96e 	bl	80009a8 <__aeabi_dcmpeq>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f43f aebc 	beq.w	800644a <_dtoa_r+0x472>
 80066d2:	e6f1      	b.n	80064b8 <_dtoa_r+0x4e0>
 80066d4:	08007a58 	.word	0x08007a58
 80066d8:	3fe00000 	.word	0x3fe00000
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	40240000 	.word	0x40240000
 80066e4:	40140000 	.word	0x40140000
 80066e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	f000 80db 	beq.w	80068a6 <_dtoa_r+0x8ce>
 80066f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066f2:	2a01      	cmp	r2, #1
 80066f4:	f300 80bf 	bgt.w	8006876 <_dtoa_r+0x89e>
 80066f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066fa:	2a00      	cmp	r2, #0
 80066fc:	f000 80b7 	beq.w	800686e <_dtoa_r+0x896>
 8006700:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006704:	4646      	mov	r6, r8
 8006706:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800670a:	2101      	movs	r1, #1
 800670c:	441a      	add	r2, r3
 800670e:	4658      	mov	r0, fp
 8006710:	4498      	add	r8, r3
 8006712:	9209      	str	r2, [sp, #36]	@ 0x24
 8006714:	f000 fb1c 	bl	8006d50 <__i2b>
 8006718:	4605      	mov	r5, r0
 800671a:	b15e      	cbz	r6, 8006734 <_dtoa_r+0x75c>
 800671c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	dd08      	ble.n	8006734 <_dtoa_r+0x75c>
 8006722:	42b3      	cmp	r3, r6
 8006724:	bfa8      	it	ge
 8006726:	4633      	movge	r3, r6
 8006728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800672a:	eba8 0803 	sub.w	r8, r8, r3
 800672e:	1af6      	subs	r6, r6, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	9309      	str	r3, [sp, #36]	@ 0x24
 8006734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006736:	b1f3      	cbz	r3, 8006776 <_dtoa_r+0x79e>
 8006738:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80b7 	beq.w	80068ae <_dtoa_r+0x8d6>
 8006740:	b18c      	cbz	r4, 8006766 <_dtoa_r+0x78e>
 8006742:	4629      	mov	r1, r5
 8006744:	4622      	mov	r2, r4
 8006746:	4658      	mov	r0, fp
 8006748:	f000 fbc0 	bl	8006ecc <__pow5mult>
 800674c:	464a      	mov	r2, r9
 800674e:	4601      	mov	r1, r0
 8006750:	4605      	mov	r5, r0
 8006752:	4658      	mov	r0, fp
 8006754:	f000 fb12 	bl	8006d7c <__multiply>
 8006758:	4649      	mov	r1, r9
 800675a:	9004      	str	r0, [sp, #16]
 800675c:	4658      	mov	r0, fp
 800675e:	f000 fa43 	bl	8006be8 <_Bfree>
 8006762:	9b04      	ldr	r3, [sp, #16]
 8006764:	4699      	mov	r9, r3
 8006766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006768:	1b1a      	subs	r2, r3, r4
 800676a:	d004      	beq.n	8006776 <_dtoa_r+0x79e>
 800676c:	4649      	mov	r1, r9
 800676e:	4658      	mov	r0, fp
 8006770:	f000 fbac 	bl	8006ecc <__pow5mult>
 8006774:	4681      	mov	r9, r0
 8006776:	2101      	movs	r1, #1
 8006778:	4658      	mov	r0, fp
 800677a:	f000 fae9 	bl	8006d50 <__i2b>
 800677e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006780:	4604      	mov	r4, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 81c9 	beq.w	8006b1a <_dtoa_r+0xb42>
 8006788:	461a      	mov	r2, r3
 800678a:	4601      	mov	r1, r0
 800678c:	4658      	mov	r0, fp
 800678e:	f000 fb9d 	bl	8006ecc <__pow5mult>
 8006792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006794:	4604      	mov	r4, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	f300 808f 	bgt.w	80068ba <_dtoa_r+0x8e2>
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 8087 	bne.w	80068b2 <_dtoa_r+0x8da>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8083 	bne.w	80068b6 <_dtoa_r+0x8de>
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067b6:	0d1b      	lsrs	r3, r3, #20
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	b12b      	cbz	r3, 80067c8 <_dtoa_r+0x7f0>
 80067bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	3301      	adds	r3, #1
 80067c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c6:	2301      	movs	r3, #1
 80067c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 81aa 	beq.w	8006b26 <_dtoa_r+0xb4e>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067d8:	6918      	ldr	r0, [r3, #16]
 80067da:	f000 fa6d 	bl	8006cb8 <__hi0bits>
 80067de:	f1c0 0020 	rsb	r0, r0, #32
 80067e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e4:	4418      	add	r0, r3
 80067e6:	f010 001f 	ands.w	r0, r0, #31
 80067ea:	d071      	beq.n	80068d0 <_dtoa_r+0x8f8>
 80067ec:	f1c0 0320 	rsb	r3, r0, #32
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	dd65      	ble.n	80068c0 <_dtoa_r+0x8e8>
 80067f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f6:	f1c0 001c 	rsb	r0, r0, #28
 80067fa:	4403      	add	r3, r0
 80067fc:	4480      	add	r8, r0
 80067fe:	4406      	add	r6, r0
 8006800:	9309      	str	r3, [sp, #36]	@ 0x24
 8006802:	f1b8 0f00 	cmp.w	r8, #0
 8006806:	dd05      	ble.n	8006814 <_dtoa_r+0x83c>
 8006808:	4649      	mov	r1, r9
 800680a:	4642      	mov	r2, r8
 800680c:	4658      	mov	r0, fp
 800680e:	f000 fbb7 	bl	8006f80 <__lshift>
 8006812:	4681      	mov	r9, r0
 8006814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd05      	ble.n	8006826 <_dtoa_r+0x84e>
 800681a:	4621      	mov	r1, r4
 800681c:	461a      	mov	r2, r3
 800681e:	4658      	mov	r0, fp
 8006820:	f000 fbae 	bl	8006f80 <__lshift>
 8006824:	4604      	mov	r4, r0
 8006826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006828:	2b00      	cmp	r3, #0
 800682a:	d053      	beq.n	80068d4 <_dtoa_r+0x8fc>
 800682c:	4621      	mov	r1, r4
 800682e:	4648      	mov	r0, r9
 8006830:	f000 fc12 	bl	8007058 <__mcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	da4d      	bge.n	80068d4 <_dtoa_r+0x8fc>
 8006838:	1e7b      	subs	r3, r7, #1
 800683a:	4649      	mov	r1, r9
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	220a      	movs	r2, #10
 8006840:	2300      	movs	r3, #0
 8006842:	4658      	mov	r0, fp
 8006844:	f000 f9f2 	bl	8006c2c <__multadd>
 8006848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800684a:	4681      	mov	r9, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 816c 	beq.w	8006b2a <_dtoa_r+0xb52>
 8006852:	2300      	movs	r3, #0
 8006854:	4629      	mov	r1, r5
 8006856:	220a      	movs	r2, #10
 8006858:	4658      	mov	r0, fp
 800685a:	f000 f9e7 	bl	8006c2c <__multadd>
 800685e:	9b08      	ldr	r3, [sp, #32]
 8006860:	4605      	mov	r5, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	dc61      	bgt.n	800692a <_dtoa_r+0x952>
 8006866:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006868:	2b02      	cmp	r3, #2
 800686a:	dc3b      	bgt.n	80068e4 <_dtoa_r+0x90c>
 800686c:	e05d      	b.n	800692a <_dtoa_r+0x952>
 800686e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006870:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006874:	e746      	b.n	8006704 <_dtoa_r+0x72c>
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	1e5c      	subs	r4, r3, #1
 800687a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800687c:	42a3      	cmp	r3, r4
 800687e:	bfbf      	itttt	lt
 8006880:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006882:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006884:	1ae3      	sublt	r3, r4, r3
 8006886:	18d2      	addlt	r2, r2, r3
 8006888:	bfa8      	it	ge
 800688a:	1b1c      	subge	r4, r3, r4
 800688c:	9b07      	ldr	r3, [sp, #28]
 800688e:	bfbe      	ittt	lt
 8006890:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006892:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006894:	2400      	movlt	r4, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb5      	itete	lt
 800689a:	eba8 0603 	sublt.w	r6, r8, r3
 800689e:	4646      	movge	r6, r8
 80068a0:	2300      	movlt	r3, #0
 80068a2:	9b07      	ldrge	r3, [sp, #28]
 80068a4:	e730      	b.n	8006708 <_dtoa_r+0x730>
 80068a6:	4646      	mov	r6, r8
 80068a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80068ac:	e735      	b.n	800671a <_dtoa_r+0x742>
 80068ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068b0:	e75c      	b.n	800676c <_dtoa_r+0x794>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e788      	b.n	80067c8 <_dtoa_r+0x7f0>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	e786      	b.n	80067c8 <_dtoa_r+0x7f0>
 80068ba:	2300      	movs	r3, #0
 80068bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80068be:	e788      	b.n	80067d2 <_dtoa_r+0x7fa>
 80068c0:	d09f      	beq.n	8006802 <_dtoa_r+0x82a>
 80068c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c4:	331c      	adds	r3, #28
 80068c6:	441a      	add	r2, r3
 80068c8:	4498      	add	r8, r3
 80068ca:	441e      	add	r6, r3
 80068cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80068ce:	e798      	b.n	8006802 <_dtoa_r+0x82a>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e7f6      	b.n	80068c2 <_dtoa_r+0x8ea>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	9704      	str	r7, [sp, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc20      	bgt.n	800691e <_dtoa_r+0x946>
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	dd1e      	ble.n	8006922 <_dtoa_r+0x94a>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f47f aebc 	bne.w	8006664 <_dtoa_r+0x68c>
 80068ec:	4621      	mov	r1, r4
 80068ee:	2205      	movs	r2, #5
 80068f0:	4658      	mov	r0, fp
 80068f2:	f000 f99b 	bl	8006c2c <__multadd>
 80068f6:	4601      	mov	r1, r0
 80068f8:	4604      	mov	r4, r0
 80068fa:	4648      	mov	r0, r9
 80068fc:	f000 fbac 	bl	8007058 <__mcmp>
 8006900:	2800      	cmp	r0, #0
 8006902:	f77f aeaf 	ble.w	8006664 <_dtoa_r+0x68c>
 8006906:	2331      	movs	r3, #49	@ 0x31
 8006908:	4656      	mov	r6, sl
 800690a:	f806 3b01 	strb.w	r3, [r6], #1
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	e6aa      	b.n	800666c <_dtoa_r+0x694>
 8006916:	9c07      	ldr	r4, [sp, #28]
 8006918:	9704      	str	r7, [sp, #16]
 800691a:	4625      	mov	r5, r4
 800691c:	e7f3      	b.n	8006906 <_dtoa_r+0x92e>
 800691e:	9b07      	ldr	r3, [sp, #28]
 8006920:	9308      	str	r3, [sp, #32]
 8006922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8104 	beq.w	8006b32 <_dtoa_r+0xb5a>
 800692a:	2e00      	cmp	r6, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x962>
 800692e:	4629      	mov	r1, r5
 8006930:	4632      	mov	r2, r6
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fb24 	bl	8006f80 <__lshift>
 8006938:	4605      	mov	r5, r0
 800693a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05a      	beq.n	80069f6 <_dtoa_r+0xa1e>
 8006940:	4658      	mov	r0, fp
 8006942:	6869      	ldr	r1, [r5, #4]
 8006944:	f000 f910 	bl	8006b68 <_Balloc>
 8006948:	4606      	mov	r6, r0
 800694a:	b928      	cbnz	r0, 8006958 <_dtoa_r+0x980>
 800694c:	4602      	mov	r2, r0
 800694e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006952:	4b83      	ldr	r3, [pc, #524]	@ (8006b60 <_dtoa_r+0xb88>)
 8006954:	f7ff bb54 	b.w	8006000 <_dtoa_r+0x28>
 8006958:	692a      	ldr	r2, [r5, #16]
 800695a:	f105 010c 	add.w	r1, r5, #12
 800695e:	3202      	adds	r2, #2
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	300c      	adds	r0, #12
 8006964:	f7ff faa0 	bl	8005ea8 <memcpy>
 8006968:	2201      	movs	r2, #1
 800696a:	4631      	mov	r1, r6
 800696c:	4658      	mov	r0, fp
 800696e:	f000 fb07 	bl	8006f80 <__lshift>
 8006972:	462f      	mov	r7, r5
 8006974:	4605      	mov	r5, r0
 8006976:	f10a 0301 	add.w	r3, sl, #1
 800697a:	9307      	str	r3, [sp, #28]
 800697c:	9b08      	ldr	r3, [sp, #32]
 800697e:	4453      	add	r3, sl
 8006980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	930a      	str	r3, [sp, #40]	@ 0x28
 800698a:	9b07      	ldr	r3, [sp, #28]
 800698c:	4621      	mov	r1, r4
 800698e:	3b01      	subs	r3, #1
 8006990:	4648      	mov	r0, r9
 8006992:	9302      	str	r3, [sp, #8]
 8006994:	f7ff fa96 	bl	8005ec4 <quorem>
 8006998:	4639      	mov	r1, r7
 800699a:	9008      	str	r0, [sp, #32]
 800699c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069a0:	4648      	mov	r0, r9
 80069a2:	f000 fb59 	bl	8007058 <__mcmp>
 80069a6:	462a      	mov	r2, r5
 80069a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80069aa:	4621      	mov	r1, r4
 80069ac:	4658      	mov	r0, fp
 80069ae:	f000 fb6f 	bl	8007090 <__mdiff>
 80069b2:	68c2      	ldr	r2, [r0, #12]
 80069b4:	4606      	mov	r6, r0
 80069b6:	bb02      	cbnz	r2, 80069fa <_dtoa_r+0xa22>
 80069b8:	4601      	mov	r1, r0
 80069ba:	4648      	mov	r0, r9
 80069bc:	f000 fb4c 	bl	8007058 <__mcmp>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4631      	mov	r1, r6
 80069c4:	4658      	mov	r0, fp
 80069c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80069c8:	f000 f90e 	bl	8006be8 <_Bfree>
 80069cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069d0:	9e07      	ldr	r6, [sp, #28]
 80069d2:	ea43 0102 	orr.w	r1, r3, r2
 80069d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d8:	4319      	orrs	r1, r3
 80069da:	d110      	bne.n	80069fe <_dtoa_r+0xa26>
 80069dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069e0:	d029      	beq.n	8006a36 <_dtoa_r+0xa5e>
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd02      	ble.n	80069ee <_dtoa_r+0xa16>
 80069e8:	9b08      	ldr	r3, [sp, #32]
 80069ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	f883 8000 	strb.w	r8, [r3]
 80069f4:	e63b      	b.n	800666e <_dtoa_r+0x696>
 80069f6:	4628      	mov	r0, r5
 80069f8:	e7bb      	b.n	8006972 <_dtoa_r+0x99a>
 80069fa:	2201      	movs	r2, #1
 80069fc:	e7e1      	b.n	80069c2 <_dtoa_r+0x9ea>
 80069fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db04      	blt.n	8006a0e <_dtoa_r+0xa36>
 8006a04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006a06:	430b      	orrs	r3, r1
 8006a08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	d120      	bne.n	8006a50 <_dtoa_r+0xa78>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	dded      	ble.n	80069ee <_dtoa_r+0xa16>
 8006a12:	4649      	mov	r1, r9
 8006a14:	2201      	movs	r2, #1
 8006a16:	4658      	mov	r0, fp
 8006a18:	f000 fab2 	bl	8006f80 <__lshift>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4681      	mov	r9, r0
 8006a20:	f000 fb1a 	bl	8007058 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dc03      	bgt.n	8006a30 <_dtoa_r+0xa58>
 8006a28:	d1e1      	bne.n	80069ee <_dtoa_r+0xa16>
 8006a2a:	f018 0f01 	tst.w	r8, #1
 8006a2e:	d0de      	beq.n	80069ee <_dtoa_r+0xa16>
 8006a30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a34:	d1d8      	bne.n	80069e8 <_dtoa_r+0xa10>
 8006a36:	2339      	movs	r3, #57	@ 0x39
 8006a38:	9a02      	ldr	r2, [sp, #8]
 8006a3a:	7013      	strb	r3, [r2, #0]
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	461e      	mov	r6, r3
 8006a40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	2a39      	cmp	r2, #57	@ 0x39
 8006a48:	d052      	beq.n	8006af0 <_dtoa_r+0xb18>
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e60e      	b.n	800666e <_dtoa_r+0x696>
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	dd07      	ble.n	8006a64 <_dtoa_r+0xa8c>
 8006a54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a58:	d0ed      	beq.n	8006a36 <_dtoa_r+0xa5e>
 8006a5a:	9a02      	ldr	r2, [sp, #8]
 8006a5c:	f108 0301 	add.w	r3, r8, #1
 8006a60:	7013      	strb	r3, [r2, #0]
 8006a62:	e604      	b.n	800666e <_dtoa_r+0x696>
 8006a64:	9b07      	ldr	r3, [sp, #28]
 8006a66:	9a07      	ldr	r2, [sp, #28]
 8006a68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006a6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d028      	beq.n	8006ac4 <_dtoa_r+0xaec>
 8006a72:	4649      	mov	r1, r9
 8006a74:	2300      	movs	r3, #0
 8006a76:	220a      	movs	r2, #10
 8006a78:	4658      	mov	r0, fp
 8006a7a:	f000 f8d7 	bl	8006c2c <__multadd>
 8006a7e:	42af      	cmp	r7, r5
 8006a80:	4681      	mov	r9, r0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	f04f 020a 	mov.w	r2, #10
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4658      	mov	r0, fp
 8006a8e:	d107      	bne.n	8006aa0 <_dtoa_r+0xac8>
 8006a90:	f000 f8cc 	bl	8006c2c <__multadd>
 8006a94:	4607      	mov	r7, r0
 8006a96:	4605      	mov	r5, r0
 8006a98:	9b07      	ldr	r3, [sp, #28]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	9307      	str	r3, [sp, #28]
 8006a9e:	e774      	b.n	800698a <_dtoa_r+0x9b2>
 8006aa0:	f000 f8c4 	bl	8006c2c <__multadd>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4658      	mov	r0, fp
 8006aae:	f000 f8bd 	bl	8006c2c <__multadd>
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	e7f0      	b.n	8006a98 <_dtoa_r+0xac0>
 8006ab6:	9b08      	ldr	r3, [sp, #32]
 8006ab8:	2700      	movs	r7, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bfcc      	ite	gt
 8006abe:	461e      	movgt	r6, r3
 8006ac0:	2601      	movle	r6, #1
 8006ac2:	4456      	add	r6, sl
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f000 fa59 	bl	8006f80 <__lshift>
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4681      	mov	r9, r0
 8006ad2:	f000 fac1 	bl	8007058 <__mcmp>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	dcb0      	bgt.n	8006a3c <_dtoa_r+0xa64>
 8006ada:	d102      	bne.n	8006ae2 <_dtoa_r+0xb0a>
 8006adc:	f018 0f01 	tst.w	r8, #1
 8006ae0:	d1ac      	bne.n	8006a3c <_dtoa_r+0xa64>
 8006ae2:	4633      	mov	r3, r6
 8006ae4:	461e      	mov	r6, r3
 8006ae6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aea:	2a30      	cmp	r2, #48	@ 0x30
 8006aec:	d0fa      	beq.n	8006ae4 <_dtoa_r+0xb0c>
 8006aee:	e5be      	b.n	800666e <_dtoa_r+0x696>
 8006af0:	459a      	cmp	sl, r3
 8006af2:	d1a4      	bne.n	8006a3e <_dtoa_r+0xa66>
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	3301      	adds	r3, #1
 8006af8:	9304      	str	r3, [sp, #16]
 8006afa:	2331      	movs	r3, #49	@ 0x31
 8006afc:	f88a 3000 	strb.w	r3, [sl]
 8006b00:	e5b5      	b.n	800666e <_dtoa_r+0x696>
 8006b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006b64 <_dtoa_r+0xb8c>
 8006b08:	b11b      	cbz	r3, 8006b12 <_dtoa_r+0xb3a>
 8006b0a:	f10a 0308 	add.w	r3, sl, #8
 8006b0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	4650      	mov	r0, sl
 8006b14:	b017      	add	sp, #92	@ 0x5c
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	f77f ae3d 	ble.w	800679c <_dtoa_r+0x7c4>
 8006b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b26:	2001      	movs	r0, #1
 8006b28:	e65b      	b.n	80067e2 <_dtoa_r+0x80a>
 8006b2a:	9b08      	ldr	r3, [sp, #32]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f77f aed6 	ble.w	80068de <_dtoa_r+0x906>
 8006b32:	4656      	mov	r6, sl
 8006b34:	4621      	mov	r1, r4
 8006b36:	4648      	mov	r0, r9
 8006b38:	f7ff f9c4 	bl	8005ec4 <quorem>
 8006b3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b40:	9b08      	ldr	r3, [sp, #32]
 8006b42:	f806 8b01 	strb.w	r8, [r6], #1
 8006b46:	eba6 020a 	sub.w	r2, r6, sl
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	ddb3      	ble.n	8006ab6 <_dtoa_r+0xade>
 8006b4e:	4649      	mov	r1, r9
 8006b50:	2300      	movs	r3, #0
 8006b52:	220a      	movs	r2, #10
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 f869 	bl	8006c2c <__multadd>
 8006b5a:	4681      	mov	r9, r0
 8006b5c:	e7ea      	b.n	8006b34 <_dtoa_r+0xb5c>
 8006b5e:	bf00      	nop
 8006b60:	080079b6 	.word	0x080079b6
 8006b64:	0800793a 	.word	0x0800793a

08006b68 <_Balloc>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	69c6      	ldr	r6, [r0, #28]
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	460d      	mov	r5, r1
 8006b70:	b976      	cbnz	r6, 8006b90 <_Balloc+0x28>
 8006b72:	2010      	movs	r0, #16
 8006b74:	f7fe fa52 	bl	800501c <malloc>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	61e0      	str	r0, [r4, #28]
 8006b7c:	b920      	cbnz	r0, 8006b88 <_Balloc+0x20>
 8006b7e:	216b      	movs	r1, #107	@ 0x6b
 8006b80:	4b17      	ldr	r3, [pc, #92]	@ (8006be0 <_Balloc+0x78>)
 8006b82:	4818      	ldr	r0, [pc, #96]	@ (8006be4 <_Balloc+0x7c>)
 8006b84:	f000 fddc 	bl	8007740 <__assert_func>
 8006b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b8c:	6006      	str	r6, [r0, #0]
 8006b8e:	60c6      	str	r6, [r0, #12]
 8006b90:	69e6      	ldr	r6, [r4, #28]
 8006b92:	68f3      	ldr	r3, [r6, #12]
 8006b94:	b183      	cbz	r3, 8006bb8 <_Balloc+0x50>
 8006b96:	69e3      	ldr	r3, [r4, #28]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b9e:	b9b8      	cbnz	r0, 8006bd0 <_Balloc+0x68>
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ba6:	1d72      	adds	r2, r6, #5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	0092      	lsls	r2, r2, #2
 8006bac:	f000 fde6 	bl	800777c <_calloc_r>
 8006bb0:	b160      	cbz	r0, 8006bcc <_Balloc+0x64>
 8006bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bb6:	e00e      	b.n	8006bd6 <_Balloc+0x6e>
 8006bb8:	2221      	movs	r2, #33	@ 0x21
 8006bba:	2104      	movs	r1, #4
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fddd 	bl	800777c <_calloc_r>
 8006bc2:	69e3      	ldr	r3, [r4, #28]
 8006bc4:	60f0      	str	r0, [r6, #12]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e4      	bne.n	8006b96 <_Balloc+0x2e>
 8006bcc:	2000      	movs	r0, #0
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	6802      	ldr	r2, [r0, #0]
 8006bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bdc:	e7f7      	b.n	8006bce <_Balloc+0x66>
 8006bde:	bf00      	nop
 8006be0:	08007947 	.word	0x08007947
 8006be4:	080079c7 	.word	0x080079c7

08006be8 <_Bfree>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	69c6      	ldr	r6, [r0, #28]
 8006bec:	4605      	mov	r5, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	b976      	cbnz	r6, 8006c10 <_Bfree+0x28>
 8006bf2:	2010      	movs	r0, #16
 8006bf4:	f7fe fa12 	bl	800501c <malloc>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	61e8      	str	r0, [r5, #28]
 8006bfc:	b920      	cbnz	r0, 8006c08 <_Bfree+0x20>
 8006bfe:	218f      	movs	r1, #143	@ 0x8f
 8006c00:	4b08      	ldr	r3, [pc, #32]	@ (8006c24 <_Bfree+0x3c>)
 8006c02:	4809      	ldr	r0, [pc, #36]	@ (8006c28 <_Bfree+0x40>)
 8006c04:	f000 fd9c 	bl	8007740 <__assert_func>
 8006c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c0c:	6006      	str	r6, [r0, #0]
 8006c0e:	60c6      	str	r6, [r0, #12]
 8006c10:	b13c      	cbz	r4, 8006c22 <_Bfree+0x3a>
 8006c12:	69eb      	ldr	r3, [r5, #28]
 8006c14:	6862      	ldr	r2, [r4, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c1c:	6021      	str	r1, [r4, #0]
 8006c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
 8006c24:	08007947 	.word	0x08007947
 8006c28:	080079c7 	.word	0x080079c7

08006c2c <__multadd>:
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	4607      	mov	r7, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	461e      	mov	r6, r3
 8006c36:	2000      	movs	r0, #0
 8006c38:	690d      	ldr	r5, [r1, #16]
 8006c3a:	f101 0c14 	add.w	ip, r1, #20
 8006c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c42:	3001      	adds	r0, #1
 8006c44:	b299      	uxth	r1, r3
 8006c46:	fb02 6101 	mla	r1, r2, r1, r6
 8006c4a:	0c1e      	lsrs	r6, r3, #16
 8006c4c:	0c0b      	lsrs	r3, r1, #16
 8006c4e:	fb02 3306 	mla	r3, r2, r6, r3
 8006c52:	b289      	uxth	r1, r1
 8006c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c58:	4285      	cmp	r5, r0
 8006c5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c62:	dcec      	bgt.n	8006c3e <__multadd+0x12>
 8006c64:	b30e      	cbz	r6, 8006caa <__multadd+0x7e>
 8006c66:	68a3      	ldr	r3, [r4, #8]
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	dc19      	bgt.n	8006ca0 <__multadd+0x74>
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	3101      	adds	r1, #1
 8006c72:	f7ff ff79 	bl	8006b68 <_Balloc>
 8006c76:	4680      	mov	r8, r0
 8006c78:	b928      	cbnz	r0, 8006c86 <__multadd+0x5a>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	21ba      	movs	r1, #186	@ 0xba
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <__multadd+0x84>)
 8006c80:	480c      	ldr	r0, [pc, #48]	@ (8006cb4 <__multadd+0x88>)
 8006c82:	f000 fd5d 	bl	8007740 <__assert_func>
 8006c86:	6922      	ldr	r2, [r4, #16]
 8006c88:	f104 010c 	add.w	r1, r4, #12
 8006c8c:	3202      	adds	r2, #2
 8006c8e:	0092      	lsls	r2, r2, #2
 8006c90:	300c      	adds	r0, #12
 8006c92:	f7ff f909 	bl	8005ea8 <memcpy>
 8006c96:	4621      	mov	r1, r4
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f7ff ffa5 	bl	8006be8 <_Bfree>
 8006c9e:	4644      	mov	r4, r8
 8006ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	615e      	str	r6, [r3, #20]
 8006ca8:	6125      	str	r5, [r4, #16]
 8006caa:	4620      	mov	r0, r4
 8006cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb0:	080079b6 	.word	0x080079b6
 8006cb4:	080079c7 	.word	0x080079c7

08006cb8 <__hi0bits>:
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cbe:	bf3a      	itte	cc
 8006cc0:	0403      	lslcc	r3, r0, #16
 8006cc2:	2010      	movcc	r0, #16
 8006cc4:	2000      	movcs	r0, #0
 8006cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cca:	bf3c      	itt	cc
 8006ccc:	021b      	lslcc	r3, r3, #8
 8006cce:	3008      	addcc	r0, #8
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cd4:	bf3c      	itt	cc
 8006cd6:	011b      	lslcc	r3, r3, #4
 8006cd8:	3004      	addcc	r0, #4
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cde:	bf3c      	itt	cc
 8006ce0:	009b      	lslcc	r3, r3, #2
 8006ce2:	3002      	addcc	r0, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	db05      	blt.n	8006cf4 <__hi0bits+0x3c>
 8006ce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cec:	f100 0001 	add.w	r0, r0, #1
 8006cf0:	bf08      	it	eq
 8006cf2:	2020      	moveq	r0, #32
 8006cf4:	4770      	bx	lr

08006cf6 <__lo0bits>:
 8006cf6:	6803      	ldr	r3, [r0, #0]
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	f013 0007 	ands.w	r0, r3, #7
 8006cfe:	d00b      	beq.n	8006d18 <__lo0bits+0x22>
 8006d00:	07d9      	lsls	r1, r3, #31
 8006d02:	d421      	bmi.n	8006d48 <__lo0bits+0x52>
 8006d04:	0798      	lsls	r0, r3, #30
 8006d06:	bf49      	itett	mi
 8006d08:	085b      	lsrmi	r3, r3, #1
 8006d0a:	089b      	lsrpl	r3, r3, #2
 8006d0c:	2001      	movmi	r0, #1
 8006d0e:	6013      	strmi	r3, [r2, #0]
 8006d10:	bf5c      	itt	pl
 8006d12:	2002      	movpl	r0, #2
 8006d14:	6013      	strpl	r3, [r2, #0]
 8006d16:	4770      	bx	lr
 8006d18:	b299      	uxth	r1, r3
 8006d1a:	b909      	cbnz	r1, 8006d20 <__lo0bits+0x2a>
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	b2d9      	uxtb	r1, r3
 8006d22:	b909      	cbnz	r1, 8006d28 <__lo0bits+0x32>
 8006d24:	3008      	adds	r0, #8
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	bf04      	itt	eq
 8006d2c:	091b      	lsreq	r3, r3, #4
 8006d2e:	3004      	addeq	r0, #4
 8006d30:	0799      	lsls	r1, r3, #30
 8006d32:	bf04      	itt	eq
 8006d34:	089b      	lsreq	r3, r3, #2
 8006d36:	3002      	addeq	r0, #2
 8006d38:	07d9      	lsls	r1, r3, #31
 8006d3a:	d403      	bmi.n	8006d44 <__lo0bits+0x4e>
 8006d3c:	085b      	lsrs	r3, r3, #1
 8006d3e:	f100 0001 	add.w	r0, r0, #1
 8006d42:	d003      	beq.n	8006d4c <__lo0bits+0x56>
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4770      	bx	lr
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4770      	bx	lr
 8006d4c:	2020      	movs	r0, #32
 8006d4e:	4770      	bx	lr

08006d50 <__i2b>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	460c      	mov	r4, r1
 8006d54:	2101      	movs	r1, #1
 8006d56:	f7ff ff07 	bl	8006b68 <_Balloc>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	b928      	cbnz	r0, 8006d6a <__i2b+0x1a>
 8006d5e:	f240 1145 	movw	r1, #325	@ 0x145
 8006d62:	4b04      	ldr	r3, [pc, #16]	@ (8006d74 <__i2b+0x24>)
 8006d64:	4804      	ldr	r0, [pc, #16]	@ (8006d78 <__i2b+0x28>)
 8006d66:	f000 fceb 	bl	8007740 <__assert_func>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	6144      	str	r4, [r0, #20]
 8006d6e:	6103      	str	r3, [r0, #16]
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	080079b6 	.word	0x080079b6
 8006d78:	080079c7 	.word	0x080079c7

08006d7c <__multiply>:
 8006d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	4614      	mov	r4, r2
 8006d82:	690a      	ldr	r2, [r1, #16]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	460f      	mov	r7, r1
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bfa2      	ittt	ge
 8006d8c:	4623      	movge	r3, r4
 8006d8e:	460c      	movge	r4, r1
 8006d90:	461f      	movge	r7, r3
 8006d92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d9a:	68a3      	ldr	r3, [r4, #8]
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	eb0a 0609 	add.w	r6, sl, r9
 8006da2:	42b3      	cmp	r3, r6
 8006da4:	b085      	sub	sp, #20
 8006da6:	bfb8      	it	lt
 8006da8:	3101      	addlt	r1, #1
 8006daa:	f7ff fedd 	bl	8006b68 <_Balloc>
 8006dae:	b930      	cbnz	r0, 8006dbe <__multiply+0x42>
 8006db0:	4602      	mov	r2, r0
 8006db2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006db6:	4b43      	ldr	r3, [pc, #268]	@ (8006ec4 <__multiply+0x148>)
 8006db8:	4843      	ldr	r0, [pc, #268]	@ (8006ec8 <__multiply+0x14c>)
 8006dba:	f000 fcc1 	bl	8007740 <__assert_func>
 8006dbe:	f100 0514 	add.w	r5, r0, #20
 8006dc2:	462b      	mov	r3, r5
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dca:	4543      	cmp	r3, r8
 8006dcc:	d321      	bcc.n	8006e12 <__multiply+0x96>
 8006dce:	f107 0114 	add.w	r1, r7, #20
 8006dd2:	f104 0214 	add.w	r2, r4, #20
 8006dd6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006dda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dde:	9302      	str	r3, [sp, #8]
 8006de0:	1b13      	subs	r3, r2, r4
 8006de2:	3b15      	subs	r3, #21
 8006de4:	f023 0303 	bic.w	r3, r3, #3
 8006de8:	3304      	adds	r3, #4
 8006dea:	f104 0715 	add.w	r7, r4, #21
 8006dee:	42ba      	cmp	r2, r7
 8006df0:	bf38      	it	cc
 8006df2:	2304      	movcc	r3, #4
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	9103      	str	r1, [sp, #12]
 8006dfa:	428b      	cmp	r3, r1
 8006dfc:	d80c      	bhi.n	8006e18 <__multiply+0x9c>
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	dd03      	ble.n	8006e0a <__multiply+0x8e>
 8006e02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d05a      	beq.n	8006ec0 <__multiply+0x144>
 8006e0a:	6106      	str	r6, [r0, #16]
 8006e0c:	b005      	add	sp, #20
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	f843 2b04 	str.w	r2, [r3], #4
 8006e16:	e7d8      	b.n	8006dca <__multiply+0x4e>
 8006e18:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e1c:	f1ba 0f00 	cmp.w	sl, #0
 8006e20:	d023      	beq.n	8006e6a <__multiply+0xee>
 8006e22:	46a9      	mov	r9, r5
 8006e24:	f04f 0c00 	mov.w	ip, #0
 8006e28:	f104 0e14 	add.w	lr, r4, #20
 8006e2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e30:	f8d9 3000 	ldr.w	r3, [r9]
 8006e34:	fa1f fb87 	uxth.w	fp, r7
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e3e:	4463      	add	r3, ip
 8006e40:	f8d9 c000 	ldr.w	ip, [r9]
 8006e44:	0c3f      	lsrs	r7, r7, #16
 8006e46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e4a:	fb0a c707 	mla	r7, sl, r7, ip
 8006e4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e58:	4572      	cmp	r2, lr
 8006e5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e5e:	f849 3b04 	str.w	r3, [r9], #4
 8006e62:	d8e3      	bhi.n	8006e2c <__multiply+0xb0>
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	f845 c003 	str.w	ip, [r5, r3]
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	3104      	adds	r1, #4
 8006e6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e72:	f1b9 0f00 	cmp.w	r9, #0
 8006e76:	d021      	beq.n	8006ebc <__multiply+0x140>
 8006e78:	46ae      	mov	lr, r5
 8006e7a:	f04f 0a00 	mov.w	sl, #0
 8006e7e:	682b      	ldr	r3, [r5, #0]
 8006e80:	f104 0c14 	add.w	ip, r4, #20
 8006e84:	f8bc b000 	ldrh.w	fp, [ip]
 8006e88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	fb09 770b 	mla	r7, r9, fp, r7
 8006e92:	4457      	add	r7, sl
 8006e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e98:	f84e 3b04 	str.w	r3, [lr], #4
 8006e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ea4:	f8be 3000 	ldrh.w	r3, [lr]
 8006ea8:	4562      	cmp	r2, ip
 8006eaa:	fb09 330a 	mla	r3, r9, sl, r3
 8006eae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eb6:	d8e5      	bhi.n	8006e84 <__multiply+0x108>
 8006eb8:	9f01      	ldr	r7, [sp, #4]
 8006eba:	51eb      	str	r3, [r5, r7]
 8006ebc:	3504      	adds	r5, #4
 8006ebe:	e79a      	b.n	8006df6 <__multiply+0x7a>
 8006ec0:	3e01      	subs	r6, #1
 8006ec2:	e79c      	b.n	8006dfe <__multiply+0x82>
 8006ec4:	080079b6 	.word	0x080079b6
 8006ec8:	080079c7 	.word	0x080079c7

08006ecc <__pow5mult>:
 8006ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed0:	4615      	mov	r5, r2
 8006ed2:	f012 0203 	ands.w	r2, r2, #3
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	460e      	mov	r6, r1
 8006eda:	d007      	beq.n	8006eec <__pow5mult+0x20>
 8006edc:	4c25      	ldr	r4, [pc, #148]	@ (8006f74 <__pow5mult+0xa8>)
 8006ede:	3a01      	subs	r2, #1
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ee6:	f7ff fea1 	bl	8006c2c <__multadd>
 8006eea:	4606      	mov	r6, r0
 8006eec:	10ad      	asrs	r5, r5, #2
 8006eee:	d03d      	beq.n	8006f6c <__pow5mult+0xa0>
 8006ef0:	69fc      	ldr	r4, [r7, #28]
 8006ef2:	b97c      	cbnz	r4, 8006f14 <__pow5mult+0x48>
 8006ef4:	2010      	movs	r0, #16
 8006ef6:	f7fe f891 	bl	800501c <malloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	61f8      	str	r0, [r7, #28]
 8006efe:	b928      	cbnz	r0, 8006f0c <__pow5mult+0x40>
 8006f00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f04:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <__pow5mult+0xac>)
 8006f06:	481d      	ldr	r0, [pc, #116]	@ (8006f7c <__pow5mult+0xb0>)
 8006f08:	f000 fc1a 	bl	8007740 <__assert_func>
 8006f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f10:	6004      	str	r4, [r0, #0]
 8006f12:	60c4      	str	r4, [r0, #12]
 8006f14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f1c:	b94c      	cbnz	r4, 8006f32 <__pow5mult+0x66>
 8006f1e:	f240 2171 	movw	r1, #625	@ 0x271
 8006f22:	4638      	mov	r0, r7
 8006f24:	f7ff ff14 	bl	8006d50 <__i2b>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	f04f 0900 	mov.w	r9, #0
 8006f36:	07eb      	lsls	r3, r5, #31
 8006f38:	d50a      	bpl.n	8006f50 <__pow5mult+0x84>
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4638      	mov	r0, r7
 8006f40:	f7ff ff1c 	bl	8006d7c <__multiply>
 8006f44:	4680      	mov	r8, r0
 8006f46:	4631      	mov	r1, r6
 8006f48:	4638      	mov	r0, r7
 8006f4a:	f7ff fe4d 	bl	8006be8 <_Bfree>
 8006f4e:	4646      	mov	r6, r8
 8006f50:	106d      	asrs	r5, r5, #1
 8006f52:	d00b      	beq.n	8006f6c <__pow5mult+0xa0>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	b938      	cbnz	r0, 8006f68 <__pow5mult+0x9c>
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7ff ff0d 	bl	8006d7c <__multiply>
 8006f62:	6020      	str	r0, [r4, #0]
 8006f64:	f8c0 9000 	str.w	r9, [r0]
 8006f68:	4604      	mov	r4, r0
 8006f6a:	e7e4      	b.n	8006f36 <__pow5mult+0x6a>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f72:	bf00      	nop
 8006f74:	08007a20 	.word	0x08007a20
 8006f78:	08007947 	.word	0x08007947
 8006f7c:	080079c7 	.word	0x080079c7

08006f80 <__lshift>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	460c      	mov	r4, r1
 8006f86:	4607      	mov	r7, r0
 8006f88:	4691      	mov	r9, r2
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	6849      	ldr	r1, [r1, #4]
 8006f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f98:	f108 0601 	add.w	r6, r8, #1
 8006f9c:	42b3      	cmp	r3, r6
 8006f9e:	db0b      	blt.n	8006fb8 <__lshift+0x38>
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff fde1 	bl	8006b68 <_Balloc>
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	b948      	cbnz	r0, 8006fbe <__lshift+0x3e>
 8006faa:	4602      	mov	r2, r0
 8006fac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fb0:	4b27      	ldr	r3, [pc, #156]	@ (8007050 <__lshift+0xd0>)
 8006fb2:	4828      	ldr	r0, [pc, #160]	@ (8007054 <__lshift+0xd4>)
 8006fb4:	f000 fbc4 	bl	8007740 <__assert_func>
 8006fb8:	3101      	adds	r1, #1
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	e7ee      	b.n	8006f9c <__lshift+0x1c>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f100 0114 	add.w	r1, r0, #20
 8006fc4:	f100 0210 	add.w	r2, r0, #16
 8006fc8:	4618      	mov	r0, r3
 8006fca:	4553      	cmp	r3, sl
 8006fcc:	db33      	blt.n	8007036 <__lshift+0xb6>
 8006fce:	6920      	ldr	r0, [r4, #16]
 8006fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fd4:	f104 0314 	add.w	r3, r4, #20
 8006fd8:	f019 091f 	ands.w	r9, r9, #31
 8006fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fe4:	d02b      	beq.n	800703e <__lshift+0xbe>
 8006fe6:	468a      	mov	sl, r1
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f1c9 0e20 	rsb	lr, r9, #32
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ff4:	4310      	orrs	r0, r2
 8006ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8006ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ffe:	459c      	cmp	ip, r3
 8007000:	fa22 f20e 	lsr.w	r2, r2, lr
 8007004:	d8f3      	bhi.n	8006fee <__lshift+0x6e>
 8007006:	ebac 0304 	sub.w	r3, ip, r4
 800700a:	3b15      	subs	r3, #21
 800700c:	f023 0303 	bic.w	r3, r3, #3
 8007010:	3304      	adds	r3, #4
 8007012:	f104 0015 	add.w	r0, r4, #21
 8007016:	4584      	cmp	ip, r0
 8007018:	bf38      	it	cc
 800701a:	2304      	movcc	r3, #4
 800701c:	50ca      	str	r2, [r1, r3]
 800701e:	b10a      	cbz	r2, 8007024 <__lshift+0xa4>
 8007020:	f108 0602 	add.w	r6, r8, #2
 8007024:	3e01      	subs	r6, #1
 8007026:	4638      	mov	r0, r7
 8007028:	4621      	mov	r1, r4
 800702a:	612e      	str	r6, [r5, #16]
 800702c:	f7ff fddc 	bl	8006be8 <_Bfree>
 8007030:	4628      	mov	r0, r5
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	f842 0f04 	str.w	r0, [r2, #4]!
 800703a:	3301      	adds	r3, #1
 800703c:	e7c5      	b.n	8006fca <__lshift+0x4a>
 800703e:	3904      	subs	r1, #4
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	459c      	cmp	ip, r3
 8007046:	f841 2f04 	str.w	r2, [r1, #4]!
 800704a:	d8f9      	bhi.n	8007040 <__lshift+0xc0>
 800704c:	e7ea      	b.n	8007024 <__lshift+0xa4>
 800704e:	bf00      	nop
 8007050:	080079b6 	.word	0x080079b6
 8007054:	080079c7 	.word	0x080079c7

08007058 <__mcmp>:
 8007058:	4603      	mov	r3, r0
 800705a:	690a      	ldr	r2, [r1, #16]
 800705c:	6900      	ldr	r0, [r0, #16]
 800705e:	b530      	push	{r4, r5, lr}
 8007060:	1a80      	subs	r0, r0, r2
 8007062:	d10e      	bne.n	8007082 <__mcmp+0x2a>
 8007064:	3314      	adds	r3, #20
 8007066:	3114      	adds	r1, #20
 8007068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800706c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007078:	4295      	cmp	r5, r2
 800707a:	d003      	beq.n	8007084 <__mcmp+0x2c>
 800707c:	d205      	bcs.n	800708a <__mcmp+0x32>
 800707e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007082:	bd30      	pop	{r4, r5, pc}
 8007084:	42a3      	cmp	r3, r4
 8007086:	d3f3      	bcc.n	8007070 <__mcmp+0x18>
 8007088:	e7fb      	b.n	8007082 <__mcmp+0x2a>
 800708a:	2001      	movs	r0, #1
 800708c:	e7f9      	b.n	8007082 <__mcmp+0x2a>
	...

08007090 <__mdiff>:
 8007090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	4689      	mov	r9, r1
 8007096:	4606      	mov	r6, r0
 8007098:	4611      	mov	r1, r2
 800709a:	4648      	mov	r0, r9
 800709c:	4614      	mov	r4, r2
 800709e:	f7ff ffdb 	bl	8007058 <__mcmp>
 80070a2:	1e05      	subs	r5, r0, #0
 80070a4:	d112      	bne.n	80070cc <__mdiff+0x3c>
 80070a6:	4629      	mov	r1, r5
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff fd5d 	bl	8006b68 <_Balloc>
 80070ae:	4602      	mov	r2, r0
 80070b0:	b928      	cbnz	r0, 80070be <__mdiff+0x2e>
 80070b2:	f240 2137 	movw	r1, #567	@ 0x237
 80070b6:	4b3e      	ldr	r3, [pc, #248]	@ (80071b0 <__mdiff+0x120>)
 80070b8:	483e      	ldr	r0, [pc, #248]	@ (80071b4 <__mdiff+0x124>)
 80070ba:	f000 fb41 	bl	8007740 <__assert_func>
 80070be:	2301      	movs	r3, #1
 80070c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070c4:	4610      	mov	r0, r2
 80070c6:	b003      	add	sp, #12
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	bfbc      	itt	lt
 80070ce:	464b      	movlt	r3, r9
 80070d0:	46a1      	movlt	r9, r4
 80070d2:	4630      	mov	r0, r6
 80070d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070d8:	bfba      	itte	lt
 80070da:	461c      	movlt	r4, r3
 80070dc:	2501      	movlt	r5, #1
 80070de:	2500      	movge	r5, #0
 80070e0:	f7ff fd42 	bl	8006b68 <_Balloc>
 80070e4:	4602      	mov	r2, r0
 80070e6:	b918      	cbnz	r0, 80070f0 <__mdiff+0x60>
 80070e8:	f240 2145 	movw	r1, #581	@ 0x245
 80070ec:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <__mdiff+0x120>)
 80070ee:	e7e3      	b.n	80070b8 <__mdiff+0x28>
 80070f0:	f100 0b14 	add.w	fp, r0, #20
 80070f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070f8:	f109 0310 	add.w	r3, r9, #16
 80070fc:	60c5      	str	r5, [r0, #12]
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f109 0514 	add.w	r5, r9, #20
 8007106:	46d9      	mov	r9, fp
 8007108:	6926      	ldr	r6, [r4, #16]
 800710a:	f104 0e14 	add.w	lr, r4, #20
 800710e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007112:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007116:	9301      	str	r3, [sp, #4]
 8007118:	9b01      	ldr	r3, [sp, #4]
 800711a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800711e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007122:	b281      	uxth	r1, r0
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	fa1f f38a 	uxth.w	r3, sl
 800712a:	1a5b      	subs	r3, r3, r1
 800712c:	0c00      	lsrs	r0, r0, #16
 800712e:	4463      	add	r3, ip
 8007130:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007134:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800713e:	4576      	cmp	r6, lr
 8007140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007144:	f849 3b04 	str.w	r3, [r9], #4
 8007148:	d8e6      	bhi.n	8007118 <__mdiff+0x88>
 800714a:	1b33      	subs	r3, r6, r4
 800714c:	3b15      	subs	r3, #21
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	3415      	adds	r4, #21
 8007154:	3304      	adds	r3, #4
 8007156:	42a6      	cmp	r6, r4
 8007158:	bf38      	it	cc
 800715a:	2304      	movcc	r3, #4
 800715c:	441d      	add	r5, r3
 800715e:	445b      	add	r3, fp
 8007160:	461e      	mov	r6, r3
 8007162:	462c      	mov	r4, r5
 8007164:	4544      	cmp	r4, r8
 8007166:	d30e      	bcc.n	8007186 <__mdiff+0xf6>
 8007168:	f108 0103 	add.w	r1, r8, #3
 800716c:	1b49      	subs	r1, r1, r5
 800716e:	f021 0103 	bic.w	r1, r1, #3
 8007172:	3d03      	subs	r5, #3
 8007174:	45a8      	cmp	r8, r5
 8007176:	bf38      	it	cc
 8007178:	2100      	movcc	r1, #0
 800717a:	440b      	add	r3, r1
 800717c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007180:	b199      	cbz	r1, 80071aa <__mdiff+0x11a>
 8007182:	6117      	str	r7, [r2, #16]
 8007184:	e79e      	b.n	80070c4 <__mdiff+0x34>
 8007186:	46e6      	mov	lr, ip
 8007188:	f854 1b04 	ldr.w	r1, [r4], #4
 800718c:	fa1f fc81 	uxth.w	ip, r1
 8007190:	44f4      	add	ip, lr
 8007192:	0c08      	lsrs	r0, r1, #16
 8007194:	4471      	add	r1, lr
 8007196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800719a:	b289      	uxth	r1, r1
 800719c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071a4:	f846 1b04 	str.w	r1, [r6], #4
 80071a8:	e7dc      	b.n	8007164 <__mdiff+0xd4>
 80071aa:	3f01      	subs	r7, #1
 80071ac:	e7e6      	b.n	800717c <__mdiff+0xec>
 80071ae:	bf00      	nop
 80071b0:	080079b6 	.word	0x080079b6
 80071b4:	080079c7 	.word	0x080079c7

080071b8 <__d2b>:
 80071b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80071bc:	2101      	movs	r1, #1
 80071be:	4690      	mov	r8, r2
 80071c0:	4699      	mov	r9, r3
 80071c2:	9e08      	ldr	r6, [sp, #32]
 80071c4:	f7ff fcd0 	bl	8006b68 <_Balloc>
 80071c8:	4604      	mov	r4, r0
 80071ca:	b930      	cbnz	r0, 80071da <__d2b+0x22>
 80071cc:	4602      	mov	r2, r0
 80071ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80071d2:	4b23      	ldr	r3, [pc, #140]	@ (8007260 <__d2b+0xa8>)
 80071d4:	4823      	ldr	r0, [pc, #140]	@ (8007264 <__d2b+0xac>)
 80071d6:	f000 fab3 	bl	8007740 <__assert_func>
 80071da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071e2:	b10d      	cbz	r5, 80071e8 <__d2b+0x30>
 80071e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	f1b8 0300 	subs.w	r3, r8, #0
 80071ee:	d024      	beq.n	800723a <__d2b+0x82>
 80071f0:	4668      	mov	r0, sp
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	f7ff fd7f 	bl	8006cf6 <__lo0bits>
 80071f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071fc:	b1d8      	cbz	r0, 8007236 <__d2b+0x7e>
 80071fe:	f1c0 0320 	rsb	r3, r0, #32
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	430b      	orrs	r3, r1
 8007208:	40c2      	lsrs	r2, r0
 800720a:	6163      	str	r3, [r4, #20]
 800720c:	9201      	str	r2, [sp, #4]
 800720e:	9b01      	ldr	r3, [sp, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf0c      	ite	eq
 8007214:	2201      	moveq	r2, #1
 8007216:	2202      	movne	r2, #2
 8007218:	61a3      	str	r3, [r4, #24]
 800721a:	6122      	str	r2, [r4, #16]
 800721c:	b1ad      	cbz	r5, 800724a <__d2b+0x92>
 800721e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007222:	4405      	add	r5, r0
 8007224:	6035      	str	r5, [r6, #0]
 8007226:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800722a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800722c:	6018      	str	r0, [r3, #0]
 800722e:	4620      	mov	r0, r4
 8007230:	b002      	add	sp, #8
 8007232:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007236:	6161      	str	r1, [r4, #20]
 8007238:	e7e9      	b.n	800720e <__d2b+0x56>
 800723a:	a801      	add	r0, sp, #4
 800723c:	f7ff fd5b 	bl	8006cf6 <__lo0bits>
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	6163      	str	r3, [r4, #20]
 8007246:	3020      	adds	r0, #32
 8007248:	e7e7      	b.n	800721a <__d2b+0x62>
 800724a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800724e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007252:	6030      	str	r0, [r6, #0]
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	f7ff fd2f 	bl	8006cb8 <__hi0bits>
 800725a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800725e:	e7e4      	b.n	800722a <__d2b+0x72>
 8007260:	080079b6 	.word	0x080079b6
 8007264:	080079c7 	.word	0x080079c7

08007268 <__sfputc_r>:
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	b410      	push	{r4}
 800726c:	3b01      	subs	r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	6093      	str	r3, [r2, #8]
 8007272:	da07      	bge.n	8007284 <__sfputc_r+0x1c>
 8007274:	6994      	ldr	r4, [r2, #24]
 8007276:	42a3      	cmp	r3, r4
 8007278:	db01      	blt.n	800727e <__sfputc_r+0x16>
 800727a:	290a      	cmp	r1, #10
 800727c:	d102      	bne.n	8007284 <__sfputc_r+0x1c>
 800727e:	bc10      	pop	{r4}
 8007280:	f7fe bce3 	b.w	8005c4a <__swbuf_r>
 8007284:	6813      	ldr	r3, [r2, #0]
 8007286:	1c58      	adds	r0, r3, #1
 8007288:	6010      	str	r0, [r2, #0]
 800728a:	7019      	strb	r1, [r3, #0]
 800728c:	4608      	mov	r0, r1
 800728e:	bc10      	pop	{r4}
 8007290:	4770      	bx	lr

08007292 <__sfputs_r>:
 8007292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007294:	4606      	mov	r6, r0
 8007296:	460f      	mov	r7, r1
 8007298:	4614      	mov	r4, r2
 800729a:	18d5      	adds	r5, r2, r3
 800729c:	42ac      	cmp	r4, r5
 800729e:	d101      	bne.n	80072a4 <__sfputs_r+0x12>
 80072a0:	2000      	movs	r0, #0
 80072a2:	e007      	b.n	80072b4 <__sfputs_r+0x22>
 80072a4:	463a      	mov	r2, r7
 80072a6:	4630      	mov	r0, r6
 80072a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ac:	f7ff ffdc 	bl	8007268 <__sfputc_r>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	d1f3      	bne.n	800729c <__sfputs_r+0xa>
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072b8 <_vfiprintf_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	460d      	mov	r5, r1
 80072be:	4614      	mov	r4, r2
 80072c0:	4698      	mov	r8, r3
 80072c2:	4606      	mov	r6, r0
 80072c4:	b09d      	sub	sp, #116	@ 0x74
 80072c6:	b118      	cbz	r0, 80072d0 <_vfiprintf_r+0x18>
 80072c8:	6a03      	ldr	r3, [r0, #32]
 80072ca:	b90b      	cbnz	r3, 80072d0 <_vfiprintf_r+0x18>
 80072cc:	f7fe fc44 	bl	8005b58 <__sinit>
 80072d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_vfiprintf_r+0x2a>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	059a      	lsls	r2, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_vfiprintf_r+0x2a>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7fa fcef 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	071b      	lsls	r3, r3, #28
 80072e6:	d501      	bpl.n	80072ec <_vfiprintf_r+0x34>
 80072e8:	692b      	ldr	r3, [r5, #16]
 80072ea:	b99b      	cbnz	r3, 8007314 <_vfiprintf_r+0x5c>
 80072ec:	4629      	mov	r1, r5
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7fe fcea 	bl	8005cc8 <__swsetup_r>
 80072f4:	b170      	cbz	r0, 8007314 <_vfiprintf_r+0x5c>
 80072f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072f8:	07dc      	lsls	r4, r3, #31
 80072fa:	d504      	bpl.n	8007306 <_vfiprintf_r+0x4e>
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007300:	b01d      	add	sp, #116	@ 0x74
 8007302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007306:	89ab      	ldrh	r3, [r5, #12]
 8007308:	0598      	lsls	r0, r3, #22
 800730a:	d4f7      	bmi.n	80072fc <_vfiprintf_r+0x44>
 800730c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800730e:	f7fa fcec 	bl	8001cea <__retarget_lock_release_recursive>
 8007312:	e7f3      	b.n	80072fc <_vfiprintf_r+0x44>
 8007314:	2300      	movs	r3, #0
 8007316:	9309      	str	r3, [sp, #36]	@ 0x24
 8007318:	2320      	movs	r3, #32
 800731a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800731e:	2330      	movs	r3, #48	@ 0x30
 8007320:	f04f 0901 	mov.w	r9, #1
 8007324:	f8cd 800c 	str.w	r8, [sp, #12]
 8007328:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80074d4 <_vfiprintf_r+0x21c>
 800732c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007330:	4623      	mov	r3, r4
 8007332:	469a      	mov	sl, r3
 8007334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007338:	b10a      	cbz	r2, 800733e <_vfiprintf_r+0x86>
 800733a:	2a25      	cmp	r2, #37	@ 0x25
 800733c:	d1f9      	bne.n	8007332 <_vfiprintf_r+0x7a>
 800733e:	ebba 0b04 	subs.w	fp, sl, r4
 8007342:	d00b      	beq.n	800735c <_vfiprintf_r+0xa4>
 8007344:	465b      	mov	r3, fp
 8007346:	4622      	mov	r2, r4
 8007348:	4629      	mov	r1, r5
 800734a:	4630      	mov	r0, r6
 800734c:	f7ff ffa1 	bl	8007292 <__sfputs_r>
 8007350:	3001      	adds	r0, #1
 8007352:	f000 80a7 	beq.w	80074a4 <_vfiprintf_r+0x1ec>
 8007356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007358:	445a      	add	r2, fp
 800735a:	9209      	str	r2, [sp, #36]	@ 0x24
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 809f 	beq.w	80074a4 <_vfiprintf_r+0x1ec>
 8007366:	2300      	movs	r3, #0
 8007368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800736c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007370:	f10a 0a01 	add.w	sl, sl, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	9307      	str	r3, [sp, #28]
 8007378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800737c:	931a      	str	r3, [sp, #104]	@ 0x68
 800737e:	4654      	mov	r4, sl
 8007380:	2205      	movs	r2, #5
 8007382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007386:	4853      	ldr	r0, [pc, #332]	@ (80074d4 <_vfiprintf_r+0x21c>)
 8007388:	f7fe fd80 	bl	8005e8c <memchr>
 800738c:	9a04      	ldr	r2, [sp, #16]
 800738e:	b9d8      	cbnz	r0, 80073c8 <_vfiprintf_r+0x110>
 8007390:	06d1      	lsls	r1, r2, #27
 8007392:	bf44      	itt	mi
 8007394:	2320      	movmi	r3, #32
 8007396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800739a:	0713      	lsls	r3, r2, #28
 800739c:	bf44      	itt	mi
 800739e:	232b      	movmi	r3, #43	@ 0x2b
 80073a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073aa:	d015      	beq.n	80073d8 <_vfiprintf_r+0x120>
 80073ac:	4654      	mov	r4, sl
 80073ae:	2000      	movs	r0, #0
 80073b0:	f04f 0c0a 	mov.w	ip, #10
 80073b4:	9a07      	ldr	r2, [sp, #28]
 80073b6:	4621      	mov	r1, r4
 80073b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073bc:	3b30      	subs	r3, #48	@ 0x30
 80073be:	2b09      	cmp	r3, #9
 80073c0:	d94b      	bls.n	800745a <_vfiprintf_r+0x1a2>
 80073c2:	b1b0      	cbz	r0, 80073f2 <_vfiprintf_r+0x13a>
 80073c4:	9207      	str	r2, [sp, #28]
 80073c6:	e014      	b.n	80073f2 <_vfiprintf_r+0x13a>
 80073c8:	eba0 0308 	sub.w	r3, r0, r8
 80073cc:	fa09 f303 	lsl.w	r3, r9, r3
 80073d0:	4313      	orrs	r3, r2
 80073d2:	46a2      	mov	sl, r4
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	e7d2      	b.n	800737e <_vfiprintf_r+0xc6>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d19      	adds	r1, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbb      	ittet	lt
 80073e4:	425b      	neglt	r3, r3
 80073e6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ea:	9307      	strge	r3, [sp, #28]
 80073ec:	9307      	strlt	r3, [sp, #28]
 80073ee:	bfb8      	it	lt
 80073f0:	9204      	strlt	r2, [sp, #16]
 80073f2:	7823      	ldrb	r3, [r4, #0]
 80073f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f6:	d10a      	bne.n	800740e <_vfiprintf_r+0x156>
 80073f8:	7863      	ldrb	r3, [r4, #1]
 80073fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80073fc:	d132      	bne.n	8007464 <_vfiprintf_r+0x1ac>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	3402      	adds	r4, #2
 8007402:	1d1a      	adds	r2, r3, #4
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	9203      	str	r2, [sp, #12]
 8007408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80074d8 <_vfiprintf_r+0x220>
 8007412:	2203      	movs	r2, #3
 8007414:	4650      	mov	r0, sl
 8007416:	7821      	ldrb	r1, [r4, #0]
 8007418:	f7fe fd38 	bl	8005e8c <memchr>
 800741c:	b138      	cbz	r0, 800742e <_vfiprintf_r+0x176>
 800741e:	2240      	movs	r2, #64	@ 0x40
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	eba0 000a 	sub.w	r0, r0, sl
 8007426:	4082      	lsls	r2, r0
 8007428:	4313      	orrs	r3, r2
 800742a:	3401      	adds	r4, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007432:	2206      	movs	r2, #6
 8007434:	4829      	ldr	r0, [pc, #164]	@ (80074dc <_vfiprintf_r+0x224>)
 8007436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800743a:	f7fe fd27 	bl	8005e8c <memchr>
 800743e:	2800      	cmp	r0, #0
 8007440:	d03f      	beq.n	80074c2 <_vfiprintf_r+0x20a>
 8007442:	4b27      	ldr	r3, [pc, #156]	@ (80074e0 <_vfiprintf_r+0x228>)
 8007444:	bb1b      	cbnz	r3, 800748e <_vfiprintf_r+0x1d6>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	3307      	adds	r3, #7
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	3308      	adds	r3, #8
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007454:	443b      	add	r3, r7
 8007456:	9309      	str	r3, [sp, #36]	@ 0x24
 8007458:	e76a      	b.n	8007330 <_vfiprintf_r+0x78>
 800745a:	460c      	mov	r4, r1
 800745c:	2001      	movs	r0, #1
 800745e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007462:	e7a8      	b.n	80073b6 <_vfiprintf_r+0xfe>
 8007464:	2300      	movs	r3, #0
 8007466:	f04f 0c0a 	mov.w	ip, #10
 800746a:	4619      	mov	r1, r3
 800746c:	3401      	adds	r4, #1
 800746e:	9305      	str	r3, [sp, #20]
 8007470:	4620      	mov	r0, r4
 8007472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007476:	3a30      	subs	r2, #48	@ 0x30
 8007478:	2a09      	cmp	r2, #9
 800747a:	d903      	bls.n	8007484 <_vfiprintf_r+0x1cc>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0c6      	beq.n	800740e <_vfiprintf_r+0x156>
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	e7c4      	b.n	800740e <_vfiprintf_r+0x156>
 8007484:	4604      	mov	r4, r0
 8007486:	2301      	movs	r3, #1
 8007488:	fb0c 2101 	mla	r1, ip, r1, r2
 800748c:	e7f0      	b.n	8007470 <_vfiprintf_r+0x1b8>
 800748e:	ab03      	add	r3, sp, #12
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	462a      	mov	r2, r5
 8007494:	4630      	mov	r0, r6
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <_vfiprintf_r+0x22c>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	f7fd ff13 	bl	80052c4 <_printf_float>
 800749e:	4607      	mov	r7, r0
 80074a0:	1c78      	adds	r0, r7, #1
 80074a2:	d1d6      	bne.n	8007452 <_vfiprintf_r+0x19a>
 80074a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d405      	bmi.n	80074b6 <_vfiprintf_r+0x1fe>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	059a      	lsls	r2, r3, #22
 80074ae:	d402      	bmi.n	80074b6 <_vfiprintf_r+0x1fe>
 80074b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b2:	f7fa fc1a 	bl	8001cea <__retarget_lock_release_recursive>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	065b      	lsls	r3, r3, #25
 80074ba:	f53f af1f 	bmi.w	80072fc <_vfiprintf_r+0x44>
 80074be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074c0:	e71e      	b.n	8007300 <_vfiprintf_r+0x48>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4630      	mov	r0, r6
 80074ca:	4b06      	ldr	r3, [pc, #24]	@ (80074e4 <_vfiprintf_r+0x22c>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	f7fe f997 	bl	8005800 <_printf_i>
 80074d2:	e7e4      	b.n	800749e <_vfiprintf_r+0x1e6>
 80074d4:	08007b20 	.word	0x08007b20
 80074d8:	08007b26 	.word	0x08007b26
 80074dc:	08007b2a 	.word	0x08007b2a
 80074e0:	080052c5 	.word	0x080052c5
 80074e4:	08007293 	.word	0x08007293

080074e8 <__sflush_r>:
 80074e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	0716      	lsls	r6, r2, #28
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	d454      	bmi.n	80075a0 <__sflush_r+0xb8>
 80074f6:	684b      	ldr	r3, [r1, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dc02      	bgt.n	8007502 <__sflush_r+0x1a>
 80074fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	dd48      	ble.n	8007594 <__sflush_r+0xac>
 8007502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007504:	2e00      	cmp	r6, #0
 8007506:	d045      	beq.n	8007594 <__sflush_r+0xac>
 8007508:	2300      	movs	r3, #0
 800750a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800750e:	682f      	ldr	r7, [r5, #0]
 8007510:	6a21      	ldr	r1, [r4, #32]
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	d030      	beq.n	8007578 <__sflush_r+0x90>
 8007516:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	0759      	lsls	r1, r3, #29
 800751c:	d505      	bpl.n	800752a <__sflush_r+0x42>
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007524:	b10b      	cbz	r3, 800752a <__sflush_r+0x42>
 8007526:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007528:	1ad2      	subs	r2, r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	4628      	mov	r0, r5
 800752e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007530:	6a21      	ldr	r1, [r4, #32]
 8007532:	47b0      	blx	r6
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	d106      	bne.n	8007548 <__sflush_r+0x60>
 800753a:	6829      	ldr	r1, [r5, #0]
 800753c:	291d      	cmp	r1, #29
 800753e:	d82b      	bhi.n	8007598 <__sflush_r+0xb0>
 8007540:	4a28      	ldr	r2, [pc, #160]	@ (80075e4 <__sflush_r+0xfc>)
 8007542:	410a      	asrs	r2, r1
 8007544:	07d6      	lsls	r6, r2, #31
 8007546:	d427      	bmi.n	8007598 <__sflush_r+0xb0>
 8007548:	2200      	movs	r2, #0
 800754a:	6062      	str	r2, [r4, #4]
 800754c:	6922      	ldr	r2, [r4, #16]
 800754e:	04d9      	lsls	r1, r3, #19
 8007550:	6022      	str	r2, [r4, #0]
 8007552:	d504      	bpl.n	800755e <__sflush_r+0x76>
 8007554:	1c42      	adds	r2, r0, #1
 8007556:	d101      	bne.n	800755c <__sflush_r+0x74>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b903      	cbnz	r3, 800755e <__sflush_r+0x76>
 800755c:	6560      	str	r0, [r4, #84]	@ 0x54
 800755e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007560:	602f      	str	r7, [r5, #0]
 8007562:	b1b9      	cbz	r1, 8007594 <__sflush_r+0xac>
 8007564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <__sflush_r+0x8a>
 800756c:	4628      	mov	r0, r5
 800756e:	f7fd fd0d 	bl	8004f8c <_free_r>
 8007572:	2300      	movs	r3, #0
 8007574:	6363      	str	r3, [r4, #52]	@ 0x34
 8007576:	e00d      	b.n	8007594 <__sflush_r+0xac>
 8007578:	2301      	movs	r3, #1
 800757a:	4628      	mov	r0, r5
 800757c:	47b0      	blx	r6
 800757e:	4602      	mov	r2, r0
 8007580:	1c50      	adds	r0, r2, #1
 8007582:	d1c9      	bne.n	8007518 <__sflush_r+0x30>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0c6      	beq.n	8007518 <__sflush_r+0x30>
 800758a:	2b1d      	cmp	r3, #29
 800758c:	d001      	beq.n	8007592 <__sflush_r+0xaa>
 800758e:	2b16      	cmp	r3, #22
 8007590:	d11d      	bne.n	80075ce <__sflush_r+0xe6>
 8007592:	602f      	str	r7, [r5, #0]
 8007594:	2000      	movs	r0, #0
 8007596:	e021      	b.n	80075dc <__sflush_r+0xf4>
 8007598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759c:	b21b      	sxth	r3, r3
 800759e:	e01a      	b.n	80075d6 <__sflush_r+0xee>
 80075a0:	690f      	ldr	r7, [r1, #16]
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	d0f6      	beq.n	8007594 <__sflush_r+0xac>
 80075a6:	0793      	lsls	r3, r2, #30
 80075a8:	bf18      	it	ne
 80075aa:	2300      	movne	r3, #0
 80075ac:	680e      	ldr	r6, [r1, #0]
 80075ae:	bf08      	it	eq
 80075b0:	694b      	ldreq	r3, [r1, #20]
 80075b2:	1bf6      	subs	r6, r6, r7
 80075b4:	600f      	str	r7, [r1, #0]
 80075b6:	608b      	str	r3, [r1, #8]
 80075b8:	2e00      	cmp	r6, #0
 80075ba:	ddeb      	ble.n	8007594 <__sflush_r+0xac>
 80075bc:	4633      	mov	r3, r6
 80075be:	463a      	mov	r2, r7
 80075c0:	4628      	mov	r0, r5
 80075c2:	6a21      	ldr	r1, [r4, #32]
 80075c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80075c8:	47e0      	blx	ip
 80075ca:	2800      	cmp	r0, #0
 80075cc:	dc07      	bgt.n	80075de <__sflush_r+0xf6>
 80075ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075de:	4407      	add	r7, r0
 80075e0:	1a36      	subs	r6, r6, r0
 80075e2:	e7e9      	b.n	80075b8 <__sflush_r+0xd0>
 80075e4:	dfbffffe 	.word	0xdfbffffe

080075e8 <_fflush_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	690b      	ldr	r3, [r1, #16]
 80075ec:	4605      	mov	r5, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	b913      	cbnz	r3, 80075f8 <_fflush_r+0x10>
 80075f2:	2500      	movs	r5, #0
 80075f4:	4628      	mov	r0, r5
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	b118      	cbz	r0, 8007602 <_fflush_r+0x1a>
 80075fa:	6a03      	ldr	r3, [r0, #32]
 80075fc:	b90b      	cbnz	r3, 8007602 <_fflush_r+0x1a>
 80075fe:	f7fe faab 	bl	8005b58 <__sinit>
 8007602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f3      	beq.n	80075f2 <_fflush_r+0xa>
 800760a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800760c:	07d0      	lsls	r0, r2, #31
 800760e:	d404      	bmi.n	800761a <_fflush_r+0x32>
 8007610:	0599      	lsls	r1, r3, #22
 8007612:	d402      	bmi.n	800761a <_fflush_r+0x32>
 8007614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007616:	f7fa fb53 	bl	8001cc0 <__retarget_lock_acquire_recursive>
 800761a:	4628      	mov	r0, r5
 800761c:	4621      	mov	r1, r4
 800761e:	f7ff ff63 	bl	80074e8 <__sflush_r>
 8007622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007624:	4605      	mov	r5, r0
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d4e4      	bmi.n	80075f4 <_fflush_r+0xc>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	059b      	lsls	r3, r3, #22
 800762e:	d4e1      	bmi.n	80075f4 <_fflush_r+0xc>
 8007630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007632:	f7fa fb5a 	bl	8001cea <__retarget_lock_release_recursive>
 8007636:	e7dd      	b.n	80075f4 <_fflush_r+0xc>

08007638 <__swhatbuf_r>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	460c      	mov	r4, r1
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	4615      	mov	r5, r2
 8007642:	2900      	cmp	r1, #0
 8007644:	461e      	mov	r6, r3
 8007646:	b096      	sub	sp, #88	@ 0x58
 8007648:	da0c      	bge.n	8007664 <__swhatbuf_r+0x2c>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	2100      	movs	r1, #0
 800764e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007652:	bf14      	ite	ne
 8007654:	2340      	movne	r3, #64	@ 0x40
 8007656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800765a:	2000      	movs	r0, #0
 800765c:	6031      	str	r1, [r6, #0]
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	b016      	add	sp, #88	@ 0x58
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	466a      	mov	r2, sp
 8007666:	f000 f849 	bl	80076fc <_fstat_r>
 800766a:	2800      	cmp	r0, #0
 800766c:	dbed      	blt.n	800764a <__swhatbuf_r+0x12>
 800766e:	9901      	ldr	r1, [sp, #4]
 8007670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007678:	4259      	negs	r1, r3
 800767a:	4159      	adcs	r1, r3
 800767c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007680:	e7eb      	b.n	800765a <__swhatbuf_r+0x22>

08007682 <__smakebuf_r>:
 8007682:	898b      	ldrh	r3, [r1, #12]
 8007684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007686:	079d      	lsls	r5, r3, #30
 8007688:	4606      	mov	r6, r0
 800768a:	460c      	mov	r4, r1
 800768c:	d507      	bpl.n	800769e <__smakebuf_r+0x1c>
 800768e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	2301      	movs	r3, #1
 8007698:	6163      	str	r3, [r4, #20]
 800769a:	b003      	add	sp, #12
 800769c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769e:	466a      	mov	r2, sp
 80076a0:	ab01      	add	r3, sp, #4
 80076a2:	f7ff ffc9 	bl	8007638 <__swhatbuf_r>
 80076a6:	9f00      	ldr	r7, [sp, #0]
 80076a8:	4605      	mov	r5, r0
 80076aa:	4639      	mov	r1, r7
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7fd fcdf 	bl	8005070 <_malloc_r>
 80076b2:	b948      	cbnz	r0, 80076c8 <__smakebuf_r+0x46>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	059a      	lsls	r2, r3, #22
 80076ba:	d4ee      	bmi.n	800769a <__smakebuf_r+0x18>
 80076bc:	f023 0303 	bic.w	r3, r3, #3
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	e7e2      	b.n	800768e <__smakebuf_r+0xc>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	b15b      	cbz	r3, 80076f2 <__smakebuf_r+0x70>
 80076da:	4630      	mov	r0, r6
 80076dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076e0:	f000 f81e 	bl	8007720 <_isatty_r>
 80076e4:	b128      	cbz	r0, 80076f2 <__smakebuf_r+0x70>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	431d      	orrs	r5, r3
 80076f6:	81a5      	strh	r5, [r4, #12]
 80076f8:	e7cf      	b.n	800769a <__smakebuf_r+0x18>
	...

080076fc <_fstat_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	2300      	movs	r3, #0
 8007700:	4d06      	ldr	r5, [pc, #24]	@ (800771c <_fstat_r+0x20>)
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	602b      	str	r3, [r5, #0]
 800770a:	f7f9 fe69 	bl	80013e0 <_fstat>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d102      	bne.n	8007718 <_fstat_r+0x1c>
 8007712:	682b      	ldr	r3, [r5, #0]
 8007714:	b103      	cbz	r3, 8007718 <_fstat_r+0x1c>
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	bd38      	pop	{r3, r4, r5, pc}
 800771a:	bf00      	nop
 800771c:	20000b04 	.word	0x20000b04

08007720 <_isatty_r>:
 8007720:	b538      	push	{r3, r4, r5, lr}
 8007722:	2300      	movs	r3, #0
 8007724:	4d05      	ldr	r5, [pc, #20]	@ (800773c <_isatty_r+0x1c>)
 8007726:	4604      	mov	r4, r0
 8007728:	4608      	mov	r0, r1
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	f7f9 fe67 	bl	80013fe <_isatty>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_isatty_r+0x1a>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_isatty_r+0x1a>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20000b04 	.word	0x20000b04

08007740 <__assert_func>:
 8007740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007742:	4614      	mov	r4, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <__assert_func+0x2c>)
 8007748:	4605      	mov	r5, r0
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68d8      	ldr	r0, [r3, #12]
 800774e:	b954      	cbnz	r4, 8007766 <__assert_func+0x26>
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <__assert_func+0x30>)
 8007752:	461c      	mov	r4, r3
 8007754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007758:	9100      	str	r1, [sp, #0]
 800775a:	462b      	mov	r3, r5
 800775c:	4905      	ldr	r1, [pc, #20]	@ (8007774 <__assert_func+0x34>)
 800775e:	f000 f841 	bl	80077e4 <fiprintf>
 8007762:	f000 f851 	bl	8007808 <abort>
 8007766:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <__assert_func+0x38>)
 8007768:	e7f4      	b.n	8007754 <__assert_func+0x14>
 800776a:	bf00      	nop
 800776c:	20000018 	.word	0x20000018
 8007770:	08007b76 	.word	0x08007b76
 8007774:	08007b48 	.word	0x08007b48
 8007778:	08007b3b 	.word	0x08007b3b

0800777c <_calloc_r>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	fba1 5402 	umull	r5, r4, r1, r2
 8007782:	b93c      	cbnz	r4, 8007794 <_calloc_r+0x18>
 8007784:	4629      	mov	r1, r5
 8007786:	f7fd fc73 	bl	8005070 <_malloc_r>
 800778a:	4606      	mov	r6, r0
 800778c:	b928      	cbnz	r0, 800779a <_calloc_r+0x1e>
 800778e:	2600      	movs	r6, #0
 8007790:	4630      	mov	r0, r6
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	220c      	movs	r2, #12
 8007796:	6002      	str	r2, [r0, #0]
 8007798:	e7f9      	b.n	800778e <_calloc_r+0x12>
 800779a:	462a      	mov	r2, r5
 800779c:	4621      	mov	r1, r4
 800779e:	f7fe fae9 	bl	8005d74 <memset>
 80077a2:	e7f5      	b.n	8007790 <_calloc_r+0x14>

080077a4 <__ascii_mbtowc>:
 80077a4:	b082      	sub	sp, #8
 80077a6:	b901      	cbnz	r1, 80077aa <__ascii_mbtowc+0x6>
 80077a8:	a901      	add	r1, sp, #4
 80077aa:	b142      	cbz	r2, 80077be <__ascii_mbtowc+0x1a>
 80077ac:	b14b      	cbz	r3, 80077c2 <__ascii_mbtowc+0x1e>
 80077ae:	7813      	ldrb	r3, [r2, #0]
 80077b0:	600b      	str	r3, [r1, #0]
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	1e10      	subs	r0, r2, #0
 80077b6:	bf18      	it	ne
 80077b8:	2001      	movne	r0, #1
 80077ba:	b002      	add	sp, #8
 80077bc:	4770      	bx	lr
 80077be:	4610      	mov	r0, r2
 80077c0:	e7fb      	b.n	80077ba <__ascii_mbtowc+0x16>
 80077c2:	f06f 0001 	mvn.w	r0, #1
 80077c6:	e7f8      	b.n	80077ba <__ascii_mbtowc+0x16>

080077c8 <__ascii_wctomb>:
 80077c8:	4603      	mov	r3, r0
 80077ca:	4608      	mov	r0, r1
 80077cc:	b141      	cbz	r1, 80077e0 <__ascii_wctomb+0x18>
 80077ce:	2aff      	cmp	r2, #255	@ 0xff
 80077d0:	d904      	bls.n	80077dc <__ascii_wctomb+0x14>
 80077d2:	228a      	movs	r2, #138	@ 0x8a
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	4770      	bx	lr
 80077dc:	2001      	movs	r0, #1
 80077de:	700a      	strb	r2, [r1, #0]
 80077e0:	4770      	bx	lr
	...

080077e4 <fiprintf>:
 80077e4:	b40e      	push	{r1, r2, r3}
 80077e6:	b503      	push	{r0, r1, lr}
 80077e8:	4601      	mov	r1, r0
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	4805      	ldr	r0, [pc, #20]	@ (8007804 <fiprintf+0x20>)
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	f7ff fd5f 	bl	80072b8 <_vfiprintf_r>
 80077fa:	b002      	add	sp, #8
 80077fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007800:	b003      	add	sp, #12
 8007802:	4770      	bx	lr
 8007804:	20000018 	.word	0x20000018

08007808 <abort>:
 8007808:	2006      	movs	r0, #6
 800780a:	b508      	push	{r3, lr}
 800780c:	f000 f82c 	bl	8007868 <raise>
 8007810:	2001      	movs	r0, #1
 8007812:	f7f9 fdb2 	bl	800137a <_exit>

08007816 <_raise_r>:
 8007816:	291f      	cmp	r1, #31
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	460c      	mov	r4, r1
 800781e:	d904      	bls.n	800782a <_raise_r+0x14>
 8007820:	2316      	movs	r3, #22
 8007822:	6003      	str	r3, [r0, #0]
 8007824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800782c:	b112      	cbz	r2, 8007834 <_raise_r+0x1e>
 800782e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007832:	b94b      	cbnz	r3, 8007848 <_raise_r+0x32>
 8007834:	4628      	mov	r0, r5
 8007836:	f000 f831 	bl	800789c <_getpid_r>
 800783a:	4622      	mov	r2, r4
 800783c:	4601      	mov	r1, r0
 800783e:	4628      	mov	r0, r5
 8007840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007844:	f000 b818 	b.w	8007878 <_kill_r>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d00a      	beq.n	8007862 <_raise_r+0x4c>
 800784c:	1c59      	adds	r1, r3, #1
 800784e:	d103      	bne.n	8007858 <_raise_r+0x42>
 8007850:	2316      	movs	r3, #22
 8007852:	6003      	str	r3, [r0, #0]
 8007854:	2001      	movs	r0, #1
 8007856:	e7e7      	b.n	8007828 <_raise_r+0x12>
 8007858:	2100      	movs	r1, #0
 800785a:	4620      	mov	r0, r4
 800785c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007860:	4798      	blx	r3
 8007862:	2000      	movs	r0, #0
 8007864:	e7e0      	b.n	8007828 <_raise_r+0x12>
	...

08007868 <raise>:
 8007868:	4b02      	ldr	r3, [pc, #8]	@ (8007874 <raise+0xc>)
 800786a:	4601      	mov	r1, r0
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	f7ff bfd2 	b.w	8007816 <_raise_r>
 8007872:	bf00      	nop
 8007874:	20000018 	.word	0x20000018

08007878 <_kill_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	2300      	movs	r3, #0
 800787c:	4d06      	ldr	r5, [pc, #24]	@ (8007898 <_kill_r+0x20>)
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	4611      	mov	r1, r2
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	f7f9 fd68 	bl	800135a <_kill>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	d102      	bne.n	8007894 <_kill_r+0x1c>
 800788e:	682b      	ldr	r3, [r5, #0]
 8007890:	b103      	cbz	r3, 8007894 <_kill_r+0x1c>
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	20000b04 	.word	0x20000b04

0800789c <_getpid_r>:
 800789c:	f7f9 bd56 	b.w	800134c <_getpid>

080078a0 <_init>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	bf00      	nop
 80078a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a6:	bc08      	pop	{r3}
 80078a8:	469e      	mov	lr, r3
 80078aa:	4770      	bx	lr

080078ac <_fini>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr
