
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800aad8  0800aad8  0000bad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f8  0800b0f8  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f8  0800b0f8  0000c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b100  0800b100  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b100  0800b100  0000c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b104  0800b104  0000c104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b108  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db8  200001d8  0800b2e0  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f90  0800b2e0  0000df90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c208  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e2  00000000  00000000  00029409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138a  00000000  00000000  0002f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb99  00000000  00000000  000305aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e970  00000000  00000000  0004d143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab5d  00000000  00000000  0006bab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106610  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a28  00000000  00000000  00106654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0010e07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aac0 	.word	0x0800aac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800aac0 	.word	0x0800aac0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <MX_DMA_Init+0x48>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <MX_DMA_Init+0x48>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6153      	str	r3, [r2, #20]
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <MX_DMA_Init+0x48>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2010      	movs	r0, #16
 8000cc8:	f001 f9d7 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ccc:	2010      	movs	r0, #16
 8000cce:	f001 f9f0 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2011      	movs	r0, #17
 8000cd8:	f001 f9cf 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000cdc:	2011      	movs	r0, #17
 8000cde:	f001 f9e8 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_FREERTOS_Init>:

/* Includes ------------------------------------------------------------------*/

#include "freertos.h"

void MX_FREERTOS_Init(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	@ 0x28
 8000cf4:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8000cf6:	f004 f9bb 	bl	8005070 <osKernelInitialize>
//        .name = "StartLEDTask",
//        .priority = osPriorityAboveNormal,
//        .stack_size = 256
//    };

    osThreadAttr_t defaultTaskAttr = {
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2224      	movs	r2, #36	@ 0x24
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f007 ff49 	bl	8008b98 <memset>
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_FREERTOS_Init+0x3c>)
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	2320      	movs	r3, #32
 8000d12:	61fb      	str	r3, [r7, #28]
        .priority = osPriorityAboveNormal,
        .stack_size = 512
    };

//    osThreadNew(StartLEDTask, NULL, &ledTaskAttr);
    osThreadNew(StartMPU6050ReadWriteUART, NULL, &defaultTaskAttr);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	461a      	mov	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_FREERTOS_Init+0x40>)
 8000d1c:	f004 f9f0 	bl	8005100 <osThreadNew>

    osKernelStart();
 8000d20:	f004 f9c8 	bl	80050b4 <osKernelStart>
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800aad8 	.word	0x0800aad8
 8000d30:	08000ee9 	.word	0x08000ee9

08000d34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_GPIO_Init+0xcc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2120      	movs	r1, #32
 8000dac:	4815      	ldr	r0, [pc, #84]	@ (8000e04 <MX_GPIO_Init+0xd0>)
 8000dae:	f001 fd01 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_GPIO_Init+0xd4>)
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_GPIO_Init+0xd8>)
 8000dc8:	f001 fb70 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <MX_GPIO_Init+0xd0>)
 8000de4:	f001 fb62 	bl	80024ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	2028      	movs	r0, #40	@ 0x28
 8000dee:	f001 f944 	bl	800207a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000df2:	2028      	movs	r0, #40	@ 0x28
 8000df4:	f001 f95d 	bl	80020b2 <HAL_NVIC_EnableIRQ>

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010800 	.word	0x40010800
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	40011000 	.word	0x40011000

08000e10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <MX_I2C1_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_I2C1_Init+0x58>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e4e:	f001 fceb 	bl	8002828 <HAL_I2C_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 f926 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200001f4 	.word	0x200001f4
 8000e64:	40005400 	.word	0x40005400
 8000e68:	00061a80 	.word	0x00061a80

08000e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a15      	ldr	r2, [pc, #84]	@ (8000edc <HAL_I2C_MspInit+0x70>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d123      	bne.n	8000ed4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a13      	ldr	r2, [pc, #76]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	@ 0xc0
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <HAL_I2C_MspInit+0x78>)
 8000eb8:	f001 faf8 	bl	80024ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec6:	61d3      	str	r3, [r2, #28]
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_I2C_MspInit+0x74>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <StartMPU6050ReadWriteUART>:
//    }
//}



void StartMPU6050ReadWriteUART(void *argument) {
 8000ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eec:	b08a      	sub	sp, #40	@ 0x28
 8000eee:	af08      	add	r7, sp, #32
 8000ef0:	6078      	str	r0, [r7, #4]
    MPU6050_Init();
 8000ef2:	f000 f8f5 	bl	80010e0 <MPU6050_Init>
	MPU6050_Calibrate();
 8000ef6:	f000 f9bb 	bl	8001270 <MPU6050_Calibrate>

	while(1) {
//        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED

		MPU6050_ReadAll(&accelX, &accelY, &accelZ, &gyroX, &gyroY, &gyroZ, &temp);
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <StartMPU6050ReadWriteUART+0xa0>)
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <StartMPU6050ReadWriteUART+0xa4>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <StartMPU6050ReadWriteUART+0xa8>)
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <StartMPU6050ReadWriteUART+0xac>)
 8000f08:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <StartMPU6050ReadWriteUART+0xb0>)
 8000f0a:	4924      	ldr	r1, [pc, #144]	@ (8000f9c <StartMPU6050ReadWriteUART+0xb4>)
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <StartMPU6050ReadWriteUART+0xb8>)
 8000f0e:	f000 f94d 	bl	80011ac <MPU6050_ReadAll>

		snprintf(buffer, sizeof(buffer), "Accel: X=%d, Y=%d, Z=%d, Temp=%.2f, Gyro: X=%d, Y=%d, Z=%d\r\n",
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <StartMPU6050ReadWriteUART+0xb8>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	4698      	mov	r8, r3
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <StartMPU6050ReadWriteUART+0xb4>)
 8000f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f20:	461c      	mov	r4, r3
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <StartMPU6050ReadWriteUART+0xb0>)
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	461d      	mov	r5, r3
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <StartMPU6050ReadWriteUART+0xa0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa7a 	bl	8000428 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4916      	ldr	r1, [pc, #88]	@ (8000f94 <StartMPU6050ReadWriteUART+0xac>)
 8000f3a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000f3e:	4608      	mov	r0, r1
 8000f40:	4913      	ldr	r1, [pc, #76]	@ (8000f90 <StartMPU6050ReadWriteUART+0xa8>)
 8000f42:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000f46:	460e      	mov	r6, r1
 8000f48:	4910      	ldr	r1, [pc, #64]	@ (8000f8c <StartMPU6050ReadWriteUART+0xa4>)
 8000f4a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000f4e:	9106      	str	r1, [sp, #24]
 8000f50:	9605      	str	r6, [sp, #20]
 8000f52:	9004      	str	r0, [sp, #16]
 8000f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f58:	9501      	str	r5, [sp, #4]
 8000f5a:	9400      	str	r4, [sp, #0]
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	4a11      	ldr	r2, [pc, #68]	@ (8000fa4 <StartMPU6050ReadWriteUART+0xbc>)
 8000f60:	21c8      	movs	r1, #200	@ 0xc8
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <StartMPU6050ReadWriteUART+0xc0>)
 8000f64:	f007 fd0c 	bl	8008980 <sniprintf>
				 accelX, accelY, accelZ, temp, gyroX, gyroY, gyroZ);
		HAL_UART_Transmit_DMA(&huart2, (uint8_t *)buffer, strlen(buffer));
 8000f68:	480f      	ldr	r0, [pc, #60]	@ (8000fa8 <StartMPU6050ReadWriteUART+0xc0>)
 8000f6a:	f7ff f8f1 	bl	8000150 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <StartMPU6050ReadWriteUART+0xc0>)
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <StartMPU6050ReadWriteUART+0xc4>)
 8000f78:	f003 fd96 	bl	8004aa8 <HAL_UART_Transmit_DMA>
		HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f000 ffa3 	bl	8001ec8 <HAL_Delay>
	while(1) {
 8000f82:	bf00      	nop
 8000f84:	e7b9      	b.n	8000efa <StartMPU6050ReadWriteUART+0x12>
 8000f86:	bf00      	nop
 8000f88:	20000258 	.word	0x20000258
 8000f8c:	20000256 	.word	0x20000256
 8000f90:	20000254 	.word	0x20000254
 8000f94:	20000252 	.word	0x20000252
 8000f98:	20000250 	.word	0x20000250
 8000f9c:	2000024e 	.word	0x2000024e
 8000fa0:	2000024c 	.word	0x2000024c
 8000fa4:	0800aaf4 	.word	0x0800aaf4
 8000fa8:	2000025c 	.word	0x2000025c
 8000fac:	20000374 	.word	0x20000374

08000fb0 <main>:
osMutexId_t uartMutex;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    HAL_Init();
 8000fb4:	f000 ff56 	bl	8001e64 <HAL_Init>
    SystemClock_Config();
 8000fb8:	f000 f80e 	bl	8000fd8 <SystemClock_Config>
    MX_GPIO_Init();
 8000fbc:	f7ff feba 	bl	8000d34 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000fc0:	f7ff ff26 	bl	8000e10 <MX_I2C1_Init>
    MX_DMA_Init();
 8000fc4:	f7ff fe6e 	bl	8000ca4 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8000fc8:	f000 fd9a 	bl	8001b00 <MX_USART2_UART_Init>
    InitMutexes();
 8000fcc:	f000 f846 	bl	800105c <InitMutexes>
    MX_FREERTOS_Init();
 8000fd0:	f7ff fe8e 	bl	8000cf0 <MX_FREERTOS_Init>

	while (1) {
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <main+0x24>

08000fd8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b090      	sub	sp, #64	@ 0x40
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	2228      	movs	r2, #40	@ 0x28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f007 fdd6 	bl	8008b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	2301      	movs	r3, #1
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001002:	2310      	movs	r3, #16
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001006:	2302      	movs	r3, #2
 8001008:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800100e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fdeb 	bl	8003bf4 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001024:	f000 f840 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f858 	bl	80040f8 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800104e:	f000 f82b 	bl	80010a8 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3740      	adds	r7, #64	@ 0x40
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <InitMutexes>:

/* USER CODE BEGIN 4 */
void InitMutexes(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    uartMutex = osMutexNew(NULL);
 8001060:	2000      	movs	r0, #0
 8001062:	f004 f8df 	bl	8005224 <osMutexNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <InitMutexes+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
    i2cMutex = osMutexNew(NULL);
 800106c:	2000      	movs	r0, #0
 800106e:	f004 f8d9 	bl	8005224 <osMutexNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a02      	ldr	r2, [pc, #8]	@ (8001080 <InitMutexes+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000324 	.word	0x20000324
 8001080:	20000248 	.word	0x20000248

08001084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001096:	f000 fefb 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <Error_Handler+0x8>

080010b4 <_write>:
#ifndef INC_WRITE_PRINTF_H_
#define INC_WRITE_PRINTF_H_

#include "usart.h" // Include the generated USART configuration

int _write(int file, char *data, int len) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	4804      	ldr	r0, [pc, #16]	@ (80010dc <_write+0x28>)
 80010cc:	f003 fc60 	bl	8004990 <HAL_UART_Transmit>
    return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000374 	.word	0x20000374

080010e0 <MPU6050_Init>:
 */

#include "mpu6050.h"
#include "write_printf.h"

void MPU6050_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
    uint8_t data[2];

    MPU6050_SoftReset();
 80010e6:	f000 fb59 	bl	800179c <MPU6050_SoftReset>

    // Wake up the MPU6050 (write 0 to PWR_MGMT_1 register)
    data[0] = 0x6B;  // Register address
 80010ea:	236b      	movs	r3, #107	@ 0x6b
 80010ec:	713b      	strb	r3, [r7, #4]
    data[1] = 0x00;  // Data to write
 80010ee:	2300      	movs	r3, #0
 80010f0:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80010f2:	1d3a      	adds	r2, r7, #4
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2302      	movs	r3, #2
 80010fc:	21d0      	movs	r1, #208	@ 0xd0
 80010fe:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <MPU6050_Init+0xc0>)
 8001100:	f001 fcd6 	bl	8002ab0 <HAL_I2C_Master_Transmit>
    }

    uint8_t data_config;

    // Set accelerometer range to ±2g
    data_config = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1cfb      	adds	r3, r7, #3
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	221c      	movs	r2, #28
 800111a:	21d0      	movs	r1, #208	@ 0xd0
 800111c:	4820      	ldr	r0, [pc, #128]	@ (80011a0 <MPU6050_Init+0xc0>)
 800111e:	f001 fdc5 	bl	8002cac <HAL_I2C_Mem_Write>

    // Set gyroscope range to ±250°/s
    data_config = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &data_config, 1, HAL_MAX_DELAY);
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1cfb      	adds	r3, r7, #3
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	221b      	movs	r2, #27
 8001138:	21d0      	movs	r1, #208	@ 0xd0
 800113a:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <MPU6050_Init+0xc0>)
 800113c:	f001 fdb6 	bl	8002cac <HAL_I2C_Mem_Write>

    // Set sample rate to 125Hz
    data_config = 0x07;
 8001140:	2307      	movs	r3, #7
 8001142:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &data_config, 1, HAL_MAX_DELAY);
 8001144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	1cfb      	adds	r3, r7, #3
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2219      	movs	r2, #25
 8001156:	21d0      	movs	r1, #208	@ 0xd0
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MPU6050_Init+0xc0>)
 800115a:	f001 fda7 	bl	8002cac <HAL_I2C_Mem_Write>


    uint8_t whoAmI = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &whoAmI, 1, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	1cbb      	adds	r3, r7, #2
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	2275      	movs	r2, #117	@ 0x75
 8001174:	21d0      	movs	r1, #208	@ 0xd0
 8001176:	480a      	ldr	r0, [pc, #40]	@ (80011a0 <MPU6050_Init+0xc0>)
 8001178:	f001 fe92 	bl	8002ea0 <HAL_I2C_Mem_Read>
    if (whoAmI != 0x68) {
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	2b68      	cmp	r3, #104	@ 0x68
 8001180:	d005      	beq.n	800118e <MPU6050_Init+0xae>
        printf("MPU6050 not detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 8001182:	78bb      	ldrb	r3, [r7, #2]
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <MPU6050_Init+0xc4>)
 8001188:	f007 fb8a 	bl	80088a0 <iprintf>
    } else {
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
    }
}
 800118c:	e004      	b.n	8001198 <MPU6050_Init+0xb8>
        printf("MPU6050 detected. WHO_AM_I = 0x%02X\r\n", whoAmI);
 800118e:	78bb      	ldrb	r3, [r7, #2]
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MPU6050_Init+0xc8>)
 8001194:	f007 fb84 	bl	80088a0 <iprintf>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001f4 	.word	0x200001f4
 80011a4:	0800ab34 	.word	0x0800ab34
 80011a8:	0800ab60 	.word	0x0800ab60

080011ac <MPU6050_ReadAll>:

void MPU6050_ReadAll(int16_t *accelX, int16_t *accelY, int16_t *accelZ,
                     int16_t *gyroX, int16_t *gyroY, int16_t *gyroZ, float *temp) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	@ 0x30
 80011b0:	af04      	add	r7, sp, #16
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
    uint8_t buffer[14];

    // Read 14 bytes starting from register 0x3B
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, buffer, 14, HAL_MAX_DELAY) == HAL_OK) {
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	230e      	movs	r3, #14
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	223b      	movs	r2, #59	@ 0x3b
 80011ce:	21d0      	movs	r1, #208	@ 0xd0
 80011d0:	4826      	ldr	r0, [pc, #152]	@ (800126c <MPU6050_ReadAll+0xc0>)
 80011d2:	f001 fe65 	bl	8002ea0 <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d142      	bne.n	8001262 <MPU6050_ReadAll+0xb6>
        *accelX = (int16_t)(buffer[0] << 8 | buffer[1]);
 80011dc:	7c3b      	ldrb	r3, [r7, #16]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7c7b      	ldrb	r3, [r7, #17]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	801a      	strh	r2, [r3, #0]
        *accelY = (int16_t)(buffer[2] << 8 | buffer[3]);
 80011ee:	7cbb      	ldrb	r3, [r7, #18]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7cfb      	ldrb	r3, [r7, #19]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	801a      	strh	r2, [r3, #0]
        *accelZ = (int16_t)(buffer[4] << 8 | buffer[5]);
 8001200:	7d3b      	ldrb	r3, [r7, #20]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	7d7b      	ldrb	r3, [r7, #21]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	801a      	strh	r2, [r3, #0]
        *temp   = (int16_t)(buffer[6] << 8 | buffer[7]);
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21b      	sxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fceb 	bl	8000bfc <__aeabi_i2f>
 8001226:	4602      	mov	r2, r0
 8001228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122a:	601a      	str	r2, [r3, #0]
        *gyroX  = (int16_t)(buffer[8] << 8 | buffer[9]);
 800122c:	7e3b      	ldrb	r3, [r7, #24]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7e7b      	ldrb	r3, [r7, #25]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21a      	sxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	801a      	strh	r2, [r3, #0]
        *gyroY  = (int16_t)(buffer[10] << 8 | buffer[11]);
 800123e:	7ebb      	ldrb	r3, [r7, #26]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7efb      	ldrb	r3, [r7, #27]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124e:	801a      	strh	r2, [r3, #0]
        *gyroZ  = (int16_t)(buffer[12] << 8 | buffer[13]);
 8001250:	7f3b      	ldrb	r3, [r7, #28]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7f7b      	ldrb	r3, [r7, #29]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21a      	sxth	r2, r3
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	801a      	strh	r2, [r3, #0]
    } else {
    	//Error handle
    }
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001f4 	.word	0x200001f4

08001270 <MPU6050_Calibrate>:

void MPU6050_Calibrate(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
    int16_t accelOffsets[3], gyroOffsets[3];

    // Calculate offsets
    MPU6050_CalculateOffsets(accelOffsets, gyroOffsets);
 8001276:	463a      	mov	r2, r7
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f82a 	bl	80012d8 <MPU6050_CalculateOffsets>

    // Write offsets to MPU6050
    MPU6050_WriteOffsets(accelOffsets, gyroOffsets);
 8001284:	463a      	mov	r2, r7
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f8eb 	bl	8001468 <MPU6050_WriteOffsets>

    // Optional: Print offsets for debugging
    printf("Accel Offsets: X=%d, Y=%d, Z=%d\r\n", accelOffsets[0], accelOffsets[1], accelOffsets[2]);
 8001292:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001296:	4619      	mov	r1, r3
 8001298:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129c:	461a      	mov	r2, r3
 800129e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <MPU6050_Calibrate+0x60>)
 80012a4:	f007 fafc 	bl	80088a0 <iprintf>
    printf("Gyro Offsets: X=%d, Y=%d, Z=%d\r\n", gyroOffsets[0], gyroOffsets[1], gyroOffsets[2]);
 80012a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012b2:	461a      	mov	r2, r3
 80012b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b8:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MPU6050_Calibrate+0x64>)
 80012ba:	f007 faf1 	bl	80088a0 <iprintf>

    HAL_Delay(2000);
 80012be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012c2:	f000 fe01 	bl	8001ec8 <HAL_Delay>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800ab88 	.word	0x0800ab88
 80012d4:	0800abac 	.word	0x0800abac

080012d8 <MPU6050_CalculateOffsets>:

void MPU6050_CalculateOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b090      	sub	sp, #64	@ 0x40
 80012dc:	af04      	add	r7, sp, #16
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    int32_t accelX_sum = 0, accelY_sum = 0, accelZ_sum = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t gyroX_sum = 0, gyroY_sum = 0, gyroZ_sum = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]

    uint8_t rawData[6];
    for (int i = 0; i < 1000; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e063      	b.n	80013c8 <MPU6050_CalculateOffsets+0xf0>
        // Read accelerometer data
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H, 1, rawData, 6, HAL_MAX_DELAY);
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2306      	movs	r3, #6
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	223b      	movs	r2, #59	@ 0x3b
 8001314:	21d0      	movs	r1, #208	@ 0xd0
 8001316:	4852      	ldr	r0, [pc, #328]	@ (8001460 <MPU6050_CalculateOffsets+0x188>)
 8001318:	f001 fdc2 	bl	8002ea0 <HAL_I2C_Mem_Read>
        accelX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	b21a      	sxth	r2, r3
 8001322:	7b7b      	ldrb	r3, [r7, #13]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21b      	sxth	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132e:	4413      	add	r3, r2
 8001330:	62fb      	str	r3, [r7, #44]	@ 0x2c
        accelY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001344:	4413      	add	r3, r2
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
        accelZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]);
 8001348:	7c3b      	ldrb	r3, [r7, #16]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	7c7b      	ldrb	r3, [r7, #17]
 8001350:	b21b      	sxth	r3, r3
 8001352:	4313      	orrs	r3, r2
 8001354:	b21b      	sxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	4413      	add	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24

        // Read gyroscope data
        HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H, 1, rawData, 6, HAL_MAX_DELAY);
 800135e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2306      	movs	r3, #6
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	2243      	movs	r2, #67	@ 0x43
 8001372:	21d0      	movs	r1, #208	@ 0xd0
 8001374:	483a      	ldr	r0, [pc, #232]	@ (8001460 <MPU6050_CalculateOffsets+0x188>)
 8001376:	f001 fd93 	bl	8002ea0 <HAL_I2C_Mem_Read>
        gyroX_sum += (int16_t)((rawData[0] << 8) | rawData[1]);
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7b7b      	ldrb	r3, [r7, #13]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21b      	sxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	4413      	add	r3, r2
 800138e:	623b      	str	r3, [r7, #32]
        gyroY_sum += (int16_t)((rawData[2] << 8) | rawData[3]);
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21b      	sxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	4413      	add	r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
        gyroZ_sum += (int16_t)((rawData[4] << 8) | rawData[5]);
 80013a6:	7c3b      	ldrb	r3, [r7, #16]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	7c7b      	ldrb	r3, [r7, #17]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4413      	add	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]

        HAL_Delay(2);
 80013bc:	2002      	movs	r0, #2
 80013be:	f000 fd83 	bl	8001ec8 <HAL_Delay>
    for (int i = 0; i < 1000; i++) {
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ce:	db97      	blt.n	8001300 <MPU6050_CalculateOffsets+0x28>
    }

    // Calculate average offsets
    accelOffsets[0] = accelX_sum / 1000;
 80013d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d2:	4a24      	ldr	r2, [pc, #144]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 80013d4:	fb82 1203 	smull	r1, r2, r2, r3
 80013d8:	1192      	asrs	r2, r2, #6
 80013da:	17db      	asrs	r3, r3, #31
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	801a      	strh	r2, [r3, #0]
    accelOffsets[1] = accelY_sum / 1000;
 80013e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 80013e8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ec:	1192      	asrs	r2, r2, #6
 80013ee:	17db      	asrs	r3, r3, #31
 80013f0:	1ad2      	subs	r2, r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3302      	adds	r3, #2
 80013f6:	b212      	sxth	r2, r2
 80013f8:	801a      	strh	r2, [r3, #0]
    accelOffsets[2] = (accelZ_sum / 1000) - 16384; // Subtract 1g for Z-axis
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 80013fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001402:	1192      	asrs	r2, r2, #6
 8001404:	17db      	asrs	r3, r3, #31
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3304      	adds	r3, #4
 8001414:	b212      	sxth	r2, r2
 8001416:	801a      	strh	r2, [r3, #0]

    gyroOffsets[0] = gyroX_sum / 1000;
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 800141c:	fb82 1203 	smull	r1, r2, r2, r3
 8001420:	1192      	asrs	r2, r2, #6
 8001422:	17db      	asrs	r3, r3, #31
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	801a      	strh	r2, [r3, #0]
    gyroOffsets[1] = gyroY_sum / 1000;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 8001430:	fb82 1203 	smull	r1, r2, r2, r3
 8001434:	1192      	asrs	r2, r2, #6
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3302      	adds	r3, #2
 800143e:	b212      	sxth	r2, r2
 8001440:	801a      	strh	r2, [r3, #0]
    gyroOffsets[2] = gyroZ_sum / 1000;
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <MPU6050_CalculateOffsets+0x18c>)
 8001446:	fb82 1203 	smull	r1, r2, r2, r3
 800144a:	1192      	asrs	r2, r2, #6
 800144c:	17db      	asrs	r3, r3, #31
 800144e:	1ad2      	subs	r2, r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3304      	adds	r3, #4
 8001454:	b212      	sxth	r2, r2
 8001456:	801a      	strh	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	@ 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200001f4 	.word	0x200001f4
 8001464:	10624dd3 	.word	0x10624dd3

08001468 <MPU6050_WriteOffsets>:

void MPU6050_WriteOffsets(int16_t *accelOffsets, int16_t *gyroOffsets) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    HAL_StatusTypeDef status;
    uint8_t readBack[2];

    // Write accelerometer offsets
    data[0] = (uint8_t)((accelOffsets[0] >> 8) & 0xFF); // High byte
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	121b      	asrs	r3, r3, #8
 800147a:	b21b      	sxth	r3, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(accelOffsets[0] & 0xFF);        // Low byte
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XA_OFFS_H, 1, data, 2, HAL_MAX_DELAY);
 800148a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800148e:	9302      	str	r3, [sp, #8]
 8001490:	2302      	movs	r3, #2
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2301      	movs	r3, #1
 800149c:	2206      	movs	r2, #6
 800149e:	21d0      	movs	r1, #208	@ 0xd0
 80014a0:	48b1      	ldr	r0, [pc, #708]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 80014a2:	f001 fc03 	bl	8002cac <HAL_I2C_Mem_Write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) printf("Error writing Accel X offset\r\n");
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <MPU6050_WriteOffsets+0x4e>
 80014b0:	48ae      	ldr	r0, [pc, #696]	@ (800176c <MPU6050_WriteOffsets+0x304>)
 80014b2:	f007 fa5d 	bl	8008970 <puts>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, XA_OFFS_H, 1, readBack, 2, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2302      	movs	r3, #2
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	2206      	movs	r2, #6
 80014ca:	21d0      	movs	r1, #208	@ 0xd0
 80014cc:	48a6      	ldr	r0, [pc, #664]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 80014ce:	f001 fce7 	bl	8002ea0 <HAL_I2C_Mem_Read>
    int16_t writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 80014d2:	7b3b      	ldrb	r3, [r7, #12]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	82bb      	strh	r3, [r7, #20]
    printf("Accel X Offset Written: %d\r\n", writtenOffset);
 80014e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e4:	4619      	mov	r1, r3
 80014e6:	48a2      	ldr	r0, [pc, #648]	@ (8001770 <MPU6050_WriteOffsets+0x308>)
 80014e8:	f007 f9da 	bl	80088a0 <iprintf>

    data[0] = (uint8_t)((accelOffsets[1] >> 8) & 0xFF); // High byte
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3302      	adds	r3, #2
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(accelOffsets[1] & 0xFF);        // Low byte
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3302      	adds	r3, #2
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YA_OFFS_H, 1, data, 2, HAL_MAX_DELAY);
 8001508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	2302      	movs	r3, #2
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	2208      	movs	r2, #8
 800151c:	21d0      	movs	r1, #208	@ 0xd0
 800151e:	4892      	ldr	r0, [pc, #584]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001520:	f001 fbc4 	bl	8002cac <HAL_I2C_Mem_Write>
 8001524:	4603      	mov	r3, r0
 8001526:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) printf("Error writing Accel Y offset\r\n");
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <MPU6050_WriteOffsets+0xcc>
 800152e:	4891      	ldr	r0, [pc, #580]	@ (8001774 <MPU6050_WriteOffsets+0x30c>)
 8001530:	f007 fa1e 	bl	8008970 <puts>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, YA_OFFS_H, 1, readBack, 2, HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2302      	movs	r3, #2
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2208      	movs	r2, #8
 8001548:	21d0      	movs	r1, #208	@ 0xd0
 800154a:	4887      	ldr	r0, [pc, #540]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 800154c:	f001 fca8 	bl	8002ea0 <HAL_I2C_Mem_Read>
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 8001550:	7b3b      	ldrb	r3, [r7, #12]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7b7b      	ldrb	r3, [r7, #13]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	82bb      	strh	r3, [r7, #20]
    printf("Accel Y Offset Written: %d\r\n", writtenOffset);
 800155e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001562:	4619      	mov	r1, r3
 8001564:	4884      	ldr	r0, [pc, #528]	@ (8001778 <MPU6050_WriteOffsets+0x310>)
 8001566:	f007 f99b 	bl	80088a0 <iprintf>

    data[0] = (uint8_t)((accelOffsets[2] >> 8) & 0xFF); // High byte
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3304      	adds	r3, #4
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	121b      	asrs	r3, r3, #8
 8001574:	b21b      	sxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(accelOffsets[2] & 0xFF);        // Low byte
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, 1, data, 2, HAL_MAX_DELAY);
 8001586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2302      	movs	r3, #2
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	220a      	movs	r2, #10
 800159a:	21d0      	movs	r1, #208	@ 0xd0
 800159c:	4872      	ldr	r0, [pc, #456]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 800159e:	f001 fb85 	bl	8002cac <HAL_I2C_Mem_Write>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) printf("Error writing Accel Z offset\r\n");
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <MPU6050_WriteOffsets+0x14a>
 80015ac:	4873      	ldr	r0, [pc, #460]	@ (800177c <MPU6050_WriteOffsets+0x314>)
 80015ae:	f007 f9df 	bl	8008970 <puts>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZA_OFFS_H, 1, readBack, 2, HAL_MAX_DELAY);
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2302      	movs	r3, #2
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2301      	movs	r3, #1
 80015c4:	220a      	movs	r2, #10
 80015c6:	21d0      	movs	r1, #208	@ 0xd0
 80015c8:	4867      	ldr	r0, [pc, #412]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 80015ca:	f001 fc69 	bl	8002ea0 <HAL_I2C_Mem_Read>
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7b7b      	ldrb	r3, [r7, #13]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	82bb      	strh	r3, [r7, #20]
    printf("Accel Z Offset Written: %d\r\n", writtenOffset);
 80015dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4867      	ldr	r0, [pc, #412]	@ (8001780 <MPU6050_WriteOffsets+0x318>)
 80015e4:	f007 f95c 	bl	80088a0 <iprintf>

    // Write gyroscope offsets
    data[0] = (uint8_t)((gyroOffsets[0] >> 8) & 0xFF); // High byte
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	121b      	asrs	r3, r3, #8
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(gyroOffsets[0] & 0xFF);        // Low byte
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, 1, data, 2, HAL_MAX_DELAY);
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	2302      	movs	r3, #2
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	2213      	movs	r2, #19
 8001614:	21d0      	movs	r1, #208	@ 0xd0
 8001616:	4854      	ldr	r0, [pc, #336]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001618:	f001 fb48 	bl	8002cac <HAL_I2C_Mem_Write>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK) printf("Error writing Gyro X offset\r\n");
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <MPU6050_WriteOffsets+0x1c4>
 8001626:	4857      	ldr	r0, [pc, #348]	@ (8001784 <MPU6050_WriteOffsets+0x31c>)
 8001628:	f007 f9a2 	bl	8008970 <puts>
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, XG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2302      	movs	r3, #2
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	2213      	movs	r2, #19
 8001640:	21d0      	movs	r1, #208	@ 0xd0
 8001642:	4849      	ldr	r0, [pc, #292]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001644:	f001 fc2c 	bl	8002ea0 <HAL_I2C_Mem_Read>
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	82bb      	strh	r3, [r7, #20]
    printf("Gyro X Offset Written: %d\r\n", writtenOffset);
 8001656:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800165a:	4619      	mov	r1, r3
 800165c:	484a      	ldr	r0, [pc, #296]	@ (8001788 <MPU6050_WriteOffsets+0x320>)
 800165e:	f007 f91f 	bl	80088a0 <iprintf>

    data[0] = (uint8_t)((gyroOffsets[1] >> 8) & 0xFF); // High byte
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3302      	adds	r3, #2
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	121b      	asrs	r3, r3, #8
 800166c:	b21b      	sxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(gyroOffsets[1] & 0xFF);        // Low byte
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3302      	adds	r3, #2
 8001676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, 1, data, 2, HAL_MAX_DELAY);
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2302      	movs	r3, #2
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2215      	movs	r2, #21
 8001692:	21d0      	movs	r1, #208	@ 0xd0
 8001694:	4834      	ldr	r0, [pc, #208]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001696:	f001 fb09 	bl	8002cac <HAL_I2C_Mem_Write>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) printf("Error writing Gyro Y offset\r\n");
 800169e:	7dfb      	ldrb	r3, [r7, #23]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <MPU6050_WriteOffsets+0x242>
 80016a4:	4839      	ldr	r0, [pc, #228]	@ (800178c <MPU6050_WriteOffsets+0x324>)
 80016a6:	f007 f963 	bl	8008970 <puts>

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, YG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	2215      	movs	r2, #21
 80016be:	21d0      	movs	r1, #208	@ 0xd0
 80016c0:	4829      	ldr	r0, [pc, #164]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 80016c2:	f001 fbed 	bl	8002ea0 <HAL_I2C_Mem_Read>
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7b7b      	ldrb	r3, [r7, #13]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	82bb      	strh	r3, [r7, #20]
    printf("Gyro Y Offset Written: %d\r\n", writtenOffset);
 80016d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016d8:	4619      	mov	r1, r3
 80016da:	482d      	ldr	r0, [pc, #180]	@ (8001790 <MPU6050_WriteOffsets+0x328>)
 80016dc:	f007 f8e0 	bl	80088a0 <iprintf>

    data[0] = (uint8_t)((gyroOffsets[2] >> 8) & 0xFF); // High byte
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	3304      	adds	r3, #4
 80016e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e8:	121b      	asrs	r3, r3, #8
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	743b      	strb	r3, [r7, #16]
    data[1] = (uint8_t)(gyroOffsets[2] & 0xFF);        // Low byte
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3304      	adds	r3, #4
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	747b      	strb	r3, [r7, #17]
    status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, data, 2, HAL_MAX_DELAY);
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	2302      	movs	r3, #2
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2301      	movs	r3, #1
 800170e:	2217      	movs	r2, #23
 8001710:	21d0      	movs	r1, #208	@ 0xd0
 8001712:	4815      	ldr	r0, [pc, #84]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001714:	f001 faca 	bl	8002cac <HAL_I2C_Mem_Write>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) printf("Error writing Gyro Z offset\r\n");
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <MPU6050_WriteOffsets+0x2c0>
 8001722:	481c      	ldr	r0, [pc, #112]	@ (8001794 <MPU6050_WriteOffsets+0x32c>)
 8001724:	f007 f924 	bl	8008970 <puts>

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ZG_OFFS_USRH, 1, readBack, 2, HAL_MAX_DELAY);
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2302      	movs	r3, #2
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	2217      	movs	r2, #23
 800173c:	21d0      	movs	r1, #208	@ 0xd0
 800173e:	480a      	ldr	r0, [pc, #40]	@ (8001768 <MPU6050_WriteOffsets+0x300>)
 8001740:	f001 fbae 	bl	8002ea0 <HAL_I2C_Mem_Read>
    writtenOffset = (int16_t)((readBack[0] << 8) | readBack[1]);
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b21a      	sxth	r2, r3
 800174a:	7b7b      	ldrb	r3, [r7, #13]
 800174c:	b21b      	sxth	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	82bb      	strh	r3, [r7, #20]
    printf("Gyro Z Offset Written: %d\r\n", writtenOffset);
 8001752:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001756:	4619      	mov	r1, r3
 8001758:	480f      	ldr	r0, [pc, #60]	@ (8001798 <MPU6050_WriteOffsets+0x330>)
 800175a:	f007 f8a1 	bl	80088a0 <iprintf>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200001f4 	.word	0x200001f4
 800176c:	0800abd0 	.word	0x0800abd0
 8001770:	0800abf0 	.word	0x0800abf0
 8001774:	0800ac10 	.word	0x0800ac10
 8001778:	0800ac30 	.word	0x0800ac30
 800177c:	0800ac50 	.word	0x0800ac50
 8001780:	0800ac70 	.word	0x0800ac70
 8001784:	0800ac90 	.word	0x0800ac90
 8001788:	0800acb0 	.word	0x0800acb0
 800178c:	0800accc 	.word	0x0800accc
 8001790:	0800acec 	.word	0x0800acec
 8001794:	0800ad08 	.word	0x0800ad08
 8001798:	0800ad28 	.word	0x0800ad28

0800179c <MPU6050_SoftReset>:

void MPU6050_SoftReset(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af04      	add	r7, sp, #16
    uint8_t data = 0x80; // DEVICE_RESET bit
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2301      	movs	r3, #1
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2301      	movs	r3, #1
 80017b6:	226b      	movs	r2, #107	@ 0x6b
 80017b8:	21d0      	movs	r1, #208	@ 0xd0
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MPU6050_SoftReset+0x34>)
 80017bc:	f001 fa76 	bl	8002cac <HAL_I2C_Mem_Write>
    HAL_Delay(1000); // Allow time for the reset to complete
 80017c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c4:	f000 fb80 	bl	8001ec8 <HAL_Delay>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200001f4 	.word	0x200001f4

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <HAL_MspInit+0x68>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a17      	ldr	r2, [pc, #92]	@ (800183c <HAL_MspInit+0x68>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_MspInit+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_MspInit+0x68>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <HAL_MspInit+0x68>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	61d3      	str	r3, [r2, #28]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <HAL_MspInit+0x68>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	f06f 0001 	mvn.w	r0, #1
 8001812:	f000 fc32 	bl	800207a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_MspInit+0x6c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <HAL_MspInit+0x6c>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	@ 0x30
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <HAL_InitTick+0xd0>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4a2d      	ldr	r2, [pc, #180]	@ (8001914 <HAL_InitTick+0xd0>)
 8001860:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_InitTick+0xd0>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fdab 	bl	80043d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001882:	f002 fd95 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 8001886:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <HAL_InitTick+0xd4>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3b01      	subs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <HAL_InitTick+0xd8>)
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <HAL_InitTick+0xdc>)
 800189a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <HAL_InitTick+0xd8>)
 800189e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018a4:	4a1d      	ldr	r2, [pc, #116]	@ (800191c <HAL_InitTick+0xd8>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <HAL_InitTick+0xd8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <HAL_InitTick+0xd8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <HAL_InitTick+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018bc:	4817      	ldr	r0, [pc, #92]	@ (800191c <HAL_InitTick+0xd8>)
 80018be:	f002 fdd9 	bl	8004474 <HAL_TIM_Base_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11b      	bne.n	8001908 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018d0:	4812      	ldr	r0, [pc, #72]	@ (800191c <HAL_InitTick+0xd8>)
 80018d2:	f002 fe27 	bl	8004524 <HAL_TIM_Base_Start_IT>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018e4:	2019      	movs	r0, #25
 80018e6:	f000 fbe4 	bl	80020b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d808      	bhi.n	8001902 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	2019      	movs	r0, #25
 80018f6:	f000 fbc0 	bl	800207a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_InitTick+0xe0>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e002      	b.n	8001908 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800190c:	4618      	mov	r0, r3
 800190e:	3730      	adds	r7, #48	@ 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	20000328 	.word	0x20000328
 8001920:	40012c00 	.word	0x40012c00
 8001924:	20000004 	.word	0x20000004

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <NMI_Handler+0x4>

08001930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <MemManage_Handler+0x4>

08001940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <UsageFault_Handler+0x4>

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Channel6_IRQHandler+0x10>)
 8001962:	f000 fc6f 	bl	8002244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200003bc 	.word	0x200003bc

08001970 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Channel7_IRQHandler+0x10>)
 8001976:	f000 fc65 	bl	8002244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000400 	.word	0x20000400

08001984 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM1_UP_IRQHandler+0x10>)
 800198a:	f002 fe1d 	bl	80045c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000328 	.word	0x20000328

08001998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800199c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019a0:	f000 ff20 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <_kill>:

int _kill(int pid, int sig)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c0:	f007 f9a2 	bl	8008d08 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2216      	movs	r2, #22
 80019c8:	601a      	str	r2, [r3, #0]
  return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_exit>:

void _exit (int status)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ffe7 	bl	80019b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <_exit+0x12>

080019ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e00a      	b.n	8001a14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fe:	f3af 8000 	nop.w
 8001a02:	4601      	mov	r1, r0
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf0      	blt.n	80019fe <_read+0x12>
  }

  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
	...

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	@ (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f007 f926 	bl	8008d08 <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	@ (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20005000 	.word	0x20005000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	20000370 	.word	0x20000370
 8001af0:	20001f90 	.word	0x20001f90

08001af4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_USART2_UART_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_USART2_UART_Init+0x4c>)
 8001b38:	f002 feda 	bl	80048f0 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b42:	f7ff fab1 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000374 	.word	0x20000374
 8001b50:	40004400 	.word	0x40004400

08001b54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c5c <HAL_UART_MspInit+0x108>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d16f      	bne.n	8001c54 <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b74:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7e:	61d3      	str	r3, [r2, #28]
 8001b80:	4b37      	ldr	r3, [pc, #220]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a33      	ldr	r2, [pc, #204]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_UART_MspInit+0x10c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482b      	ldr	r0, [pc, #172]	@ (8001c64 <HAL_UART_MspInit+0x110>)
 8001bb8:	f000 fc78 	bl	80024ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001c6c <HAL_UART_MspInit+0x118>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bd0:	2280      	movs	r2, #128	@ 0x80
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd4:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001be0:	4b21      	ldr	r3, [pc, #132]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001be2:	2220      	movs	r2, #32
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bec:	481e      	ldr	r0, [pc, #120]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001bee:	f000 fa6f 	bl	80020d0 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 8001bf8:	f7ff fa56 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001c00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c02:	4a19      	ldr	r2, [pc, #100]	@ (8001c68 <HAL_UART_MspInit+0x114>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c08:	4b19      	ldr	r3, [pc, #100]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_UART_MspInit+0x120>)
 8001c0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c10:	2210      	movs	r2, #16
 8001c12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b16      	ldr	r3, [pc, #88]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c2e:	2220      	movs	r2, #32
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c38:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c3a:	f000 fa49 	bl	80020d0 <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001c44:	f7ff fa30 	bl	80010a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c4e:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_UART_MspInit+0x11c>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	200003bc 	.word	0x200003bc
 8001c6c:	4002006c 	.word	0x4002006c
 8001c70:	20000400 	.word	0x20000400
 8001c74:	40020080 	.word	0x40020080

08001c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c78:	f7ff ff3c 	bl	8001af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c7c:	480b      	ldr	r0, [pc, #44]	@ (8001cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c7e:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c94:	4c09      	ldr	r4, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f007 f837 	bl	8008d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ca6:	f7ff f983 	bl	8000fb0 <main>
  bx lr
 8001caa:	4770      	bx	lr
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001cb4:	0800b108 	.word	0x0800b108
  ldr r2, =_sbss
 8001cb8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cbc:	20001f90 	.word	0x20001f90

08001cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC1_2_IRQHandler>

08001cc2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
 8001cd4:	f7ff f9e8 	bl	80010a8 <Error_Handler>
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e007      	b.n	8001cf2 <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d9f4      	bls.n	8001ce2 <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	721a      	strb	r2, [r3, #8]
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
 8001d18:	f7ff f9c6 	bl	80010a8 <Error_Handler>
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7a1b      	ldrb	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d905      	bls.n	8001d34 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
 8001d2c:	f7ff f9bc 	bl	80010a8 <Error_Handler>
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7a1b      	ldrb	r3, [r3, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	b2d1      	uxtb	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	7211      	strb	r1, [r2, #8]
 8001d40:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001d42:	f3ef 8211 	mrs	r2, BASEPRI
 8001d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	60fa      	str	r2, [r7, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
 8001d7c:	f7ff f994 	bl	80010a8 <Error_Handler>
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7a1b      	ldrb	r3, [r3, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7a1b      	ldrb	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d905      	bls.n	8001da4 <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
 8001d9c:	f7ff f984 	bl	80010a8 <Error_Handler>
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7a1b      	ldrb	r3, [r3, #8]
 8001da8:	461a      	mov	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001db8:	bf00      	nop
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001dd0:	f006 ff9a 	bl	8008d08 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2216      	movs	r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
    return;
 8001dda:	e016      	b.n	8001e0a <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001ddc:	200c      	movs	r0, #12
 8001dde:	f005 ff8b 	bl	8007cf8 <malloc>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff63 	bl	8001cc2 <stm32_lock_init>
    return;
 8001dfc:	e005      	b.n	8001e0a <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfe:	b672      	cpsid	i
}
 8001e00:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001e02:	f7ff f951 	bl	80010a8 <Error_Handler>
 8001e06:	bf00      	nop
 8001e08:	e7fd      	b.n	8001e06 <__retarget_lock_init_recursive+0x44>
}
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1e:	b672      	cpsid	i
}
 8001e20:	bf00      	nop
 8001e22:	f7ff f941 	bl	80010a8 <Error_Handler>
 8001e26:	bf00      	nop
 8001e28:	e7fd      	b.n	8001e26 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff6a 	bl	8001d06 <stm32_lock_acquire>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
 8001e4c:	f7ff f92c 	bl	80010a8 <Error_Handler>
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff87 	bl	8001d6a <stm32_lock_release>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_Init+0x28>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	@ (8001e8c <HAL_Init+0x28>)
 8001e6e:	f043 0310 	orr.w	r3, r3, #16
 8001e72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 f8f5 	bl	8002064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f7ff fce2 	bl	8001844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fca8 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40022000 	.word	0x40022000

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	2000045c 	.word	0x2000045c

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	2000045c 	.word	0x2000045c

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffe0 	bl	8001eb4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <__NVIC_EnableIRQ+0x34>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ff4f 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800208c:	f7ff ff64 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 8002090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7ff ffb2 	bl	8002000 <NVIC_EncodePriority>
 800209c:	4602      	mov	r2, r0
 800209e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff81 	bl	8001fac <__NVIC_SetPriority>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff57 	bl	8001f74 <__NVIC_EnableIRQ>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e043      	b.n	800216e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_DMA_Init+0xa8>)
 80020ee:	4413      	add	r3, r2
 80020f0:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_DMA_Init+0xac>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_DMA_Init+0xb0>)
 8002102:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800211a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800211e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	bffdfff8 	.word	0xbffdfff8
 800217c:	cccccccd 	.word	0xcccccccd
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Start_IT+0x20>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e04b      	b.n	800223c <HAL_DMA_Start_IT+0xb8>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d13a      	bne.n	800222e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f937 	bl	8002450 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 020e 	orr.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00f      	b.n	800221c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 020a 	orr.w	r2, r2, #10
 800221a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e005      	b.n	800223a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800223a:	7dfb      	ldrb	r3, [r7, #23]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2204      	movs	r2, #4
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d04f      	beq.n	800230c <HAL_DMA_IRQHandler+0xc8>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04a      	beq.n	800230c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0204 	bic.w	r2, r2, #4
 8002292:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a66      	ldr	r2, [pc, #408]	@ (8002434 <HAL_DMA_IRQHandler+0x1f0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d029      	beq.n	80022f2 <HAL_DMA_IRQHandler+0xae>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a65      	ldr	r2, [pc, #404]	@ (8002438 <HAL_DMA_IRQHandler+0x1f4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_IRQHandler+0xaa>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a63      	ldr	r2, [pc, #396]	@ (800243c <HAL_DMA_IRQHandler+0x1f8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01a      	beq.n	80022e8 <HAL_DMA_IRQHandler+0xa4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a62      	ldr	r2, [pc, #392]	@ (8002440 <HAL_DMA_IRQHandler+0x1fc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d012      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x9e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a60      	ldr	r2, [pc, #384]	@ (8002444 <HAL_DMA_IRQHandler+0x200>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00a      	beq.n	80022dc <HAL_DMA_IRQHandler+0x98>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002448 <HAL_DMA_IRQHandler+0x204>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x92>
 80022d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022d4:	e00e      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022da:	e00b      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022e0:	e008      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022e6:	e005      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ec:	e002      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022ee:	2340      	movs	r3, #64	@ 0x40
 80022f0:	e000      	b.n	80022f4 <HAL_DMA_IRQHandler+0xb0>
 80022f2:	2304      	movs	r3, #4
 80022f4:	4a55      	ldr	r2, [pc, #340]	@ (800244c <HAL_DMA_IRQHandler+0x208>)
 80022f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8094 	beq.w	800242a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800230a:	e08e      	b.n	800242a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2202      	movs	r2, #2
 8002312:	409a      	lsls	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4013      	ands	r3, r2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d056      	beq.n	80023ca <HAL_DMA_IRQHandler+0x186>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d051      	beq.n	80023ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 020a 	bic.w	r2, r2, #10
 8002342:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a38      	ldr	r2, [pc, #224]	@ (8002434 <HAL_DMA_IRQHandler+0x1f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d029      	beq.n	80023aa <HAL_DMA_IRQHandler+0x166>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <HAL_DMA_IRQHandler+0x1f4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d022      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x162>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a35      	ldr	r2, [pc, #212]	@ (800243c <HAL_DMA_IRQHandler+0x1f8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x15c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a34      	ldr	r2, [pc, #208]	@ (8002440 <HAL_DMA_IRQHandler+0x1fc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d012      	beq.n	800239a <HAL_DMA_IRQHandler+0x156>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a32      	ldr	r2, [pc, #200]	@ (8002444 <HAL_DMA_IRQHandler+0x200>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00a      	beq.n	8002394 <HAL_DMA_IRQHandler+0x150>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a31      	ldr	r2, [pc, #196]	@ (8002448 <HAL_DMA_IRQHandler+0x204>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d102      	bne.n	800238e <HAL_DMA_IRQHandler+0x14a>
 8002388:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800238c:	e00e      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 800238e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002392:	e00b      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 8002394:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002398:	e008      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 800239a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800239e:	e005      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 80023a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a4:	e002      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 80023a6:	2320      	movs	r3, #32
 80023a8:	e000      	b.n	80023ac <HAL_DMA_IRQHandler+0x168>
 80023aa:	2302      	movs	r3, #2
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <HAL_DMA_IRQHandler+0x208>)
 80023ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d034      	beq.n	800242a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023c8:	e02f      	b.n	800242a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <HAL_DMA_IRQHandler+0x1e8>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020e 	bic.w	r2, r2, #14
 80023f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
    }
  }
  return;
 800242a:	bf00      	nop
 800242c:	bf00      	nop
}
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40020008 	.word	0x40020008
 8002438:	4002001c 	.word	0x4002001c
 800243c:	40020030 	.word	0x40020030
 8002440:	40020044 	.word	0x40020044
 8002444:	40020058 	.word	0x40020058
 8002448:	4002006c 	.word	0x4002006c
 800244c:	40020000 	.word	0x40020000

08002450 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d108      	bne.n	8002490 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800248e:	e007      	b.n	80024a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b08b      	sub	sp, #44	@ 0x2c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	e169      	b.n	8002794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c0:	2201      	movs	r2, #1
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8158 	bne.w	800278e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a9a      	ldr	r2, [pc, #616]	@ (800274c <HAL_GPIO_Init+0x2a0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d05e      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 80024e8:	4a98      	ldr	r2, [pc, #608]	@ (800274c <HAL_GPIO_Init+0x2a0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d875      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 80024ee:	4a98      	ldr	r2, [pc, #608]	@ (8002750 <HAL_GPIO_Init+0x2a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d058      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 80024f4:	4a96      	ldr	r2, [pc, #600]	@ (8002750 <HAL_GPIO_Init+0x2a4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d86f      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 80024fa:	4a96      	ldr	r2, [pc, #600]	@ (8002754 <HAL_GPIO_Init+0x2a8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d052      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 8002500:	4a94      	ldr	r2, [pc, #592]	@ (8002754 <HAL_GPIO_Init+0x2a8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d869      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002506:	4a94      	ldr	r2, [pc, #592]	@ (8002758 <HAL_GPIO_Init+0x2ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d04c      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 800250c:	4a92      	ldr	r2, [pc, #584]	@ (8002758 <HAL_GPIO_Init+0x2ac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d863      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002512:	4a92      	ldr	r2, [pc, #584]	@ (800275c <HAL_GPIO_Init+0x2b0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d046      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
 8002518:	4a90      	ldr	r2, [pc, #576]	@ (800275c <HAL_GPIO_Init+0x2b0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d85d      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 800251e:	2b12      	cmp	r3, #18
 8002520:	d82a      	bhi.n	8002578 <HAL_GPIO_Init+0xcc>
 8002522:	2b12      	cmp	r3, #18
 8002524:	d859      	bhi.n	80025da <HAL_GPIO_Init+0x12e>
 8002526:	a201      	add	r2, pc, #4	@ (adr r2, 800252c <HAL_GPIO_Init+0x80>)
 8002528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252c:	080025a7 	.word	0x080025a7
 8002530:	08002581 	.word	0x08002581
 8002534:	08002593 	.word	0x08002593
 8002538:	080025d5 	.word	0x080025d5
 800253c:	080025db 	.word	0x080025db
 8002540:	080025db 	.word	0x080025db
 8002544:	080025db 	.word	0x080025db
 8002548:	080025db 	.word	0x080025db
 800254c:	080025db 	.word	0x080025db
 8002550:	080025db 	.word	0x080025db
 8002554:	080025db 	.word	0x080025db
 8002558:	080025db 	.word	0x080025db
 800255c:	080025db 	.word	0x080025db
 8002560:	080025db 	.word	0x080025db
 8002564:	080025db 	.word	0x080025db
 8002568:	080025db 	.word	0x080025db
 800256c:	080025db 	.word	0x080025db
 8002570:	08002589 	.word	0x08002589
 8002574:	0800259d 	.word	0x0800259d
 8002578:	4a79      	ldr	r2, [pc, #484]	@ (8002760 <HAL_GPIO_Init+0x2b4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800257e:	e02c      	b.n	80025da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e029      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	3304      	adds	r3, #4
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e024      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	3308      	adds	r3, #8
 8002598:	623b      	str	r3, [r7, #32]
          break;
 800259a:	e01f      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	330c      	adds	r3, #12
 80025a2:	623b      	str	r3, [r7, #32]
          break;
 80025a4:	e01a      	b.n	80025dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ae:	2304      	movs	r3, #4
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e013      	b.n	80025dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025bc:	2308      	movs	r3, #8
 80025be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	611a      	str	r2, [r3, #16]
          break;
 80025c6:	e009      	b.n	80025dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c8:	2308      	movs	r3, #8
 80025ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	615a      	str	r2, [r3, #20]
          break;
 80025d2:	e003      	b.n	80025dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
          break;
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x130>
          break;
 80025da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2bff      	cmp	r3, #255	@ 0xff
 80025e0:	d801      	bhi.n	80025e6 <HAL_GPIO_Init+0x13a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	e001      	b.n	80025ea <HAL_GPIO_Init+0x13e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2bff      	cmp	r3, #255	@ 0xff
 80025f0:	d802      	bhi.n	80025f8 <HAL_GPIO_Init+0x14c>
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x152>
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	3b08      	subs	r3, #8
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	210f      	movs	r1, #15
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80b1 	beq.w	800278e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800262c:	4b4d      	ldr	r3, [pc, #308]	@ (8002764 <HAL_GPIO_Init+0x2b8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a4c      	ldr	r2, [pc, #304]	@ (8002764 <HAL_GPIO_Init+0x2b8>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b4a      	ldr	r3, [pc, #296]	@ (8002764 <HAL_GPIO_Init+0x2b8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002644:	4a48      	ldr	r2, [pc, #288]	@ (8002768 <HAL_GPIO_Init+0x2bc>)
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a40      	ldr	r2, [pc, #256]	@ (800276c <HAL_GPIO_Init+0x2c0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_GPIO_Init+0x1ec>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3f      	ldr	r2, [pc, #252]	@ (8002770 <HAL_GPIO_Init+0x2c4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00d      	beq.n	8002694 <HAL_GPIO_Init+0x1e8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3e      	ldr	r2, [pc, #248]	@ (8002774 <HAL_GPIO_Init+0x2c8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d007      	beq.n	8002690 <HAL_GPIO_Init+0x1e4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3d      	ldr	r2, [pc, #244]	@ (8002778 <HAL_GPIO_Init+0x2cc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_GPIO_Init+0x1e0>
 8002688:	2303      	movs	r3, #3
 800268a:	e006      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 800268c:	2304      	movs	r3, #4
 800268e:	e004      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002690:	2302      	movs	r3, #2
 8002692:	e002      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <HAL_GPIO_Init+0x1ee>
 8002698:	2300      	movs	r3, #0
 800269a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800269c:	f002 0203 	and.w	r2, r2, #3
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4093      	lsls	r3, r2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026aa:	492f      	ldr	r1, [pc, #188]	@ (8002768 <HAL_GPIO_Init+0x2bc>)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	492c      	ldr	r1, [pc, #176]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026d2:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	43db      	mvns	r3, r3
 80026da:	4928      	ldr	r1, [pc, #160]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026ec:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	4922      	ldr	r1, [pc, #136]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60cb      	str	r3, [r1, #12]
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026fa:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	43db      	mvns	r3, r3
 8002702:	491e      	ldr	r1, [pc, #120]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 8002704:	4013      	ands	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002714:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4918      	ldr	r1, [pc, #96]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	43db      	mvns	r3, r3
 800272a:	4914      	ldr	r1, [pc, #80]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 800272c:	4013      	ands	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d021      	beq.n	8002780 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	490e      	ldr	r1, [pc, #56]	@ (800277c <HAL_GPIO_Init+0x2d0>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e021      	b.n	800278e <HAL_GPIO_Init+0x2e2>
 800274a:	bf00      	nop
 800274c:	10320000 	.word	0x10320000
 8002750:	10310000 	.word	0x10310000
 8002754:	10220000 	.word	0x10220000
 8002758:	10210000 	.word	0x10210000
 800275c:	10120000 	.word	0x10120000
 8002760:	10110000 	.word	0x10110000
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	40010800 	.word	0x40010800
 8002770:	40010c00 	.word	0x40010c00
 8002774:	40011000 	.word	0x40011000
 8002778:	40011400 	.word	0x40011400
 800277c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	43db      	mvns	r3, r3
 8002788:	4909      	ldr	r1, [pc, #36]	@ (80027b0 <HAL_GPIO_Init+0x304>)
 800278a:	4013      	ands	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	3301      	adds	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f ae8e 	bne.w	80024c0 <HAL_GPIO_Init+0x14>
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	372c      	adds	r7, #44	@ 0x2c
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027d0:	e003      	b.n	80027da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d2:	887b      	ldrh	r3, [r7, #2]
 80027d4:	041a      	lsls	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f806 	bl	8002814 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e12b      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fb0c 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	@ 0x24
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800287a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800288a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800288c:	f001 fd7c 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8002890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a81      	ldr	r2, [pc, #516]	@ (8002a9c <HAL_I2C_Init+0x274>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d807      	bhi.n	80028ac <HAL_I2C_Init+0x84>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a80      	ldr	r2, [pc, #512]	@ (8002aa0 <HAL_I2C_Init+0x278>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	bf94      	ite	ls
 80028a4:	2301      	movls	r3, #1
 80028a6:	2300      	movhi	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e006      	b.n	80028ba <HAL_I2C_Init+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa4 <HAL_I2C_Init+0x27c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a78      	ldr	r2, [pc, #480]	@ (8002aa8 <HAL_I2C_Init+0x280>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9b      	lsrs	r3, r3, #18
 80028cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a9c <HAL_I2C_Init+0x274>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d802      	bhi.n	80028fc <HAL_I2C_Init+0xd4>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	e009      	b.n	8002910 <HAL_I2C_Init+0xe8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002902:	fb02 f303 	mul.w	r3, r2, r3
 8002906:	4a69      	ldr	r2, [pc, #420]	@ (8002aac <HAL_I2C_Init+0x284>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	099b      	lsrs	r3, r3, #6
 800290e:	3301      	adds	r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002922:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	495c      	ldr	r1, [pc, #368]	@ (8002a9c <HAL_I2C_Init+0x274>)
 800292c:	428b      	cmp	r3, r1
 800292e:	d819      	bhi.n	8002964 <HAL_I2C_Init+0x13c>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e59      	subs	r1, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fbb1 f3f3 	udiv	r3, r1, r3
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002944:	400b      	ands	r3, r1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_I2C_Init+0x138>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e59      	subs	r1, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fbb1 f3f3 	udiv	r3, r1, r3
 8002958:	3301      	adds	r3, #1
 800295a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295e:	e051      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002960:	2304      	movs	r3, #4
 8002962:	e04f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d111      	bne.n	8002990 <HAL_I2C_Init+0x168>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	440b      	add	r3, r1
 800297a:	fbb0 f3f3 	udiv	r3, r0, r3
 800297e:	3301      	adds	r3, #1
 8002980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e012      	b.n	80029b6 <HAL_I2C_Init+0x18e>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e58      	subs	r0, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	0099      	lsls	r1, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x196>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e022      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10e      	bne.n	80029e4 <HAL_I2C_Init+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e58      	subs	r0, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	440b      	add	r3, r1
 80029d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029e2:	e00f      	b.n	8002a04 <HAL_I2C_Init+0x1dc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	0099      	lsls	r1, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69da      	ldr	r2, [r3, #28]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6911      	ldr	r1, [r2, #16]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	000186a0 	.word	0x000186a0
 8002aa0:	001e847f 	.word	0x001e847f
 8002aa4:	003d08ff 	.word	0x003d08ff
 8002aa8:	431bde83 	.word	0x431bde83
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff f9f6 	bl	8001eb4 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 80e0 	bne.w	8002c98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2319      	movs	r3, #25
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4970      	ldr	r1, [pc, #448]	@ (8002ca4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fe50 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0d3      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_I2C_Master_Transmit+0x50>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e0cc      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d007      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2221      	movs	r2, #33	@ 0x21
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2210      	movs	r2, #16
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	893a      	ldrh	r2, [r7, #8]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a50      	ldr	r2, [pc, #320]	@ (8002ca8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fc0a 	bl	8003388 <I2C_MasterRequestWrite>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e08d      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b94:	e066      	b.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 ff0e 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06b      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d11b      	bne.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d017      	beq.n	8002c38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	6a39      	ldr	r1, [r7, #32]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 ff05 	bl	8003a4c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d107      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e01a      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d194      	bne.n	8002b96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e000      	b.n	8002c9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	817b      	strh	r3, [r7, #10]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	813b      	strh	r3, [r7, #8]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc6:	f7ff f8f5 	bl	8001eb4 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	f040 80d9 	bne.w	8002e8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2319      	movs	r3, #25
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	496d      	ldr	r1, [pc, #436]	@ (8002e98 <HAL_I2C_Mem_Write+0x1ec>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fd4f 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0cc      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_I2C_Mem_Write+0x56>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0c5      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d007      	beq.n	8002d28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2221      	movs	r2, #33	@ 0x21
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2240      	movs	r2, #64	@ 0x40
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <HAL_I2C_Mem_Write+0x1f0>)
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6a:	88f8      	ldrh	r0, [r7, #6]
 8002d6c:	893a      	ldrh	r2, [r7, #8]
 8002d6e:	8979      	ldrh	r1, [r7, #10]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4603      	mov	r3, r0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fb86 	bl	800348c <I2C_RequestMemoryWrite>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d052      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e081      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fe14 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d107      	bne.n	8002db2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e06b      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d11b      	bne.n	8002e2c <HAL_I2C_Mem_Write+0x180>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d017      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1aa      	bne.n	8002d8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fe07 	bl	8003a4c <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e016      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	e000      	b.n	8002e8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
  }
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	00100002 	.word	0x00100002
 8002e9c:	ffff0000 	.word	0xffff0000

08002ea0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08c      	sub	sp, #48	@ 0x30
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ebe:	f7fe fff9 	bl	8001eb4 <HAL_GetTick>
 8002ec2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	f040 8250 	bne.w	8003372 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2319      	movs	r3, #25
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4982      	ldr	r1, [pc, #520]	@ (80030e4 <HAL_I2C_Mem_Read+0x244>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fc53 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e243      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_I2C_Mem_Read+0x5a>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e23c      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2222      	movs	r2, #34	@ 0x22
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2240      	movs	r2, #64	@ 0x40
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a62      	ldr	r2, [pc, #392]	@ (80030e8 <HAL_I2C_Mem_Read+0x248>)
 8002f60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f62:	88f8      	ldrh	r0, [r7, #6]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4603      	mov	r3, r0
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fb20 	bl	80035b8 <I2C_RequestMemoryRead>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e1f8      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d113      	bne.n	8002fb2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e1cc      	b.n	800334c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11e      	bne.n	8002ff8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fca:	b672      	cpsid	i
}
 8002fcc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ff4:	b662      	cpsie	i
}
 8002ff6:	e035      	b.n	8003064 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d11e      	bne.n	800303e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003038:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800303a:	b662      	cpsie	i
}
 800303c:	e012      	b.n	8003064 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800304c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003064:	e172      	b.n	800334c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	2b03      	cmp	r3, #3
 800306c:	f200 811f 	bhi.w	80032ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b01      	cmp	r3, #1
 8003076:	d123      	bne.n	80030c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fd2d 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e173      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030be:	e145      	b.n	800334c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d152      	bne.n	800316e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ce:	2200      	movs	r2, #0
 80030d0:	4906      	ldr	r1, [pc, #24]	@ (80030ec <HAL_I2C_Mem_Read+0x24c>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fb58 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e148      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
 80030e2:	bf00      	nop
 80030e4:	00100002 	.word	0x00100002
 80030e8:	ffff0000 	.word	0xffff0000
 80030ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030f0:	b672      	cpsid	i
}
 80030f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003136:	b662      	cpsie	i
}
 8003138:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800316c:	e0ee      	b.n	800334c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	2200      	movs	r2, #0
 8003176:	4981      	ldr	r1, [pc, #516]	@ (800337c <HAL_I2C_Mem_Read+0x4dc>)
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb05 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0f5      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003196:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i
}
 800319a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003380 <HAL_I2C_Mem_Read+0x4e0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_I2C_Mem_Read+0x4e4>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0a1a      	lsrs	r2, r3, #8
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00da      	lsls	r2, r3, #3
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f043 0220 	orr.w	r2, r3, #32
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003216:	b662      	cpsie	i
}
 8003218:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0a6      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d1d9      	bne.n	80031e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003276:	b662      	cpsie	i
}
 8003278:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032ac:	e04e      	b.n	800334c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fc12 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e058      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d124      	bne.n	800334c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003318:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f ae88 	bne.w	8003066 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3728      	adds	r7, #40	@ 0x28
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010004 	.word	0x00010004
 8003380:	20000000 	.word	0x20000000
 8003384:	14f8b589 	.word	0x14f8b589

08003388 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d006      	beq.n	80033b2 <I2C_MasterRequestWrite+0x2a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d003      	beq.n	80033b2 <I2C_MasterRequestWrite+0x2a>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033b0:	d108      	bne.n	80033c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00b      	b.n	80033dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	2b12      	cmp	r3, #18
 80033ca:	d107      	bne.n	80033dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f9cd 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d103      	bne.n	800340c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e035      	b.n	800347c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003418:	d108      	bne.n	800342c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	e01b      	b.n	8003464 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	11db      	asrs	r3, r3, #7
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0306 	and.w	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f063 030f 	orn	r3, r3, #15
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	490e      	ldr	r1, [pc, #56]	@ (8003484 <I2C_MasterRequestWrite+0xfc>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa16 	bl	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e010      	b.n	800347c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <I2C_MasterRequestWrite+0x100>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa06 	bl	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	00010008 	.word	0x00010008
 8003488:	00010002 	.word	0x00010002

0800348c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	817b      	strh	r3, [r7, #10]
 800349e:	460b      	mov	r3, r1
 80034a0:	813b      	strh	r3, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2200      	movs	r2, #0
 80034be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f960 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034dc:	d103      	bne.n	80034e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e05f      	b.n	80035aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	492d      	ldr	r1, [pc, #180]	@ (80035b4 <I2C_RequestMemoryWrite+0x128>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f9bb 	bl	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e04c      	b.n	80035aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fa46 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	2b04      	cmp	r3, #4
 800353c:	d107      	bne.n	800354e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e02b      	b.n	80035aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e021      	b.n	80035a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	b29b      	uxth	r3, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fa20 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e005      	b.n	80035aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	461a      	mov	r2, r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	817b      	strh	r3, [r7, #10]
 80035ca:	460b      	mov	r3, r1
 80035cc:	813b      	strh	r3, [r7, #8]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8c2 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003618:	d103      	bne.n	8003622 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003620:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0aa      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	4952      	ldr	r1, [pc, #328]	@ (8003784 <I2C_RequestMemoryRead+0x1cc>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f91d 	bl	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e097      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f9a8 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	2b04      	cmp	r3, #4
 8003678:	d107      	bne.n	800368a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e076      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	e021      	b.n	80036e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f982 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e050      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e6:	6a39      	ldr	r1, [r7, #32]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f967 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e035      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800371e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2200      	movs	r2, #0
 8003728:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f82b 	bl	8003788 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003746:	d103      	bne.n	8003750 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e013      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	6a3a      	ldr	r2, [r7, #32]
 8003768:	4906      	ldr	r1, [pc, #24]	@ (8003784 <I2C_RequestMemoryRead+0x1cc>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f886 	bl	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	00010002 	.word	0x00010002

08003788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003798:	e048      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037a0:	d044      	beq.n	800382c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fe fb87 	bl	8001eb4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d139      	bne.n	800382c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10d      	bne.n	80037de <I2C_WaitOnFlagUntilTimeout+0x56>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	e00c      	b.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d116      	bne.n	800382c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e023      	b.n	8003874 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	0c1b      	lsrs	r3, r3, #16
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d10d      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	e00c      	b.n	800386c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	43da      	mvns	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4013      	ands	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	429a      	cmp	r2, r3
 8003870:	d093      	beq.n	800379a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388a:	e071      	b.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389a:	d123      	bne.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f043 0204 	orr.w	r2, r3, #4
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e067      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038ea:	d041      	beq.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ec:	f7fe fae2 	bl	8001eb4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d136      	bne.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10c      	bne.n	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e00b      	b.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	43da      	mvns	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e021      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10c      	bne.n	8003994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e00b      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f47f af6d 	bne.w	800388c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c8:	e034      	b.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f8e3 	bl	8003b96 <I2C_IsAcknowledgeFailed>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e034      	b.n	8003a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e0:	d028      	beq.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fa67 	bl	8001eb4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a02:	2b80      	cmp	r3, #128	@ 0x80
 8003a04:	d016      	beq.n	8003a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e007      	b.n	8003a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3e:	2b80      	cmp	r3, #128	@ 0x80
 8003a40:	d1c3      	bne.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a58:	e034      	b.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f89b 	bl	8003b96 <I2C_IsAcknowledgeFailed>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e034      	b.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a70:	d028      	beq.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fe fa1f 	bl	8001eb4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11d      	bne.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d016      	beq.n	8003ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e007      	b.n	8003ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d1c3      	bne.n	8003a5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae8:	e049      	b.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d119      	bne.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0210 	mvn.w	r2, #16
 8003b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e030      	b.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fe f9c2 	bl	8001eb4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11d      	bne.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	d016      	beq.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e007      	b.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d1ae      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bac:	d11b      	bne.n	8003be6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e272      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8087 	beq.w	8003d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c14:	4b92      	ldr	r3, [pc, #584]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d00c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c20:	4b8f      	ldr	r3, [pc, #572]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d112      	bne.n	8003c52 <HAL_RCC_OscConfig+0x5e>
 8003c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3a:	4b89      	ldr	r3, [pc, #548]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d06c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x12c>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d168      	bne.n	8003d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e24c      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x76>
 8003c5c:	4b80      	ldr	r3, [pc, #512]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7f      	ldr	r2, [pc, #508]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e02e      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b7b      	ldr	r3, [pc, #492]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a7a      	ldr	r2, [pc, #488]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b78      	ldr	r3, [pc, #480]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a77      	ldr	r2, [pc, #476]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e01d      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xbc>
 8003c96:	4b72      	ldr	r3, [pc, #456]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a71      	ldr	r2, [pc, #452]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b6f      	ldr	r3, [pc, #444]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6e      	ldr	r2, [pc, #440]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0xd4>
 8003cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a67      	ldr	r2, [pc, #412]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe f8f0 	bl	8001eb4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fe f8ec 	bl	8001eb4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e200      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b5d      	ldr	r3, [pc, #372]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe4>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe f8dc 	bl	8001eb4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fe f8d8 	bl	8001eb4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1ec      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b53      	ldr	r3, [pc, #332]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x10c>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d3a:	4b49      	ldr	r3, [pc, #292]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x18c>
 8003d46:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b43      	ldr	r3, [pc, #268]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x176>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c0      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4939      	ldr	r1, [pc, #228]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b36      	ldr	r3, [pc, #216]	@ (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe f891 	bl	8001eb4 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fe f88d 	bl	8001eb4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1a1      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4927      	ldr	r1, [pc, #156]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b26      	ldr	r3, [pc, #152]	@ (8003e64 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe f870 	bl	8001eb4 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fe f86c 	bl	8001eb4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e180      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d03a      	beq.n	8003e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d019      	beq.n	8003e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e10:	f7fe f850 	bl	8001eb4 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fe f84c 	bl	8001eb4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e160      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f000 fafe 	bl	8004438 <RCC_Delay>
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_RCC_OscConfig+0x274>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe f836 	bl	8001eb4 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e4a:	e00f      	b.n	8003e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe f832 	bl	8001eb4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d908      	bls.n	8003e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e146      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	42420000 	.word	0x42420000
 8003e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	4b92      	ldr	r3, [pc, #584]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e9      	bne.n	8003e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a6 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4a87      	ldr	r2, [pc, #540]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	61d3      	str	r3, [r2, #28]
 8003ea2:	4b85      	ldr	r3, [pc, #532]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb2:	4b82      	ldr	r3, [pc, #520]	@ (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d118      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7e      	ldr	r2, [pc, #504]	@ (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eca:	f7fd fff3 	bl	8001eb4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed2:	f7fd ffef 	bl	8001eb4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b64      	cmp	r3, #100	@ 0x64
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e103      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_OscConfig+0x4c8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x312>
 8003ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	4a6e      	ldr	r2, [pc, #440]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6213      	str	r3, [r2, #32]
 8003f04:	e02d      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x334>
 8003f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4a69      	ldr	r2, [pc, #420]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6213      	str	r3, [r2, #32]
 8003f1a:	4b67      	ldr	r3, [pc, #412]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4a66      	ldr	r2, [pc, #408]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6213      	str	r3, [r2, #32]
 8003f26:	e01c      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x356>
 8003f30:	4b61      	ldr	r3, [pc, #388]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	4a60      	ldr	r2, [pc, #384]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	f043 0304 	orr.w	r3, r3, #4
 8003f3a:	6213      	str	r3, [r2, #32]
 8003f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a5d      	ldr	r2, [pc, #372]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6213      	str	r3, [r2, #32]
 8003f48:	e00b      	b.n	8003f62 <HAL_RCC_OscConfig+0x36e>
 8003f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a5a      	ldr	r2, [pc, #360]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b58      	ldr	r3, [pc, #352]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d015      	beq.n	8003f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6a:	f7fd ffa3 	bl	8001eb4 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd ff9f 	bl	8001eb4 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e0b1      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	4b4b      	ldr	r3, [pc, #300]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ee      	beq.n	8003f72 <HAL_RCC_OscConfig+0x37e>
 8003f94:	e014      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fd ff8d 	bl	8001eb4 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fd ff89 	bl	8001eb4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e09b      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	4b40      	ldr	r3, [pc, #256]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d105      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4a3b      	ldr	r2, [pc, #236]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8087 	beq.w	80040ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fdc:	4b36      	ldr	r3, [pc, #216]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d061      	beq.n	80040ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d146      	bne.n	800407e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd ff5d 	bl	8001eb4 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd ff59 	bl	8001eb4 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e06d      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004010:	4b29      	ldr	r3, [pc, #164]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004024:	d108      	bne.n	8004038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4921      	ldr	r1, [pc, #132]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a19      	ldr	r1, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	430b      	orrs	r3, r1
 800404a:	491b      	ldr	r1, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004050:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004056:	f7fd ff2d 	bl	8001eb4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd ff29 	bl	8001eb4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e03d      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x46a>
 800407c:	e035      	b.n	80040ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b10      	ldr	r3, [pc, #64]	@ (80040c0 <HAL_RCC_OscConfig+0x4cc>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd ff16 	bl	8001eb4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fd ff12 	bl	8001eb4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e026      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409e:	4b06      	ldr	r3, [pc, #24]	@ (80040b8 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x498>
 80040aa:	e01e      	b.n	80040ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d107      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e019      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <HAL_RCC_OscConfig+0x500>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0d0      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800410c:	4b6a      	ldr	r3, [pc, #424]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d910      	bls.n	800413c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4965      	ldr	r1, [pc, #404]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4a58      	ldr	r2, [pc, #352]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800415e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d040      	beq.n	8004218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d115      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b41      	ldr	r3, [pc, #260]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e073      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	4b3d      	ldr	r3, [pc, #244]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06b      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d6:	4b39      	ldr	r3, [pc, #228]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f023 0203 	bic.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4936      	ldr	r1, [pc, #216]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e8:	f7fd fe64 	bl	8001eb4 <HAL_GetTick>
 80041ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f0:	f7fd fe60 	bl	8001eb4 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e053      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 020c 	and.w	r2, r3, #12
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d1eb      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004218:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d210      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 0207 	bic.w	r2, r3, #7
 800422e:	4922      	ldr	r1, [pc, #136]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1cc>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <HAL_RCC_ClockConfig+0x1d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fd facc 	bl	8001844 <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
 80042c0:	0800ad5c 	.word	0x0800ad5c
 80042c4:	20000000 	.word	0x20000000
 80042c8:	20000004 	.word	0x20000004

080042cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	2300      	movs	r3, #0
 80042e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x94>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x30>
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x36>
 80042fa:	e027      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042fc:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x98>)
 80042fe:	613b      	str	r3, [r7, #16]
      break;
 8004300:	e027      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0c9b      	lsrs	r3, r3, #18
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a17      	ldr	r2, [pc, #92]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x9c>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d010      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431a:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x94>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	0c5b      	lsrs	r3, r3, #17
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	4a11      	ldr	r2, [pc, #68]	@ (800436c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x98>)
 800432e:	fb03 f202 	mul.w	r2, r3, r2
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e004      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0c      	ldr	r2, [pc, #48]	@ (8004370 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004340:	fb02 f303 	mul.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	613b      	str	r3, [r7, #16]
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x98>)
 800434e:	613b      	str	r3, [r7, #16]
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	693b      	ldr	r3, [r7, #16]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	007a1200 	.word	0x007a1200
 8004368:	0800ad74 	.word	0x0800ad74
 800436c:	0800ad84 	.word	0x0800ad84
 8004370:	003d0900 	.word	0x003d0900

08004374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b02      	ldr	r3, [pc, #8]	@ (8004384 <HAL_RCC_GetHCLKFreq+0x10>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	20000000 	.word	0x20000000

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800438c:	f7ff fff2 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4903      	ldr	r1, [pc, #12]	@ (80043ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000
 80043ac:	0800ad6c 	.word	0x0800ad6c

080043b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043b4:	f7ff ffde 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	0adb      	lsrs	r3, r3, #11
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	4903      	ldr	r1, [pc, #12]	@ (80043d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	0800ad6c 	.word	0x0800ad6c

080043d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	220f      	movs	r2, #15
 80043e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e8:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <HAL_RCC_GetClockConfig+0x58>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_RCC_GetClockConfig+0x58>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_RCC_GetClockConfig+0x58>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800440c:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <HAL_RCC_GetClockConfig+0x58>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_GetClockConfig+0x5c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0207 	and.w	r2, r3, #7
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	40021000 	.word	0x40021000
 8004434:	40022000 	.word	0x40022000

08004438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004440:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <RCC_Delay+0x34>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <RCC_Delay+0x38>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0a5b      	lsrs	r3, r3, #9
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004454:	bf00      	nop
  }
  while (Delay --);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e5a      	subs	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <RCC_Delay+0x1c>
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	20000000 	.word	0x20000000
 8004470:	10624dd3 	.word	0x10624dd3

08004474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e041      	b.n	800450a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f839 	bl	8004512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 f99c 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e03a      	b.n	80045b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <HAL_TIM_Base_Start_IT+0x98>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x58>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004566:	d009      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x58>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a14      	ldr	r2, [pc, #80]	@ (80045c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x58>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a13      	ldr	r2, [pc, #76]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d111      	bne.n	80045a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d010      	beq.n	80045b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	e007      	b.n	80045b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800

080045c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0202 	mvn.w	r2, #2
 80045fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8d1 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8c4 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8d3 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0204 	mvn.w	r2, #4
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8ab 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f89e 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8ad 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d020      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0208 	mvn.w	r2, #8
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f885 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f878 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f887 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d020      	beq.n	8004710 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2208      	movs	r2, #8
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f85f 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f852 	bl	80047a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f861 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0201 	mvn.w	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fc fca8 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8c3 	bl	80048de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f831 	bl	80047de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0220 	mvn.w	r2, #32
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f896 	bl	80048cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a2f      	ldr	r2, [pc, #188]	@ (80048c0 <TIM_Base_SetConfig+0xd0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00b      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <TIM_Base_SetConfig+0xd4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x30>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a2b      	ldr	r2, [pc, #172]	@ (80048c8 <TIM_Base_SetConfig+0xd8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a22      	ldr	r2, [pc, #136]	@ (80048c0 <TIM_Base_SetConfig+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00b      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004840:	d007      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <TIM_Base_SetConfig+0xd4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <TIM_Base_SetConfig+0xd8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a0d      	ldr	r2, [pc, #52]	@ (80048c0 <TIM_Base_SetConfig+0xd0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d103      	bne.n	8004898 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]
  }
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800

080048cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e042      	b.n	8004988 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd f91c 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	@ 0x24
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fac9 	bl	8004ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	@ 0x28
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d175      	bne.n	8004a9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_UART_Transmit+0x2c>
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e06e      	b.n	8004a9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2221      	movs	r2, #33	@ 0x21
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ce:	f7fd fa71 	bl	8001eb4 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	88fa      	ldrh	r2, [r7, #6]
 80049d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	88fa      	ldrh	r2, [r7, #6]
 80049de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e8:	d108      	bne.n	80049fc <HAL_UART_Transmit+0x6c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e003      	b.n	8004a04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a04:	e02e      	b.n	8004a64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2180      	movs	r1, #128	@ 0x80
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f979 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03a      	b.n	8004a9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3302      	adds	r3, #2
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	e007      	b.n	8004a56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	781a      	ldrb	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1cb      	bne.n	8004a06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2140      	movs	r1, #64	@ 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f945 	bl	8004d08 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	@ 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d156      	bne.n	8004b70 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_Transmit_DMA+0x26>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e04f      	b.n	8004b72 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2221      	movs	r2, #33	@ 0x21
 8004aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_UART_Transmit_DMA+0xd4>)
 8004af8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afe:	4a20      	ldr	r2, [pc, #128]	@ (8004b80 <HAL_UART_Transmit_DMA+0xd8>)
 8004b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	4a1f      	ldr	r2, [pc, #124]	@ (8004b84 <HAL_UART_Transmit_DMA+0xdc>)
 8004b08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	2200      	movs	r2, #0
 8004b10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3304      	adds	r3, #4
 8004b26:	461a      	mov	r2, r3
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	f7fd fb2b 	bl	8002184 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	617b      	str	r3, [r7, #20]
   return(result);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b5a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6a39      	ldr	r1, [r7, #32]
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3730      	adds	r7, #48	@ 0x30
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08004bbf 	.word	0x08004bbf
 8004b80:	08004c59 	.word	0x08004c59
 8004b84:	08004c75 	.word	0x08004c75

08004b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr

08004bbe <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b090      	sub	sp, #64	@ 0x40
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d137      	bne.n	8004c4a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bdc:	2200      	movs	r2, #0
 8004bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c00:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e5      	bne.n	8004be0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c48:	e002      	b.n	8004c50 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004c4a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004c4c:	f7ff ff9c 	bl	8004b88 <HAL_UART_TxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3740      	adds	r7, #64	@ 0x40
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ff97 	bl	8004b9a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b21      	cmp	r3, #33	@ 0x21
 8004ca6:	d108      	bne.n	8004cba <UART_DMAError+0x46>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d005      	beq.n	8004cba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f000 f880 	bl	8004dba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf14      	ite	ne
 8004cc8:	2301      	movne	r3, #1
 8004cca:	2300      	moveq	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b22      	cmp	r3, #34	@ 0x22
 8004cda:	d108      	bne.n	8004cee <UART_DMAError+0x7a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004ce8:	68b8      	ldr	r0, [r7, #8]
 8004cea:	f000 f88d 	bl	8004e08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f043 0210 	orr.w	r2, r3, #16
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f7ff ff56 	bl	8004bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d18:	e03b      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d20:	d037      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fd f8c7 	bl	8001eb4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	6a3a      	ldr	r2, [r7, #32]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e03a      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d023      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b80      	cmp	r3, #128	@ 0x80
 8004d4e:	d020      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d01d      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d116      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f844 	bl	8004e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2208      	movs	r2, #8
 8004d84:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e00f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d0b4      	beq.n	8004d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b089      	sub	sp, #36	@ 0x24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	61ba      	str	r2, [r7, #24]
 8004de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6979      	ldr	r1, [r7, #20]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	613b      	str	r3, [r7, #16]
   return(result);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e5      	bne.n	8004dc2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004dfe:	bf00      	nop
 8004e00:	3724      	adds	r7, #36	@ 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b095      	sub	sp, #84	@ 0x54
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e30:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e5      	bne.n	8004e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d119      	bne.n	8004eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea0:	61ba      	str	r2, [r7, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ec2:	bf00      	nop
 8004ec4:	3754      	adds	r7, #84	@ 0x54
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f06:	f023 030c 	bic.w	r3, r3, #12
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe0 <UART_SetConfig+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d103      	bne.n	8004f3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f34:	f7ff fa3c 	bl	80043b0 <HAL_RCC_GetPCLK2Freq>
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	e002      	b.n	8004f42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7ff fa24 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 8004f40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009a      	lsls	r2, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	0119      	lsls	r1, r3, #4
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2064      	movs	r0, #100	@ 0x64
 8004f82:	fb00 f303 	mul.w	r3, r0, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	@ 0x32
 8004f8c:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f98:	4419      	add	r1, r3
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009a      	lsls	r2, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2064      	movs	r0, #100	@ 0x64
 8004fba:	fb00 f303 	mul.w	r3, r0, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	3332      	adds	r3, #50	@ 0x32
 8004fc4:	4a07      	ldr	r2, [pc, #28]	@ (8004fe4 <UART_SetConfig+0x118>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f003 020f 	and.w	r2, r3, #15
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40013800 	.word	0x40013800
 8004fe4:	51eb851f 	.word	0x51eb851f

08004fe8 <__NVIC_SetPriority>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	db0a      	blt.n	8005012 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	490c      	ldr	r1, [pc, #48]	@ (8005034 <__NVIC_SetPriority+0x4c>)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	0112      	lsls	r2, r2, #4
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	440b      	add	r3, r1
 800500c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005010:	e00a      	b.n	8005028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4908      	ldr	r1, [pc, #32]	@ (8005038 <__NVIC_SetPriority+0x50>)
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	3b04      	subs	r3, #4
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	440b      	add	r3, r1
 8005026:	761a      	strb	r2, [r3, #24]
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	e000e100 	.word	0xe000e100
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <SysTick_Handler+0x1c>)
 8005042:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005044:	f001 fdf4 	bl	8006c30 <xTaskGetSchedulerState>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d001      	beq.n	8005052 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800504e:	f002 fb9b 	bl	8007788 <xPortSysTickHandler>
  }
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000e010 	.word	0xe000e010

0800505c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005060:	2100      	movs	r1, #0
 8005062:	f06f 0004 	mvn.w	r0, #4
 8005066:	f7ff ffbf 	bl	8004fe8 <__NVIC_SetPriority>
#endif
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005076:	f3ef 8305 	mrs	r3, IPSR
 800507a:	603b      	str	r3, [r7, #0]
  return(result);
 800507c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005082:	f06f 0305 	mvn.w	r3, #5
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	e00c      	b.n	80050a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800508a:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <osKernelInitialize+0x40>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d105      	bne.n	800509e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005092:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <osKernelInitialize+0x40>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	e002      	b.n	80050a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800509e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050a4:	687b      	ldr	r3, [r7, #4]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	20000460 	.word	0x20000460

080050b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ba:	f3ef 8305 	mrs	r3, IPSR
 80050be:	603b      	str	r3, [r7, #0]
  return(result);
 80050c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80050c6:	f06f 0305 	mvn.w	r3, #5
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e010      	b.n	80050f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <osKernelStart+0x48>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d109      	bne.n	80050ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050d6:	f7ff ffc1 	bl	800505c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <osKernelStart+0x48>)
 80050dc:	2202      	movs	r2, #2
 80050de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050e0:	f001 f946 	bl	8006370 <vTaskStartScheduler>
      stat = osOK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	e002      	b.n	80050f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050f0:	687b      	ldr	r3, [r7, #4]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000460 	.word	0x20000460

08005100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	@ 0x38
 8005104:	af04      	add	r7, sp, #16
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005110:	f3ef 8305 	mrs	r3, IPSR
 8005114:	617b      	str	r3, [r7, #20]
  return(result);
 8005116:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005118:	2b00      	cmp	r3, #0
 800511a:	d17e      	bne.n	800521a <osThreadNew+0x11a>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d07b      	beq.n	800521a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005126:	2318      	movs	r3, #24
 8005128:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d045      	beq.n	80051c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <osThreadNew+0x48>
        name = attr->name;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <osThreadNew+0x6e>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b38      	cmp	r3, #56	@ 0x38
 8005160:	d805      	bhi.n	800516e <osThreadNew+0x6e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <osThreadNew+0x72>
        return (NULL);
 800516e:	2300      	movs	r3, #0
 8005170:	e054      	b.n	800521c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <osThreadNew+0xa8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005190:	d90a      	bls.n	80051a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <osThreadNew+0xa8>
        mem = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e010      	b.n	80051ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <osThreadNew+0xca>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <osThreadNew+0xca>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <osThreadNew+0xca>
          mem = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e001      	b.n	80051ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d110      	bne.n	80051f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051d8:	9202      	str	r2, [sp, #8]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6a3a      	ldr	r2, [r7, #32]
 80051e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 ff04 	bl	8005ff4 <xTaskCreateStatic>
 80051ec:	4603      	mov	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e013      	b.n	800521a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d110      	bne.n	800521a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 ff52 	bl	80060b4 <xTaskCreate>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <osThreadNew+0x11a>
            hTask = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800521a:	693b      	ldr	r3, [r7, #16]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	@ 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8305 	mrs	r3, IPSR
 8005234:	60bb      	str	r3, [r7, #8]
  return(result);
 8005236:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005238:	2b00      	cmp	r3, #0
 800523a:	d174      	bne.n	8005326 <osMutexNew+0x102>
    if (attr != NULL) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osMutexNew+0x26>
      type = attr->attr_bits;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e001      	b.n	800524e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <osMutexNew+0x3a>
      rmtx = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e001      	b.n	8005262 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d15c      	bne.n	8005326 <osMutexNew+0x102>
      mem = -1;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005270:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d015      	beq.n	80052a4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <osMutexNew+0x6a>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b4f      	cmp	r3, #79	@ 0x4f
 8005286:	d902      	bls.n	800528e <osMutexNew+0x6a>
          mem = 1;
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e00c      	b.n	80052a8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d108      	bne.n	80052a8 <osMutexNew+0x84>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <osMutexNew+0x84>
            mem = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e001      	b.n	80052a8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d112      	bne.n	80052d4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4619      	mov	r1, r3
 80052ba:	2004      	movs	r0, #4
 80052bc:	f000 fa91 	bl	80057e2 <xQueueCreateMutexStatic>
 80052c0:	61f8      	str	r0, [r7, #28]
 80052c2:	e016      	b.n	80052f2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	4619      	mov	r1, r3
 80052ca:	2001      	movs	r0, #1
 80052cc:	f000 fa89 	bl	80057e2 <xQueueCreateMutexStatic>
 80052d0:	61f8      	str	r0, [r7, #28]
 80052d2:	e00e      	b.n	80052f2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d004      	beq.n	80052ea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80052e0:	2004      	movs	r0, #4
 80052e2:	f000 fa66 	bl	80057b2 <xQueueCreateMutex>
 80052e6:	61f8      	str	r0, [r7, #28]
 80052e8:	e003      	b.n	80052f2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80052ea:	2001      	movs	r0, #1
 80052ec:	f000 fa61 	bl	80057b2 <xQueueCreateMutex>
 80052f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <osMutexNew+0xee>
        if (attr != NULL) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <osMutexNew+0xe2>
          name = attr->name;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e001      	b.n	800530a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	69f8      	ldr	r0, [r7, #28]
 800530e:	f000 fe15 	bl	8005f3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <osMutexNew+0x102>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a06      	ldr	r2, [pc, #24]	@ (8005358 <vApplicationGetIdleTaskMemory+0x28>)
 8005340:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a05      	ldr	r2, [pc, #20]	@ (800535c <vApplicationGetIdleTaskMemory+0x2c>)
 8005346:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	601a      	str	r2, [r3, #0]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000464 	.word	0x20000464
 800535c:	2000050c 	.word	0x2000050c

08005360 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a07      	ldr	r2, [pc, #28]	@ (800538c <vApplicationGetTimerTaskMemory+0x2c>)
 8005370:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a06      	ldr	r2, [pc, #24]	@ (8005390 <vApplicationGetTimerTaskMemory+0x30>)
 8005376:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537e:	601a      	str	r2, [r3, #0]
}
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000070c 	.word	0x2000070c
 8005390:	200007b4 	.word	0x200007b4

08005394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f103 0208 	add.w	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f103 0208 	add.w	r2, r3, #8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f103 0208 	add.w	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
 80053f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005446:	d103      	bne.n	8005450 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e00c      	b.n	800546a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3308      	adds	r3, #8
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e002      	b.n	800545e <vListInsert+0x2e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d2f6      	bcs.n	8005458 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6852      	ldr	r2, [r2, #4]
 80054c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d103      	bne.n	80054d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1e5a      	subs	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
	...

080054f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <xQueueGenericReset+0x2c>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	60bb      	str	r3, [r7, #8]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005520:	f002 f8b4 	bl	800768c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	68f9      	ldr	r1, [r7, #12]
 800552e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	3b01      	subs	r3, #1
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	441a      	add	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	22ff      	movs	r2, #255	@ 0xff
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	22ff      	movs	r2, #255	@ 0xff
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d114      	bne.n	80055a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3310      	adds	r3, #16
 8005582:	4618      	mov	r0, r3
 8005584:	f001 f98e 	bl	80068a4 <xTaskRemoveFromEventList>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d012      	beq.n	80055b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800558e:	4b0d      	ldr	r3, [pc, #52]	@ (80055c4 <xQueueGenericReset+0xd0>)
 8005590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	e009      	b.n	80055b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3310      	adds	r3, #16
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff fef5 	bl	8005394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3324      	adds	r3, #36	@ 0x24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff fef0 	bl	8005394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055b4:	f002 f89a 	bl	80076ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055b8:	2301      	movs	r3, #1
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <xQueueGenericCreateStatic+0x56>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <xQueueGenericCreateStatic+0x5a>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericCreateStatic+0x5c>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	623b      	str	r3, [r7, #32]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <xQueueGenericCreateStatic+0x84>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xQueueGenericCreateStatic+0x88>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xQueueGenericCreateStatic+0x8a>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fb      	str	r3, [r7, #28]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800566e:	2350      	movs	r3, #80	@ 0x50
 8005670:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b50      	cmp	r3, #80	@ 0x50
 8005676:	d00b      	beq.n	8005690 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	61bb      	str	r3, [r7, #24]
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005690:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f840 	bl	8005738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3730      	adds	r7, #48	@ 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b08a      	sub	sp, #40	@ 0x28
 80056c6:	af02      	add	r7, sp, #8
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <xQueueGenericCreate+0x2c>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	613b      	str	r3, [r7, #16]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3350      	adds	r3, #80	@ 0x50
 80056fc:	4618      	mov	r0, r3
 80056fe:	f002 f8c7 	bl	8007890 <pvPortMalloc>
 8005702:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d011      	beq.n	800572e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	3350      	adds	r3, #80	@ 0x50
 8005712:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800571c:	79fa      	ldrb	r2, [r7, #7]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f805 	bl	8005738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800572e:	69bb      	ldr	r3, [r7, #24]
	}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005766:	2101      	movs	r1, #1
 8005768:	69b8      	ldr	r0, [r7, #24]
 800576a:	f7ff fec3 	bl	80054f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005776:	bf00      	nop
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800579e:	2300      	movs	r3, #0
 80057a0:	2200      	movs	r2, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f837 	bl	8005818 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	4603      	mov	r3, r0
 80057ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057bc:	2301      	movs	r3, #1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6939      	ldr	r1, [r7, #16]
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff79 	bl	80056c2 <xQueueGenericCreate>
 80057d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff ffd3 	bl	800577e <prvInitialiseMutex>

		return xNewQueue;
 80057d8:	68fb      	ldr	r3, [r7, #12]
	}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b088      	sub	sp, #32
 80057e6:	af02      	add	r7, sp, #8
 80057e8:	4603      	mov	r3, r0
 80057ea:	6039      	str	r1, [r7, #0]
 80057ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057ee:	2301      	movs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2200      	movs	r2, #0
 80057fe:	6939      	ldr	r1, [r7, #16]
 8005800:	6978      	ldr	r0, [r7, #20]
 8005802:	f7ff fee1 	bl	80055c8 <xQueueGenericCreateStatic>
 8005806:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff ffb8 	bl	800577e <prvInitialiseMutex>

		return xNewQueue;
 800580e:	68fb      	ldr	r3, [r7, #12]
	}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	@ 0x38
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005826:	2300      	movs	r3, #0
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSend+0x34>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <xQueueGenericSend+0x42>
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueGenericSend+0x46>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericSend+0x48>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSend+0x64>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x72>
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSend+0x76>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSend+0x78>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSend+0x94>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ac:	f001 f9c0 	bl	8006c30 <xTaskGetSchedulerState>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <xQueueGenericSend+0xa4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <xQueueGenericSend+0xa8>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <xQueueGenericSend+0xaa>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <xQueueGenericSend+0xc6>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	61fb      	str	r3, [r7, #28]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058de:	f001 fed5 	bl	800768c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d302      	bcc.n	80058f4 <xQueueGenericSend+0xdc>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d129      	bne.n	8005948 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058fa:	f000 fa0f 	bl	8005d1c <prvCopyDataToQueue>
 80058fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d010      	beq.n	800592a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	3324      	adds	r3, #36	@ 0x24
 800590c:	4618      	mov	r0, r3
 800590e:	f000 ffc9 	bl	80068a4 <xTaskRemoveFromEventList>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005918:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <xQueueGenericSend+0x200>)
 800591a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	e00a      	b.n	8005940 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <xQueueGenericSend+0x200>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005940:	f001 fed4 	bl	80076ec <vPortExitCritical>
				return pdPASS;
 8005944:	2301      	movs	r3, #1
 8005946:	e063      	b.n	8005a10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800594e:	f001 fecd 	bl	80076ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005952:	2300      	movs	r3, #0
 8005954:	e05c      	b.n	8005a10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800595c:	f107 0314 	add.w	r3, r7, #20
 8005960:	4618      	mov	r0, r3
 8005962:	f001 f803 	bl	800696c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005966:	2301      	movs	r3, #1
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800596a:	f001 febf 	bl	80076ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800596e:	f000 fd6f 	bl	8006450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005972:	f001 fe8b 	bl	800768c <vPortEnterCritical>
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800597c:	b25b      	sxtb	r3, r3
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005982:	d103      	bne.n	800598c <xQueueGenericSend+0x174>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005992:	b25b      	sxtb	r3, r3
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005998:	d103      	bne.n	80059a2 <xQueueGenericSend+0x18a>
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059a2:	f001 fea3 	bl	80076ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a6:	1d3a      	adds	r2, r7, #4
 80059a8:	f107 0314 	add.w	r3, r7, #20
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fff2 	bl	8006998 <xTaskCheckForTimeOut>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d124      	bne.n	8005a04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059bc:	f000 faa6 	bl	8005f0c <prvIsQueueFull>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d018      	beq.n	80059f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	3310      	adds	r3, #16
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff16 	bl	8006800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d6:	f000 fa31 	bl	8005e3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059da:	f000 fd47 	bl	800646c <xTaskResumeAll>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f47f af7c 	bne.w	80058de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80059e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <xQueueGenericSend+0x200>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	e772      	b.n	80058de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059fa:	f000 fa1f 	bl	8005e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059fe:	f000 fd35 	bl	800646c <xTaskResumeAll>
 8005a02:	e76c      	b.n	80058de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a06:	f000 fa19 	bl	8005e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a0a:	f000 fd2f 	bl	800646c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3738      	adds	r7, #56	@ 0x38
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b090      	sub	sp, #64	@ 0x40
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005a46:	bf00      	nop
 8005a48:	bf00      	nop
 8005a4a:	e7fd      	b.n	8005a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d103      	bne.n	8005a5a <xQueueGenericSendFromISR+0x3e>
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <xQueueGenericSendFromISR+0x42>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <xQueueGenericSendFromISR+0x44>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
 8005a7a:	e7fd      	b.n	8005a78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d103      	bne.n	8005a8a <xQueueGenericSendFromISR+0x6e>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <xQueueGenericSendFromISR+0x72>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericSendFromISR+0x74>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10b      	bne.n	8005aac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aac:	f001 feb0 	bl	8007810 <vPortValidateInterruptPriority>
	__asm volatile
 8005ab0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fa      	str	r2, [r7, #28]
 8005ac6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d302      	bcc.n	8005ade <xQueueGenericSendFromISR+0xc2>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d12f      	bne.n	8005b3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005af4:	f000 f912 	bl	8005d1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005af8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b00:	d112      	bne.n	8005b28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0c:	3324      	adds	r3, #36	@ 0x24
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fec8 	bl	80068a4 <xTaskRemoveFromEventList>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00e      	beq.n	8005b38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00b      	beq.n	8005b38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e007      	b.n	8005b38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	b25a      	sxtb	r2, r3
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005b3c:	e001      	b.n	8005b42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b44:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f383 8811 	msr	BASEPRI, r3
}
 8005b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3740      	adds	r7, #64	@ 0x40
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	@ 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <xQueueReceive+0x32>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	623b      	str	r3, [r7, #32]
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <xQueueReceive+0x40>
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <xQueueReceive+0x44>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <xQueueReceive+0x46>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <xQueueReceive+0x62>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	61fb      	str	r3, [r7, #28]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bba:	f001 f839 	bl	8006c30 <xTaskGetSchedulerState>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <xQueueReceive+0x72>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <xQueueReceive+0x76>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <xQueueReceive+0x78>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <xQueueReceive+0x94>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	61bb      	str	r3, [r7, #24]
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	e7fd      	b.n	8005be8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bec:	f001 fd4e 	bl	800768c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01f      	beq.n	8005c3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c00:	f000 f8f6 	bl	8005df0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	1e5a      	subs	r2, r3, #1
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	3310      	adds	r3, #16
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fe43 	bl	80068a4 <xTaskRemoveFromEventList>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c24:	4b3c      	ldr	r3, [pc, #240]	@ (8005d18 <xQueueReceive+0x1c0>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c34:	f001 fd5a 	bl	80076ec <vPortExitCritical>
				return pdPASS;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e069      	b.n	8005d10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c42:	f001 fd53 	bl	80076ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e062      	b.n	8005d10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d106      	bne.n	8005c5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fe89 	bl	800696c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c5e:	f001 fd45 	bl	80076ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c62:	f000 fbf5 	bl	8006450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c66:	f001 fd11 	bl	800768c <vPortEnterCritical>
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c76:	d103      	bne.n	8005c80 <xQueueReceive+0x128>
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c8c:	d103      	bne.n	8005c96 <xQueueReceive+0x13e>
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c96:	f001 fd29 	bl	80076ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c9a:	1d3a      	adds	r2, r7, #4
 8005c9c:	f107 0310 	add.w	r3, r7, #16
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fe78 	bl	8006998 <xTaskCheckForTimeOut>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d123      	bne.n	8005cf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cb0:	f000 f916 	bl	8005ee0 <prvIsQueueEmpty>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d017      	beq.n	8005cea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	3324      	adds	r3, #36	@ 0x24
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fd9c 	bl	8006800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cca:	f000 f8b7 	bl	8005e3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cce:	f000 fbcd 	bl	800646c <xTaskResumeAll>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d189      	bne.n	8005bec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d18 <xQueueReceive+0x1c0>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	e780      	b.n	8005bec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cec:	f000 f8a6 	bl	8005e3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cf0:	f000 fbbc 	bl	800646c <xTaskResumeAll>
 8005cf4:	e77a      	b.n	8005bec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cf8:	f000 f8a0 	bl	8005e3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cfc:	f000 fbb6 	bl	800646c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d02:	f000 f8ed 	bl	8005ee0 <prvIsQueueEmpty>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f43f af6f 	beq.w	8005bec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3730      	adds	r7, #48	@ 0x30
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10d      	bne.n	8005d56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d14d      	bne.n	8005dde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 ff90 	bl	8006c6c <xTaskPriorityDisinherit>
 8005d4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	609a      	str	r2, [r3, #8]
 8005d54:	e043      	b.n	8005dde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d119      	bne.n	8005d90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6858      	ldr	r0, [r3, #4]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	461a      	mov	r2, r3
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	f003 f806 	bl	8008d78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d32b      	bcc.n	8005dde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	e026      	b.n	8005dde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68d8      	ldr	r0, [r3, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	f002 ffec 	bl	8008d78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	425b      	negs	r3, r3
 8005daa:	441a      	add	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d207      	bcs.n	8005dcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc4:	425b      	negs	r3, r3
 8005dc6:	441a      	add	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d105      	bne.n	8005dde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005de6:	697b      	ldr	r3, [r7, #20]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d018      	beq.n	8005e34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	441a      	add	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d303      	bcc.n	8005e24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68d9      	ldr	r1, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6838      	ldr	r0, [r7, #0]
 8005e30:	f002 ffa2 	bl	8008d78 <memcpy>
	}
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e44:	f001 fc22 	bl	800768c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e50:	e011      	b.n	8005e76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3324      	adds	r3, #36	@ 0x24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fd20 	bl	80068a4 <xTaskRemoveFromEventList>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e6a:	f000 fdf9 	bl	8006a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dce9      	bgt.n	8005e52 <prvUnlockQueue+0x16>
 8005e7e:	e000      	b.n	8005e82 <prvUnlockQueue+0x46>
					break;
 8005e80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	22ff      	movs	r2, #255	@ 0xff
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e8a:	f001 fc2f 	bl	80076ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e8e:	f001 fbfd 	bl	800768c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e9a:	e011      	b.n	8005ec0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3310      	adds	r3, #16
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fcfb 	bl	80068a4 <xTaskRemoveFromEventList>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005eb4:	f000 fdd4 	bl	8006a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dce9      	bgt.n	8005e9c <prvUnlockQueue+0x60>
 8005ec8:	e000      	b.n	8005ecc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005eca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	22ff      	movs	r2, #255	@ 0xff
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ed4:	f001 fc0a 	bl	80076ec <vPortExitCritical>
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ee8:	f001 fbd0 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e001      	b.n	8005efe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005efe:	f001 fbf5 	bl	80076ec <vPortExitCritical>

	return xReturn;
 8005f02:	68fb      	ldr	r3, [r7, #12]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f14:	f001 fbba 	bl	800768c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d102      	bne.n	8005f2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e001      	b.n	8005f2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f2e:	f001 fbdd 	bl	80076ec <vPortExitCritical>

	return xReturn;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	e014      	b.n	8005f76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f88 <vQueueAddToRegistry+0x4c>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f58:	490b      	ldr	r1, [pc, #44]	@ (8005f88 <vQueueAddToRegistry+0x4c>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f62:	4a09      	ldr	r2, [pc, #36]	@ (8005f88 <vQueueAddToRegistry+0x4c>)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f6e:	e006      	b.n	8005f7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b07      	cmp	r3, #7
 8005f7a:	d9e7      	bls.n	8005f4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	20000bb4 	.word	0x20000bb4

08005f8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f9c:	f001 fb76 	bl	800768c <vPortEnterCritical>
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fac:	d103      	bne.n	8005fb6 <vQueueWaitForMessageRestricted+0x2a>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fbc:	b25b      	sxtb	r3, r3
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fc2:	d103      	bne.n	8005fcc <vQueueWaitForMessageRestricted+0x40>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fcc:	f001 fb8e 	bl	80076ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	3324      	adds	r3, #36	@ 0x24
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fc33 	bl	800684c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	f7ff ff28 	bl	8005e3c <prvUnlockQueue>
	}
 8005fec:	bf00      	nop
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08e      	sub	sp, #56	@ 0x38
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10b      	bne.n	8006020 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	623b      	str	r3, [r7, #32]
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	61fb      	str	r3, [r7, #28]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800603e:	23a8      	movs	r3, #168	@ 0xa8
 8006040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2ba8      	cmp	r3, #168	@ 0xa8
 8006046:	d00b      	beq.n	8006060 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	61bb      	str	r3, [r7, #24]
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006060:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01e      	beq.n	80060a6 <xTaskCreateStatic+0xb2>
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006076:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	2202      	movs	r2, #2
 800607c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006080:	2300      	movs	r3, #0
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f851 	bl	8006140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800609e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060a0:	f000 f8f6 	bl	8006290 <prvAddNewTaskToReadyList>
 80060a4:	e001      	b.n	80060aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060aa:	697b      	ldr	r3, [r7, #20]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3728      	adds	r7, #40	@ 0x28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	@ 0x30
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fbe1 	bl	8007890 <pvPortMalloc>
 80060ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060d6:	20a8      	movs	r0, #168	@ 0xa8
 80060d8:	f001 fbda 	bl	8007890 <pvPortMalloc>
 80060dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ea:	e005      	b.n	80060f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060ec:	6978      	ldr	r0, [r7, #20]
 80060ee:	f001 fc9d 	bl	8007a2c <vPortFree>
 80060f2:	e001      	b.n	80060f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	2300      	movs	r3, #0
 800610a:	9303      	str	r3, [sp, #12]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	9302      	str	r3, [sp, #8]
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f80f 	bl	8006140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006122:	69f8      	ldr	r0, [r7, #28]
 8006124:	f000 f8b4 	bl	8006290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006128:	2301      	movs	r3, #1
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e002      	b.n	8006134 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800612e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006132:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006134:	69bb      	ldr	r3, [r7, #24]
	}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	461a      	mov	r2, r3
 8006158:	21a5      	movs	r1, #165	@ 0xa5
 800615a:	f002 fd1d 	bl	8008b98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006168:	3b01      	subs	r3, #1
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01f      	beq.n	80061e0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	e012      	b.n	80061cc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	7819      	ldrb	r1, [r3, #0]
 80061ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	3334      	adds	r3, #52	@ 0x34
 80061b6:	460a      	mov	r2, r1
 80061b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d006      	beq.n	80061d4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d9e9      	bls.n	80061a6 <prvInitialiseNewTask+0x66>
 80061d2:	e000      	b.n	80061d6 <prvInitialiseNewTask+0x96>
			{
				break;
 80061d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061de:	e003      	b.n	80061e8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	2b37      	cmp	r3, #55	@ 0x37
 80061ec:	d901      	bls.n	80061f2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061ee:	2337      	movs	r3, #55	@ 0x37
 80061f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2200      	movs	r2, #0
 8006202:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	3304      	adds	r3, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff f8e2 	bl	80053d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	3318      	adds	r3, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f8dd 	bl	80053d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	2200      	movs	r2, #0
 800623a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	3354      	adds	r3, #84	@ 0x54
 8006242:	224c      	movs	r2, #76	@ 0x4c
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fca6 	bl	8008b98 <memset>
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <prvInitialiseNewTask+0x144>)
 8006250:	659a      	str	r2, [r3, #88]	@ 0x58
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	4a0c      	ldr	r2, [pc, #48]	@ (8006288 <prvInitialiseNewTask+0x148>)
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	4a0c      	ldr	r2, [pc, #48]	@ (800628c <prvInitialiseNewTask+0x14c>)
 800625c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68f9      	ldr	r1, [r7, #12]
 8006262:	69b8      	ldr	r0, [r7, #24]
 8006264:	f001 f91e 	bl	80074a4 <pxPortInitialiseStack>
 8006268:	4602      	mov	r2, r0
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800626e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800627a:	bf00      	nop
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20001e50 	.word	0x20001e50
 8006288:	20001eb8 	.word	0x20001eb8
 800628c:	20001f20 	.word	0x20001f20

08006290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006298:	f001 f9f8 	bl	800768c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800629c:	4b2d      	ldr	r3, [pc, #180]	@ (8006354 <prvAddNewTaskToReadyList+0xc4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3301      	adds	r3, #1
 80062a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006354 <prvAddNewTaskToReadyList+0xc4>)
 80062a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006358 <prvAddNewTaskToReadyList+0xc8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006358 <prvAddNewTaskToReadyList+0xc8>)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062b4:	4b27      	ldr	r3, [pc, #156]	@ (8006354 <prvAddNewTaskToReadyList+0xc4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d110      	bne.n	80062de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062bc:	f000 fbf4 	bl	8006aa8 <prvInitialiseTaskLists>
 80062c0:	e00d      	b.n	80062de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062c2:	4b26      	ldr	r3, [pc, #152]	@ (800635c <prvAddNewTaskToReadyList+0xcc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062ca:	4b23      	ldr	r3, [pc, #140]	@ (8006358 <prvAddNewTaskToReadyList+0xc8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d802      	bhi.n	80062de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <prvAddNewTaskToReadyList+0xc8>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062de:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <prvAddNewTaskToReadyList+0xd0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <prvAddNewTaskToReadyList+0xd0>)
 80062e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <prvAddNewTaskToReadyList+0xd0>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006364 <prvAddNewTaskToReadyList+0xd4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d903      	bls.n	8006304 <prvAddNewTaskToReadyList+0x74>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <prvAddNewTaskToReadyList+0xd4>)
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <prvAddNewTaskToReadyList+0xd8>)
 8006312:	441a      	add	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f7ff f865 	bl	80053ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006320:	f001 f9e4 	bl	80076ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006324:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <prvAddNewTaskToReadyList+0xcc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800632c:	4b0a      	ldr	r3, [pc, #40]	@ (8006358 <prvAddNewTaskToReadyList+0xc8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	429a      	cmp	r2, r3
 8006338:	d207      	bcs.n	800634a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800633a:	4b0c      	ldr	r3, [pc, #48]	@ (800636c <prvAddNewTaskToReadyList+0xdc>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200010c8 	.word	0x200010c8
 8006358:	20000bf4 	.word	0x20000bf4
 800635c:	200010d4 	.word	0x200010d4
 8006360:	200010e4 	.word	0x200010e4
 8006364:	200010d0 	.word	0x200010d0
 8006368:	20000bf8 	.word	0x20000bf8
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	@ 0x28
 8006374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800637e:	463a      	mov	r2, r7
 8006380:	1d39      	adds	r1, r7, #4
 8006382:	f107 0308 	add.w	r3, r7, #8
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe ffd2 	bl	8005330 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	9202      	str	r2, [sp, #8]
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	2300      	movs	r3, #0
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	460a      	mov	r2, r1
 800639e:	4924      	ldr	r1, [pc, #144]	@ (8006430 <vTaskStartScheduler+0xc0>)
 80063a0:	4824      	ldr	r0, [pc, #144]	@ (8006434 <vTaskStartScheduler+0xc4>)
 80063a2:	f7ff fe27 	bl	8005ff4 <xTaskCreateStatic>
 80063a6:	4603      	mov	r3, r0
 80063a8:	4a23      	ldr	r2, [pc, #140]	@ (8006438 <vTaskStartScheduler+0xc8>)
 80063aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063ac:	4b22      	ldr	r3, [pc, #136]	@ (8006438 <vTaskStartScheduler+0xc8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e001      	b.n	80063be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d102      	bne.n	80063ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80063c4:	f000 fd16 	bl	8006df4 <xTimerCreateTimerTask>
 80063c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d11b      	bne.n	8006408 <vTaskStartScheduler+0x98>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063e4:	4b15      	ldr	r3, [pc, #84]	@ (800643c <vTaskStartScheduler+0xcc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3354      	adds	r3, #84	@ 0x54
 80063ea:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <vTaskStartScheduler+0xd0>)
 80063ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80063ee:	4b15      	ldr	r3, [pc, #84]	@ (8006444 <vTaskStartScheduler+0xd4>)
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063f6:	4b14      	ldr	r3, [pc, #80]	@ (8006448 <vTaskStartScheduler+0xd8>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063fc:	4b13      	ldr	r3, [pc, #76]	@ (800644c <vTaskStartScheduler+0xdc>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006402:	f001 f8d1 	bl	80075a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006406:	e00f      	b.n	8006428 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800640e:	d10b      	bne.n	8006428 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60fb      	str	r3, [r7, #12]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <vTaskStartScheduler+0xb4>
}
 8006428:	bf00      	nop
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	0800ad44 	.word	0x0800ad44
 8006434:	08006a79 	.word	0x08006a79
 8006438:	200010ec 	.word	0x200010ec
 800643c:	20000bf4 	.word	0x20000bf4
 8006440:	2000001c 	.word	0x2000001c
 8006444:	200010e8 	.word	0x200010e8
 8006448:	200010d4 	.word	0x200010d4
 800644c:	200010cc 	.word	0x200010cc

08006450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <vTaskSuspendAll+0x18>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a03      	ldr	r2, [pc, #12]	@ (8006468 <vTaskSuspendAll+0x18>)
 800645c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800645e:	bf00      	nop
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	200010f0 	.word	0x200010f0

0800646c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800647a:	4b42      	ldr	r3, [pc, #264]	@ (8006584 <xTaskResumeAll+0x118>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <xTaskResumeAll+0x2e>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	603b      	str	r3, [r7, #0]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800649a:	f001 f8f7 	bl	800768c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800649e:	4b39      	ldr	r3, [pc, #228]	@ (8006584 <xTaskResumeAll+0x118>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	4a37      	ldr	r2, [pc, #220]	@ (8006584 <xTaskResumeAll+0x118>)
 80064a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a8:	4b36      	ldr	r3, [pc, #216]	@ (8006584 <xTaskResumeAll+0x118>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d162      	bne.n	8006576 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064b0:	4b35      	ldr	r3, [pc, #212]	@ (8006588 <xTaskResumeAll+0x11c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05e      	beq.n	8006576 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b8:	e02f      	b.n	800651a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ba:	4b34      	ldr	r3, [pc, #208]	@ (800658c <xTaskResumeAll+0x120>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3318      	adds	r3, #24
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe ffea 	bl	80054a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fe ffe5 	bl	80054a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <xTaskResumeAll+0x124>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <xTaskResumeAll+0x7e>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006590 <xTaskResumeAll+0x124>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <xTaskResumeAll+0x128>)
 80064f8:	441a      	add	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fe ff72 	bl	80053ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	4b23      	ldr	r3, [pc, #140]	@ (8006598 <xTaskResumeAll+0x12c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006514:	4b21      	ldr	r3, [pc, #132]	@ (800659c <xTaskResumeAll+0x130>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651a:	4b1c      	ldr	r3, [pc, #112]	@ (800658c <xTaskResumeAll+0x120>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1cb      	bne.n	80064ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006528:	f000 fb62 	bl	8006bf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800652c:	4b1c      	ldr	r3, [pc, #112]	@ (80065a0 <xTaskResumeAll+0x134>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d010      	beq.n	800655a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006538:	f000 f844 	bl	80065c4 <xTaskIncrementTick>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006542:	4b16      	ldr	r3, [pc, #88]	@ (800659c <xTaskResumeAll+0x130>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f1      	bne.n	8006538 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006554:	4b12      	ldr	r3, [pc, #72]	@ (80065a0 <xTaskResumeAll+0x134>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800655a:	4b10      	ldr	r3, [pc, #64]	@ (800659c <xTaskResumeAll+0x130>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006566:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <xTaskResumeAll+0x138>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006576:	f001 f8b9 	bl	80076ec <vPortExitCritical>

	return xAlreadyYielded;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200010f0 	.word	0x200010f0
 8006588:	200010c8 	.word	0x200010c8
 800658c:	20001088 	.word	0x20001088
 8006590:	200010d0 	.word	0x200010d0
 8006594:	20000bf8 	.word	0x20000bf8
 8006598:	20000bf4 	.word	0x20000bf4
 800659c:	200010dc 	.word	0x200010dc
 80065a0:	200010d8 	.word	0x200010d8
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065ae:	4b04      	ldr	r3, [pc, #16]	@ (80065c0 <xTaskGetTickCount+0x18>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065b4:	687b      	ldr	r3, [r7, #4]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	200010cc 	.word	0x200010cc

080065c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ce:	4b4f      	ldr	r3, [pc, #316]	@ (800670c <xTaskIncrementTick+0x148>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8090 	bne.w	80066f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006710 <xTaskIncrementTick+0x14c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006710 <xTaskIncrementTick+0x14c>)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d121      	bne.n	8006630 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80065ec:	4b49      	ldr	r3, [pc, #292]	@ (8006714 <xTaskIncrementTick+0x150>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <xTaskIncrementTick+0x4a>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <xTaskIncrementTick+0x46>
 800660e:	4b41      	ldr	r3, [pc, #260]	@ (8006714 <xTaskIncrementTick+0x150>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	4b40      	ldr	r3, [pc, #256]	@ (8006718 <xTaskIncrementTick+0x154>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3e      	ldr	r2, [pc, #248]	@ (8006714 <xTaskIncrementTick+0x150>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	4a3e      	ldr	r2, [pc, #248]	@ (8006718 <xTaskIncrementTick+0x154>)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b3e      	ldr	r3, [pc, #248]	@ (800671c <xTaskIncrementTick+0x158>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a3c      	ldr	r2, [pc, #240]	@ (800671c <xTaskIncrementTick+0x158>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	f000 fae0 	bl	8006bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006630:	4b3b      	ldr	r3, [pc, #236]	@ (8006720 <xTaskIncrementTick+0x15c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d349      	bcc.n	80066ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800663a:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <xTaskIncrementTick+0x150>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006644:	4b36      	ldr	r3, [pc, #216]	@ (8006720 <xTaskIncrementTick+0x15c>)
 8006646:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800664a:	601a      	str	r2, [r3, #0]
					break;
 800664c:	e03f      	b.n	80066ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664e:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <xTaskIncrementTick+0x150>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	429a      	cmp	r2, r3
 8006664:	d203      	bcs.n	800666e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006666:	4a2e      	ldr	r2, [pc, #184]	@ (8006720 <xTaskIncrementTick+0x15c>)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800666c:	e02f      	b.n	80066ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	3304      	adds	r3, #4
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe ff14 	bl	80054a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7fe ff0b 	bl	80054a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668e:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <xTaskIncrementTick+0x160>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d903      	bls.n	800669e <xTaskIncrementTick+0xda>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669a:	4a22      	ldr	r2, [pc, #136]	@ (8006724 <xTaskIncrementTick+0x160>)
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006728 <xTaskIncrementTick+0x164>)
 80066ac:	441a      	add	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	3304      	adds	r3, #4
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fe fe98 	bl	80053ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066be:	4b1b      	ldr	r3, [pc, #108]	@ (800672c <xTaskIncrementTick+0x168>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3b8      	bcc.n	800663a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066cc:	e7b5      	b.n	800663a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066ce:	4b17      	ldr	r3, [pc, #92]	@ (800672c <xTaskIncrementTick+0x168>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d4:	4914      	ldr	r1, [pc, #80]	@ (8006728 <xTaskIncrementTick+0x164>)
 80066d6:	4613      	mov	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d901      	bls.n	80066ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066ea:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <xTaskIncrementTick+0x16c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80066f2:	2301      	movs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	e004      	b.n	8006702 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006734 <xTaskIncrementTick+0x170>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006734 <xTaskIncrementTick+0x170>)
 8006700:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006702:	697b      	ldr	r3, [r7, #20]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	200010f0 	.word	0x200010f0
 8006710:	200010cc 	.word	0x200010cc
 8006714:	20001080 	.word	0x20001080
 8006718:	20001084 	.word	0x20001084
 800671c:	200010e0 	.word	0x200010e0
 8006720:	200010e8 	.word	0x200010e8
 8006724:	200010d0 	.word	0x200010d0
 8006728:	20000bf8 	.word	0x20000bf8
 800672c:	20000bf4 	.word	0x20000bf4
 8006730:	200010dc 	.word	0x200010dc
 8006734:	200010d8 	.word	0x200010d8

08006738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800673e:	4b2a      	ldr	r3, [pc, #168]	@ (80067e8 <vTaskSwitchContext+0xb0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006746:	4b29      	ldr	r3, [pc, #164]	@ (80067ec <vTaskSwitchContext+0xb4>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800674c:	e047      	b.n	80067de <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800674e:	4b27      	ldr	r3, [pc, #156]	@ (80067ec <vTaskSwitchContext+0xb4>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006754:	4b26      	ldr	r3, [pc, #152]	@ (80067f0 <vTaskSwitchContext+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	e011      	b.n	8006780 <vTaskSwitchContext+0x48>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <vTaskSwitchContext+0x42>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	607b      	str	r3, [r7, #4]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <vTaskSwitchContext+0x3e>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3b01      	subs	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	491c      	ldr	r1, [pc, #112]	@ (80067f4 <vTaskSwitchContext+0xbc>)
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4613      	mov	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0e3      	beq.n	800675c <vTaskSwitchContext+0x24>
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4a15      	ldr	r2, [pc, #84]	@ (80067f4 <vTaskSwitchContext+0xbc>)
 80067a0:	4413      	add	r3, r2
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	3308      	adds	r3, #8
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d104      	bne.n	80067c4 <vTaskSwitchContext+0x8c>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	4a0b      	ldr	r2, [pc, #44]	@ (80067f8 <vTaskSwitchContext+0xc0>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4a08      	ldr	r2, [pc, #32]	@ (80067f0 <vTaskSwitchContext+0xb8>)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067d4:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <vTaskSwitchContext+0xc0>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3354      	adds	r3, #84	@ 0x54
 80067da:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <vTaskSwitchContext+0xc4>)
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr
 80067e8:	200010f0 	.word	0x200010f0
 80067ec:	200010dc 	.word	0x200010dc
 80067f0:	200010d0 	.word	0x200010d0
 80067f4:	20000bf8 	.word	0x20000bf8
 80067f8:	20000bf4 	.word	0x20000bf4
 80067fc:	2000001c 	.word	0x2000001c

08006800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006828:	4b07      	ldr	r3, [pc, #28]	@ (8006848 <vTaskPlaceOnEventList+0x48>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3318      	adds	r3, #24
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fe fdfd 	bl	8005430 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006836:	2101      	movs	r1, #1
 8006838:	6838      	ldr	r0, [r7, #0]
 800683a:	f000 fa87 	bl	8006d4c <prvAddCurrentTaskToDelayedList>
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000bf4 	.word	0x20000bf4

0800684c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10b      	bne.n	8006876 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	617b      	str	r3, [r7, #20]
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	e7fd      	b.n	8006872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006876:	4b0a      	ldr	r3, [pc, #40]	@ (80068a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3318      	adds	r3, #24
 800687c:	4619      	mov	r1, r3
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7fe fdb3 	bl	80053ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800688a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800688e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	68b8      	ldr	r0, [r7, #8]
 8006894:	f000 fa5a 	bl	8006d4c <prvAddCurrentTaskToDelayedList>
	}
 8006898:	bf00      	nop
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000bf4 	.word	0x20000bf4

080068a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	60fb      	str	r3, [r7, #12]
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	e7fd      	b.n	80068ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	3318      	adds	r3, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe fde2 	bl	80054a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006954 <xTaskRemoveFromEventList+0xb0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11d      	bne.n	8006920 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe fdd9 	bl	80054a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f2:	4b19      	ldr	r3, [pc, #100]	@ (8006958 <xTaskRemoveFromEventList+0xb4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d903      	bls.n	8006902 <xTaskRemoveFromEventList+0x5e>
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a16      	ldr	r2, [pc, #88]	@ (8006958 <xTaskRemoveFromEventList+0xb4>)
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4a13      	ldr	r2, [pc, #76]	@ (800695c <xTaskRemoveFromEventList+0xb8>)
 8006910:	441a      	add	r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f7fe fd66 	bl	80053ea <vListInsertEnd>
 800691e:	e005      	b.n	800692c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	3318      	adds	r3, #24
 8006924:	4619      	mov	r1, r3
 8006926:	480e      	ldr	r0, [pc, #56]	@ (8006960 <xTaskRemoveFromEventList+0xbc>)
 8006928:	f7fe fd5f 	bl	80053ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006930:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <xTaskRemoveFromEventList+0xc0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	429a      	cmp	r2, r3
 8006938:	d905      	bls.n	8006946 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <xTaskRemoveFromEventList+0xc4>)
 8006940:	2201      	movs	r2, #1
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	e001      	b.n	800694a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800694a:	697b      	ldr	r3, [r7, #20]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	200010f0 	.word	0x200010f0
 8006958:	200010d0 	.word	0x200010d0
 800695c:	20000bf8 	.word	0x20000bf8
 8006960:	20001088 	.word	0x20001088
 8006964:	20000bf4 	.word	0x20000bf4
 8006968:	200010dc 	.word	0x200010dc

0800696c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006974:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <vTaskInternalSetTimeOutState+0x24>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800697c:	4b05      	ldr	r3, [pc, #20]	@ (8006994 <vTaskInternalSetTimeOutState+0x28>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	605a      	str	r2, [r3, #4]
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200010e0 	.word	0x200010e0
 8006994:	200010cc 	.word	0x200010cc

08006998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10b      	bne.n	80069c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	613b      	str	r3, [r7, #16]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60fb      	str	r3, [r7, #12]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80069de:	f000 fe55 	bl	800768c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a58 <xTaskCheckForTimeOut+0xc0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069fa:	d102      	bne.n	8006a02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e023      	b.n	8006a4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b15      	ldr	r3, [pc, #84]	@ (8006a5c <xTaskCheckForTimeOut+0xc4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d007      	beq.n	8006a1e <xTaskCheckForTimeOut+0x86>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d302      	bcc.n	8006a1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e015      	b.n	8006a4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d20b      	bcs.n	8006a40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff99 	bl	800696c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	e004      	b.n	8006a4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a4a:	f000 fe4f 	bl	80076ec <vPortExitCritical>

	return xReturn;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	200010cc 	.word	0x200010cc
 8006a5c:	200010e0 	.word	0x200010e0

08006a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a64:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <vTaskMissedYield+0x14>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	200010dc 	.word	0x200010dc

08006a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a80:	f000 f852 	bl	8006b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a84:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <prvIdleTask+0x28>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d9f9      	bls.n	8006a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <prvIdleTask+0x2c>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a9c:	e7f0      	b.n	8006a80 <prvIdleTask+0x8>
 8006a9e:	bf00      	nop
 8006aa0:	20000bf8 	.word	0x20000bf8
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006aae:	2300      	movs	r3, #0
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	e00c      	b.n	8006ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a12      	ldr	r2, [pc, #72]	@ (8006b08 <prvInitialiseTaskLists+0x60>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fc66 	bl	8005394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3301      	adds	r3, #1
 8006acc:	607b      	str	r3, [r7, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b37      	cmp	r3, #55	@ 0x37
 8006ad2:	d9ef      	bls.n	8006ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ad4:	480d      	ldr	r0, [pc, #52]	@ (8006b0c <prvInitialiseTaskLists+0x64>)
 8006ad6:	f7fe fc5d 	bl	8005394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ada:	480d      	ldr	r0, [pc, #52]	@ (8006b10 <prvInitialiseTaskLists+0x68>)
 8006adc:	f7fe fc5a 	bl	8005394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ae0:	480c      	ldr	r0, [pc, #48]	@ (8006b14 <prvInitialiseTaskLists+0x6c>)
 8006ae2:	f7fe fc57 	bl	8005394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ae6:	480c      	ldr	r0, [pc, #48]	@ (8006b18 <prvInitialiseTaskLists+0x70>)
 8006ae8:	f7fe fc54 	bl	8005394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006aec:	480b      	ldr	r0, [pc, #44]	@ (8006b1c <prvInitialiseTaskLists+0x74>)
 8006aee:	f7fe fc51 	bl	8005394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <prvInitialiseTaskLists+0x78>)
 8006af4:	4a05      	ldr	r2, [pc, #20]	@ (8006b0c <prvInitialiseTaskLists+0x64>)
 8006af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006af8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <prvInitialiseTaskLists+0x7c>)
 8006afa:	4a05      	ldr	r2, [pc, #20]	@ (8006b10 <prvInitialiseTaskLists+0x68>)
 8006afc:	601a      	str	r2, [r3, #0]
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000bf8 	.word	0x20000bf8
 8006b0c:	20001058 	.word	0x20001058
 8006b10:	2000106c 	.word	0x2000106c
 8006b14:	20001088 	.word	0x20001088
 8006b18:	2000109c 	.word	0x2000109c
 8006b1c:	200010b4 	.word	0x200010b4
 8006b20:	20001080 	.word	0x20001080
 8006b24:	20001084 	.word	0x20001084

08006b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b2e:	e019      	b.n	8006b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b30:	f000 fdac 	bl	800768c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b34:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <prvCheckTasksWaitingTermination+0x50>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fe fcad 	bl	80054a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <prvCheckTasksWaitingTermination+0x54>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006b7c <prvCheckTasksWaitingTermination+0x54>)
 8006b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	4a0a      	ldr	r2, [pc, #40]	@ (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b5a:	f000 fdc7 	bl	80076ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f810 	bl	8006b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b64:	4b06      	ldr	r3, [pc, #24]	@ (8006b80 <prvCheckTasksWaitingTermination+0x58>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e1      	bne.n	8006b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	2000109c 	.word	0x2000109c
 8006b7c:	200010c8 	.word	0x200010c8
 8006b80:	200010b0 	.word	0x200010b0

08006b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3354      	adds	r3, #84	@ 0x54
 8006b90:	4618      	mov	r0, r3
 8006b92:	f002 f81d 	bl	8008bd0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d108      	bne.n	8006bb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 ff41 	bl	8007a2c <vPortFree>
				vPortFree( pxTCB );
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 ff3e 	bl	8007a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bb0:	e019      	b.n	8006be6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d103      	bne.n	8006bc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 ff35 	bl	8007a2c <vPortFree>
	}
 8006bc2:	e010      	b.n	8006be6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d00b      	beq.n	8006be6 <prvDeleteTCB+0x62>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	60fb      	str	r3, [r7, #12]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <prvDeleteTCB+0x5e>
	}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c28 <prvResetNextTaskUnblockTime+0x38>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c00:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <prvResetNextTaskUnblockTime+0x3c>)
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c08:	e008      	b.n	8006c1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c0a:	4b07      	ldr	r3, [pc, #28]	@ (8006c28 <prvResetNextTaskUnblockTime+0x38>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	4a04      	ldr	r2, [pc, #16]	@ (8006c2c <prvResetNextTaskUnblockTime+0x3c>)
 8006c1a:	6013      	str	r3, [r2, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20001080 	.word	0x20001080
 8006c2c:	200010e8 	.word	0x200010e8

08006c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c36:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <xTaskGetSchedulerState+0x34>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	e008      	b.n	8006c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c44:	4b08      	ldr	r3, [pc, #32]	@ (8006c68 <xTaskGetSchedulerState+0x38>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	607b      	str	r3, [r7, #4]
 8006c50:	e001      	b.n	8006c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c52:	2300      	movs	r3, #0
 8006c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c56:	687b      	ldr	r3, [r7, #4]
	}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	200010d4 	.word	0x200010d4
 8006c68:	200010f0 	.word	0x200010f0

08006c6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d058      	beq.n	8006d34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c82:	4b2f      	ldr	r3, [pc, #188]	@ (8006d40 <xTaskPriorityDisinherit+0xd4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d00b      	beq.n	8006ca4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60fb      	str	r3, [r7, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	60bb      	str	r3, [r7, #8]
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	1e5a      	subs	r2, r3, #1
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d02c      	beq.n	8006d34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d128      	bne.n	8006d34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fbda 	bl	80054a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d04:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <xTaskPriorityDisinherit+0xd8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d903      	bls.n	8006d14 <xTaskPriorityDisinherit+0xa8>
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d10:	4a0c      	ldr	r2, [pc, #48]	@ (8006d44 <xTaskPriorityDisinherit+0xd8>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a09      	ldr	r2, [pc, #36]	@ (8006d48 <xTaskPriorityDisinherit+0xdc>)
 8006d22:	441a      	add	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fb5d 	bl	80053ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d34:	697b      	ldr	r3, [r7, #20]
	}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000bf4 	.word	0x20000bf4
 8006d44:	200010d0 	.word	0x200010d0
 8006d48:	20000bf8 	.word	0x20000bf8

08006d4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d56:	4b21      	ldr	r3, [pc, #132]	@ (8006ddc <prvAddCurrentTaskToDelayedList+0x90>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fb9c 	bl	80054a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d6e:	d10a      	bne.n	8006d86 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d76:	4b1a      	ldr	r3, [pc, #104]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4819      	ldr	r0, [pc, #100]	@ (8006de4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d80:	f7fe fb33 	bl	80053ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d84:	e026      	b.n	8006dd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d209      	bcs.n	8006db2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d9e:	4b12      	ldr	r3, [pc, #72]	@ (8006de8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b0f      	ldr	r3, [pc, #60]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7fe fb40 	bl	8005430 <vListInsert>
}
 8006db0:	e010      	b.n	8006dd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <prvAddCurrentTaskToDelayedList+0xa0>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b0a      	ldr	r3, [pc, #40]	@ (8006de0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f7fe fb36 	bl	8005430 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d202      	bcs.n	8006dd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dce:	4a08      	ldr	r2, [pc, #32]	@ (8006df0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6013      	str	r3, [r2, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200010cc 	.word	0x200010cc
 8006de0:	20000bf4 	.word	0x20000bf4
 8006de4:	200010b4 	.word	0x200010b4
 8006de8:	20001084 	.word	0x20001084
 8006dec:	20001080 	.word	0x20001080
 8006df0:	200010e8 	.word	0x200010e8

08006df4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	@ 0x28
 8006df8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006dfe:	f000 fb11 	bl	8007424 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e02:	4b1d      	ldr	r3, [pc, #116]	@ (8006e78 <xTimerCreateTimerTask+0x84>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d021      	beq.n	8006e4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e12:	1d3a      	adds	r2, r7, #4
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	f107 030c 	add.w	r3, r7, #12
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fa9f 	bl	8005360 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	9202      	str	r2, [sp, #8]
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2300      	movs	r3, #0
 8006e32:	460a      	mov	r2, r1
 8006e34:	4911      	ldr	r1, [pc, #68]	@ (8006e7c <xTimerCreateTimerTask+0x88>)
 8006e36:	4812      	ldr	r0, [pc, #72]	@ (8006e80 <xTimerCreateTimerTask+0x8c>)
 8006e38:	f7ff f8dc 	bl	8005ff4 <xTaskCreateStatic>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4a11      	ldr	r2, [pc, #68]	@ (8006e84 <xTimerCreateTimerTask+0x90>)
 8006e40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e42:	4b10      	ldr	r3, [pc, #64]	@ (8006e84 <xTimerCreateTimerTask+0x90>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10b      	bne.n	8006e6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	613b      	str	r3, [r7, #16]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20001124 	.word	0x20001124
 8006e7c:	0800ad4c 	.word	0x0800ad4c
 8006e80:	08006fc1 	.word	0x08006fc1
 8006e84:	20001128 	.word	0x20001128

08006e88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	@ 0x28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	623b      	str	r3, [r7, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006eb8:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <xTimerGenericCommand+0x98>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02a      	beq.n	8006f16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	dc18      	bgt.n	8006f04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ed2:	f7ff fead 	bl	8006c30 <xTaskGetSchedulerState>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d109      	bne.n	8006ef0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <xTimerGenericCommand+0x98>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	f107 0110 	add.w	r1, r7, #16
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee8:	f7fe fc96 	bl	8005818 <xQueueGenericSend>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24
 8006eee:	e012      	b.n	8006f16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <xTimerGenericCommand+0x98>)
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	f107 0110 	add.w	r1, r7, #16
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7fe fc8c 	bl	8005818 <xQueueGenericSend>
 8006f00:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f02:	e008      	b.n	8006f16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <xTimerGenericCommand+0x98>)
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	f107 0110 	add.w	r1, r7, #16
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	f7fe fd84 	bl	8005a1c <xQueueGenericSendFromISR>
 8006f14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	@ 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20001124 	.word	0x20001124

08006f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f2e:	4b23      	ldr	r3, [pc, #140]	@ (8006fbc <prvProcessExpiredTimer+0x98>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe faaf 	bl	80054a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d023      	beq.n	8006f98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	18d1      	adds	r1, r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	6978      	ldr	r0, [r7, #20]
 8006f5e:	f000 f8d3 	bl	8007108 <prvInsertTimerInActiveList>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d020      	beq.n	8006faa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	2100      	movs	r1, #0
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f7ff ff88 	bl	8006e88 <xTimerGenericCommand>
 8006f78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d114      	bne.n	8006faa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	6978      	ldr	r0, [r7, #20]
 8006fb0:	4798      	blx	r3
}
 8006fb2:	bf00      	nop
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	2000111c 	.word	0x2000111c

08006fc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fc8:	f107 0308 	add.w	r3, r7, #8
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 f859 	bl	8007084 <prvGetNextExpireTime>
 8006fd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f805 	bl	8006fe8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006fde:	f000 f8d5 	bl	800718c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fe2:	bf00      	nop
 8006fe4:	e7f0      	b.n	8006fc8 <prvTimerTask+0x8>
	...

08006fe8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ff2:	f7ff fa2d 	bl	8006450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ff6:	f107 0308 	add.w	r3, r7, #8
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f864 	bl	80070c8 <prvSampleTimeNow>
 8007000:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d130      	bne.n	800706a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <prvProcessTimerOrBlockTask+0x3c>
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	429a      	cmp	r2, r3
 8007014:	d806      	bhi.n	8007024 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007016:	f7ff fa29 	bl	800646c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ff81 	bl	8006f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007022:	e024      	b.n	800706e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800702a:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <prvProcessTimerOrBlockTask+0x90>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <prvProcessTimerOrBlockTask+0x50>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <prvProcessTimerOrBlockTask+0x52>
 8007038:	2300      	movs	r3, #0
 800703a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800703c:	4b0f      	ldr	r3, [pc, #60]	@ (800707c <prvProcessTimerOrBlockTask+0x94>)
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4619      	mov	r1, r3
 800704a:	f7fe ff9f 	bl	8005f8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800704e:	f7ff fa0d 	bl	800646c <xTaskResumeAll>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007058:	4b09      	ldr	r3, [pc, #36]	@ (8007080 <prvProcessTimerOrBlockTask+0x98>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
}
 8007068:	e001      	b.n	800706e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800706a:	f7ff f9ff 	bl	800646c <xTaskResumeAll>
}
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20001120 	.word	0x20001120
 800707c:	20001124 	.word	0x20001124
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800708c:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <prvGetNextExpireTime+0x40>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <prvGetNextExpireTime+0x16>
 8007096:	2201      	movs	r2, #1
 8007098:	e000      	b.n	800709c <prvGetNextExpireTime+0x18>
 800709a:	2200      	movs	r2, #0
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070a8:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <prvGetNextExpireTime+0x40>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	e001      	b.n	80070b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070b8:	68fb      	ldr	r3, [r7, #12]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	2000111c 	.word	0x2000111c

080070c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070d0:	f7ff fa6a 	bl	80065a8 <xTaskGetTickCount>
 80070d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007104 <prvSampleTimeNow+0x3c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d205      	bcs.n	80070ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80070e0:	f000 f93a 	bl	8007358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80070f2:	4a04      	ldr	r2, [pc, #16]	@ (8007104 <prvSampleTimeNow+0x3c>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80070f8:	68fb      	ldr	r3, [r7, #12]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	2000112c 	.word	0x2000112c

08007108 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	429a      	cmp	r2, r3
 800712c:	d812      	bhi.n	8007154 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	1ad2      	subs	r2, r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	d302      	bcc.n	8007142 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e01b      	b.n	800717a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <prvInsertTimerInActiveList+0x7c>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3304      	adds	r3, #4
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fe f96f 	bl	8005430 <vListInsert>
 8007152:	e012      	b.n	800717a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d206      	bcs.n	800716a <prvInsertTimerInActiveList+0x62>
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e007      	b.n	800717a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800716a:	4b07      	ldr	r3, [pc, #28]	@ (8007188 <prvInsertTimerInActiveList+0x80>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7fe f95b 	bl	8005430 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800717a:	697b      	ldr	r3, [r7, #20]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20001120 	.word	0x20001120
 8007188:	2000111c 	.word	0x2000111c

0800718c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	@ 0x38
 8007190:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007192:	e0ce      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	da19      	bge.n	80071ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800719a:	1d3b      	adds	r3, r7, #4
 800719c:	3304      	adds	r3, #4
 800719e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	61fb      	str	r3, [r7, #28]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c4:	6850      	ldr	r0, [r2, #4]
 80071c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c8:	6892      	ldr	r2, [r2, #8]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f2c0 80ae 	blt.w	8007332 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	3304      	adds	r3, #4
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe f95a 	bl	80054a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ec:	463b      	mov	r3, r7
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff ff6a 	bl	80070c8 <prvSampleTimeNow>
 80071f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b09      	cmp	r3, #9
 80071fa:	f200 8097 	bhi.w	800732c <prvProcessReceivedCommands+0x1a0>
 80071fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <prvProcessReceivedCommands+0x78>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	0800722d 	.word	0x0800722d
 8007208:	0800722d 	.word	0x0800722d
 800720c:	0800722d 	.word	0x0800722d
 8007210:	080072a3 	.word	0x080072a3
 8007214:	080072b7 	.word	0x080072b7
 8007218:	08007303 	.word	0x08007303
 800721c:	0800722d 	.word	0x0800722d
 8007220:	0800722d 	.word	0x0800722d
 8007224:	080072a3 	.word	0x080072a3
 8007228:	080072b7 	.word	0x080072b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	18d1      	adds	r1, r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800724a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800724c:	f7ff ff5c 	bl	8007108 <prvInsertTimerInActiveList>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d06c      	beq.n	8007330 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d061      	beq.n	8007330 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	441a      	add	r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	2100      	movs	r1, #0
 800727c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800727e:	f7ff fe03 	bl	8006e88 <xTimerGenericCommand>
 8007282:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d152      	bne.n	8007330 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	61bb      	str	r3, [r7, #24]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80072b4:	e03d      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10b      	bne.n	80072ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	617b      	str	r3, [r7, #20]
}
 80072e8:	bf00      	nop
 80072ea:	bf00      	nop
 80072ec:	e7fd      	b.n	80072ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	18d1      	adds	r1, r2, r3
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072fc:	f7ff ff04 	bl	8007108 <prvInsertTimerInActiveList>
					break;
 8007300:	e017      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007312:	f000 fb8b 	bl	8007a2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007316:	e00c      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800731e:	f023 0301 	bic.w	r3, r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800732a:	e002      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800732c:	bf00      	nop
 800732e:	e000      	b.n	8007332 <prvProcessReceivedCommands+0x1a6>
					break;
 8007330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007332:	4b08      	ldr	r3, [pc, #32]	@ (8007354 <prvProcessReceivedCommands+0x1c8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	1d39      	adds	r1, r7, #4
 8007338:	2200      	movs	r2, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fc0c 	bl	8005b58 <xQueueReceive>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af26 	bne.w	8007194 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3730      	adds	r7, #48	@ 0x30
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20001124 	.word	0x20001124

08007358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800735e:	e049      	b.n	80073f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007360:	4b2e      	ldr	r3, [pc, #184]	@ (800741c <prvSwitchTimerLists+0xc4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736a:	4b2c      	ldr	r3, [pc, #176]	@ (800741c <prvSwitchTimerLists+0xc4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe f891 	bl	80054a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02f      	beq.n	80073f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90e      	bls.n	80073c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073b2:	4b1a      	ldr	r3, [pc, #104]	@ (800741c <prvSwitchTimerLists+0xc4>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe f837 	bl	8005430 <vListInsert>
 80073c2:	e017      	b.n	80073f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	2100      	movs	r1, #0
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fd5a 	bl	8006e88 <xTimerGenericCommand>
 80073d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	603b      	str	r3, [r7, #0]
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073f4:	4b09      	ldr	r3, [pc, #36]	@ (800741c <prvSwitchTimerLists+0xc4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1b0      	bne.n	8007360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80073fe:	4b07      	ldr	r3, [pc, #28]	@ (800741c <prvSwitchTimerLists+0xc4>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <prvSwitchTimerLists+0xc8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a04      	ldr	r2, [pc, #16]	@ (800741c <prvSwitchTimerLists+0xc4>)
 800740a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800740c:	4a04      	ldr	r2, [pc, #16]	@ (8007420 <prvSwitchTimerLists+0xc8>)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6013      	str	r3, [r2, #0]
}
 8007412:	bf00      	nop
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	2000111c 	.word	0x2000111c
 8007420:	20001120 	.word	0x20001120

08007424 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800742a:	f000 f92f 	bl	800768c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800742e:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <prvCheckForValidListAndQueue+0x60>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d120      	bne.n	8007478 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007436:	4814      	ldr	r0, [pc, #80]	@ (8007488 <prvCheckForValidListAndQueue+0x64>)
 8007438:	f7fd ffac 	bl	8005394 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800743c:	4813      	ldr	r0, [pc, #76]	@ (800748c <prvCheckForValidListAndQueue+0x68>)
 800743e:	f7fd ffa9 	bl	8005394 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007442:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <prvCheckForValidListAndQueue+0x6c>)
 8007444:	4a10      	ldr	r2, [pc, #64]	@ (8007488 <prvCheckForValidListAndQueue+0x64>)
 8007446:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007448:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <prvCheckForValidListAndQueue+0x70>)
 800744a:	4a10      	ldr	r2, [pc, #64]	@ (800748c <prvCheckForValidListAndQueue+0x68>)
 800744c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800744e:	2300      	movs	r3, #0
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	4b11      	ldr	r3, [pc, #68]	@ (8007498 <prvCheckForValidListAndQueue+0x74>)
 8007454:	4a11      	ldr	r2, [pc, #68]	@ (800749c <prvCheckForValidListAndQueue+0x78>)
 8007456:	2110      	movs	r1, #16
 8007458:	200a      	movs	r0, #10
 800745a:	f7fe f8b5 	bl	80055c8 <xQueueGenericCreateStatic>
 800745e:	4603      	mov	r3, r0
 8007460:	4a08      	ldr	r2, [pc, #32]	@ (8007484 <prvCheckForValidListAndQueue+0x60>)
 8007462:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007464:	4b07      	ldr	r3, [pc, #28]	@ (8007484 <prvCheckForValidListAndQueue+0x60>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800746c:	4b05      	ldr	r3, [pc, #20]	@ (8007484 <prvCheckForValidListAndQueue+0x60>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	490b      	ldr	r1, [pc, #44]	@ (80074a0 <prvCheckForValidListAndQueue+0x7c>)
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fd62 	bl	8005f3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007478:	f000 f938 	bl	80076ec <vPortExitCritical>
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20001124 	.word	0x20001124
 8007488:	200010f4 	.word	0x200010f4
 800748c:	20001108 	.word	0x20001108
 8007490:	2000111c 	.word	0x2000111c
 8007494:	20001120 	.word	0x20001120
 8007498:	200011d0 	.word	0x200011d0
 800749c:	20001130 	.word	0x20001130
 80074a0:	0800ad54 	.word	0x0800ad54

080074a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3b04      	subs	r3, #4
 80074b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b04      	subs	r3, #4
 80074c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f023 0201 	bic.w	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3b04      	subs	r3, #4
 80074d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074d4:	4a08      	ldr	r2, [pc, #32]	@ (80074f8 <pxPortInitialiseStack+0x54>)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b14      	subs	r3, #20
 80074de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b20      	subs	r3, #32
 80074ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr
 80074f8:	080074fd 	.word	0x080074fd

080074fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007502:	2300      	movs	r3, #0
 8007504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007506:	4b12      	ldr	r3, [pc, #72]	@ (8007550 <prvTaskExitError+0x54>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800750e:	d00b      	beq.n	8007528 <prvTaskExitError+0x2c>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60fb      	str	r3, [r7, #12]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <prvTaskExitError+0x28>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60bb      	str	r3, [r7, #8]
}
 800753a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800753c:	bf00      	nop
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0fc      	beq.n	800753e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr
 8007550:	2000000c 	.word	0x2000000c
	...

08007560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007560:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <pxCurrentTCBConst2>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800756a:	f380 8809 	msr	PSP, r0
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	f04e 0e0d 	orr.w	lr, lr, #13
 800757e:	4770      	bx	lr

08007580 <pxCurrentTCBConst2>:
 8007580:	20000bf4 	.word	0x20000bf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop

08007588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007588:	4806      	ldr	r0, [pc, #24]	@ (80075a4 <prvPortStartFirstTask+0x1c>)
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	6800      	ldr	r0, [r0, #0]
 800758e:	f380 8808 	msr	MSP, r0
 8007592:	b662      	cpsie	i
 8007594:	b661      	cpsie	f
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	df00      	svc	0
 80075a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075a2:	bf00      	nop
 80075a4:	e000ed08 	.word	0xe000ed08

080075a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075ae:	4b32      	ldr	r3, [pc, #200]	@ (8007678 <xPortStartScheduler+0xd0>)
 80075b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	22ff      	movs	r2, #255	@ 0xff
 80075be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b2a      	ldr	r3, [pc, #168]	@ (800767c <xPortStartScheduler+0xd4>)
 80075d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007680 <xPortStartScheduler+0xd8>)
 80075d8:	2207      	movs	r2, #7
 80075da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075dc:	e009      	b.n	80075f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80075de:	4b28      	ldr	r3, [pc, #160]	@ (8007680 <xPortStartScheduler+0xd8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	4a26      	ldr	r2, [pc, #152]	@ (8007680 <xPortStartScheduler+0xd8>)
 80075e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fa:	2b80      	cmp	r3, #128	@ 0x80
 80075fc:	d0ef      	beq.n	80075de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075fe:	4b20      	ldr	r3, [pc, #128]	@ (8007680 <xPortStartScheduler+0xd8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1c3 0307 	rsb	r3, r3, #7
 8007606:	2b04      	cmp	r3, #4
 8007608:	d00b      	beq.n	8007622 <xPortStartScheduler+0x7a>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60bb      	str	r3, [r7, #8]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007622:	4b17      	ldr	r3, [pc, #92]	@ (8007680 <xPortStartScheduler+0xd8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	4a15      	ldr	r2, [pc, #84]	@ (8007680 <xPortStartScheduler+0xd8>)
 800762a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800762c:	4b14      	ldr	r3, [pc, #80]	@ (8007680 <xPortStartScheduler+0xd8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007634:	4a12      	ldr	r2, [pc, #72]	@ (8007680 <xPortStartScheduler+0xd8>)
 8007636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007640:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <xPortStartScheduler+0xdc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a0f      	ldr	r2, [pc, #60]	@ (8007684 <xPortStartScheduler+0xdc>)
 8007646:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800764a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800764c:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <xPortStartScheduler+0xdc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <xPortStartScheduler+0xdc>)
 8007652:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007658:	f000 f8b8 	bl	80077cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800765c:	4b0a      	ldr	r3, [pc, #40]	@ (8007688 <xPortStartScheduler+0xe0>)
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007662:	f7ff ff91 	bl	8007588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007666:	f7ff f867 	bl	8006738 <vTaskSwitchContext>
	prvTaskExitError();
 800766a:	f7ff ff47 	bl	80074fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000e400 	.word	0xe000e400
 800767c:	20001220 	.word	0x20001220
 8007680:	20001224 	.word	0x20001224
 8007684:	e000ed20 	.word	0xe000ed20
 8007688:	2000000c 	.word	0x2000000c

0800768c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076a6:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <vPortEnterCritical+0x58>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	4a0d      	ldr	r2, [pc, #52]	@ (80076e4 <vPortEnterCritical+0x58>)
 80076ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076b0:	4b0c      	ldr	r3, [pc, #48]	@ (80076e4 <vPortEnterCritical+0x58>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d110      	bne.n	80076da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <vPortEnterCritical+0x5c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <vPortEnterCritical+0x4e>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	603b      	str	r3, [r7, #0]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <vPortEnterCritical+0x4a>
	}
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076f2:	4b12      	ldr	r3, [pc, #72]	@ (800773c <vPortExitCritical+0x50>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <vPortExitCritical+0x26>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	607b      	str	r3, [r7, #4]
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007712:	4b0a      	ldr	r3, [pc, #40]	@ (800773c <vPortExitCritical+0x50>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3b01      	subs	r3, #1
 8007718:	4a08      	ldr	r2, [pc, #32]	@ (800773c <vPortExitCritical+0x50>)
 800771a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800771c:	4b07      	ldr	r3, [pc, #28]	@ (800773c <vPortExitCritical+0x50>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <vPortExitCritical+0x44>
 8007724:	2300      	movs	r3, #0
 8007726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f383 8811 	msr	BASEPRI, r3
}
 800772e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	2000000c 	.word	0x2000000c

08007740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007740:	f3ef 8009 	mrs	r0, PSP
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <pxCurrentTCBConst>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007750:	6010      	str	r0, [r2, #0]
 8007752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007756:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800775a:	f380 8811 	msr	BASEPRI, r0
 800775e:	f7fe ffeb 	bl	8006738 <vTaskSwitchContext>
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8811 	msr	BASEPRI, r0
 800776a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	6808      	ldr	r0, [r1, #0]
 8007772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007776:	f380 8809 	msr	PSP, r0
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	4770      	bx	lr

08007780 <pxCurrentTCBConst>:
 8007780:	20000bf4 	.word	0x20000bf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077a2:	f7fe ff0f 	bl	80065c4 <xTaskIncrementTick>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ac:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <xPortSysTickHandler+0x40>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
}
 80077be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077d0:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <vPortSetupTimerInterrupt+0x30>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077dc:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <vPortSetupTimerInterrupt+0x38>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a09      	ldr	r2, [pc, #36]	@ (8007808 <vPortSetupTimerInterrupt+0x3c>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	4a08      	ldr	r2, [pc, #32]	@ (800780c <vPortSetupTimerInterrupt+0x40>)
 80077ea:	3b01      	subs	r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ee:	4b03      	ldr	r3, [pc, #12]	@ (80077fc <vPortSetupTimerInterrupt+0x30>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr
 80077fc:	e000e010 	.word	0xe000e010
 8007800:	e000e018 	.word	0xe000e018
 8007804:	20000000 	.word	0x20000000
 8007808:	10624dd3 	.word	0x10624dd3
 800780c:	e000e014 	.word	0xe000e014

08007810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007816:	f3ef 8305 	mrs	r3, IPSR
 800781a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b0f      	cmp	r3, #15
 8007820:	d915      	bls.n	800784e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007822:	4a17      	ldr	r2, [pc, #92]	@ (8007880 <vPortValidateInterruptPriority+0x70>)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800782c:	4b15      	ldr	r3, [pc, #84]	@ (8007884 <vPortValidateInterruptPriority+0x74>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	7afa      	ldrb	r2, [r7, #11]
 8007832:	429a      	cmp	r2, r3
 8007834:	d20b      	bcs.n	800784e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	607b      	str	r3, [r7, #4]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800784e:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <vPortValidateInterruptPriority+0x78>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <vPortValidateInterruptPriority+0x7c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d90b      	bls.n	8007876 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <vPortValidateInterruptPriority+0x62>
	}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr
 8007880:	e000e3f0 	.word	0xe000e3f0
 8007884:	20001220 	.word	0x20001220
 8007888:	e000ed0c 	.word	0xe000ed0c
 800788c:	20001224 	.word	0x20001224

08007890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	@ 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800789c:	f7fe fdd8 	bl	8006450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007a14 <pvPortMalloc+0x184>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a8:	f000 f924 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078ac:	4b5a      	ldr	r3, [pc, #360]	@ (8007a18 <pvPortMalloc+0x188>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 8095 	bne.w	80079e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01e      	beq.n	80078fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078c0:	2208      	movs	r2, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d015      	beq.n	80078fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f023 0307 	bic.w	r3, r3, #7
 80078d8:	3308      	adds	r3, #8
 80078da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <pvPortMalloc+0x6e>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	617b      	str	r3, [r7, #20]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d06f      	beq.n	80079e4 <pvPortMalloc+0x154>
 8007904:	4b45      	ldr	r3, [pc, #276]	@ (8007a1c <pvPortMalloc+0x18c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	429a      	cmp	r2, r3
 800790c:	d86a      	bhi.n	80079e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800790e:	4b44      	ldr	r3, [pc, #272]	@ (8007a20 <pvPortMalloc+0x190>)
 8007910:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007912:	4b43      	ldr	r3, [pc, #268]	@ (8007a20 <pvPortMalloc+0x190>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007918:	e004      	b.n	8007924 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d903      	bls.n	8007936 <pvPortMalloc+0xa6>
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f1      	bne.n	800791a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007936:	4b37      	ldr	r3, [pc, #220]	@ (8007a14 <pvPortMalloc+0x184>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	429a      	cmp	r2, r3
 800793e:	d051      	beq.n	80079e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2208      	movs	r2, #8
 8007946:	4413      	add	r3, r2
 8007948:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	2308      	movs	r3, #8
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	429a      	cmp	r2, r3
 8007960:	d920      	bls.n	80079a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <pvPortMalloc+0xfc>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	613b      	str	r3, [r7, #16]
}
 8007986:	bf00      	nop
 8007988:	bf00      	nop
 800798a:	e7fd      	b.n	8007988 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800799e:	69b8      	ldr	r0, [r7, #24]
 80079a0:	f000 f90a 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a1c <pvPortMalloc+0x18c>)
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	4a1b      	ldr	r2, [pc, #108]	@ (8007a1c <pvPortMalloc+0x18c>)
 80079b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079b2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <pvPortMalloc+0x18c>)
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a24 <pvPortMalloc+0x194>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d203      	bcs.n	80079c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079be:	4b17      	ldr	r3, [pc, #92]	@ (8007a1c <pvPortMalloc+0x18c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a18      	ldr	r2, [pc, #96]	@ (8007a24 <pvPortMalloc+0x194>)
 80079c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	4b13      	ldr	r3, [pc, #76]	@ (8007a18 <pvPortMalloc+0x188>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079da:	4b13      	ldr	r3, [pc, #76]	@ (8007a28 <pvPortMalloc+0x198>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <pvPortMalloc+0x198>)
 80079e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e4:	f7fe fd42 	bl	800646c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <pvPortMalloc+0x17a>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60fb      	str	r3, [r7, #12]
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	e7fd      	b.n	8007a06 <pvPortMalloc+0x176>
	return pvReturn;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3728      	adds	r7, #40	@ 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20001e30 	.word	0x20001e30
 8007a18:	20001e44 	.word	0x20001e44
 8007a1c:	20001e34 	.word	0x20001e34
 8007a20:	20001e28 	.word	0x20001e28
 8007a24:	20001e38 	.word	0x20001e38
 8007a28:	20001e3c 	.word	0x20001e3c

08007a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d04f      	beq.n	8007ade <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a3e:	2308      	movs	r3, #8
 8007a40:	425b      	negs	r3, r3
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	4b25      	ldr	r3, [pc, #148]	@ (8007ae8 <vPortFree+0xbc>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4013      	ands	r3, r2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <vPortFree+0x46>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60fb      	str	r3, [r7, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <vPortFree+0x66>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60bb      	str	r3, [r7, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b14      	ldr	r3, [pc, #80]	@ (8007ae8 <vPortFree+0xbc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11a      	bne.n	8007ade <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae8 <vPortFree+0xbc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab8:	f7fe fcca 	bl	8006450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <vPortFree+0xc0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a09      	ldr	r2, [pc, #36]	@ (8007aec <vPortFree+0xc0>)
 8007ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f874 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ad0:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <vPortFree+0xc4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a06      	ldr	r2, [pc, #24]	@ (8007af0 <vPortFree+0xc4>)
 8007ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ada:	f7fe fcc7 	bl	800646c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001e44 	.word	0x20001e44
 8007aec:	20001e34 	.word	0x20001e34
 8007af0:	20001e40 	.word	0x20001e40

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	@ (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	@ (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	@ (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	@ (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20001228 	.word	0x20001228
 8007ba4:	20001e28 	.word	0x20001e28
 8007ba8:	20001e30 	.word	0x20001e30
 8007bac:	20001e38 	.word	0x20001e38
 8007bb0:	20001e34 	.word	0x20001e34
 8007bb4:	20001e44 	.word	0x20001e44

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b27      	ldr	r3, [pc, #156]	@ (8007c60 <prvInsertBlockIntoFreeList+0xa8>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b14      	ldr	r3, [pc, #80]	@ (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0b      	ldr	r3, [pc, #44]	@ (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr
 8007c60:	20001e28 	.word	0x20001e28
 8007c64:	20001e30 	.word	0x20001e30

08007c68 <_free_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d040      	beq.n	8007cf2 <_free_r+0x8a>
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f0c      	subs	r4, r1, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	18e4      	addlt	r4, r4, r3
 8007c7c:	f000 f8e6 	bl	8007e4c <__malloc_lock>
 8007c80:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf4 <_free_r+0x8c>)
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b933      	cbnz	r3, 8007c94 <_free_r+0x2c>
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b8e2 	b.w	8007e58 <__malloc_unlock>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d908      	bls.n	8007caa <_free_r+0x42>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	e7ed      	b.n	8007c86 <_free_r+0x1e>
 8007caa:	461a      	mov	r2, r3
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b10b      	cbz	r3, 8007cb4 <_free_r+0x4c>
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x42>
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	1850      	adds	r0, r2, r1
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x6c>
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	1850      	adds	r0, r2, r1
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	d1e0      	bne.n	8007c8a <_free_r+0x22>
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4408      	add	r0, r1
 8007cce:	6010      	str	r0, [r2, #0]
 8007cd0:	6053      	str	r3, [r2, #4]
 8007cd2:	e7da      	b.n	8007c8a <_free_r+0x22>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x74>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	e7d6      	b.n	8007c8a <_free_r+0x22>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf01      	itttt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	1809      	addeq	r1, r1, r0
 8007cea:	6021      	streq	r1, [r4, #0]
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	6054      	str	r4, [r2, #4]
 8007cf0:	e7cb      	b.n	8007c8a <_free_r+0x22>
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20001e4c 	.word	0x20001e4c

08007cf8 <malloc>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	@ (8007d04 <malloc+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f000 b825 	b.w	8007d4c <_malloc_r>
 8007d02:	bf00      	nop
 8007d04:	2000001c 	.word	0x2000001c

08007d08 <sbrk_aligned>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	4e0f      	ldr	r6, [pc, #60]	@ (8007d48 <sbrk_aligned+0x40>)
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	6831      	ldr	r1, [r6, #0]
 8007d10:	4605      	mov	r5, r0
 8007d12:	b911      	cbnz	r1, 8007d1a <sbrk_aligned+0x12>
 8007d14:	f000 ffd6 	bl	8008cc4 <_sbrk_r>
 8007d18:	6030      	str	r0, [r6, #0]
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 ffd1 	bl	8008cc4 <_sbrk_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d103      	bne.n	8007d2e <sbrk_aligned+0x26>
 8007d26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
 8007d2e:	1cc4      	adds	r4, r0, #3
 8007d30:	f024 0403 	bic.w	r4, r4, #3
 8007d34:	42a0      	cmp	r0, r4
 8007d36:	d0f8      	beq.n	8007d2a <sbrk_aligned+0x22>
 8007d38:	1a21      	subs	r1, r4, r0
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 ffc2 	bl	8008cc4 <_sbrk_r>
 8007d40:	3001      	adds	r0, #1
 8007d42:	d1f2      	bne.n	8007d2a <sbrk_aligned+0x22>
 8007d44:	e7ef      	b.n	8007d26 <sbrk_aligned+0x1e>
 8007d46:	bf00      	nop
 8007d48:	20001e48 	.word	0x20001e48

08007d4c <_malloc_r>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	1ccd      	adds	r5, r1, #3
 8007d52:	f025 0503 	bic.w	r5, r5, #3
 8007d56:	3508      	adds	r5, #8
 8007d58:	2d0c      	cmp	r5, #12
 8007d5a:	bf38      	it	cc
 8007d5c:	250c      	movcc	r5, #12
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	4606      	mov	r6, r0
 8007d62:	db01      	blt.n	8007d68 <_malloc_r+0x1c>
 8007d64:	42a9      	cmp	r1, r5
 8007d66:	d904      	bls.n	8007d72 <_malloc_r+0x26>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e48 <_malloc_r+0xfc>
 8007d76:	f000 f869 	bl	8007e4c <__malloc_lock>
 8007d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d7e:	461c      	mov	r4, r3
 8007d80:	bb44      	cbnz	r4, 8007dd4 <_malloc_r+0x88>
 8007d82:	4629      	mov	r1, r5
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff ffbf 	bl	8007d08 <sbrk_aligned>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	d158      	bne.n	8007e42 <_malloc_r+0xf6>
 8007d90:	f8d8 4000 	ldr.w	r4, [r8]
 8007d94:	4627      	mov	r7, r4
 8007d96:	2f00      	cmp	r7, #0
 8007d98:	d143      	bne.n	8007e22 <_malloc_r+0xd6>
 8007d9a:	2c00      	cmp	r4, #0
 8007d9c:	d04b      	beq.n	8007e36 <_malloc_r+0xea>
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	4639      	mov	r1, r7
 8007da2:	4630      	mov	r0, r6
 8007da4:	eb04 0903 	add.w	r9, r4, r3
 8007da8:	f000 ff8c 	bl	8008cc4 <_sbrk_r>
 8007dac:	4581      	cmp	r9, r0
 8007dae:	d142      	bne.n	8007e36 <_malloc_r+0xea>
 8007db0:	6821      	ldr	r1, [r4, #0]
 8007db2:	4630      	mov	r0, r6
 8007db4:	1a6d      	subs	r5, r5, r1
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7ff ffa6 	bl	8007d08 <sbrk_aligned>
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d03a      	beq.n	8007e36 <_malloc_r+0xea>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	442b      	add	r3, r5
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	bb62      	cbnz	r2, 8007e28 <_malloc_r+0xdc>
 8007dce:	f8c8 7000 	str.w	r7, [r8]
 8007dd2:	e00f      	b.n	8007df4 <_malloc_r+0xa8>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	1b52      	subs	r2, r2, r5
 8007dd8:	d420      	bmi.n	8007e1c <_malloc_r+0xd0>
 8007dda:	2a0b      	cmp	r2, #11
 8007ddc:	d917      	bls.n	8007e0e <_malloc_r+0xc2>
 8007dde:	1961      	adds	r1, r4, r5
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	6025      	str	r5, [r4, #0]
 8007de4:	bf18      	it	ne
 8007de6:	6059      	strne	r1, [r3, #4]
 8007de8:	6863      	ldr	r3, [r4, #4]
 8007dea:	bf08      	it	eq
 8007dec:	f8c8 1000 	streq.w	r1, [r8]
 8007df0:	5162      	str	r2, [r4, r5]
 8007df2:	604b      	str	r3, [r1, #4]
 8007df4:	4630      	mov	r0, r6
 8007df6:	f000 f82f 	bl	8007e58 <__malloc_unlock>
 8007dfa:	f104 000b 	add.w	r0, r4, #11
 8007dfe:	1d23      	adds	r3, r4, #4
 8007e00:	f020 0007 	bic.w	r0, r0, #7
 8007e04:	1ac2      	subs	r2, r0, r3
 8007e06:	bf1c      	itt	ne
 8007e08:	1a1b      	subne	r3, r3, r0
 8007e0a:	50a3      	strne	r3, [r4, r2]
 8007e0c:	e7af      	b.n	8007d6e <_malloc_r+0x22>
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	bf0c      	ite	eq
 8007e14:	f8c8 2000 	streq.w	r2, [r8]
 8007e18:	605a      	strne	r2, [r3, #4]
 8007e1a:	e7eb      	b.n	8007df4 <_malloc_r+0xa8>
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	6864      	ldr	r4, [r4, #4]
 8007e20:	e7ae      	b.n	8007d80 <_malloc_r+0x34>
 8007e22:	463c      	mov	r4, r7
 8007e24:	687f      	ldr	r7, [r7, #4]
 8007e26:	e7b6      	b.n	8007d96 <_malloc_r+0x4a>
 8007e28:	461a      	mov	r2, r3
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d1fb      	bne.n	8007e28 <_malloc_r+0xdc>
 8007e30:	2300      	movs	r3, #0
 8007e32:	6053      	str	r3, [r2, #4]
 8007e34:	e7de      	b.n	8007df4 <_malloc_r+0xa8>
 8007e36:	230c      	movs	r3, #12
 8007e38:	4630      	mov	r0, r6
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	f000 f80c 	bl	8007e58 <__malloc_unlock>
 8007e40:	e794      	b.n	8007d6c <_malloc_r+0x20>
 8007e42:	6005      	str	r5, [r0, #0]
 8007e44:	e7d6      	b.n	8007df4 <_malloc_r+0xa8>
 8007e46:	bf00      	nop
 8007e48:	20001e4c 	.word	0x20001e4c

08007e4c <__malloc_lock>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	@ (8007e54 <__malloc_lock+0x8>)
 8007e4e:	f7f9 bfdf 	b.w	8001e10 <__retarget_lock_acquire_recursive>
 8007e52:	bf00      	nop
 8007e54:	20000450 	.word	0x20000450

08007e58 <__malloc_unlock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <__malloc_unlock+0x8>)
 8007e5a:	f7f9 bfee 	b.w	8001e3a <__retarget_lock_release_recursive>
 8007e5e:	bf00      	nop
 8007e60:	20000450 	.word	0x20000450

08007e64 <__cvt>:
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6a:	461d      	mov	r5, r3
 8007e6c:	bfbb      	ittet	lt
 8007e6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007e72:	461d      	movlt	r5, r3
 8007e74:	2300      	movge	r3, #0
 8007e76:	232d      	movlt	r3, #45	@ 0x2d
 8007e78:	b088      	sub	sp, #32
 8007e7a:	4614      	mov	r4, r2
 8007e7c:	bfb8      	it	lt
 8007e7e:	4614      	movlt	r4, r2
 8007e80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007e84:	7013      	strb	r3, [r2, #0]
 8007e86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007e8c:	f023 0820 	bic.w	r8, r3, #32
 8007e90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e94:	d005      	beq.n	8007ea2 <__cvt+0x3e>
 8007e96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e9a:	d100      	bne.n	8007e9e <__cvt+0x3a>
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e000      	b.n	8007ea4 <__cvt+0x40>
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	aa07      	add	r2, sp, #28
 8007ea6:	9204      	str	r2, [sp, #16]
 8007ea8:	aa06      	add	r2, sp, #24
 8007eaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007eae:	e9cd 3600 	strd	r3, r6, [sp]
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	462b      	mov	r3, r5
 8007eb6:	f000 fff7 	bl	8008ea8 <_dtoa_r>
 8007eba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	d119      	bne.n	8007ef6 <__cvt+0x92>
 8007ec2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ec4:	07db      	lsls	r3, r3, #31
 8007ec6:	d50e      	bpl.n	8007ee6 <__cvt+0x82>
 8007ec8:	eb00 0906 	add.w	r9, r0, r6
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fd68 	bl	80009a8 <__aeabi_dcmpeq>
 8007ed8:	b108      	cbz	r0, 8007ede <__cvt+0x7a>
 8007eda:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ede:	2230      	movs	r2, #48	@ 0x30
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	454b      	cmp	r3, r9
 8007ee4:	d31e      	bcc.n	8007f24 <__cvt+0xc0>
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	9b07      	ldr	r3, [sp, #28]
 8007eea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007eec:	1bdb      	subs	r3, r3, r7
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	b008      	add	sp, #32
 8007ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007efa:	eb00 0906 	add.w	r9, r0, r6
 8007efe:	d1e5      	bne.n	8007ecc <__cvt+0x68>
 8007f00:	7803      	ldrb	r3, [r0, #0]
 8007f02:	2b30      	cmp	r3, #48	@ 0x30
 8007f04:	d10a      	bne.n	8007f1c <__cvt+0xb8>
 8007f06:	2200      	movs	r2, #0
 8007f08:	2300      	movs	r3, #0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 fd4b 	bl	80009a8 <__aeabi_dcmpeq>
 8007f12:	b918      	cbnz	r0, 8007f1c <__cvt+0xb8>
 8007f14:	f1c6 0601 	rsb	r6, r6, #1
 8007f18:	f8ca 6000 	str.w	r6, [sl]
 8007f1c:	f8da 3000 	ldr.w	r3, [sl]
 8007f20:	4499      	add	r9, r3
 8007f22:	e7d3      	b.n	8007ecc <__cvt+0x68>
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	9107      	str	r1, [sp, #28]
 8007f28:	701a      	strb	r2, [r3, #0]
 8007f2a:	e7d9      	b.n	8007ee0 <__cvt+0x7c>

08007f2c <__exponent>:
 8007f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	bfb6      	itet	lt
 8007f32:	232d      	movlt	r3, #45	@ 0x2d
 8007f34:	232b      	movge	r3, #43	@ 0x2b
 8007f36:	4249      	neglt	r1, r1
 8007f38:	2909      	cmp	r1, #9
 8007f3a:	7002      	strb	r2, [r0, #0]
 8007f3c:	7043      	strb	r3, [r0, #1]
 8007f3e:	dd29      	ble.n	8007f94 <__exponent+0x68>
 8007f40:	f10d 0307 	add.w	r3, sp, #7
 8007f44:	461d      	mov	r5, r3
 8007f46:	270a      	movs	r7, #10
 8007f48:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	fb07 1416 	mls	r4, r7, r6, r1
 8007f52:	3430      	adds	r4, #48	@ 0x30
 8007f54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f58:	460c      	mov	r4, r1
 8007f5a:	2c63      	cmp	r4, #99	@ 0x63
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007f62:	dcf1      	bgt.n	8007f48 <__exponent+0x1c>
 8007f64:	3130      	adds	r1, #48	@ 0x30
 8007f66:	1e94      	subs	r4, r2, #2
 8007f68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f6c:	4623      	mov	r3, r4
 8007f6e:	1c41      	adds	r1, r0, #1
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	d30a      	bcc.n	8007f8a <__exponent+0x5e>
 8007f74:	f10d 0309 	add.w	r3, sp, #9
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	42ac      	cmp	r4, r5
 8007f7c:	bf88      	it	hi
 8007f7e:	2300      	movhi	r3, #0
 8007f80:	3302      	adds	r3, #2
 8007f82:	4403      	add	r3, r0
 8007f84:	1a18      	subs	r0, r3, r0
 8007f86:	b003      	add	sp, #12
 8007f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f92:	e7ed      	b.n	8007f70 <__exponent+0x44>
 8007f94:	2330      	movs	r3, #48	@ 0x30
 8007f96:	3130      	adds	r1, #48	@ 0x30
 8007f98:	7083      	strb	r3, [r0, #2]
 8007f9a:	70c1      	strb	r1, [r0, #3]
 8007f9c:	1d03      	adds	r3, r0, #4
 8007f9e:	e7f1      	b.n	8007f84 <__exponent+0x58>

08007fa0 <_printf_float>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b091      	sub	sp, #68	@ 0x44
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007fac:	4616      	mov	r6, r2
 8007fae:	461f      	mov	r7, r3
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f000 fdf9 	bl	8008ba8 <_localeconv_r>
 8007fb6:	6803      	ldr	r3, [r0, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	9308      	str	r3, [sp, #32]
 8007fbc:	f7f8 f8c8 	bl	8000150 <strlen>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fca:	3307      	adds	r3, #7
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	f103 0208 	add.w	r2, r3, #8
 8007fd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fd8:	f8d4 b000 	ldr.w	fp, [r4]
 8007fdc:	f8c8 2000 	str.w	r2, [r8]
 8007fe0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fe4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ff6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800826c <_printf_float+0x2cc>)
 8007ffc:	f7f8 fd06 	bl	8000a0c <__aeabi_dcmpun>
 8008000:	bb70      	cbnz	r0, 8008060 <_printf_float+0xc0>
 8008002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800800a:	4b98      	ldr	r3, [pc, #608]	@ (800826c <_printf_float+0x2cc>)
 800800c:	f7f8 fce0 	bl	80009d0 <__aeabi_dcmple>
 8008010:	bb30      	cbnz	r0, 8008060 <_printf_float+0xc0>
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	f7f8 fccf 	bl	80009bc <__aeabi_dcmplt>
 800801e:	b110      	cbz	r0, 8008026 <_printf_float+0x86>
 8008020:	232d      	movs	r3, #45	@ 0x2d
 8008022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008026:	4a92      	ldr	r2, [pc, #584]	@ (8008270 <_printf_float+0x2d0>)
 8008028:	4b92      	ldr	r3, [pc, #584]	@ (8008274 <_printf_float+0x2d4>)
 800802a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800802e:	bf94      	ite	ls
 8008030:	4690      	movls	r8, r2
 8008032:	4698      	movhi	r8, r3
 8008034:	2303      	movs	r3, #3
 8008036:	f04f 0900 	mov.w	r9, #0
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	f02b 0304 	bic.w	r3, fp, #4
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	4633      	mov	r3, r6
 8008044:	4621      	mov	r1, r4
 8008046:	4628      	mov	r0, r5
 8008048:	9700      	str	r7, [sp, #0]
 800804a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800804c:	f000 f9d4 	bl	80083f8 <_printf_common>
 8008050:	3001      	adds	r0, #1
 8008052:	f040 8090 	bne.w	8008176 <_printf_float+0x1d6>
 8008056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800805a:	b011      	add	sp, #68	@ 0x44
 800805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 fcd0 	bl	8000a0c <__aeabi_dcmpun>
 800806c:	b148      	cbz	r0, 8008082 <_printf_float+0xe2>
 800806e:	464b      	mov	r3, r9
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfb8      	it	lt
 8008074:	232d      	movlt	r3, #45	@ 0x2d
 8008076:	4a80      	ldr	r2, [pc, #512]	@ (8008278 <_printf_float+0x2d8>)
 8008078:	bfb8      	it	lt
 800807a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800807e:	4b7f      	ldr	r3, [pc, #508]	@ (800827c <_printf_float+0x2dc>)
 8008080:	e7d3      	b.n	800802a <_printf_float+0x8a>
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	d13f      	bne.n	800810c <_printf_float+0x16c>
 800808c:	2306      	movs	r3, #6
 800808e:	6063      	str	r3, [r4, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	9206      	str	r2, [sp, #24]
 800809a:	aa0e      	add	r2, sp, #56	@ 0x38
 800809c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80080a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80080a2:	9203      	str	r2, [sp, #12]
 80080a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80080a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80080ac:	6863      	ldr	r3, [r4, #4]
 80080ae:	4642      	mov	r2, r8
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4628      	mov	r0, r5
 80080b4:	464b      	mov	r3, r9
 80080b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80080b8:	f7ff fed4 	bl	8007e64 <__cvt>
 80080bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080be:	4680      	mov	r8, r0
 80080c0:	2947      	cmp	r1, #71	@ 0x47
 80080c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80080c4:	d128      	bne.n	8008118 <_printf_float+0x178>
 80080c6:	1cc8      	adds	r0, r1, #3
 80080c8:	db02      	blt.n	80080d0 <_printf_float+0x130>
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	4299      	cmp	r1, r3
 80080ce:	dd40      	ble.n	8008152 <_printf_float+0x1b2>
 80080d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80080d4:	fa5f fa8a 	uxtb.w	sl, sl
 80080d8:	4652      	mov	r2, sl
 80080da:	3901      	subs	r1, #1
 80080dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80080e2:	f7ff ff23 	bl	8007f2c <__exponent>
 80080e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080e8:	4681      	mov	r9, r0
 80080ea:	1813      	adds	r3, r2, r0
 80080ec:	2a01      	cmp	r2, #1
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	dc02      	bgt.n	80080f8 <_printf_float+0x158>
 80080f2:	6822      	ldr	r2, [r4, #0]
 80080f4:	07d2      	lsls	r2, r2, #31
 80080f6:	d501      	bpl.n	80080fc <_printf_float+0x15c>
 80080f8:	3301      	adds	r3, #1
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008100:	2b00      	cmp	r3, #0
 8008102:	d09e      	beq.n	8008042 <_printf_float+0xa2>
 8008104:	232d      	movs	r3, #45	@ 0x2d
 8008106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800810a:	e79a      	b.n	8008042 <_printf_float+0xa2>
 800810c:	2947      	cmp	r1, #71	@ 0x47
 800810e:	d1bf      	bne.n	8008090 <_printf_float+0xf0>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1bd      	bne.n	8008090 <_printf_float+0xf0>
 8008114:	2301      	movs	r3, #1
 8008116:	e7ba      	b.n	800808e <_printf_float+0xee>
 8008118:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800811c:	d9dc      	bls.n	80080d8 <_printf_float+0x138>
 800811e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008122:	d118      	bne.n	8008156 <_printf_float+0x1b6>
 8008124:	2900      	cmp	r1, #0
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	dd0b      	ble.n	8008142 <_printf_float+0x1a2>
 800812a:	6121      	str	r1, [r4, #16]
 800812c:	b913      	cbnz	r3, 8008134 <_printf_float+0x194>
 800812e:	6822      	ldr	r2, [r4, #0]
 8008130:	07d0      	lsls	r0, r2, #31
 8008132:	d502      	bpl.n	800813a <_printf_float+0x19a>
 8008134:	3301      	adds	r3, #1
 8008136:	440b      	add	r3, r1
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	f04f 0900 	mov.w	r9, #0
 800813e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008140:	e7dc      	b.n	80080fc <_printf_float+0x15c>
 8008142:	b913      	cbnz	r3, 800814a <_printf_float+0x1aa>
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	07d2      	lsls	r2, r2, #31
 8008148:	d501      	bpl.n	800814e <_printf_float+0x1ae>
 800814a:	3302      	adds	r3, #2
 800814c:	e7f4      	b.n	8008138 <_printf_float+0x198>
 800814e:	2301      	movs	r3, #1
 8008150:	e7f2      	b.n	8008138 <_printf_float+0x198>
 8008152:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008158:	4299      	cmp	r1, r3
 800815a:	db05      	blt.n	8008168 <_printf_float+0x1c8>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	6121      	str	r1, [r4, #16]
 8008160:	07d8      	lsls	r0, r3, #31
 8008162:	d5ea      	bpl.n	800813a <_printf_float+0x19a>
 8008164:	1c4b      	adds	r3, r1, #1
 8008166:	e7e7      	b.n	8008138 <_printf_float+0x198>
 8008168:	2900      	cmp	r1, #0
 800816a:	bfcc      	ite	gt
 800816c:	2201      	movgt	r2, #1
 800816e:	f1c1 0202 	rsble	r2, r1, #2
 8008172:	4413      	add	r3, r2
 8008174:	e7e0      	b.n	8008138 <_printf_float+0x198>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	055a      	lsls	r2, r3, #21
 800817a:	d407      	bmi.n	800818c <_printf_float+0x1ec>
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	4642      	mov	r2, r8
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	d12b      	bne.n	80081e2 <_printf_float+0x242>
 800818a:	e764      	b.n	8008056 <_printf_float+0xb6>
 800818c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008190:	f240 80dc 	bls.w	800834c <_printf_float+0x3ac>
 8008194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008198:	2200      	movs	r2, #0
 800819a:	2300      	movs	r3, #0
 800819c:	f7f8 fc04 	bl	80009a8 <__aeabi_dcmpeq>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d033      	beq.n	800820c <_printf_float+0x26c>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4631      	mov	r1, r6
 80081a8:	4628      	mov	r0, r5
 80081aa:	4a35      	ldr	r2, [pc, #212]	@ (8008280 <_printf_float+0x2e0>)
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f af51 	beq.w	8008056 <_printf_float+0xb6>
 80081b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80081b8:	4543      	cmp	r3, r8
 80081ba:	db02      	blt.n	80081c2 <_printf_float+0x222>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	07d8      	lsls	r0, r3, #31
 80081c0:	d50f      	bpl.n	80081e2 <_printf_float+0x242>
 80081c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f af42 	beq.w	8008056 <_printf_float+0xb6>
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80081da:	f104 0a1a 	add.w	sl, r4, #26
 80081de:	45c8      	cmp	r8, r9
 80081e0:	dc09      	bgt.n	80081f6 <_printf_float+0x256>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	079b      	lsls	r3, r3, #30
 80081e6:	f100 8102 	bmi.w	80083ee <_printf_float+0x44e>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ee:	4298      	cmp	r0, r3
 80081f0:	bfb8      	it	lt
 80081f2:	4618      	movlt	r0, r3
 80081f4:	e731      	b.n	800805a <_printf_float+0xba>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4652      	mov	r2, sl
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	f43f af28 	beq.w	8008056 <_printf_float+0xb6>
 8008206:	f109 0901 	add.w	r9, r9, #1
 800820a:	e7e8      	b.n	80081de <_printf_float+0x23e>
 800820c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800820e:	2b00      	cmp	r3, #0
 8008210:	dc38      	bgt.n	8008284 <_printf_float+0x2e4>
 8008212:	2301      	movs	r3, #1
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	4a19      	ldr	r2, [pc, #100]	@ (8008280 <_printf_float+0x2e0>)
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f af1a 	beq.w	8008056 <_printf_float+0xb6>
 8008222:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008226:	ea59 0303 	orrs.w	r3, r9, r3
 800822a:	d102      	bne.n	8008232 <_printf_float+0x292>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	07d9      	lsls	r1, r3, #31
 8008230:	d5d7      	bpl.n	80081e2 <_printf_float+0x242>
 8008232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f af0a 	beq.w	8008056 <_printf_float+0xb6>
 8008242:	f04f 0a00 	mov.w	sl, #0
 8008246:	f104 0b1a 	add.w	fp, r4, #26
 800824a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800824c:	425b      	negs	r3, r3
 800824e:	4553      	cmp	r3, sl
 8008250:	dc01      	bgt.n	8008256 <_printf_float+0x2b6>
 8008252:	464b      	mov	r3, r9
 8008254:	e793      	b.n	800817e <_printf_float+0x1de>
 8008256:	2301      	movs	r3, #1
 8008258:	465a      	mov	r2, fp
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f aef8 	beq.w	8008056 <_printf_float+0xb6>
 8008266:	f10a 0a01 	add.w	sl, sl, #1
 800826a:	e7ee      	b.n	800824a <_printf_float+0x2aa>
 800826c:	7fefffff 	.word	0x7fefffff
 8008270:	0800ad86 	.word	0x0800ad86
 8008274:	0800ad8a 	.word	0x0800ad8a
 8008278:	0800ad8e 	.word	0x0800ad8e
 800827c:	0800ad92 	.word	0x0800ad92
 8008280:	0800ad96 	.word	0x0800ad96
 8008284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008286:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800828a:	4553      	cmp	r3, sl
 800828c:	bfa8      	it	ge
 800828e:	4653      	movge	r3, sl
 8008290:	2b00      	cmp	r3, #0
 8008292:	4699      	mov	r9, r3
 8008294:	dc36      	bgt.n	8008304 <_printf_float+0x364>
 8008296:	f04f 0b00 	mov.w	fp, #0
 800829a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800829e:	f104 021a 	add.w	r2, r4, #26
 80082a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a6:	eba3 0309 	sub.w	r3, r3, r9
 80082aa:	455b      	cmp	r3, fp
 80082ac:	dc31      	bgt.n	8008312 <_printf_float+0x372>
 80082ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082b0:	459a      	cmp	sl, r3
 80082b2:	dc3a      	bgt.n	800832a <_printf_float+0x38a>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	07da      	lsls	r2, r3, #31
 80082b8:	d437      	bmi.n	800832a <_printf_float+0x38a>
 80082ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082bc:	ebaa 0903 	sub.w	r9, sl, r3
 80082c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c2:	ebaa 0303 	sub.w	r3, sl, r3
 80082c6:	4599      	cmp	r9, r3
 80082c8:	bfa8      	it	ge
 80082ca:	4699      	movge	r9, r3
 80082cc:	f1b9 0f00 	cmp.w	r9, #0
 80082d0:	dc33      	bgt.n	800833a <_printf_float+0x39a>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082da:	f104 0b1a 	add.w	fp, r4, #26
 80082de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082e0:	ebaa 0303 	sub.w	r3, sl, r3
 80082e4:	eba3 0309 	sub.w	r3, r3, r9
 80082e8:	4543      	cmp	r3, r8
 80082ea:	f77f af7a 	ble.w	80081e2 <_printf_float+0x242>
 80082ee:	2301      	movs	r3, #1
 80082f0:	465a      	mov	r2, fp
 80082f2:	4631      	mov	r1, r6
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b8      	blx	r7
 80082f8:	3001      	adds	r0, #1
 80082fa:	f43f aeac 	beq.w	8008056 <_printf_float+0xb6>
 80082fe:	f108 0801 	add.w	r8, r8, #1
 8008302:	e7ec      	b.n	80082de <_printf_float+0x33e>
 8008304:	4642      	mov	r2, r8
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	d1c2      	bne.n	8008296 <_printf_float+0x2f6>
 8008310:	e6a1      	b.n	8008056 <_printf_float+0xb6>
 8008312:	2301      	movs	r3, #1
 8008314:	4631      	mov	r1, r6
 8008316:	4628      	mov	r0, r5
 8008318:	920a      	str	r2, [sp, #40]	@ 0x28
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	f43f ae9a 	beq.w	8008056 <_printf_float+0xb6>
 8008322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008324:	f10b 0b01 	add.w	fp, fp, #1
 8008328:	e7bb      	b.n	80082a2 <_printf_float+0x302>
 800832a:	4631      	mov	r1, r6
 800832c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008330:	4628      	mov	r0, r5
 8008332:	47b8      	blx	r7
 8008334:	3001      	adds	r0, #1
 8008336:	d1c0      	bne.n	80082ba <_printf_float+0x31a>
 8008338:	e68d      	b.n	8008056 <_printf_float+0xb6>
 800833a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800833c:	464b      	mov	r3, r9
 800833e:	4631      	mov	r1, r6
 8008340:	4628      	mov	r0, r5
 8008342:	4442      	add	r2, r8
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	d1c3      	bne.n	80082d2 <_printf_float+0x332>
 800834a:	e684      	b.n	8008056 <_printf_float+0xb6>
 800834c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008350:	f1ba 0f01 	cmp.w	sl, #1
 8008354:	dc01      	bgt.n	800835a <_printf_float+0x3ba>
 8008356:	07db      	lsls	r3, r3, #31
 8008358:	d536      	bpl.n	80083c8 <_printf_float+0x428>
 800835a:	2301      	movs	r3, #1
 800835c:	4642      	mov	r2, r8
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f ae76 	beq.w	8008056 <_printf_float+0xb6>
 800836a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800836e:	4631      	mov	r1, r6
 8008370:	4628      	mov	r0, r5
 8008372:	47b8      	blx	r7
 8008374:	3001      	adds	r0, #1
 8008376:	f43f ae6e 	beq.w	8008056 <_printf_float+0xb6>
 800837a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008386:	f7f8 fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800838a:	b9c0      	cbnz	r0, 80083be <_printf_float+0x41e>
 800838c:	4653      	mov	r3, sl
 800838e:	f108 0201 	add.w	r2, r8, #1
 8008392:	4631      	mov	r1, r6
 8008394:	4628      	mov	r0, r5
 8008396:	47b8      	blx	r7
 8008398:	3001      	adds	r0, #1
 800839a:	d10c      	bne.n	80083b6 <_printf_float+0x416>
 800839c:	e65b      	b.n	8008056 <_printf_float+0xb6>
 800839e:	2301      	movs	r3, #1
 80083a0:	465a      	mov	r2, fp
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	f43f ae54 	beq.w	8008056 <_printf_float+0xb6>
 80083ae:	f108 0801 	add.w	r8, r8, #1
 80083b2:	45d0      	cmp	r8, sl
 80083b4:	dbf3      	blt.n	800839e <_printf_float+0x3fe>
 80083b6:	464b      	mov	r3, r9
 80083b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083bc:	e6e0      	b.n	8008180 <_printf_float+0x1e0>
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	f104 0b1a 	add.w	fp, r4, #26
 80083c6:	e7f4      	b.n	80083b2 <_printf_float+0x412>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4642      	mov	r2, r8
 80083cc:	e7e1      	b.n	8008392 <_printf_float+0x3f2>
 80083ce:	2301      	movs	r3, #1
 80083d0:	464a      	mov	r2, r9
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f ae3c 	beq.w	8008056 <_printf_float+0xb6>
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083e6:	1a5b      	subs	r3, r3, r1
 80083e8:	4543      	cmp	r3, r8
 80083ea:	dcf0      	bgt.n	80083ce <_printf_float+0x42e>
 80083ec:	e6fd      	b.n	80081ea <_printf_float+0x24a>
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	f104 0919 	add.w	r9, r4, #25
 80083f6:	e7f4      	b.n	80083e2 <_printf_float+0x442>

080083f8 <_printf_common>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	4616      	mov	r6, r2
 80083fe:	4698      	mov	r8, r3
 8008400:	688a      	ldr	r2, [r1, #8]
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4607      	mov	r7, r0
 8008406:	4293      	cmp	r3, r2
 8008408:	bfb8      	it	lt
 800840a:	4613      	movlt	r3, r2
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008412:	460c      	mov	r4, r1
 8008414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008418:	b10a      	cbz	r2, 800841e <_printf_common+0x26>
 800841a:	3301      	adds	r3, #1
 800841c:	6033      	str	r3, [r6, #0]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	0699      	lsls	r1, r3, #26
 8008422:	bf42      	ittt	mi
 8008424:	6833      	ldrmi	r3, [r6, #0]
 8008426:	3302      	addmi	r3, #2
 8008428:	6033      	strmi	r3, [r6, #0]
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	f015 0506 	ands.w	r5, r5, #6
 8008430:	d106      	bne.n	8008440 <_printf_common+0x48>
 8008432:	f104 0a19 	add.w	sl, r4, #25
 8008436:	68e3      	ldr	r3, [r4, #12]
 8008438:	6832      	ldr	r2, [r6, #0]
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	42ab      	cmp	r3, r5
 800843e:	dc2b      	bgt.n	8008498 <_printf_common+0xa0>
 8008440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008444:	6822      	ldr	r2, [r4, #0]
 8008446:	3b00      	subs	r3, #0
 8008448:	bf18      	it	ne
 800844a:	2301      	movne	r3, #1
 800844c:	0692      	lsls	r2, r2, #26
 800844e:	d430      	bmi.n	80084b2 <_printf_common+0xba>
 8008450:	4641      	mov	r1, r8
 8008452:	4638      	mov	r0, r7
 8008454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008458:	47c8      	blx	r9
 800845a:	3001      	adds	r0, #1
 800845c:	d023      	beq.n	80084a6 <_printf_common+0xae>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	f003 0306 	and.w	r3, r3, #6
 8008466:	2b04      	cmp	r3, #4
 8008468:	bf14      	ite	ne
 800846a:	2500      	movne	r5, #0
 800846c:	6833      	ldreq	r3, [r6, #0]
 800846e:	f04f 0600 	mov.w	r6, #0
 8008472:	bf08      	it	eq
 8008474:	68e5      	ldreq	r5, [r4, #12]
 8008476:	f104 041a 	add.w	r4, r4, #26
 800847a:	bf08      	it	eq
 800847c:	1aed      	subeq	r5, r5, r3
 800847e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008482:	bf08      	it	eq
 8008484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008488:	4293      	cmp	r3, r2
 800848a:	bfc4      	itt	gt
 800848c:	1a9b      	subgt	r3, r3, r2
 800848e:	18ed      	addgt	r5, r5, r3
 8008490:	42b5      	cmp	r5, r6
 8008492:	d11a      	bne.n	80084ca <_printf_common+0xd2>
 8008494:	2000      	movs	r0, #0
 8008496:	e008      	b.n	80084aa <_printf_common+0xb2>
 8008498:	2301      	movs	r3, #1
 800849a:	4652      	mov	r2, sl
 800849c:	4641      	mov	r1, r8
 800849e:	4638      	mov	r0, r7
 80084a0:	47c8      	blx	r9
 80084a2:	3001      	adds	r0, #1
 80084a4:	d103      	bne.n	80084ae <_printf_common+0xb6>
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	3501      	adds	r5, #1
 80084b0:	e7c1      	b.n	8008436 <_printf_common+0x3e>
 80084b2:	2030      	movs	r0, #48	@ 0x30
 80084b4:	18e1      	adds	r1, r4, r3
 80084b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084c0:	4422      	add	r2, r4
 80084c2:	3302      	adds	r3, #2
 80084c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084c8:	e7c2      	b.n	8008450 <_printf_common+0x58>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4622      	mov	r2, r4
 80084ce:	4641      	mov	r1, r8
 80084d0:	4638      	mov	r0, r7
 80084d2:	47c8      	blx	r9
 80084d4:	3001      	adds	r0, #1
 80084d6:	d0e6      	beq.n	80084a6 <_printf_common+0xae>
 80084d8:	3601      	adds	r6, #1
 80084da:	e7d9      	b.n	8008490 <_printf_common+0x98>

080084dc <_printf_i>:
 80084dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	7e0f      	ldrb	r7, [r1, #24]
 80084e2:	4691      	mov	r9, r2
 80084e4:	2f78      	cmp	r7, #120	@ 0x78
 80084e6:	4680      	mov	r8, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	469a      	mov	sl, r3
 80084ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084f2:	d807      	bhi.n	8008504 <_printf_i+0x28>
 80084f4:	2f62      	cmp	r7, #98	@ 0x62
 80084f6:	d80a      	bhi.n	800850e <_printf_i+0x32>
 80084f8:	2f00      	cmp	r7, #0
 80084fa:	f000 80d3 	beq.w	80086a4 <_printf_i+0x1c8>
 80084fe:	2f58      	cmp	r7, #88	@ 0x58
 8008500:	f000 80ba 	beq.w	8008678 <_printf_i+0x19c>
 8008504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800850c:	e03a      	b.n	8008584 <_printf_i+0xa8>
 800850e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008512:	2b15      	cmp	r3, #21
 8008514:	d8f6      	bhi.n	8008504 <_printf_i+0x28>
 8008516:	a101      	add	r1, pc, #4	@ (adr r1, 800851c <_printf_i+0x40>)
 8008518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800851c:	08008575 	.word	0x08008575
 8008520:	08008589 	.word	0x08008589
 8008524:	08008505 	.word	0x08008505
 8008528:	08008505 	.word	0x08008505
 800852c:	08008505 	.word	0x08008505
 8008530:	08008505 	.word	0x08008505
 8008534:	08008589 	.word	0x08008589
 8008538:	08008505 	.word	0x08008505
 800853c:	08008505 	.word	0x08008505
 8008540:	08008505 	.word	0x08008505
 8008544:	08008505 	.word	0x08008505
 8008548:	0800868b 	.word	0x0800868b
 800854c:	080085b3 	.word	0x080085b3
 8008550:	08008645 	.word	0x08008645
 8008554:	08008505 	.word	0x08008505
 8008558:	08008505 	.word	0x08008505
 800855c:	080086ad 	.word	0x080086ad
 8008560:	08008505 	.word	0x08008505
 8008564:	080085b3 	.word	0x080085b3
 8008568:	08008505 	.word	0x08008505
 800856c:	08008505 	.word	0x08008505
 8008570:	0800864d 	.word	0x0800864d
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6032      	str	r2, [r6, #0]
 800857c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008584:	2301      	movs	r3, #1
 8008586:	e09e      	b.n	80086c6 <_printf_i+0x1ea>
 8008588:	6833      	ldr	r3, [r6, #0]
 800858a:	6820      	ldr	r0, [r4, #0]
 800858c:	1d19      	adds	r1, r3, #4
 800858e:	6031      	str	r1, [r6, #0]
 8008590:	0606      	lsls	r6, r0, #24
 8008592:	d501      	bpl.n	8008598 <_printf_i+0xbc>
 8008594:	681d      	ldr	r5, [r3, #0]
 8008596:	e003      	b.n	80085a0 <_printf_i+0xc4>
 8008598:	0645      	lsls	r5, r0, #25
 800859a:	d5fb      	bpl.n	8008594 <_printf_i+0xb8>
 800859c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	da03      	bge.n	80085ac <_printf_i+0xd0>
 80085a4:	232d      	movs	r3, #45	@ 0x2d
 80085a6:	426d      	negs	r5, r5
 80085a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ac:	230a      	movs	r3, #10
 80085ae:	4859      	ldr	r0, [pc, #356]	@ (8008714 <_printf_i+0x238>)
 80085b0:	e011      	b.n	80085d6 <_printf_i+0xfa>
 80085b2:	6821      	ldr	r1, [r4, #0]
 80085b4:	6833      	ldr	r3, [r6, #0]
 80085b6:	0608      	lsls	r0, r1, #24
 80085b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80085bc:	d402      	bmi.n	80085c4 <_printf_i+0xe8>
 80085be:	0649      	lsls	r1, r1, #25
 80085c0:	bf48      	it	mi
 80085c2:	b2ad      	uxthmi	r5, r5
 80085c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80085c6:	6033      	str	r3, [r6, #0]
 80085c8:	bf14      	ite	ne
 80085ca:	230a      	movne	r3, #10
 80085cc:	2308      	moveq	r3, #8
 80085ce:	4851      	ldr	r0, [pc, #324]	@ (8008714 <_printf_i+0x238>)
 80085d0:	2100      	movs	r1, #0
 80085d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085d6:	6866      	ldr	r6, [r4, #4]
 80085d8:	2e00      	cmp	r6, #0
 80085da:	bfa8      	it	ge
 80085dc:	6821      	ldrge	r1, [r4, #0]
 80085de:	60a6      	str	r6, [r4, #8]
 80085e0:	bfa4      	itt	ge
 80085e2:	f021 0104 	bicge.w	r1, r1, #4
 80085e6:	6021      	strge	r1, [r4, #0]
 80085e8:	b90d      	cbnz	r5, 80085ee <_printf_i+0x112>
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	d04b      	beq.n	8008686 <_printf_i+0x1aa>
 80085ee:	4616      	mov	r6, r2
 80085f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80085f4:	fb03 5711 	mls	r7, r3, r1, r5
 80085f8:	5dc7      	ldrb	r7, [r0, r7]
 80085fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085fe:	462f      	mov	r7, r5
 8008600:	42bb      	cmp	r3, r7
 8008602:	460d      	mov	r5, r1
 8008604:	d9f4      	bls.n	80085f0 <_printf_i+0x114>
 8008606:	2b08      	cmp	r3, #8
 8008608:	d10b      	bne.n	8008622 <_printf_i+0x146>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	07df      	lsls	r7, r3, #31
 800860e:	d508      	bpl.n	8008622 <_printf_i+0x146>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	6861      	ldr	r1, [r4, #4]
 8008614:	4299      	cmp	r1, r3
 8008616:	bfde      	ittt	le
 8008618:	2330      	movle	r3, #48	@ 0x30
 800861a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800861e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008622:	1b92      	subs	r2, r2, r6
 8008624:	6122      	str	r2, [r4, #16]
 8008626:	464b      	mov	r3, r9
 8008628:	4621      	mov	r1, r4
 800862a:	4640      	mov	r0, r8
 800862c:	f8cd a000 	str.w	sl, [sp]
 8008630:	aa03      	add	r2, sp, #12
 8008632:	f7ff fee1 	bl	80083f8 <_printf_common>
 8008636:	3001      	adds	r0, #1
 8008638:	d14a      	bne.n	80086d0 <_printf_i+0x1f4>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800863e:	b004      	add	sp, #16
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f043 0320 	orr.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2778      	movs	r7, #120	@ 0x78
 800864e:	4832      	ldr	r0, [pc, #200]	@ (8008718 <_printf_i+0x23c>)
 8008650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	6831      	ldr	r1, [r6, #0]
 8008658:	061f      	lsls	r7, r3, #24
 800865a:	f851 5b04 	ldr.w	r5, [r1], #4
 800865e:	d402      	bmi.n	8008666 <_printf_i+0x18a>
 8008660:	065f      	lsls	r7, r3, #25
 8008662:	bf48      	it	mi
 8008664:	b2ad      	uxthmi	r5, r5
 8008666:	6031      	str	r1, [r6, #0]
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	bf44      	itt	mi
 800866c:	f043 0320 	orrmi.w	r3, r3, #32
 8008670:	6023      	strmi	r3, [r4, #0]
 8008672:	b11d      	cbz	r5, 800867c <_printf_i+0x1a0>
 8008674:	2310      	movs	r3, #16
 8008676:	e7ab      	b.n	80085d0 <_printf_i+0xf4>
 8008678:	4826      	ldr	r0, [pc, #152]	@ (8008714 <_printf_i+0x238>)
 800867a:	e7e9      	b.n	8008650 <_printf_i+0x174>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	f023 0320 	bic.w	r3, r3, #32
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	e7f6      	b.n	8008674 <_printf_i+0x198>
 8008686:	4616      	mov	r6, r2
 8008688:	e7bd      	b.n	8008606 <_printf_i+0x12a>
 800868a:	6833      	ldr	r3, [r6, #0]
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	1d18      	adds	r0, r3, #4
 8008690:	6961      	ldr	r1, [r4, #20]
 8008692:	6030      	str	r0, [r6, #0]
 8008694:	062e      	lsls	r6, r5, #24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	d501      	bpl.n	800869e <_printf_i+0x1c2>
 800869a:	6019      	str	r1, [r3, #0]
 800869c:	e002      	b.n	80086a4 <_printf_i+0x1c8>
 800869e:	0668      	lsls	r0, r5, #25
 80086a0:	d5fb      	bpl.n	800869a <_printf_i+0x1be>
 80086a2:	8019      	strh	r1, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	4616      	mov	r6, r2
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	e7bc      	b.n	8008626 <_printf_i+0x14a>
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	2100      	movs	r1, #0
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	6032      	str	r2, [r6, #0]
 80086b4:	681e      	ldr	r6, [r3, #0]
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 fb4f 	bl	8008d5c <memchr>
 80086be:	b108      	cbz	r0, 80086c4 <_printf_i+0x1e8>
 80086c0:	1b80      	subs	r0, r0, r6
 80086c2:	6060      	str	r0, [r4, #4]
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	2300      	movs	r3, #0
 80086ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ce:	e7aa      	b.n	8008626 <_printf_i+0x14a>
 80086d0:	4632      	mov	r2, r6
 80086d2:	4649      	mov	r1, r9
 80086d4:	4640      	mov	r0, r8
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	47d0      	blx	sl
 80086da:	3001      	adds	r0, #1
 80086dc:	d0ad      	beq.n	800863a <_printf_i+0x15e>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	079b      	lsls	r3, r3, #30
 80086e2:	d413      	bmi.n	800870c <_printf_i+0x230>
 80086e4:	68e0      	ldr	r0, [r4, #12]
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	4298      	cmp	r0, r3
 80086ea:	bfb8      	it	lt
 80086ec:	4618      	movlt	r0, r3
 80086ee:	e7a6      	b.n	800863e <_printf_i+0x162>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4632      	mov	r2, r6
 80086f4:	4649      	mov	r1, r9
 80086f6:	4640      	mov	r0, r8
 80086f8:	47d0      	blx	sl
 80086fa:	3001      	adds	r0, #1
 80086fc:	d09d      	beq.n	800863a <_printf_i+0x15e>
 80086fe:	3501      	adds	r5, #1
 8008700:	68e3      	ldr	r3, [r4, #12]
 8008702:	9903      	ldr	r1, [sp, #12]
 8008704:	1a5b      	subs	r3, r3, r1
 8008706:	42ab      	cmp	r3, r5
 8008708:	dcf2      	bgt.n	80086f0 <_printf_i+0x214>
 800870a:	e7eb      	b.n	80086e4 <_printf_i+0x208>
 800870c:	2500      	movs	r5, #0
 800870e:	f104 0619 	add.w	r6, r4, #25
 8008712:	e7f5      	b.n	8008700 <_printf_i+0x224>
 8008714:	0800ad98 	.word	0x0800ad98
 8008718:	0800ada9 	.word	0x0800ada9

0800871c <std>:
 800871c:	2300      	movs	r3, #0
 800871e:	b510      	push	{r4, lr}
 8008720:	4604      	mov	r4, r0
 8008722:	e9c0 3300 	strd	r3, r3, [r0]
 8008726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872a:	6083      	str	r3, [r0, #8]
 800872c:	8181      	strh	r1, [r0, #12]
 800872e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008730:	81c2      	strh	r2, [r0, #14]
 8008732:	6183      	str	r3, [r0, #24]
 8008734:	4619      	mov	r1, r3
 8008736:	2208      	movs	r2, #8
 8008738:	305c      	adds	r0, #92	@ 0x5c
 800873a:	f000 fa2d 	bl	8008b98 <memset>
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <std+0x58>)
 8008740:	6224      	str	r4, [r4, #32]
 8008742:	6263      	str	r3, [r4, #36]	@ 0x24
 8008744:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <std+0x5c>)
 8008746:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008748:	4b0c      	ldr	r3, [pc, #48]	@ (800877c <std+0x60>)
 800874a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800874c:	4b0c      	ldr	r3, [pc, #48]	@ (8008780 <std+0x64>)
 800874e:	6323      	str	r3, [r4, #48]	@ 0x30
 8008750:	4b0c      	ldr	r3, [pc, #48]	@ (8008784 <std+0x68>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d006      	beq.n	8008764 <std+0x48>
 8008756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800875a:	4294      	cmp	r4, r2
 800875c:	d002      	beq.n	8008764 <std+0x48>
 800875e:	33d0      	adds	r3, #208	@ 0xd0
 8008760:	429c      	cmp	r4, r3
 8008762:	d105      	bne.n	8008770 <std+0x54>
 8008764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876c:	f7f9 bb29 	b.w	8001dc2 <__retarget_lock_init_recursive>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	080089e9 	.word	0x080089e9
 8008778:	08008a0b 	.word	0x08008a0b
 800877c:	08008a43 	.word	0x08008a43
 8008780:	08008a67 	.word	0x08008a67
 8008784:	20001e50 	.word	0x20001e50

08008788 <stdio_exit_handler>:
 8008788:	4a02      	ldr	r2, [pc, #8]	@ (8008794 <stdio_exit_handler+0xc>)
 800878a:	4903      	ldr	r1, [pc, #12]	@ (8008798 <stdio_exit_handler+0x10>)
 800878c:	4803      	ldr	r0, [pc, #12]	@ (800879c <stdio_exit_handler+0x14>)
 800878e:	f000 b869 	b.w	8008864 <_fwalk_sglue>
 8008792:	bf00      	nop
 8008794:	20000010 	.word	0x20000010
 8008798:	0800a769 	.word	0x0800a769
 800879c:	20000020 	.word	0x20000020

080087a0 <cleanup_stdio>:
 80087a0:	6841      	ldr	r1, [r0, #4]
 80087a2:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <cleanup_stdio+0x34>)
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4299      	cmp	r1, r3
 80087a8:	4604      	mov	r4, r0
 80087aa:	d001      	beq.n	80087b0 <cleanup_stdio+0x10>
 80087ac:	f001 ffdc 	bl	800a768 <_fflush_r>
 80087b0:	68a1      	ldr	r1, [r4, #8]
 80087b2:	4b09      	ldr	r3, [pc, #36]	@ (80087d8 <cleanup_stdio+0x38>)
 80087b4:	4299      	cmp	r1, r3
 80087b6:	d002      	beq.n	80087be <cleanup_stdio+0x1e>
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 ffd5 	bl	800a768 <_fflush_r>
 80087be:	68e1      	ldr	r1, [r4, #12]
 80087c0:	4b06      	ldr	r3, [pc, #24]	@ (80087dc <cleanup_stdio+0x3c>)
 80087c2:	4299      	cmp	r1, r3
 80087c4:	d004      	beq.n	80087d0 <cleanup_stdio+0x30>
 80087c6:	4620      	mov	r0, r4
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f001 bfcc 	b.w	800a768 <_fflush_r>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	20001e50 	.word	0x20001e50
 80087d8:	20001eb8 	.word	0x20001eb8
 80087dc:	20001f20 	.word	0x20001f20

080087e0 <global_stdio_init.part.0>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <global_stdio_init.part.0+0x30>)
 80087e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008814 <global_stdio_init.part.0+0x34>)
 80087e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008818 <global_stdio_init.part.0+0x38>)
 80087e8:	4620      	mov	r0, r4
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	2104      	movs	r1, #4
 80087ee:	2200      	movs	r2, #0
 80087f0:	f7ff ff94 	bl	800871c <std>
 80087f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087f8:	2201      	movs	r2, #1
 80087fa:	2109      	movs	r1, #9
 80087fc:	f7ff ff8e 	bl	800871c <std>
 8008800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008804:	2202      	movs	r2, #2
 8008806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880a:	2112      	movs	r1, #18
 800880c:	f7ff bf86 	b.w	800871c <std>
 8008810:	20001f88 	.word	0x20001f88
 8008814:	20001e50 	.word	0x20001e50
 8008818:	08008789 	.word	0x08008789

0800881c <__sfp_lock_acquire>:
 800881c:	4801      	ldr	r0, [pc, #4]	@ (8008824 <__sfp_lock_acquire+0x8>)
 800881e:	f7f9 baf7 	b.w	8001e10 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20000444 	.word	0x20000444

08008828 <__sfp_lock_release>:
 8008828:	4801      	ldr	r0, [pc, #4]	@ (8008830 <__sfp_lock_release+0x8>)
 800882a:	f7f9 bb06 	b.w	8001e3a <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20000444 	.word	0x20000444

08008834 <__sinit>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	f7ff fff0 	bl	800881c <__sfp_lock_acquire>
 800883c:	6a23      	ldr	r3, [r4, #32]
 800883e:	b11b      	cbz	r3, 8008848 <__sinit+0x14>
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	f7ff bff0 	b.w	8008828 <__sfp_lock_release>
 8008848:	4b04      	ldr	r3, [pc, #16]	@ (800885c <__sinit+0x28>)
 800884a:	6223      	str	r3, [r4, #32]
 800884c:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <__sinit+0x2c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f5      	bne.n	8008840 <__sinit+0xc>
 8008854:	f7ff ffc4 	bl	80087e0 <global_stdio_init.part.0>
 8008858:	e7f2      	b.n	8008840 <__sinit+0xc>
 800885a:	bf00      	nop
 800885c:	080087a1 	.word	0x080087a1
 8008860:	20001f88 	.word	0x20001f88

08008864 <_fwalk_sglue>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	4607      	mov	r7, r0
 800886a:	4688      	mov	r8, r1
 800886c:	4614      	mov	r4, r2
 800886e:	2600      	movs	r6, #0
 8008870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008874:	f1b9 0901 	subs.w	r9, r9, #1
 8008878:	d505      	bpl.n	8008886 <_fwalk_sglue+0x22>
 800887a:	6824      	ldr	r4, [r4, #0]
 800887c:	2c00      	cmp	r4, #0
 800887e:	d1f7      	bne.n	8008870 <_fwalk_sglue+0xc>
 8008880:	4630      	mov	r0, r6
 8008882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d907      	bls.n	800889c <_fwalk_sglue+0x38>
 800888c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008890:	3301      	adds	r3, #1
 8008892:	d003      	beq.n	800889c <_fwalk_sglue+0x38>
 8008894:	4629      	mov	r1, r5
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	4306      	orrs	r6, r0
 800889c:	3568      	adds	r5, #104	@ 0x68
 800889e:	e7e9      	b.n	8008874 <_fwalk_sglue+0x10>

080088a0 <iprintf>:
 80088a0:	b40f      	push	{r0, r1, r2, r3}
 80088a2:	b507      	push	{r0, r1, r2, lr}
 80088a4:	4906      	ldr	r1, [pc, #24]	@ (80088c0 <iprintf+0x20>)
 80088a6:	ab04      	add	r3, sp, #16
 80088a8:	6808      	ldr	r0, [r1, #0]
 80088aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ae:	6881      	ldr	r1, [r0, #8]
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	f001 fdc1 	bl	800a438 <_vfiprintf_r>
 80088b6:	b003      	add	sp, #12
 80088b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088bc:	b004      	add	sp, #16
 80088be:	4770      	bx	lr
 80088c0:	2000001c 	.word	0x2000001c

080088c4 <_puts_r>:
 80088c4:	6a03      	ldr	r3, [r0, #32]
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	4605      	mov	r5, r0
 80088ca:	460e      	mov	r6, r1
 80088cc:	6884      	ldr	r4, [r0, #8]
 80088ce:	b90b      	cbnz	r3, 80088d4 <_puts_r+0x10>
 80088d0:	f7ff ffb0 	bl	8008834 <__sinit>
 80088d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088d6:	07db      	lsls	r3, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_puts_r+0x22>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	0598      	lsls	r0, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_puts_r+0x22>
 80088e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088e2:	f7f9 fa95 	bl	8001e10 <__retarget_lock_acquire_recursive>
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	0719      	lsls	r1, r3, #28
 80088ea:	d502      	bpl.n	80088f2 <_puts_r+0x2e>
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d135      	bne.n	800895e <_puts_r+0x9a>
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 f8f9 	bl	8008aec <__swsetup_r>
 80088fa:	b380      	cbz	r0, 800895e <_puts_r+0x9a>
 80088fc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008902:	07da      	lsls	r2, r3, #31
 8008904:	d405      	bmi.n	8008912 <_puts_r+0x4e>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	059b      	lsls	r3, r3, #22
 800890a:	d402      	bmi.n	8008912 <_puts_r+0x4e>
 800890c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800890e:	f7f9 fa94 	bl	8001e3a <__retarget_lock_release_recursive>
 8008912:	4628      	mov	r0, r5
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	2b00      	cmp	r3, #0
 8008918:	da04      	bge.n	8008924 <_puts_r+0x60>
 800891a:	69a2      	ldr	r2, [r4, #24]
 800891c:	429a      	cmp	r2, r3
 800891e:	dc17      	bgt.n	8008950 <_puts_r+0x8c>
 8008920:	290a      	cmp	r1, #10
 8008922:	d015      	beq.n	8008950 <_puts_r+0x8c>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	6022      	str	r2, [r4, #0]
 800892a:	7019      	strb	r1, [r3, #0]
 800892c:	68a3      	ldr	r3, [r4, #8]
 800892e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008932:	3b01      	subs	r3, #1
 8008934:	60a3      	str	r3, [r4, #8]
 8008936:	2900      	cmp	r1, #0
 8008938:	d1ed      	bne.n	8008916 <_puts_r+0x52>
 800893a:	2b00      	cmp	r3, #0
 800893c:	da11      	bge.n	8008962 <_puts_r+0x9e>
 800893e:	4622      	mov	r2, r4
 8008940:	210a      	movs	r1, #10
 8008942:	4628      	mov	r0, r5
 8008944:	f000 f893 	bl	8008a6e <__swbuf_r>
 8008948:	3001      	adds	r0, #1
 800894a:	d0d7      	beq.n	80088fc <_puts_r+0x38>
 800894c:	250a      	movs	r5, #10
 800894e:	e7d7      	b.n	8008900 <_puts_r+0x3c>
 8008950:	4622      	mov	r2, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f88b 	bl	8008a6e <__swbuf_r>
 8008958:	3001      	adds	r0, #1
 800895a:	d1e7      	bne.n	800892c <_puts_r+0x68>
 800895c:	e7ce      	b.n	80088fc <_puts_r+0x38>
 800895e:	3e01      	subs	r6, #1
 8008960:	e7e4      	b.n	800892c <_puts_r+0x68>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	220a      	movs	r2, #10
 800896a:	701a      	strb	r2, [r3, #0]
 800896c:	e7ee      	b.n	800894c <_puts_r+0x88>
	...

08008970 <puts>:
 8008970:	4b02      	ldr	r3, [pc, #8]	@ (800897c <puts+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bfa5 	b.w	80088c4 <_puts_r>
 800897a:	bf00      	nop
 800897c:	2000001c 	.word	0x2000001c

08008980 <sniprintf>:
 8008980:	b40c      	push	{r2, r3}
 8008982:	b530      	push	{r4, r5, lr}
 8008984:	4b17      	ldr	r3, [pc, #92]	@ (80089e4 <sniprintf+0x64>)
 8008986:	1e0c      	subs	r4, r1, #0
 8008988:	681d      	ldr	r5, [r3, #0]
 800898a:	b09d      	sub	sp, #116	@ 0x74
 800898c:	da08      	bge.n	80089a0 <sniprintf+0x20>
 800898e:	238b      	movs	r3, #139	@ 0x8b
 8008990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	b01d      	add	sp, #116	@ 0x74
 8008998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800899c:	b002      	add	sp, #8
 800899e:	4770      	bx	lr
 80089a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089a8:	bf0c      	ite	eq
 80089aa:	4623      	moveq	r3, r4
 80089ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089b8:	9002      	str	r0, [sp, #8]
 80089ba:	9006      	str	r0, [sp, #24]
 80089bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089c0:	4628      	mov	r0, r5
 80089c2:	ab21      	add	r3, sp, #132	@ 0x84
 80089c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089c6:	a902      	add	r1, sp, #8
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	f001 fc11 	bl	800a1f0 <_svfiprintf_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	bfbc      	itt	lt
 80089d2:	238b      	movlt	r3, #139	@ 0x8b
 80089d4:	602b      	strlt	r3, [r5, #0]
 80089d6:	2c00      	cmp	r4, #0
 80089d8:	d0dd      	beq.n	8008996 <sniprintf+0x16>
 80089da:	2200      	movs	r2, #0
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	e7d9      	b.n	8008996 <sniprintf+0x16>
 80089e2:	bf00      	nop
 80089e4:	2000001c 	.word	0x2000001c

080089e8 <__sread>:
 80089e8:	b510      	push	{r4, lr}
 80089ea:	460c      	mov	r4, r1
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	f000 f956 	bl	8008ca0 <_read_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	bfab      	itete	ge
 80089f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80089fa:	89a3      	ldrhlt	r3, [r4, #12]
 80089fc:	181b      	addge	r3, r3, r0
 80089fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a02:	bfac      	ite	ge
 8008a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a06:	81a3      	strhlt	r3, [r4, #12]
 8008a08:	bd10      	pop	{r4, pc}

08008a0a <__swrite>:
 8008a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	461f      	mov	r7, r3
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	4605      	mov	r5, r0
 8008a14:	05db      	lsls	r3, r3, #23
 8008a16:	460c      	mov	r4, r1
 8008a18:	4616      	mov	r6, r2
 8008a1a:	d505      	bpl.n	8008a28 <__swrite+0x1e>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a24:	f000 f92a 	bl	8008c7c <_lseek_r>
 8008a28:	89a3      	ldrh	r3, [r4, #12]
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	4628      	mov	r0, r5
 8008a34:	463b      	mov	r3, r7
 8008a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	f000 b951 	b.w	8008ce4 <_write_r>

08008a42 <__sseek>:
 8008a42:	b510      	push	{r4, lr}
 8008a44:	460c      	mov	r4, r1
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 f917 	bl	8008c7c <_lseek_r>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	bf15      	itete	ne
 8008a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a5e:	81a3      	strheq	r3, [r4, #12]
 8008a60:	bf18      	it	ne
 8008a62:	81a3      	strhne	r3, [r4, #12]
 8008a64:	bd10      	pop	{r4, pc}

08008a66 <__sclose>:
 8008a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a6a:	f000 b8a1 	b.w	8008bb0 <_close_r>

08008a6e <__swbuf_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	460e      	mov	r6, r1
 8008a72:	4614      	mov	r4, r2
 8008a74:	4605      	mov	r5, r0
 8008a76:	b118      	cbz	r0, 8008a80 <__swbuf_r+0x12>
 8008a78:	6a03      	ldr	r3, [r0, #32]
 8008a7a:	b90b      	cbnz	r3, 8008a80 <__swbuf_r+0x12>
 8008a7c:	f7ff feda 	bl	8008834 <__sinit>
 8008a80:	69a3      	ldr	r3, [r4, #24]
 8008a82:	60a3      	str	r3, [r4, #8]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	071a      	lsls	r2, r3, #28
 8008a88:	d501      	bpl.n	8008a8e <__swbuf_r+0x20>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	b943      	cbnz	r3, 8008aa0 <__swbuf_r+0x32>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 f82b 	bl	8008aec <__swsetup_r>
 8008a96:	b118      	cbz	r0, 8008aa0 <__swbuf_r+0x32>
 8008a98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	b2f6      	uxtb	r6, r6
 8008aa6:	1a98      	subs	r0, r3, r2
 8008aa8:	6963      	ldr	r3, [r4, #20]
 8008aaa:	4637      	mov	r7, r6
 8008aac:	4283      	cmp	r3, r0
 8008aae:	dc05      	bgt.n	8008abc <__swbuf_r+0x4e>
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	f001 fe58 	bl	800a768 <_fflush_r>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1ed      	bne.n	8008a98 <__swbuf_r+0x2a>
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	60a3      	str	r3, [r4, #8]
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	701e      	strb	r6, [r3, #0]
 8008aca:	6962      	ldr	r2, [r4, #20]
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d004      	beq.n	8008adc <__swbuf_r+0x6e>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	07db      	lsls	r3, r3, #31
 8008ad6:	d5e1      	bpl.n	8008a9c <__swbuf_r+0x2e>
 8008ad8:	2e0a      	cmp	r6, #10
 8008ada:	d1df      	bne.n	8008a9c <__swbuf_r+0x2e>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f001 fe42 	bl	800a768 <_fflush_r>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d0d9      	beq.n	8008a9c <__swbuf_r+0x2e>
 8008ae8:	e7d6      	b.n	8008a98 <__swbuf_r+0x2a>
	...

08008aec <__swsetup_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4b29      	ldr	r3, [pc, #164]	@ (8008b94 <__swsetup_r+0xa8>)
 8008af0:	4605      	mov	r5, r0
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	460c      	mov	r4, r1
 8008af6:	b118      	cbz	r0, 8008b00 <__swsetup_r+0x14>
 8008af8:	6a03      	ldr	r3, [r0, #32]
 8008afa:	b90b      	cbnz	r3, 8008b00 <__swsetup_r+0x14>
 8008afc:	f7ff fe9a 	bl	8008834 <__sinit>
 8008b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b04:	0719      	lsls	r1, r3, #28
 8008b06:	d422      	bmi.n	8008b4e <__swsetup_r+0x62>
 8008b08:	06da      	lsls	r2, r3, #27
 8008b0a:	d407      	bmi.n	8008b1c <__swsetup_r+0x30>
 8008b0c:	2209      	movs	r2, #9
 8008b0e:	602a      	str	r2, [r5, #0]
 8008b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	e033      	b.n	8008b84 <__swsetup_r+0x98>
 8008b1c:	0758      	lsls	r0, r3, #29
 8008b1e:	d512      	bpl.n	8008b46 <__swsetup_r+0x5a>
 8008b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b22:	b141      	cbz	r1, 8008b36 <__swsetup_r+0x4a>
 8008b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__swsetup_r+0x46>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f7ff f89b 	bl	8007c68 <_free_r>
 8008b32:	2300      	movs	r3, #0
 8008b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6063      	str	r3, [r4, #4]
 8008b42:	6923      	ldr	r3, [r4, #16]
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f043 0308 	orr.w	r3, r3, #8
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	b94b      	cbnz	r3, 8008b66 <__swsetup_r+0x7a>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b5c:	d003      	beq.n	8008b66 <__swsetup_r+0x7a>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4628      	mov	r0, r5
 8008b62:	f001 fe4e 	bl	800a802 <__smakebuf_r>
 8008b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6a:	f013 0201 	ands.w	r2, r3, #1
 8008b6e:	d00a      	beq.n	8008b86 <__swsetup_r+0x9a>
 8008b70:	2200      	movs	r2, #0
 8008b72:	60a2      	str	r2, [r4, #8]
 8008b74:	6962      	ldr	r2, [r4, #20]
 8008b76:	4252      	negs	r2, r2
 8008b78:	61a2      	str	r2, [r4, #24]
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	b942      	cbnz	r2, 8008b90 <__swsetup_r+0xa4>
 8008b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b82:	d1c5      	bne.n	8008b10 <__swsetup_r+0x24>
 8008b84:	bd38      	pop	{r3, r4, r5, pc}
 8008b86:	0799      	lsls	r1, r3, #30
 8008b88:	bf58      	it	pl
 8008b8a:	6962      	ldrpl	r2, [r4, #20]
 8008b8c:	60a2      	str	r2, [r4, #8]
 8008b8e:	e7f4      	b.n	8008b7a <__swsetup_r+0x8e>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e7f7      	b.n	8008b84 <__swsetup_r+0x98>
 8008b94:	2000001c 	.word	0x2000001c

08008b98 <memset>:
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4402      	add	r2, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d100      	bne.n	8008ba2 <memset+0xa>
 8008ba0:	4770      	bx	lr
 8008ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba6:	e7f9      	b.n	8008b9c <memset+0x4>

08008ba8 <_localeconv_r>:
 8008ba8:	4800      	ldr	r0, [pc, #0]	@ (8008bac <_localeconv_r+0x4>)
 8008baa:	4770      	bx	lr
 8008bac:	2000015c 	.word	0x2000015c

08008bb0 <_close_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4d05      	ldr	r5, [pc, #20]	@ (8008bcc <_close_r+0x1c>)
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f8 ff33 	bl	8001a26 <_close>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_close_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_close_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20001f8c 	.word	0x20001f8c

08008bd0 <_reclaim_reent>:
 8008bd0:	4b29      	ldr	r3, [pc, #164]	@ (8008c78 <_reclaim_reent+0xa8>)
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4283      	cmp	r3, r0
 8008bda:	d04b      	beq.n	8008c74 <_reclaim_reent+0xa4>
 8008bdc:	69c3      	ldr	r3, [r0, #28]
 8008bde:	b1ab      	cbz	r3, 8008c0c <_reclaim_reent+0x3c>
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	b16b      	cbz	r3, 8008c00 <_reclaim_reent+0x30>
 8008be4:	2500      	movs	r5, #0
 8008be6:	69e3      	ldr	r3, [r4, #28]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	5959      	ldr	r1, [r3, r5]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d13b      	bne.n	8008c68 <_reclaim_reent+0x98>
 8008bf0:	3504      	adds	r5, #4
 8008bf2:	2d80      	cmp	r5, #128	@ 0x80
 8008bf4:	d1f7      	bne.n	8008be6 <_reclaim_reent+0x16>
 8008bf6:	69e3      	ldr	r3, [r4, #28]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	68d9      	ldr	r1, [r3, #12]
 8008bfc:	f7ff f834 	bl	8007c68 <_free_r>
 8008c00:	69e3      	ldr	r3, [r4, #28]
 8008c02:	6819      	ldr	r1, [r3, #0]
 8008c04:	b111      	cbz	r1, 8008c0c <_reclaim_reent+0x3c>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff f82e 	bl	8007c68 <_free_r>
 8008c0c:	6961      	ldr	r1, [r4, #20]
 8008c0e:	b111      	cbz	r1, 8008c16 <_reclaim_reent+0x46>
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7ff f829 	bl	8007c68 <_free_r>
 8008c16:	69e1      	ldr	r1, [r4, #28]
 8008c18:	b111      	cbz	r1, 8008c20 <_reclaim_reent+0x50>
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f7ff f824 	bl	8007c68 <_free_r>
 8008c20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008c22:	b111      	cbz	r1, 8008c2a <_reclaim_reent+0x5a>
 8008c24:	4620      	mov	r0, r4
 8008c26:	f7ff f81f 	bl	8007c68 <_free_r>
 8008c2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c2c:	b111      	cbz	r1, 8008c34 <_reclaim_reent+0x64>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff f81a 	bl	8007c68 <_free_r>
 8008c34:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008c36:	b111      	cbz	r1, 8008c3e <_reclaim_reent+0x6e>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff f815 	bl	8007c68 <_free_r>
 8008c3e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008c40:	b111      	cbz	r1, 8008c48 <_reclaim_reent+0x78>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f7ff f810 	bl	8007c68 <_free_r>
 8008c48:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008c4a:	b111      	cbz	r1, 8008c52 <_reclaim_reent+0x82>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7ff f80b 	bl	8007c68 <_free_r>
 8008c52:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c54:	b111      	cbz	r1, 8008c5c <_reclaim_reent+0x8c>
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff f806 	bl	8007c68 <_free_r>
 8008c5c:	6a23      	ldr	r3, [r4, #32]
 8008c5e:	b14b      	cbz	r3, 8008c74 <_reclaim_reent+0xa4>
 8008c60:	4620      	mov	r0, r4
 8008c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c66:	4718      	bx	r3
 8008c68:	680e      	ldr	r6, [r1, #0]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7fe fffc 	bl	8007c68 <_free_r>
 8008c70:	4631      	mov	r1, r6
 8008c72:	e7bb      	b.n	8008bec <_reclaim_reent+0x1c>
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	bf00      	nop
 8008c78:	2000001c 	.word	0x2000001c

08008c7c <_lseek_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	2200      	movs	r2, #0
 8008c86:	4d05      	ldr	r5, [pc, #20]	@ (8008c9c <_lseek_r+0x20>)
 8008c88:	602a      	str	r2, [r5, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f7f8 feef 	bl	8001a6e <_lseek>
 8008c90:	1c43      	adds	r3, r0, #1
 8008c92:	d102      	bne.n	8008c9a <_lseek_r+0x1e>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	b103      	cbz	r3, 8008c9a <_lseek_r+0x1e>
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	20001f8c 	.word	0x20001f8c

08008ca0 <_read_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4d05      	ldr	r5, [pc, #20]	@ (8008cc0 <_read_r+0x20>)
 8008cac:	602a      	str	r2, [r5, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f7f8 fe9c 	bl	80019ec <_read>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_read_r+0x1e>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_read_r+0x1e>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20001f8c 	.word	0x20001f8c

08008cc4 <_sbrk_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4d05      	ldr	r5, [pc, #20]	@ (8008ce0 <_sbrk_r+0x1c>)
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	f7f8 feda 	bl	8001a88 <_sbrk>
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	d102      	bne.n	8008cde <_sbrk_r+0x1a>
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	b103      	cbz	r3, 8008cde <_sbrk_r+0x1a>
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	20001f8c 	.word	0x20001f8c

08008ce4 <_write_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	2200      	movs	r2, #0
 8008cee:	4d05      	ldr	r5, [pc, #20]	@ (8008d04 <_write_r+0x20>)
 8008cf0:	602a      	str	r2, [r5, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f7f8 f9de 	bl	80010b4 <_write>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_write_r+0x1e>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_write_r+0x1e>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20001f8c 	.word	0x20001f8c

08008d08 <__errno>:
 8008d08:	4b01      	ldr	r3, [pc, #4]	@ (8008d10 <__errno+0x8>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	2000001c 	.word	0x2000001c

08008d14 <__libc_init_array>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	2600      	movs	r6, #0
 8008d18:	4d0c      	ldr	r5, [pc, #48]	@ (8008d4c <__libc_init_array+0x38>)
 8008d1a:	4c0d      	ldr	r4, [pc, #52]	@ (8008d50 <__libc_init_array+0x3c>)
 8008d1c:	1b64      	subs	r4, r4, r5
 8008d1e:	10a4      	asrs	r4, r4, #2
 8008d20:	42a6      	cmp	r6, r4
 8008d22:	d109      	bne.n	8008d38 <__libc_init_array+0x24>
 8008d24:	f001 fecc 	bl	800aac0 <_init>
 8008d28:	2600      	movs	r6, #0
 8008d2a:	4d0a      	ldr	r5, [pc, #40]	@ (8008d54 <__libc_init_array+0x40>)
 8008d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8008d58 <__libc_init_array+0x44>)
 8008d2e:	1b64      	subs	r4, r4, r5
 8008d30:	10a4      	asrs	r4, r4, #2
 8008d32:	42a6      	cmp	r6, r4
 8008d34:	d105      	bne.n	8008d42 <__libc_init_array+0x2e>
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3c:	4798      	blx	r3
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7ee      	b.n	8008d20 <__libc_init_array+0xc>
 8008d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d46:	4798      	blx	r3
 8008d48:	3601      	adds	r6, #1
 8008d4a:	e7f2      	b.n	8008d32 <__libc_init_array+0x1e>
 8008d4c:	0800b100 	.word	0x0800b100
 8008d50:	0800b100 	.word	0x0800b100
 8008d54:	0800b100 	.word	0x0800b100
 8008d58:	0800b104 	.word	0x0800b104

08008d5c <memchr>:
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	b2c9      	uxtb	r1, r1
 8008d62:	4402      	add	r2, r0
 8008d64:	4293      	cmp	r3, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	d101      	bne.n	8008d6e <memchr+0x12>
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e003      	b.n	8008d76 <memchr+0x1a>
 8008d6e:	7804      	ldrb	r4, [r0, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	428c      	cmp	r4, r1
 8008d74:	d1f6      	bne.n	8008d64 <memchr+0x8>
 8008d76:	bd10      	pop	{r4, pc}

08008d78 <memcpy>:
 8008d78:	440a      	add	r2, r1
 8008d7a:	4291      	cmp	r1, r2
 8008d7c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008d80:	d100      	bne.n	8008d84 <memcpy+0xc>
 8008d82:	4770      	bx	lr
 8008d84:	b510      	push	{r4, lr}
 8008d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d90:	d1f9      	bne.n	8008d86 <memcpy+0xe>
 8008d92:	bd10      	pop	{r4, pc}

08008d94 <quorem>:
 8008d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	6903      	ldr	r3, [r0, #16]
 8008d9a:	690c      	ldr	r4, [r1, #16]
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	db7e      	blt.n	8008ea0 <quorem+0x10c>
 8008da2:	3c01      	subs	r4, #1
 8008da4:	00a3      	lsls	r3, r4, #2
 8008da6:	f100 0514 	add.w	r5, r0, #20
 8008daa:	f101 0814 	add.w	r8, r1, #20
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dca:	d32e      	bcc.n	8008e2a <quorem+0x96>
 8008dcc:	f04f 0a00 	mov.w	sl, #0
 8008dd0:	46c4      	mov	ip, r8
 8008dd2:	46ae      	mov	lr, r5
 8008dd4:	46d3      	mov	fp, sl
 8008dd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008dda:	b298      	uxth	r0, r3
 8008ddc:	fb06 a000 	mla	r0, r6, r0, sl
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	0c02      	lsrs	r2, r0, #16
 8008de4:	fb06 2303 	mla	r3, r6, r3, r2
 8008de8:	f8de 2000 	ldr.w	r2, [lr]
 8008dec:	b280      	uxth	r0, r0
 8008dee:	b292      	uxth	r2, r2
 8008df0:	1a12      	subs	r2, r2, r0
 8008df2:	445a      	add	r2, fp
 8008df4:	f8de 0000 	ldr.w	r0, [lr]
 8008df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e06:	b292      	uxth	r2, r2
 8008e08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e0c:	45e1      	cmp	r9, ip
 8008e0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e12:	f84e 2b04 	str.w	r2, [lr], #4
 8008e16:	d2de      	bcs.n	8008dd6 <quorem+0x42>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	58eb      	ldr	r3, [r5, r3]
 8008e1c:	b92b      	cbnz	r3, 8008e2a <quorem+0x96>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	3b04      	subs	r3, #4
 8008e22:	429d      	cmp	r5, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	d32f      	bcc.n	8008e88 <quorem+0xf4>
 8008e28:	613c      	str	r4, [r7, #16]
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	f001 f87c 	bl	8009f28 <__mcmp>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	db25      	blt.n	8008e80 <quorem+0xec>
 8008e34:	4629      	mov	r1, r5
 8008e36:	2000      	movs	r0, #0
 8008e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e3c:	f8d1 c000 	ldr.w	ip, [r1]
 8008e40:	fa1f fe82 	uxth.w	lr, r2
 8008e44:	fa1f f38c 	uxth.w	r3, ip
 8008e48:	eba3 030e 	sub.w	r3, r3, lr
 8008e4c:	4403      	add	r3, r0
 8008e4e:	0c12      	lsrs	r2, r2, #16
 8008e50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008e54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5e:	45c1      	cmp	r9, r8
 8008e60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e64:	f841 3b04 	str.w	r3, [r1], #4
 8008e68:	d2e6      	bcs.n	8008e38 <quorem+0xa4>
 8008e6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e72:	b922      	cbnz	r2, 8008e7e <quorem+0xea>
 8008e74:	3b04      	subs	r3, #4
 8008e76:	429d      	cmp	r5, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	d30b      	bcc.n	8008e94 <quorem+0x100>
 8008e7c:	613c      	str	r4, [r7, #16]
 8008e7e:	3601      	adds	r6, #1
 8008e80:	4630      	mov	r0, r6
 8008e82:	b003      	add	sp, #12
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	3b04      	subs	r3, #4
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	d1cb      	bne.n	8008e28 <quorem+0x94>
 8008e90:	3c01      	subs	r4, #1
 8008e92:	e7c6      	b.n	8008e22 <quorem+0x8e>
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	3b04      	subs	r3, #4
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	d1ef      	bne.n	8008e7c <quorem+0xe8>
 8008e9c:	3c01      	subs	r4, #1
 8008e9e:	e7ea      	b.n	8008e76 <quorem+0xe2>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7ee      	b.n	8008e82 <quorem+0xee>
 8008ea4:	0000      	movs	r0, r0
	...

08008ea8 <_dtoa_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	4614      	mov	r4, r2
 8008eae:	461d      	mov	r5, r3
 8008eb0:	69c7      	ldr	r7, [r0, #28]
 8008eb2:	b097      	sub	sp, #92	@ 0x5c
 8008eb4:	4683      	mov	fp, r0
 8008eb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008eba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008ebc:	b97f      	cbnz	r7, 8008ede <_dtoa_r+0x36>
 8008ebe:	2010      	movs	r0, #16
 8008ec0:	f7fe ff1a 	bl	8007cf8 <malloc>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f8cb 001c 	str.w	r0, [fp, #28]
 8008eca:	b920      	cbnz	r0, 8008ed6 <_dtoa_r+0x2e>
 8008ecc:	21ef      	movs	r1, #239	@ 0xef
 8008ece:	4ba8      	ldr	r3, [pc, #672]	@ (8009170 <_dtoa_r+0x2c8>)
 8008ed0:	48a8      	ldr	r0, [pc, #672]	@ (8009174 <_dtoa_r+0x2cc>)
 8008ed2:	f001 fd0f 	bl	800a8f4 <__assert_func>
 8008ed6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008eda:	6007      	str	r7, [r0, #0]
 8008edc:	60c7      	str	r7, [r0, #12]
 8008ede:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	b159      	cbz	r1, 8008efe <_dtoa_r+0x56>
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	2301      	movs	r3, #1
 8008eea:	4093      	lsls	r3, r2
 8008eec:	604a      	str	r2, [r1, #4]
 8008eee:	608b      	str	r3, [r1, #8]
 8008ef0:	4658      	mov	r0, fp
 8008ef2:	f000 fde1 	bl	8009ab8 <_Bfree>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	1e2b      	subs	r3, r5, #0
 8008f00:	bfaf      	iteee	ge
 8008f02:	2300      	movge	r3, #0
 8008f04:	2201      	movlt	r2, #1
 8008f06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f0a:	9303      	strlt	r3, [sp, #12]
 8008f0c:	bfa8      	it	ge
 8008f0e:	6033      	strge	r3, [r6, #0]
 8008f10:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f14:	4b98      	ldr	r3, [pc, #608]	@ (8009178 <_dtoa_r+0x2d0>)
 8008f16:	bfb8      	it	lt
 8008f18:	6032      	strlt	r2, [r6, #0]
 8008f1a:	ea33 0308 	bics.w	r3, r3, r8
 8008f1e:	d112      	bne.n	8008f46 <_dtoa_r+0x9e>
 8008f20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008f2c:	4323      	orrs	r3, r4
 8008f2e:	f000 8550 	beq.w	80099d2 <_dtoa_r+0xb2a>
 8008f32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f34:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800917c <_dtoa_r+0x2d4>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8552 	beq.w	80099e2 <_dtoa_r+0xb3a>
 8008f3e:	f10a 0303 	add.w	r3, sl, #3
 8008f42:	f000 bd4c 	b.w	80099de <_dtoa_r+0xb36>
 8008f46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f52:	2200      	movs	r2, #0
 8008f54:	2300      	movs	r3, #0
 8008f56:	f7f7 fd27 	bl	80009a8 <__aeabi_dcmpeq>
 8008f5a:	4607      	mov	r7, r0
 8008f5c:	b158      	cbz	r0, 8008f76 <_dtoa_r+0xce>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f66:	b113      	cbz	r3, 8008f6e <_dtoa_r+0xc6>
 8008f68:	4b85      	ldr	r3, [pc, #532]	@ (8009180 <_dtoa_r+0x2d8>)
 8008f6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009184 <_dtoa_r+0x2dc>
 8008f72:	f000 bd36 	b.w	80099e2 <_dtoa_r+0xb3a>
 8008f76:	ab14      	add	r3, sp, #80	@ 0x50
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	ab15      	add	r3, sp, #84	@ 0x54
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4658      	mov	r0, fp
 8008f80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f84:	f001 f880 	bl	800a088 <__d2b>
 8008f88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008f8c:	4681      	mov	r9, r0
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	d077      	beq.n	8009082 <_dtoa_r+0x1da>
 8008f92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008fa4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008fa8:	9712      	str	r7, [sp, #72]	@ 0x48
 8008faa:	4619      	mov	r1, r3
 8008fac:	2200      	movs	r2, #0
 8008fae:	4b76      	ldr	r3, [pc, #472]	@ (8009188 <_dtoa_r+0x2e0>)
 8008fb0:	f7f7 f8da 	bl	8000168 <__aeabi_dsub>
 8008fb4:	a368      	add	r3, pc, #416	@ (adr r3, 8009158 <_dtoa_r+0x2b0>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 fa8d 	bl	80004d8 <__aeabi_dmul>
 8008fbe:	a368      	add	r3, pc, #416	@ (adr r3, 8009160 <_dtoa_r+0x2b8>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 f8d2 	bl	800016c <__adddf3>
 8008fc8:	4604      	mov	r4, r0
 8008fca:	4630      	mov	r0, r6
 8008fcc:	460d      	mov	r5, r1
 8008fce:	f7f7 fa19 	bl	8000404 <__aeabi_i2d>
 8008fd2:	a365      	add	r3, pc, #404	@ (adr r3, 8009168 <_dtoa_r+0x2c0>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 fa7e 	bl	80004d8 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	f7f7 f8c2 	bl	800016c <__adddf3>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	460d      	mov	r5, r1
 8008fec:	f7f7 fd24 	bl	8000a38 <__aeabi_d2iz>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4607      	mov	r7, r0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 fcdf 	bl	80009bc <__aeabi_dcmplt>
 8008ffe:	b140      	cbz	r0, 8009012 <_dtoa_r+0x16a>
 8009000:	4638      	mov	r0, r7
 8009002:	f7f7 f9ff 	bl	8000404 <__aeabi_i2d>
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	f7f7 fccd 	bl	80009a8 <__aeabi_dcmpeq>
 800900e:	b900      	cbnz	r0, 8009012 <_dtoa_r+0x16a>
 8009010:	3f01      	subs	r7, #1
 8009012:	2f16      	cmp	r7, #22
 8009014:	d853      	bhi.n	80090be <_dtoa_r+0x216>
 8009016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800901a:	4b5c      	ldr	r3, [pc, #368]	@ (800918c <_dtoa_r+0x2e4>)
 800901c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 fcca 	bl	80009bc <__aeabi_dcmplt>
 8009028:	2800      	cmp	r0, #0
 800902a:	d04a      	beq.n	80090c2 <_dtoa_r+0x21a>
 800902c:	2300      	movs	r3, #0
 800902e:	3f01      	subs	r7, #1
 8009030:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009032:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009034:	1b9b      	subs	r3, r3, r6
 8009036:	1e5a      	subs	r2, r3, #1
 8009038:	bf46      	itte	mi
 800903a:	f1c3 0801 	rsbmi	r8, r3, #1
 800903e:	2300      	movmi	r3, #0
 8009040:	f04f 0800 	movpl.w	r8, #0
 8009044:	9209      	str	r2, [sp, #36]	@ 0x24
 8009046:	bf48      	it	mi
 8009048:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800904a:	2f00      	cmp	r7, #0
 800904c:	db3b      	blt.n	80090c6 <_dtoa_r+0x21e>
 800904e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009050:	970e      	str	r7, [sp, #56]	@ 0x38
 8009052:	443b      	add	r3, r7
 8009054:	9309      	str	r3, [sp, #36]	@ 0x24
 8009056:	2300      	movs	r3, #0
 8009058:	930a      	str	r3, [sp, #40]	@ 0x28
 800905a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800905c:	2b09      	cmp	r3, #9
 800905e:	d866      	bhi.n	800912e <_dtoa_r+0x286>
 8009060:	2b05      	cmp	r3, #5
 8009062:	bfc4      	itt	gt
 8009064:	3b04      	subgt	r3, #4
 8009066:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009068:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800906a:	bfc8      	it	gt
 800906c:	2400      	movgt	r4, #0
 800906e:	f1a3 0302 	sub.w	r3, r3, #2
 8009072:	bfd8      	it	le
 8009074:	2401      	movle	r4, #1
 8009076:	2b03      	cmp	r3, #3
 8009078:	d864      	bhi.n	8009144 <_dtoa_r+0x29c>
 800907a:	e8df f003 	tbb	[pc, r3]
 800907e:	382b      	.short	0x382b
 8009080:	5636      	.short	0x5636
 8009082:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009086:	441e      	add	r6, r3
 8009088:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800908c:	2b20      	cmp	r3, #32
 800908e:	bfc1      	itttt	gt
 8009090:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009094:	fa08 f803 	lslgt.w	r8, r8, r3
 8009098:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800909c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090a0:	bfd6      	itet	le
 80090a2:	f1c3 0320 	rsble	r3, r3, #32
 80090a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80090aa:	fa04 f003 	lslle.w	r0, r4, r3
 80090ae:	f7f7 f999 	bl	80003e4 <__aeabi_ui2d>
 80090b2:	2201      	movs	r2, #1
 80090b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80090b8:	3e01      	subs	r6, #1
 80090ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80090bc:	e775      	b.n	8008faa <_dtoa_r+0x102>
 80090be:	2301      	movs	r3, #1
 80090c0:	e7b6      	b.n	8009030 <_dtoa_r+0x188>
 80090c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80090c4:	e7b5      	b.n	8009032 <_dtoa_r+0x18a>
 80090c6:	427b      	negs	r3, r7
 80090c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ca:	2300      	movs	r3, #0
 80090cc:	eba8 0807 	sub.w	r8, r8, r7
 80090d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80090d2:	e7c2      	b.n	800905a <_dtoa_r+0x1b2>
 80090d4:	2300      	movs	r3, #0
 80090d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dc35      	bgt.n	800914a <_dtoa_r+0x2a2>
 80090de:	2301      	movs	r3, #1
 80090e0:	461a      	mov	r2, r3
 80090e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80090e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80090e8:	e00b      	b.n	8009102 <_dtoa_r+0x25a>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e7f3      	b.n	80090d6 <_dtoa_r+0x22e>
 80090ee:	2300      	movs	r3, #0
 80090f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090f4:	18fb      	adds	r3, r7, r3
 80090f6:	9308      	str	r3, [sp, #32]
 80090f8:	3301      	adds	r3, #1
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	9307      	str	r3, [sp, #28]
 80090fe:	bfb8      	it	lt
 8009100:	2301      	movlt	r3, #1
 8009102:	2100      	movs	r1, #0
 8009104:	2204      	movs	r2, #4
 8009106:	f8db 001c 	ldr.w	r0, [fp, #28]
 800910a:	f102 0514 	add.w	r5, r2, #20
 800910e:	429d      	cmp	r5, r3
 8009110:	d91f      	bls.n	8009152 <_dtoa_r+0x2aa>
 8009112:	6041      	str	r1, [r0, #4]
 8009114:	4658      	mov	r0, fp
 8009116:	f000 fc8f 	bl	8009a38 <_Balloc>
 800911a:	4682      	mov	sl, r0
 800911c:	2800      	cmp	r0, #0
 800911e:	d139      	bne.n	8009194 <_dtoa_r+0x2ec>
 8009120:	4602      	mov	r2, r0
 8009122:	f240 11af 	movw	r1, #431	@ 0x1af
 8009126:	4b1a      	ldr	r3, [pc, #104]	@ (8009190 <_dtoa_r+0x2e8>)
 8009128:	e6d2      	b.n	8008ed0 <_dtoa_r+0x28>
 800912a:	2301      	movs	r3, #1
 800912c:	e7e0      	b.n	80090f0 <_dtoa_r+0x248>
 800912e:	2401      	movs	r4, #1
 8009130:	2300      	movs	r3, #0
 8009132:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009134:	9320      	str	r3, [sp, #128]	@ 0x80
 8009136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800913a:	2200      	movs	r2, #0
 800913c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009140:	2312      	movs	r3, #18
 8009142:	e7d0      	b.n	80090e6 <_dtoa_r+0x23e>
 8009144:	2301      	movs	r3, #1
 8009146:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009148:	e7f5      	b.n	8009136 <_dtoa_r+0x28e>
 800914a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800914c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009150:	e7d7      	b.n	8009102 <_dtoa_r+0x25a>
 8009152:	3101      	adds	r1, #1
 8009154:	0052      	lsls	r2, r2, #1
 8009156:	e7d8      	b.n	800910a <_dtoa_r+0x262>
 8009158:	636f4361 	.word	0x636f4361
 800915c:	3fd287a7 	.word	0x3fd287a7
 8009160:	8b60c8b3 	.word	0x8b60c8b3
 8009164:	3fc68a28 	.word	0x3fc68a28
 8009168:	509f79fb 	.word	0x509f79fb
 800916c:	3fd34413 	.word	0x3fd34413
 8009170:	0800adc7 	.word	0x0800adc7
 8009174:	0800adde 	.word	0x0800adde
 8009178:	7ff00000 	.word	0x7ff00000
 800917c:	0800adc3 	.word	0x0800adc3
 8009180:	0800ad97 	.word	0x0800ad97
 8009184:	0800ad96 	.word	0x0800ad96
 8009188:	3ff80000 	.word	0x3ff80000
 800918c:	0800aed8 	.word	0x0800aed8
 8009190:	0800ae36 	.word	0x0800ae36
 8009194:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009198:	6018      	str	r0, [r3, #0]
 800919a:	9b07      	ldr	r3, [sp, #28]
 800919c:	2b0e      	cmp	r3, #14
 800919e:	f200 80a4 	bhi.w	80092ea <_dtoa_r+0x442>
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	f000 80a1 	beq.w	80092ea <_dtoa_r+0x442>
 80091a8:	2f00      	cmp	r7, #0
 80091aa:	dd33      	ble.n	8009214 <_dtoa_r+0x36c>
 80091ac:	4b86      	ldr	r3, [pc, #536]	@ (80093c8 <_dtoa_r+0x520>)
 80091ae:	f007 020f 	and.w	r2, r7, #15
 80091b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b6:	05f8      	lsls	r0, r7, #23
 80091b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80091c4:	d516      	bpl.n	80091f4 <_dtoa_r+0x34c>
 80091c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091ca:	4b80      	ldr	r3, [pc, #512]	@ (80093cc <_dtoa_r+0x524>)
 80091cc:	2603      	movs	r6, #3
 80091ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091d2:	f7f7 faab 	bl	800072c <__aeabi_ddiv>
 80091d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091da:	f004 040f 	and.w	r4, r4, #15
 80091de:	4d7b      	ldr	r5, [pc, #492]	@ (80093cc <_dtoa_r+0x524>)
 80091e0:	b954      	cbnz	r4, 80091f8 <_dtoa_r+0x350>
 80091e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ea:	f7f7 fa9f 	bl	800072c <__aeabi_ddiv>
 80091ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091f2:	e028      	b.n	8009246 <_dtoa_r+0x39e>
 80091f4:	2602      	movs	r6, #2
 80091f6:	e7f2      	b.n	80091de <_dtoa_r+0x336>
 80091f8:	07e1      	lsls	r1, r4, #31
 80091fa:	d508      	bpl.n	800920e <_dtoa_r+0x366>
 80091fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009200:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009204:	f7f7 f968 	bl	80004d8 <__aeabi_dmul>
 8009208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800920c:	3601      	adds	r6, #1
 800920e:	1064      	asrs	r4, r4, #1
 8009210:	3508      	adds	r5, #8
 8009212:	e7e5      	b.n	80091e0 <_dtoa_r+0x338>
 8009214:	f000 80d2 	beq.w	80093bc <_dtoa_r+0x514>
 8009218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800921c:	427c      	negs	r4, r7
 800921e:	4b6a      	ldr	r3, [pc, #424]	@ (80093c8 <_dtoa_r+0x520>)
 8009220:	f004 020f 	and.w	r2, r4, #15
 8009224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f7 f954 	bl	80004d8 <__aeabi_dmul>
 8009230:	2602      	movs	r6, #2
 8009232:	2300      	movs	r3, #0
 8009234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009238:	4d64      	ldr	r5, [pc, #400]	@ (80093cc <_dtoa_r+0x524>)
 800923a:	1124      	asrs	r4, r4, #4
 800923c:	2c00      	cmp	r4, #0
 800923e:	f040 80b2 	bne.w	80093a6 <_dtoa_r+0x4fe>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1d3      	bne.n	80091ee <_dtoa_r+0x346>
 8009246:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800924a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80b7 	beq.w	80093c0 <_dtoa_r+0x518>
 8009252:	2200      	movs	r2, #0
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	4b5d      	ldr	r3, [pc, #372]	@ (80093d0 <_dtoa_r+0x528>)
 800925a:	f7f7 fbaf 	bl	80009bc <__aeabi_dcmplt>
 800925e:	2800      	cmp	r0, #0
 8009260:	f000 80ae 	beq.w	80093c0 <_dtoa_r+0x518>
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 80aa 	beq.w	80093c0 <_dtoa_r+0x518>
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	2b00      	cmp	r3, #0
 8009270:	dd37      	ble.n	80092e2 <_dtoa_r+0x43a>
 8009272:	1e7b      	subs	r3, r7, #1
 8009274:	4620      	mov	r0, r4
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	2200      	movs	r2, #0
 800927a:	4629      	mov	r1, r5
 800927c:	4b55      	ldr	r3, [pc, #340]	@ (80093d4 <_dtoa_r+0x52c>)
 800927e:	f7f7 f92b 	bl	80004d8 <__aeabi_dmul>
 8009282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009286:	9c08      	ldr	r4, [sp, #32]
 8009288:	3601      	adds	r6, #1
 800928a:	4630      	mov	r0, r6
 800928c:	f7f7 f8ba 	bl	8000404 <__aeabi_i2d>
 8009290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009294:	f7f7 f920 	bl	80004d8 <__aeabi_dmul>
 8009298:	2200      	movs	r2, #0
 800929a:	4b4f      	ldr	r3, [pc, #316]	@ (80093d8 <_dtoa_r+0x530>)
 800929c:	f7f6 ff66 	bl	800016c <__adddf3>
 80092a0:	4605      	mov	r5, r0
 80092a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	f040 809a 	bne.w	80093e0 <_dtoa_r+0x538>
 80092ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092b0:	2200      	movs	r2, #0
 80092b2:	4b4a      	ldr	r3, [pc, #296]	@ (80093dc <_dtoa_r+0x534>)
 80092b4:	f7f6 ff58 	bl	8000168 <__aeabi_dsub>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4633      	mov	r3, r6
 80092c4:	f7f7 fb98 	bl	80009f8 <__aeabi_dcmpgt>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	f040 828e 	bne.w	80097ea <_dtoa_r+0x942>
 80092ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092d2:	462a      	mov	r2, r5
 80092d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80092d8:	f7f7 fb70 	bl	80009bc <__aeabi_dcmplt>
 80092dc:	2800      	cmp	r0, #0
 80092de:	f040 8127 	bne.w	8009530 <_dtoa_r+0x688>
 80092e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80092e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80092ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f2c0 8163 	blt.w	80095b8 <_dtoa_r+0x710>
 80092f2:	2f0e      	cmp	r7, #14
 80092f4:	f300 8160 	bgt.w	80095b8 <_dtoa_r+0x710>
 80092f8:	4b33      	ldr	r3, [pc, #204]	@ (80093c8 <_dtoa_r+0x520>)
 80092fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009302:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009306:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009308:	2b00      	cmp	r3, #0
 800930a:	da03      	bge.n	8009314 <_dtoa_r+0x46c>
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f340 8100 	ble.w	8009514 <_dtoa_r+0x66c>
 8009314:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009318:	4656      	mov	r6, sl
 800931a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f7 fa03 	bl	800072c <__aeabi_ddiv>
 8009326:	f7f7 fb87 	bl	8000a38 <__aeabi_d2iz>
 800932a:	4680      	mov	r8, r0
 800932c:	f7f7 f86a 	bl	8000404 <__aeabi_i2d>
 8009330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009334:	f7f7 f8d0 	bl	80004d8 <__aeabi_dmul>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7f6 ff12 	bl	8000168 <__aeabi_dsub>
 8009344:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009348:	9d07      	ldr	r5, [sp, #28]
 800934a:	f806 4b01 	strb.w	r4, [r6], #1
 800934e:	eba6 040a 	sub.w	r4, r6, sl
 8009352:	42a5      	cmp	r5, r4
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	f040 8116 	bne.w	8009588 <_dtoa_r+0x6e0>
 800935c:	f7f6 ff06 	bl	800016c <__adddf3>
 8009360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	f7f7 fb46 	bl	80009f8 <__aeabi_dcmpgt>
 800936c:	2800      	cmp	r0, #0
 800936e:	f040 80f8 	bne.w	8009562 <_dtoa_r+0x6ba>
 8009372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	f7f7 fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800937e:	b118      	cbz	r0, 8009388 <_dtoa_r+0x4e0>
 8009380:	f018 0f01 	tst.w	r8, #1
 8009384:	f040 80ed 	bne.w	8009562 <_dtoa_r+0x6ba>
 8009388:	4649      	mov	r1, r9
 800938a:	4658      	mov	r0, fp
 800938c:	f000 fb94 	bl	8009ab8 <_Bfree>
 8009390:	2300      	movs	r3, #0
 8009392:	7033      	strb	r3, [r6, #0]
 8009394:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009396:	3701      	adds	r7, #1
 8009398:	601f      	str	r7, [r3, #0]
 800939a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8320 	beq.w	80099e2 <_dtoa_r+0xb3a>
 80093a2:	601e      	str	r6, [r3, #0]
 80093a4:	e31d      	b.n	80099e2 <_dtoa_r+0xb3a>
 80093a6:	07e2      	lsls	r2, r4, #31
 80093a8:	d505      	bpl.n	80093b6 <_dtoa_r+0x50e>
 80093aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093ae:	f7f7 f893 	bl	80004d8 <__aeabi_dmul>
 80093b2:	2301      	movs	r3, #1
 80093b4:	3601      	adds	r6, #1
 80093b6:	1064      	asrs	r4, r4, #1
 80093b8:	3508      	adds	r5, #8
 80093ba:	e73f      	b.n	800923c <_dtoa_r+0x394>
 80093bc:	2602      	movs	r6, #2
 80093be:	e742      	b.n	8009246 <_dtoa_r+0x39e>
 80093c0:	9c07      	ldr	r4, [sp, #28]
 80093c2:	9704      	str	r7, [sp, #16]
 80093c4:	e761      	b.n	800928a <_dtoa_r+0x3e2>
 80093c6:	bf00      	nop
 80093c8:	0800aed8 	.word	0x0800aed8
 80093cc:	0800aeb0 	.word	0x0800aeb0
 80093d0:	3ff00000 	.word	0x3ff00000
 80093d4:	40240000 	.word	0x40240000
 80093d8:	401c0000 	.word	0x401c0000
 80093dc:	40140000 	.word	0x40140000
 80093e0:	4b70      	ldr	r3, [pc, #448]	@ (80095a4 <_dtoa_r+0x6fc>)
 80093e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093ec:	4454      	add	r4, sl
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d045      	beq.n	800947e <_dtoa_r+0x5d6>
 80093f2:	2000      	movs	r0, #0
 80093f4:	496c      	ldr	r1, [pc, #432]	@ (80095a8 <_dtoa_r+0x700>)
 80093f6:	f7f7 f999 	bl	800072c <__aeabi_ddiv>
 80093fa:	4633      	mov	r3, r6
 80093fc:	462a      	mov	r2, r5
 80093fe:	f7f6 feb3 	bl	8000168 <__aeabi_dsub>
 8009402:	4656      	mov	r6, sl
 8009404:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940c:	f7f7 fb14 	bl	8000a38 <__aeabi_d2iz>
 8009410:	4605      	mov	r5, r0
 8009412:	f7f6 fff7 	bl	8000404 <__aeabi_i2d>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941e:	f7f6 fea3 	bl	8000168 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	3530      	adds	r5, #48	@ 0x30
 8009428:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800942c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009430:	f806 5b01 	strb.w	r5, [r6], #1
 8009434:	f7f7 fac2 	bl	80009bc <__aeabi_dcmplt>
 8009438:	2800      	cmp	r0, #0
 800943a:	d163      	bne.n	8009504 <_dtoa_r+0x65c>
 800943c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009440:	2000      	movs	r0, #0
 8009442:	495a      	ldr	r1, [pc, #360]	@ (80095ac <_dtoa_r+0x704>)
 8009444:	f7f6 fe90 	bl	8000168 <__aeabi_dsub>
 8009448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800944c:	f7f7 fab6 	bl	80009bc <__aeabi_dcmplt>
 8009450:	2800      	cmp	r0, #0
 8009452:	f040 8087 	bne.w	8009564 <_dtoa_r+0x6bc>
 8009456:	42a6      	cmp	r6, r4
 8009458:	f43f af43 	beq.w	80092e2 <_dtoa_r+0x43a>
 800945c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009460:	2200      	movs	r2, #0
 8009462:	4b53      	ldr	r3, [pc, #332]	@ (80095b0 <_dtoa_r+0x708>)
 8009464:	f7f7 f838 	bl	80004d8 <__aeabi_dmul>
 8009468:	2200      	movs	r2, #0
 800946a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800946e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009472:	4b4f      	ldr	r3, [pc, #316]	@ (80095b0 <_dtoa_r+0x708>)
 8009474:	f7f7 f830 	bl	80004d8 <__aeabi_dmul>
 8009478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947c:	e7c4      	b.n	8009408 <_dtoa_r+0x560>
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	f7f7 f829 	bl	80004d8 <__aeabi_dmul>
 8009486:	4656      	mov	r6, sl
 8009488:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800948c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800948e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009492:	f7f7 fad1 	bl	8000a38 <__aeabi_d2iz>
 8009496:	4605      	mov	r5, r0
 8009498:	f7f6 ffb4 	bl	8000404 <__aeabi_i2d>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a4:	f7f6 fe60 	bl	8000168 <__aeabi_dsub>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	3530      	adds	r5, #48	@ 0x30
 80094ae:	f806 5b01 	strb.w	r5, [r6], #1
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	d124      	bne.n	8009508 <_dtoa_r+0x660>
 80094be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80094c2:	4b39      	ldr	r3, [pc, #228]	@ (80095a8 <_dtoa_r+0x700>)
 80094c4:	f7f6 fe52 	bl	800016c <__adddf3>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d0:	f7f7 fa92 	bl	80009f8 <__aeabi_dcmpgt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d145      	bne.n	8009564 <_dtoa_r+0x6bc>
 80094d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80094dc:	2000      	movs	r0, #0
 80094de:	4932      	ldr	r1, [pc, #200]	@ (80095a8 <_dtoa_r+0x700>)
 80094e0:	f7f6 fe42 	bl	8000168 <__aeabi_dsub>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ec:	f7f7 fa66 	bl	80009bc <__aeabi_dcmplt>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f43f aef6 	beq.w	80092e2 <_dtoa_r+0x43a>
 80094f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80094f8:	1e73      	subs	r3, r6, #1
 80094fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009500:	2b30      	cmp	r3, #48	@ 0x30
 8009502:	d0f8      	beq.n	80094f6 <_dtoa_r+0x64e>
 8009504:	9f04      	ldr	r7, [sp, #16]
 8009506:	e73f      	b.n	8009388 <_dtoa_r+0x4e0>
 8009508:	4b29      	ldr	r3, [pc, #164]	@ (80095b0 <_dtoa_r+0x708>)
 800950a:	f7f6 ffe5 	bl	80004d8 <__aeabi_dmul>
 800950e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009512:	e7bc      	b.n	800948e <_dtoa_r+0x5e6>
 8009514:	d10c      	bne.n	8009530 <_dtoa_r+0x688>
 8009516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800951a:	2200      	movs	r2, #0
 800951c:	4b25      	ldr	r3, [pc, #148]	@ (80095b4 <_dtoa_r+0x70c>)
 800951e:	f7f6 ffdb 	bl	80004d8 <__aeabi_dmul>
 8009522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009526:	f7f7 fa5d 	bl	80009e4 <__aeabi_dcmpge>
 800952a:	2800      	cmp	r0, #0
 800952c:	f000 815b 	beq.w	80097e6 <_dtoa_r+0x93e>
 8009530:	2400      	movs	r4, #0
 8009532:	4625      	mov	r5, r4
 8009534:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009536:	4656      	mov	r6, sl
 8009538:	43db      	mvns	r3, r3
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	2700      	movs	r7, #0
 800953e:	4621      	mov	r1, r4
 8009540:	4658      	mov	r0, fp
 8009542:	f000 fab9 	bl	8009ab8 <_Bfree>
 8009546:	2d00      	cmp	r5, #0
 8009548:	d0dc      	beq.n	8009504 <_dtoa_r+0x65c>
 800954a:	b12f      	cbz	r7, 8009558 <_dtoa_r+0x6b0>
 800954c:	42af      	cmp	r7, r5
 800954e:	d003      	beq.n	8009558 <_dtoa_r+0x6b0>
 8009550:	4639      	mov	r1, r7
 8009552:	4658      	mov	r0, fp
 8009554:	f000 fab0 	bl	8009ab8 <_Bfree>
 8009558:	4629      	mov	r1, r5
 800955a:	4658      	mov	r0, fp
 800955c:	f000 faac 	bl	8009ab8 <_Bfree>
 8009560:	e7d0      	b.n	8009504 <_dtoa_r+0x65c>
 8009562:	9704      	str	r7, [sp, #16]
 8009564:	4633      	mov	r3, r6
 8009566:	461e      	mov	r6, r3
 8009568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800956c:	2a39      	cmp	r2, #57	@ 0x39
 800956e:	d107      	bne.n	8009580 <_dtoa_r+0x6d8>
 8009570:	459a      	cmp	sl, r3
 8009572:	d1f8      	bne.n	8009566 <_dtoa_r+0x6be>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	3201      	adds	r2, #1
 8009578:	9204      	str	r2, [sp, #16]
 800957a:	2230      	movs	r2, #48	@ 0x30
 800957c:	f88a 2000 	strb.w	r2, [sl]
 8009580:	781a      	ldrb	r2, [r3, #0]
 8009582:	3201      	adds	r2, #1
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e7bd      	b.n	8009504 <_dtoa_r+0x65c>
 8009588:	2200      	movs	r2, #0
 800958a:	4b09      	ldr	r3, [pc, #36]	@ (80095b0 <_dtoa_r+0x708>)
 800958c:	f7f6 ffa4 	bl	80004d8 <__aeabi_dmul>
 8009590:	2200      	movs	r2, #0
 8009592:	2300      	movs	r3, #0
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
 8009598:	f7f7 fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800959c:	2800      	cmp	r0, #0
 800959e:	f43f aebc 	beq.w	800931a <_dtoa_r+0x472>
 80095a2:	e6f1      	b.n	8009388 <_dtoa_r+0x4e0>
 80095a4:	0800aed8 	.word	0x0800aed8
 80095a8:	3fe00000 	.word	0x3fe00000
 80095ac:	3ff00000 	.word	0x3ff00000
 80095b0:	40240000 	.word	0x40240000
 80095b4:	40140000 	.word	0x40140000
 80095b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095ba:	2a00      	cmp	r2, #0
 80095bc:	f000 80db 	beq.w	8009776 <_dtoa_r+0x8ce>
 80095c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80095c2:	2a01      	cmp	r2, #1
 80095c4:	f300 80bf 	bgt.w	8009746 <_dtoa_r+0x89e>
 80095c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	f000 80b7 	beq.w	800973e <_dtoa_r+0x896>
 80095d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80095d4:	4646      	mov	r6, r8
 80095d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80095d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095da:	2101      	movs	r1, #1
 80095dc:	441a      	add	r2, r3
 80095de:	4658      	mov	r0, fp
 80095e0:	4498      	add	r8, r3
 80095e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80095e4:	f000 fb1c 	bl	8009c20 <__i2b>
 80095e8:	4605      	mov	r5, r0
 80095ea:	b15e      	cbz	r6, 8009604 <_dtoa_r+0x75c>
 80095ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dd08      	ble.n	8009604 <_dtoa_r+0x75c>
 80095f2:	42b3      	cmp	r3, r6
 80095f4:	bfa8      	it	ge
 80095f6:	4633      	movge	r3, r6
 80095f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fa:	eba8 0803 	sub.w	r8, r8, r3
 80095fe:	1af6      	subs	r6, r6, r3
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	9309      	str	r3, [sp, #36]	@ 0x24
 8009604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009606:	b1f3      	cbz	r3, 8009646 <_dtoa_r+0x79e>
 8009608:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80b7 	beq.w	800977e <_dtoa_r+0x8d6>
 8009610:	b18c      	cbz	r4, 8009636 <_dtoa_r+0x78e>
 8009612:	4629      	mov	r1, r5
 8009614:	4622      	mov	r2, r4
 8009616:	4658      	mov	r0, fp
 8009618:	f000 fbc0 	bl	8009d9c <__pow5mult>
 800961c:	464a      	mov	r2, r9
 800961e:	4601      	mov	r1, r0
 8009620:	4605      	mov	r5, r0
 8009622:	4658      	mov	r0, fp
 8009624:	f000 fb12 	bl	8009c4c <__multiply>
 8009628:	4649      	mov	r1, r9
 800962a:	9004      	str	r0, [sp, #16]
 800962c:	4658      	mov	r0, fp
 800962e:	f000 fa43 	bl	8009ab8 <_Bfree>
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	4699      	mov	r9, r3
 8009636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009638:	1b1a      	subs	r2, r3, r4
 800963a:	d004      	beq.n	8009646 <_dtoa_r+0x79e>
 800963c:	4649      	mov	r1, r9
 800963e:	4658      	mov	r0, fp
 8009640:	f000 fbac 	bl	8009d9c <__pow5mult>
 8009644:	4681      	mov	r9, r0
 8009646:	2101      	movs	r1, #1
 8009648:	4658      	mov	r0, fp
 800964a:	f000 fae9 	bl	8009c20 <__i2b>
 800964e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009650:	4604      	mov	r4, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 81c9 	beq.w	80099ea <_dtoa_r+0xb42>
 8009658:	461a      	mov	r2, r3
 800965a:	4601      	mov	r1, r0
 800965c:	4658      	mov	r0, fp
 800965e:	f000 fb9d 	bl	8009d9c <__pow5mult>
 8009662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009664:	4604      	mov	r4, r0
 8009666:	2b01      	cmp	r3, #1
 8009668:	f300 808f 	bgt.w	800978a <_dtoa_r+0x8e2>
 800966c:	9b02      	ldr	r3, [sp, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	f040 8087 	bne.w	8009782 <_dtoa_r+0x8da>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 8083 	bne.w	8009786 <_dtoa_r+0x8de>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009686:	0d1b      	lsrs	r3, r3, #20
 8009688:	051b      	lsls	r3, r3, #20
 800968a:	b12b      	cbz	r3, 8009698 <_dtoa_r+0x7f0>
 800968c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968e:	f108 0801 	add.w	r8, r8, #1
 8009692:	3301      	adds	r3, #1
 8009694:	9309      	str	r3, [sp, #36]	@ 0x24
 8009696:	2301      	movs	r3, #1
 8009698:	930a      	str	r3, [sp, #40]	@ 0x28
 800969a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 81aa 	beq.w	80099f6 <_dtoa_r+0xb4e>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096a8:	6918      	ldr	r0, [r3, #16]
 80096aa:	f000 fa6d 	bl	8009b88 <__hi0bits>
 80096ae:	f1c0 0020 	rsb	r0, r0, #32
 80096b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b4:	4418      	add	r0, r3
 80096b6:	f010 001f 	ands.w	r0, r0, #31
 80096ba:	d071      	beq.n	80097a0 <_dtoa_r+0x8f8>
 80096bc:	f1c0 0320 	rsb	r3, r0, #32
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	dd65      	ble.n	8009790 <_dtoa_r+0x8e8>
 80096c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c6:	f1c0 001c 	rsb	r0, r0, #28
 80096ca:	4403      	add	r3, r0
 80096cc:	4480      	add	r8, r0
 80096ce:	4406      	add	r6, r0
 80096d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	dd05      	ble.n	80096e4 <_dtoa_r+0x83c>
 80096d8:	4649      	mov	r1, r9
 80096da:	4642      	mov	r2, r8
 80096dc:	4658      	mov	r0, fp
 80096de:	f000 fbb7 	bl	8009e50 <__lshift>
 80096e2:	4681      	mov	r9, r0
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	dd05      	ble.n	80096f6 <_dtoa_r+0x84e>
 80096ea:	4621      	mov	r1, r4
 80096ec:	461a      	mov	r2, r3
 80096ee:	4658      	mov	r0, fp
 80096f0:	f000 fbae 	bl	8009e50 <__lshift>
 80096f4:	4604      	mov	r4, r0
 80096f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d053      	beq.n	80097a4 <_dtoa_r+0x8fc>
 80096fc:	4621      	mov	r1, r4
 80096fe:	4648      	mov	r0, r9
 8009700:	f000 fc12 	bl	8009f28 <__mcmp>
 8009704:	2800      	cmp	r0, #0
 8009706:	da4d      	bge.n	80097a4 <_dtoa_r+0x8fc>
 8009708:	1e7b      	subs	r3, r7, #1
 800970a:	4649      	mov	r1, r9
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	220a      	movs	r2, #10
 8009710:	2300      	movs	r3, #0
 8009712:	4658      	mov	r0, fp
 8009714:	f000 f9f2 	bl	8009afc <__multadd>
 8009718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800971a:	4681      	mov	r9, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 816c 	beq.w	80099fa <_dtoa_r+0xb52>
 8009722:	2300      	movs	r3, #0
 8009724:	4629      	mov	r1, r5
 8009726:	220a      	movs	r2, #10
 8009728:	4658      	mov	r0, fp
 800972a:	f000 f9e7 	bl	8009afc <__multadd>
 800972e:	9b08      	ldr	r3, [sp, #32]
 8009730:	4605      	mov	r5, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	dc61      	bgt.n	80097fa <_dtoa_r+0x952>
 8009736:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009738:	2b02      	cmp	r3, #2
 800973a:	dc3b      	bgt.n	80097b4 <_dtoa_r+0x90c>
 800973c:	e05d      	b.n	80097fa <_dtoa_r+0x952>
 800973e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009740:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009744:	e746      	b.n	80095d4 <_dtoa_r+0x72c>
 8009746:	9b07      	ldr	r3, [sp, #28]
 8009748:	1e5c      	subs	r4, r3, #1
 800974a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974c:	42a3      	cmp	r3, r4
 800974e:	bfbf      	itttt	lt
 8009750:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009752:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009754:	1ae3      	sublt	r3, r4, r3
 8009756:	18d2      	addlt	r2, r2, r3
 8009758:	bfa8      	it	ge
 800975a:	1b1c      	subge	r4, r3, r4
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	bfbe      	ittt	lt
 8009760:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009762:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009764:	2400      	movlt	r4, #0
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfb5      	itete	lt
 800976a:	eba8 0603 	sublt.w	r6, r8, r3
 800976e:	4646      	movge	r6, r8
 8009770:	2300      	movlt	r3, #0
 8009772:	9b07      	ldrge	r3, [sp, #28]
 8009774:	e730      	b.n	80095d8 <_dtoa_r+0x730>
 8009776:	4646      	mov	r6, r8
 8009778:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800977a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800977c:	e735      	b.n	80095ea <_dtoa_r+0x742>
 800977e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009780:	e75c      	b.n	800963c <_dtoa_r+0x794>
 8009782:	2300      	movs	r3, #0
 8009784:	e788      	b.n	8009698 <_dtoa_r+0x7f0>
 8009786:	9b02      	ldr	r3, [sp, #8]
 8009788:	e786      	b.n	8009698 <_dtoa_r+0x7f0>
 800978a:	2300      	movs	r3, #0
 800978c:	930a      	str	r3, [sp, #40]	@ 0x28
 800978e:	e788      	b.n	80096a2 <_dtoa_r+0x7fa>
 8009790:	d09f      	beq.n	80096d2 <_dtoa_r+0x82a>
 8009792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009794:	331c      	adds	r3, #28
 8009796:	441a      	add	r2, r3
 8009798:	4498      	add	r8, r3
 800979a:	441e      	add	r6, r3
 800979c:	9209      	str	r2, [sp, #36]	@ 0x24
 800979e:	e798      	b.n	80096d2 <_dtoa_r+0x82a>
 80097a0:	4603      	mov	r3, r0
 80097a2:	e7f6      	b.n	8009792 <_dtoa_r+0x8ea>
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	9704      	str	r7, [sp, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	dc20      	bgt.n	80097ee <_dtoa_r+0x946>
 80097ac:	9308      	str	r3, [sp, #32]
 80097ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	dd1e      	ble.n	80097f2 <_dtoa_r+0x94a>
 80097b4:	9b08      	ldr	r3, [sp, #32]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f47f aebc 	bne.w	8009534 <_dtoa_r+0x68c>
 80097bc:	4621      	mov	r1, r4
 80097be:	2205      	movs	r2, #5
 80097c0:	4658      	mov	r0, fp
 80097c2:	f000 f99b 	bl	8009afc <__multadd>
 80097c6:	4601      	mov	r1, r0
 80097c8:	4604      	mov	r4, r0
 80097ca:	4648      	mov	r0, r9
 80097cc:	f000 fbac 	bl	8009f28 <__mcmp>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f77f aeaf 	ble.w	8009534 <_dtoa_r+0x68c>
 80097d6:	2331      	movs	r3, #49	@ 0x31
 80097d8:	4656      	mov	r6, sl
 80097da:	f806 3b01 	strb.w	r3, [r6], #1
 80097de:	9b04      	ldr	r3, [sp, #16]
 80097e0:	3301      	adds	r3, #1
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	e6aa      	b.n	800953c <_dtoa_r+0x694>
 80097e6:	9c07      	ldr	r4, [sp, #28]
 80097e8:	9704      	str	r7, [sp, #16]
 80097ea:	4625      	mov	r5, r4
 80097ec:	e7f3      	b.n	80097d6 <_dtoa_r+0x92e>
 80097ee:	9b07      	ldr	r3, [sp, #28]
 80097f0:	9308      	str	r3, [sp, #32]
 80097f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 8104 	beq.w	8009a02 <_dtoa_r+0xb5a>
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	dd05      	ble.n	800980a <_dtoa_r+0x962>
 80097fe:	4629      	mov	r1, r5
 8009800:	4632      	mov	r2, r6
 8009802:	4658      	mov	r0, fp
 8009804:	f000 fb24 	bl	8009e50 <__lshift>
 8009808:	4605      	mov	r5, r0
 800980a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800980c:	2b00      	cmp	r3, #0
 800980e:	d05a      	beq.n	80098c6 <_dtoa_r+0xa1e>
 8009810:	4658      	mov	r0, fp
 8009812:	6869      	ldr	r1, [r5, #4]
 8009814:	f000 f910 	bl	8009a38 <_Balloc>
 8009818:	4606      	mov	r6, r0
 800981a:	b928      	cbnz	r0, 8009828 <_dtoa_r+0x980>
 800981c:	4602      	mov	r2, r0
 800981e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009822:	4b83      	ldr	r3, [pc, #524]	@ (8009a30 <_dtoa_r+0xb88>)
 8009824:	f7ff bb54 	b.w	8008ed0 <_dtoa_r+0x28>
 8009828:	692a      	ldr	r2, [r5, #16]
 800982a:	f105 010c 	add.w	r1, r5, #12
 800982e:	3202      	adds	r2, #2
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	300c      	adds	r0, #12
 8009834:	f7ff faa0 	bl	8008d78 <memcpy>
 8009838:	2201      	movs	r2, #1
 800983a:	4631      	mov	r1, r6
 800983c:	4658      	mov	r0, fp
 800983e:	f000 fb07 	bl	8009e50 <__lshift>
 8009842:	462f      	mov	r7, r5
 8009844:	4605      	mov	r5, r0
 8009846:	f10a 0301 	add.w	r3, sl, #1
 800984a:	9307      	str	r3, [sp, #28]
 800984c:	9b08      	ldr	r3, [sp, #32]
 800984e:	4453      	add	r3, sl
 8009850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	930a      	str	r3, [sp, #40]	@ 0x28
 800985a:	9b07      	ldr	r3, [sp, #28]
 800985c:	4621      	mov	r1, r4
 800985e:	3b01      	subs	r3, #1
 8009860:	4648      	mov	r0, r9
 8009862:	9302      	str	r3, [sp, #8]
 8009864:	f7ff fa96 	bl	8008d94 <quorem>
 8009868:	4639      	mov	r1, r7
 800986a:	9008      	str	r0, [sp, #32]
 800986c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009870:	4648      	mov	r0, r9
 8009872:	f000 fb59 	bl	8009f28 <__mcmp>
 8009876:	462a      	mov	r2, r5
 8009878:	9009      	str	r0, [sp, #36]	@ 0x24
 800987a:	4621      	mov	r1, r4
 800987c:	4658      	mov	r0, fp
 800987e:	f000 fb6f 	bl	8009f60 <__mdiff>
 8009882:	68c2      	ldr	r2, [r0, #12]
 8009884:	4606      	mov	r6, r0
 8009886:	bb02      	cbnz	r2, 80098ca <_dtoa_r+0xa22>
 8009888:	4601      	mov	r1, r0
 800988a:	4648      	mov	r0, r9
 800988c:	f000 fb4c 	bl	8009f28 <__mcmp>
 8009890:	4602      	mov	r2, r0
 8009892:	4631      	mov	r1, r6
 8009894:	4658      	mov	r0, fp
 8009896:	920c      	str	r2, [sp, #48]	@ 0x30
 8009898:	f000 f90e 	bl	8009ab8 <_Bfree>
 800989c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800989e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098a0:	9e07      	ldr	r6, [sp, #28]
 80098a2:	ea43 0102 	orr.w	r1, r3, r2
 80098a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098a8:	4319      	orrs	r1, r3
 80098aa:	d110      	bne.n	80098ce <_dtoa_r+0xa26>
 80098ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80098b0:	d029      	beq.n	8009906 <_dtoa_r+0xa5e>
 80098b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dd02      	ble.n	80098be <_dtoa_r+0xa16>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	f883 8000 	strb.w	r8, [r3]
 80098c4:	e63b      	b.n	800953e <_dtoa_r+0x696>
 80098c6:	4628      	mov	r0, r5
 80098c8:	e7bb      	b.n	8009842 <_dtoa_r+0x99a>
 80098ca:	2201      	movs	r2, #1
 80098cc:	e7e1      	b.n	8009892 <_dtoa_r+0x9ea>
 80098ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	db04      	blt.n	80098de <_dtoa_r+0xa36>
 80098d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80098d6:	430b      	orrs	r3, r1
 80098d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80098da:	430b      	orrs	r3, r1
 80098dc:	d120      	bne.n	8009920 <_dtoa_r+0xa78>
 80098de:	2a00      	cmp	r2, #0
 80098e0:	dded      	ble.n	80098be <_dtoa_r+0xa16>
 80098e2:	4649      	mov	r1, r9
 80098e4:	2201      	movs	r2, #1
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 fab2 	bl	8009e50 <__lshift>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4681      	mov	r9, r0
 80098f0:	f000 fb1a 	bl	8009f28 <__mcmp>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	dc03      	bgt.n	8009900 <_dtoa_r+0xa58>
 80098f8:	d1e1      	bne.n	80098be <_dtoa_r+0xa16>
 80098fa:	f018 0f01 	tst.w	r8, #1
 80098fe:	d0de      	beq.n	80098be <_dtoa_r+0xa16>
 8009900:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009904:	d1d8      	bne.n	80098b8 <_dtoa_r+0xa10>
 8009906:	2339      	movs	r3, #57	@ 0x39
 8009908:	9a02      	ldr	r2, [sp, #8]
 800990a:	7013      	strb	r3, [r2, #0]
 800990c:	4633      	mov	r3, r6
 800990e:	461e      	mov	r6, r3
 8009910:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009914:	3b01      	subs	r3, #1
 8009916:	2a39      	cmp	r2, #57	@ 0x39
 8009918:	d052      	beq.n	80099c0 <_dtoa_r+0xb18>
 800991a:	3201      	adds	r2, #1
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e60e      	b.n	800953e <_dtoa_r+0x696>
 8009920:	2a00      	cmp	r2, #0
 8009922:	dd07      	ble.n	8009934 <_dtoa_r+0xa8c>
 8009924:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009928:	d0ed      	beq.n	8009906 <_dtoa_r+0xa5e>
 800992a:	9a02      	ldr	r2, [sp, #8]
 800992c:	f108 0301 	add.w	r3, r8, #1
 8009930:	7013      	strb	r3, [r2, #0]
 8009932:	e604      	b.n	800953e <_dtoa_r+0x696>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	9a07      	ldr	r2, [sp, #28]
 8009938:	f803 8c01 	strb.w	r8, [r3, #-1]
 800993c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800993e:	4293      	cmp	r3, r2
 8009940:	d028      	beq.n	8009994 <_dtoa_r+0xaec>
 8009942:	4649      	mov	r1, r9
 8009944:	2300      	movs	r3, #0
 8009946:	220a      	movs	r2, #10
 8009948:	4658      	mov	r0, fp
 800994a:	f000 f8d7 	bl	8009afc <__multadd>
 800994e:	42af      	cmp	r7, r5
 8009950:	4681      	mov	r9, r0
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	f04f 020a 	mov.w	r2, #10
 800995a:	4639      	mov	r1, r7
 800995c:	4658      	mov	r0, fp
 800995e:	d107      	bne.n	8009970 <_dtoa_r+0xac8>
 8009960:	f000 f8cc 	bl	8009afc <__multadd>
 8009964:	4607      	mov	r7, r0
 8009966:	4605      	mov	r5, r0
 8009968:	9b07      	ldr	r3, [sp, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	9307      	str	r3, [sp, #28]
 800996e:	e774      	b.n	800985a <_dtoa_r+0x9b2>
 8009970:	f000 f8c4 	bl	8009afc <__multadd>
 8009974:	4629      	mov	r1, r5
 8009976:	4607      	mov	r7, r0
 8009978:	2300      	movs	r3, #0
 800997a:	220a      	movs	r2, #10
 800997c:	4658      	mov	r0, fp
 800997e:	f000 f8bd 	bl	8009afc <__multadd>
 8009982:	4605      	mov	r5, r0
 8009984:	e7f0      	b.n	8009968 <_dtoa_r+0xac0>
 8009986:	9b08      	ldr	r3, [sp, #32]
 8009988:	2700      	movs	r7, #0
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfcc      	ite	gt
 800998e:	461e      	movgt	r6, r3
 8009990:	2601      	movle	r6, #1
 8009992:	4456      	add	r6, sl
 8009994:	4649      	mov	r1, r9
 8009996:	2201      	movs	r2, #1
 8009998:	4658      	mov	r0, fp
 800999a:	f000 fa59 	bl	8009e50 <__lshift>
 800999e:	4621      	mov	r1, r4
 80099a0:	4681      	mov	r9, r0
 80099a2:	f000 fac1 	bl	8009f28 <__mcmp>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	dcb0      	bgt.n	800990c <_dtoa_r+0xa64>
 80099aa:	d102      	bne.n	80099b2 <_dtoa_r+0xb0a>
 80099ac:	f018 0f01 	tst.w	r8, #1
 80099b0:	d1ac      	bne.n	800990c <_dtoa_r+0xa64>
 80099b2:	4633      	mov	r3, r6
 80099b4:	461e      	mov	r6, r3
 80099b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099ba:	2a30      	cmp	r2, #48	@ 0x30
 80099bc:	d0fa      	beq.n	80099b4 <_dtoa_r+0xb0c>
 80099be:	e5be      	b.n	800953e <_dtoa_r+0x696>
 80099c0:	459a      	cmp	sl, r3
 80099c2:	d1a4      	bne.n	800990e <_dtoa_r+0xa66>
 80099c4:	9b04      	ldr	r3, [sp, #16]
 80099c6:	3301      	adds	r3, #1
 80099c8:	9304      	str	r3, [sp, #16]
 80099ca:	2331      	movs	r3, #49	@ 0x31
 80099cc:	f88a 3000 	strb.w	r3, [sl]
 80099d0:	e5b5      	b.n	800953e <_dtoa_r+0x696>
 80099d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80099d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009a34 <_dtoa_r+0xb8c>
 80099d8:	b11b      	cbz	r3, 80099e2 <_dtoa_r+0xb3a>
 80099da:	f10a 0308 	add.w	r3, sl, #8
 80099de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	4650      	mov	r0, sl
 80099e4:	b017      	add	sp, #92	@ 0x5c
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	f77f ae3d 	ble.w	800966c <_dtoa_r+0x7c4>
 80099f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80099f6:	2001      	movs	r0, #1
 80099f8:	e65b      	b.n	80096b2 <_dtoa_r+0x80a>
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f77f aed6 	ble.w	80097ae <_dtoa_r+0x906>
 8009a02:	4656      	mov	r6, sl
 8009a04:	4621      	mov	r1, r4
 8009a06:	4648      	mov	r0, r9
 8009a08:	f7ff f9c4 	bl	8008d94 <quorem>
 8009a0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a10:	9b08      	ldr	r3, [sp, #32]
 8009a12:	f806 8b01 	strb.w	r8, [r6], #1
 8009a16:	eba6 020a 	sub.w	r2, r6, sl
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	ddb3      	ble.n	8009986 <_dtoa_r+0xade>
 8009a1e:	4649      	mov	r1, r9
 8009a20:	2300      	movs	r3, #0
 8009a22:	220a      	movs	r2, #10
 8009a24:	4658      	mov	r0, fp
 8009a26:	f000 f869 	bl	8009afc <__multadd>
 8009a2a:	4681      	mov	r9, r0
 8009a2c:	e7ea      	b.n	8009a04 <_dtoa_r+0xb5c>
 8009a2e:	bf00      	nop
 8009a30:	0800ae36 	.word	0x0800ae36
 8009a34:	0800adba 	.word	0x0800adba

08009a38 <_Balloc>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	69c6      	ldr	r6, [r0, #28]
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	b976      	cbnz	r6, 8009a60 <_Balloc+0x28>
 8009a42:	2010      	movs	r0, #16
 8009a44:	f7fe f958 	bl	8007cf8 <malloc>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	61e0      	str	r0, [r4, #28]
 8009a4c:	b920      	cbnz	r0, 8009a58 <_Balloc+0x20>
 8009a4e:	216b      	movs	r1, #107	@ 0x6b
 8009a50:	4b17      	ldr	r3, [pc, #92]	@ (8009ab0 <_Balloc+0x78>)
 8009a52:	4818      	ldr	r0, [pc, #96]	@ (8009ab4 <_Balloc+0x7c>)
 8009a54:	f000 ff4e 	bl	800a8f4 <__assert_func>
 8009a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a5c:	6006      	str	r6, [r0, #0]
 8009a5e:	60c6      	str	r6, [r0, #12]
 8009a60:	69e6      	ldr	r6, [r4, #28]
 8009a62:	68f3      	ldr	r3, [r6, #12]
 8009a64:	b183      	cbz	r3, 8009a88 <_Balloc+0x50>
 8009a66:	69e3      	ldr	r3, [r4, #28]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a6e:	b9b8      	cbnz	r0, 8009aa0 <_Balloc+0x68>
 8009a70:	2101      	movs	r1, #1
 8009a72:	fa01 f605 	lsl.w	r6, r1, r5
 8009a76:	1d72      	adds	r2, r6, #5
 8009a78:	4620      	mov	r0, r4
 8009a7a:	0092      	lsls	r2, r2, #2
 8009a7c:	f000 ff58 	bl	800a930 <_calloc_r>
 8009a80:	b160      	cbz	r0, 8009a9c <_Balloc+0x64>
 8009a82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a86:	e00e      	b.n	8009aa6 <_Balloc+0x6e>
 8009a88:	2221      	movs	r2, #33	@ 0x21
 8009a8a:	2104      	movs	r1, #4
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 ff4f 	bl	800a930 <_calloc_r>
 8009a92:	69e3      	ldr	r3, [r4, #28]
 8009a94:	60f0      	str	r0, [r6, #12]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e4      	bne.n	8009a66 <_Balloc+0x2e>
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	6802      	ldr	r2, [r0, #0]
 8009aa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aac:	e7f7      	b.n	8009a9e <_Balloc+0x66>
 8009aae:	bf00      	nop
 8009ab0:	0800adc7 	.word	0x0800adc7
 8009ab4:	0800ae47 	.word	0x0800ae47

08009ab8 <_Bfree>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	69c6      	ldr	r6, [r0, #28]
 8009abc:	4605      	mov	r5, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	b976      	cbnz	r6, 8009ae0 <_Bfree+0x28>
 8009ac2:	2010      	movs	r0, #16
 8009ac4:	f7fe f918 	bl	8007cf8 <malloc>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	61e8      	str	r0, [r5, #28]
 8009acc:	b920      	cbnz	r0, 8009ad8 <_Bfree+0x20>
 8009ace:	218f      	movs	r1, #143	@ 0x8f
 8009ad0:	4b08      	ldr	r3, [pc, #32]	@ (8009af4 <_Bfree+0x3c>)
 8009ad2:	4809      	ldr	r0, [pc, #36]	@ (8009af8 <_Bfree+0x40>)
 8009ad4:	f000 ff0e 	bl	800a8f4 <__assert_func>
 8009ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009adc:	6006      	str	r6, [r0, #0]
 8009ade:	60c6      	str	r6, [r0, #12]
 8009ae0:	b13c      	cbz	r4, 8009af2 <_Bfree+0x3a>
 8009ae2:	69eb      	ldr	r3, [r5, #28]
 8009ae4:	6862      	ldr	r2, [r4, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aec:	6021      	str	r1, [r4, #0]
 8009aee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	0800adc7 	.word	0x0800adc7
 8009af8:	0800ae47 	.word	0x0800ae47

08009afc <__multadd>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	4607      	mov	r7, r0
 8009b02:	460c      	mov	r4, r1
 8009b04:	461e      	mov	r6, r3
 8009b06:	2000      	movs	r0, #0
 8009b08:	690d      	ldr	r5, [r1, #16]
 8009b0a:	f101 0c14 	add.w	ip, r1, #20
 8009b0e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b12:	3001      	adds	r0, #1
 8009b14:	b299      	uxth	r1, r3
 8009b16:	fb02 6101 	mla	r1, r2, r1, r6
 8009b1a:	0c1e      	lsrs	r6, r3, #16
 8009b1c:	0c0b      	lsrs	r3, r1, #16
 8009b1e:	fb02 3306 	mla	r3, r2, r6, r3
 8009b22:	b289      	uxth	r1, r1
 8009b24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b28:	4285      	cmp	r5, r0
 8009b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2e:	f84c 1b04 	str.w	r1, [ip], #4
 8009b32:	dcec      	bgt.n	8009b0e <__multadd+0x12>
 8009b34:	b30e      	cbz	r6, 8009b7a <__multadd+0x7e>
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	dc19      	bgt.n	8009b70 <__multadd+0x74>
 8009b3c:	6861      	ldr	r1, [r4, #4]
 8009b3e:	4638      	mov	r0, r7
 8009b40:	3101      	adds	r1, #1
 8009b42:	f7ff ff79 	bl	8009a38 <_Balloc>
 8009b46:	4680      	mov	r8, r0
 8009b48:	b928      	cbnz	r0, 8009b56 <__multadd+0x5a>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	21ba      	movs	r1, #186	@ 0xba
 8009b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b80 <__multadd+0x84>)
 8009b50:	480c      	ldr	r0, [pc, #48]	@ (8009b84 <__multadd+0x88>)
 8009b52:	f000 fecf 	bl	800a8f4 <__assert_func>
 8009b56:	6922      	ldr	r2, [r4, #16]
 8009b58:	f104 010c 	add.w	r1, r4, #12
 8009b5c:	3202      	adds	r2, #2
 8009b5e:	0092      	lsls	r2, r2, #2
 8009b60:	300c      	adds	r0, #12
 8009b62:	f7ff f909 	bl	8008d78 <memcpy>
 8009b66:	4621      	mov	r1, r4
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f7ff ffa5 	bl	8009ab8 <_Bfree>
 8009b6e:	4644      	mov	r4, r8
 8009b70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b74:	3501      	adds	r5, #1
 8009b76:	615e      	str	r6, [r3, #20]
 8009b78:	6125      	str	r5, [r4, #16]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b80:	0800ae36 	.word	0x0800ae36
 8009b84:	0800ae47 	.word	0x0800ae47

08009b88 <__hi0bits>:
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b8e:	bf3a      	itte	cc
 8009b90:	0403      	lslcc	r3, r0, #16
 8009b92:	2010      	movcc	r0, #16
 8009b94:	2000      	movcs	r0, #0
 8009b96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b9a:	bf3c      	itt	cc
 8009b9c:	021b      	lslcc	r3, r3, #8
 8009b9e:	3008      	addcc	r0, #8
 8009ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba4:	bf3c      	itt	cc
 8009ba6:	011b      	lslcc	r3, r3, #4
 8009ba8:	3004      	addcc	r0, #4
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bae:	bf3c      	itt	cc
 8009bb0:	009b      	lslcc	r3, r3, #2
 8009bb2:	3002      	addcc	r0, #2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	db05      	blt.n	8009bc4 <__hi0bits+0x3c>
 8009bb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bbc:	f100 0001 	add.w	r0, r0, #1
 8009bc0:	bf08      	it	eq
 8009bc2:	2020      	moveq	r0, #32
 8009bc4:	4770      	bx	lr

08009bc6 <__lo0bits>:
 8009bc6:	6803      	ldr	r3, [r0, #0]
 8009bc8:	4602      	mov	r2, r0
 8009bca:	f013 0007 	ands.w	r0, r3, #7
 8009bce:	d00b      	beq.n	8009be8 <__lo0bits+0x22>
 8009bd0:	07d9      	lsls	r1, r3, #31
 8009bd2:	d421      	bmi.n	8009c18 <__lo0bits+0x52>
 8009bd4:	0798      	lsls	r0, r3, #30
 8009bd6:	bf49      	itett	mi
 8009bd8:	085b      	lsrmi	r3, r3, #1
 8009bda:	089b      	lsrpl	r3, r3, #2
 8009bdc:	2001      	movmi	r0, #1
 8009bde:	6013      	strmi	r3, [r2, #0]
 8009be0:	bf5c      	itt	pl
 8009be2:	2002      	movpl	r0, #2
 8009be4:	6013      	strpl	r3, [r2, #0]
 8009be6:	4770      	bx	lr
 8009be8:	b299      	uxth	r1, r3
 8009bea:	b909      	cbnz	r1, 8009bf0 <__lo0bits+0x2a>
 8009bec:	2010      	movs	r0, #16
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	b2d9      	uxtb	r1, r3
 8009bf2:	b909      	cbnz	r1, 8009bf8 <__lo0bits+0x32>
 8009bf4:	3008      	adds	r0, #8
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	0719      	lsls	r1, r3, #28
 8009bfa:	bf04      	itt	eq
 8009bfc:	091b      	lsreq	r3, r3, #4
 8009bfe:	3004      	addeq	r0, #4
 8009c00:	0799      	lsls	r1, r3, #30
 8009c02:	bf04      	itt	eq
 8009c04:	089b      	lsreq	r3, r3, #2
 8009c06:	3002      	addeq	r0, #2
 8009c08:	07d9      	lsls	r1, r3, #31
 8009c0a:	d403      	bmi.n	8009c14 <__lo0bits+0x4e>
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	f100 0001 	add.w	r0, r0, #1
 8009c12:	d003      	beq.n	8009c1c <__lo0bits+0x56>
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	4770      	bx	lr
 8009c18:	2000      	movs	r0, #0
 8009c1a:	4770      	bx	lr
 8009c1c:	2020      	movs	r0, #32
 8009c1e:	4770      	bx	lr

08009c20 <__i2b>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	460c      	mov	r4, r1
 8009c24:	2101      	movs	r1, #1
 8009c26:	f7ff ff07 	bl	8009a38 <_Balloc>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	b928      	cbnz	r0, 8009c3a <__i2b+0x1a>
 8009c2e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c32:	4b04      	ldr	r3, [pc, #16]	@ (8009c44 <__i2b+0x24>)
 8009c34:	4804      	ldr	r0, [pc, #16]	@ (8009c48 <__i2b+0x28>)
 8009c36:	f000 fe5d 	bl	800a8f4 <__assert_func>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	6144      	str	r4, [r0, #20]
 8009c3e:	6103      	str	r3, [r0, #16]
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	bf00      	nop
 8009c44:	0800ae36 	.word	0x0800ae36
 8009c48:	0800ae47 	.word	0x0800ae47

08009c4c <__multiply>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4614      	mov	r4, r2
 8009c52:	690a      	ldr	r2, [r1, #16]
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	460f      	mov	r7, r1
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	bfa2      	ittt	ge
 8009c5c:	4623      	movge	r3, r4
 8009c5e:	460c      	movge	r4, r1
 8009c60:	461f      	movge	r7, r3
 8009c62:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c66:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	6861      	ldr	r1, [r4, #4]
 8009c6e:	eb0a 0609 	add.w	r6, sl, r9
 8009c72:	42b3      	cmp	r3, r6
 8009c74:	b085      	sub	sp, #20
 8009c76:	bfb8      	it	lt
 8009c78:	3101      	addlt	r1, #1
 8009c7a:	f7ff fedd 	bl	8009a38 <_Balloc>
 8009c7e:	b930      	cbnz	r0, 8009c8e <__multiply+0x42>
 8009c80:	4602      	mov	r2, r0
 8009c82:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c86:	4b43      	ldr	r3, [pc, #268]	@ (8009d94 <__multiply+0x148>)
 8009c88:	4843      	ldr	r0, [pc, #268]	@ (8009d98 <__multiply+0x14c>)
 8009c8a:	f000 fe33 	bl	800a8f4 <__assert_func>
 8009c8e:	f100 0514 	add.w	r5, r0, #20
 8009c92:	462b      	mov	r3, r5
 8009c94:	2200      	movs	r2, #0
 8009c96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c9a:	4543      	cmp	r3, r8
 8009c9c:	d321      	bcc.n	8009ce2 <__multiply+0x96>
 8009c9e:	f107 0114 	add.w	r1, r7, #20
 8009ca2:	f104 0214 	add.w	r2, r4, #20
 8009ca6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009caa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009cae:	9302      	str	r3, [sp, #8]
 8009cb0:	1b13      	subs	r3, r2, r4
 8009cb2:	3b15      	subs	r3, #21
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	3304      	adds	r3, #4
 8009cba:	f104 0715 	add.w	r7, r4, #21
 8009cbe:	42ba      	cmp	r2, r7
 8009cc0:	bf38      	it	cc
 8009cc2:	2304      	movcc	r3, #4
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	9b02      	ldr	r3, [sp, #8]
 8009cc8:	9103      	str	r1, [sp, #12]
 8009cca:	428b      	cmp	r3, r1
 8009ccc:	d80c      	bhi.n	8009ce8 <__multiply+0x9c>
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	dd03      	ble.n	8009cda <__multiply+0x8e>
 8009cd2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d05a      	beq.n	8009d90 <__multiply+0x144>
 8009cda:	6106      	str	r6, [r0, #16]
 8009cdc:	b005      	add	sp, #20
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	f843 2b04 	str.w	r2, [r3], #4
 8009ce6:	e7d8      	b.n	8009c9a <__multiply+0x4e>
 8009ce8:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cec:	f1ba 0f00 	cmp.w	sl, #0
 8009cf0:	d023      	beq.n	8009d3a <__multiply+0xee>
 8009cf2:	46a9      	mov	r9, r5
 8009cf4:	f04f 0c00 	mov.w	ip, #0
 8009cf8:	f104 0e14 	add.w	lr, r4, #20
 8009cfc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d00:	f8d9 3000 	ldr.w	r3, [r9]
 8009d04:	fa1f fb87 	uxth.w	fp, r7
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d0e:	4463      	add	r3, ip
 8009d10:	f8d9 c000 	ldr.w	ip, [r9]
 8009d14:	0c3f      	lsrs	r7, r7, #16
 8009d16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d1a:	fb0a c707 	mla	r7, sl, r7, ip
 8009d1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d28:	4572      	cmp	r2, lr
 8009d2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d2e:	f849 3b04 	str.w	r3, [r9], #4
 8009d32:	d8e3      	bhi.n	8009cfc <__multiply+0xb0>
 8009d34:	9b01      	ldr	r3, [sp, #4]
 8009d36:	f845 c003 	str.w	ip, [r5, r3]
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	3104      	adds	r1, #4
 8009d3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d42:	f1b9 0f00 	cmp.w	r9, #0
 8009d46:	d021      	beq.n	8009d8c <__multiply+0x140>
 8009d48:	46ae      	mov	lr, r5
 8009d4a:	f04f 0a00 	mov.w	sl, #0
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	f104 0c14 	add.w	ip, r4, #20
 8009d54:	f8bc b000 	ldrh.w	fp, [ip]
 8009d58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	fb09 770b 	mla	r7, r9, fp, r7
 8009d62:	4457      	add	r7, sl
 8009d64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d68:	f84e 3b04 	str.w	r3, [lr], #4
 8009d6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d74:	f8be 3000 	ldrh.w	r3, [lr]
 8009d78:	4562      	cmp	r2, ip
 8009d7a:	fb09 330a 	mla	r3, r9, sl, r3
 8009d7e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d86:	d8e5      	bhi.n	8009d54 <__multiply+0x108>
 8009d88:	9f01      	ldr	r7, [sp, #4]
 8009d8a:	51eb      	str	r3, [r5, r7]
 8009d8c:	3504      	adds	r5, #4
 8009d8e:	e79a      	b.n	8009cc6 <__multiply+0x7a>
 8009d90:	3e01      	subs	r6, #1
 8009d92:	e79c      	b.n	8009cce <__multiply+0x82>
 8009d94:	0800ae36 	.word	0x0800ae36
 8009d98:	0800ae47 	.word	0x0800ae47

08009d9c <__pow5mult>:
 8009d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	4615      	mov	r5, r2
 8009da2:	f012 0203 	ands.w	r2, r2, #3
 8009da6:	4607      	mov	r7, r0
 8009da8:	460e      	mov	r6, r1
 8009daa:	d007      	beq.n	8009dbc <__pow5mult+0x20>
 8009dac:	4c25      	ldr	r4, [pc, #148]	@ (8009e44 <__pow5mult+0xa8>)
 8009dae:	3a01      	subs	r2, #1
 8009db0:	2300      	movs	r3, #0
 8009db2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009db6:	f7ff fea1 	bl	8009afc <__multadd>
 8009dba:	4606      	mov	r6, r0
 8009dbc:	10ad      	asrs	r5, r5, #2
 8009dbe:	d03d      	beq.n	8009e3c <__pow5mult+0xa0>
 8009dc0:	69fc      	ldr	r4, [r7, #28]
 8009dc2:	b97c      	cbnz	r4, 8009de4 <__pow5mult+0x48>
 8009dc4:	2010      	movs	r0, #16
 8009dc6:	f7fd ff97 	bl	8007cf8 <malloc>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	61f8      	str	r0, [r7, #28]
 8009dce:	b928      	cbnz	r0, 8009ddc <__pow5mult+0x40>
 8009dd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e48 <__pow5mult+0xac>)
 8009dd6:	481d      	ldr	r0, [pc, #116]	@ (8009e4c <__pow5mult+0xb0>)
 8009dd8:	f000 fd8c 	bl	800a8f4 <__assert_func>
 8009ddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009de0:	6004      	str	r4, [r0, #0]
 8009de2:	60c4      	str	r4, [r0, #12]
 8009de4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009de8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dec:	b94c      	cbnz	r4, 8009e02 <__pow5mult+0x66>
 8009dee:	f240 2171 	movw	r1, #625	@ 0x271
 8009df2:	4638      	mov	r0, r7
 8009df4:	f7ff ff14 	bl	8009c20 <__i2b>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	f04f 0900 	mov.w	r9, #0
 8009e06:	07eb      	lsls	r3, r5, #31
 8009e08:	d50a      	bpl.n	8009e20 <__pow5mult+0x84>
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	4638      	mov	r0, r7
 8009e10:	f7ff ff1c 	bl	8009c4c <__multiply>
 8009e14:	4680      	mov	r8, r0
 8009e16:	4631      	mov	r1, r6
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff fe4d 	bl	8009ab8 <_Bfree>
 8009e1e:	4646      	mov	r6, r8
 8009e20:	106d      	asrs	r5, r5, #1
 8009e22:	d00b      	beq.n	8009e3c <__pow5mult+0xa0>
 8009e24:	6820      	ldr	r0, [r4, #0]
 8009e26:	b938      	cbnz	r0, 8009e38 <__pow5mult+0x9c>
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4621      	mov	r1, r4
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	f7ff ff0d 	bl	8009c4c <__multiply>
 8009e32:	6020      	str	r0, [r4, #0]
 8009e34:	f8c0 9000 	str.w	r9, [r0]
 8009e38:	4604      	mov	r4, r0
 8009e3a:	e7e4      	b.n	8009e06 <__pow5mult+0x6a>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e42:	bf00      	nop
 8009e44:	0800aea0 	.word	0x0800aea0
 8009e48:	0800adc7 	.word	0x0800adc7
 8009e4c:	0800ae47 	.word	0x0800ae47

08009e50 <__lshift>:
 8009e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e54:	460c      	mov	r4, r1
 8009e56:	4607      	mov	r7, r0
 8009e58:	4691      	mov	r9, r2
 8009e5a:	6923      	ldr	r3, [r4, #16]
 8009e5c:	6849      	ldr	r1, [r1, #4]
 8009e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e68:	f108 0601 	add.w	r6, r8, #1
 8009e6c:	42b3      	cmp	r3, r6
 8009e6e:	db0b      	blt.n	8009e88 <__lshift+0x38>
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff fde1 	bl	8009a38 <_Balloc>
 8009e76:	4605      	mov	r5, r0
 8009e78:	b948      	cbnz	r0, 8009e8e <__lshift+0x3e>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e80:	4b27      	ldr	r3, [pc, #156]	@ (8009f20 <__lshift+0xd0>)
 8009e82:	4828      	ldr	r0, [pc, #160]	@ (8009f24 <__lshift+0xd4>)
 8009e84:	f000 fd36 	bl	800a8f4 <__assert_func>
 8009e88:	3101      	adds	r1, #1
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	e7ee      	b.n	8009e6c <__lshift+0x1c>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f100 0114 	add.w	r1, r0, #20
 8009e94:	f100 0210 	add.w	r2, r0, #16
 8009e98:	4618      	mov	r0, r3
 8009e9a:	4553      	cmp	r3, sl
 8009e9c:	db33      	blt.n	8009f06 <__lshift+0xb6>
 8009e9e:	6920      	ldr	r0, [r4, #16]
 8009ea0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ea4:	f104 0314 	add.w	r3, r4, #20
 8009ea8:	f019 091f 	ands.w	r9, r9, #31
 8009eac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009eb4:	d02b      	beq.n	8009f0e <__lshift+0xbe>
 8009eb6:	468a      	mov	sl, r1
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f1c9 0e20 	rsb	lr, r9, #32
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ec4:	4310      	orrs	r0, r2
 8009ec6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ece:	459c      	cmp	ip, r3
 8009ed0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ed4:	d8f3      	bhi.n	8009ebe <__lshift+0x6e>
 8009ed6:	ebac 0304 	sub.w	r3, ip, r4
 8009eda:	3b15      	subs	r3, #21
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	f104 0015 	add.w	r0, r4, #21
 8009ee6:	4584      	cmp	ip, r0
 8009ee8:	bf38      	it	cc
 8009eea:	2304      	movcc	r3, #4
 8009eec:	50ca      	str	r2, [r1, r3]
 8009eee:	b10a      	cbz	r2, 8009ef4 <__lshift+0xa4>
 8009ef0:	f108 0602 	add.w	r6, r8, #2
 8009ef4:	3e01      	subs	r6, #1
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	4621      	mov	r1, r4
 8009efa:	612e      	str	r6, [r5, #16]
 8009efc:	f7ff fddc 	bl	8009ab8 <_Bfree>
 8009f00:	4628      	mov	r0, r5
 8009f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f06:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	e7c5      	b.n	8009e9a <__lshift+0x4a>
 8009f0e:	3904      	subs	r1, #4
 8009f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f14:	459c      	cmp	ip, r3
 8009f16:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f1a:	d8f9      	bhi.n	8009f10 <__lshift+0xc0>
 8009f1c:	e7ea      	b.n	8009ef4 <__lshift+0xa4>
 8009f1e:	bf00      	nop
 8009f20:	0800ae36 	.word	0x0800ae36
 8009f24:	0800ae47 	.word	0x0800ae47

08009f28 <__mcmp>:
 8009f28:	4603      	mov	r3, r0
 8009f2a:	690a      	ldr	r2, [r1, #16]
 8009f2c:	6900      	ldr	r0, [r0, #16]
 8009f2e:	b530      	push	{r4, r5, lr}
 8009f30:	1a80      	subs	r0, r0, r2
 8009f32:	d10e      	bne.n	8009f52 <__mcmp+0x2a>
 8009f34:	3314      	adds	r3, #20
 8009f36:	3114      	adds	r1, #20
 8009f38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f48:	4295      	cmp	r5, r2
 8009f4a:	d003      	beq.n	8009f54 <__mcmp+0x2c>
 8009f4c:	d205      	bcs.n	8009f5a <__mcmp+0x32>
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f52:	bd30      	pop	{r4, r5, pc}
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d3f3      	bcc.n	8009f40 <__mcmp+0x18>
 8009f58:	e7fb      	b.n	8009f52 <__mcmp+0x2a>
 8009f5a:	2001      	movs	r0, #1
 8009f5c:	e7f9      	b.n	8009f52 <__mcmp+0x2a>
	...

08009f60 <__mdiff>:
 8009f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	4689      	mov	r9, r1
 8009f66:	4606      	mov	r6, r0
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4648      	mov	r0, r9
 8009f6c:	4614      	mov	r4, r2
 8009f6e:	f7ff ffdb 	bl	8009f28 <__mcmp>
 8009f72:	1e05      	subs	r5, r0, #0
 8009f74:	d112      	bne.n	8009f9c <__mdiff+0x3c>
 8009f76:	4629      	mov	r1, r5
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff fd5d 	bl	8009a38 <_Balloc>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__mdiff+0x2e>
 8009f82:	f240 2137 	movw	r1, #567	@ 0x237
 8009f86:	4b3e      	ldr	r3, [pc, #248]	@ (800a080 <__mdiff+0x120>)
 8009f88:	483e      	ldr	r0, [pc, #248]	@ (800a084 <__mdiff+0x124>)
 8009f8a:	f000 fcb3 	bl	800a8f4 <__assert_func>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f94:	4610      	mov	r0, r2
 8009f96:	b003      	add	sp, #12
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	bfbc      	itt	lt
 8009f9e:	464b      	movlt	r3, r9
 8009fa0:	46a1      	movlt	r9, r4
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fa8:	bfba      	itte	lt
 8009faa:	461c      	movlt	r4, r3
 8009fac:	2501      	movlt	r5, #1
 8009fae:	2500      	movge	r5, #0
 8009fb0:	f7ff fd42 	bl	8009a38 <_Balloc>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	b918      	cbnz	r0, 8009fc0 <__mdiff+0x60>
 8009fb8:	f240 2145 	movw	r1, #581	@ 0x245
 8009fbc:	4b30      	ldr	r3, [pc, #192]	@ (800a080 <__mdiff+0x120>)
 8009fbe:	e7e3      	b.n	8009f88 <__mdiff+0x28>
 8009fc0:	f100 0b14 	add.w	fp, r0, #20
 8009fc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fc8:	f109 0310 	add.w	r3, r9, #16
 8009fcc:	60c5      	str	r5, [r0, #12]
 8009fce:	f04f 0c00 	mov.w	ip, #0
 8009fd2:	f109 0514 	add.w	r5, r9, #20
 8009fd6:	46d9      	mov	r9, fp
 8009fd8:	6926      	ldr	r6, [r4, #16]
 8009fda:	f104 0e14 	add.w	lr, r4, #20
 8009fde:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fe2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ff2:	b281      	uxth	r1, r0
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	fa1f f38a 	uxth.w	r3, sl
 8009ffa:	1a5b      	subs	r3, r3, r1
 8009ffc:	0c00      	lsrs	r0, r0, #16
 8009ffe:	4463      	add	r3, ip
 800a000:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a004:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a008:	b29b      	uxth	r3, r3
 800a00a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a00e:	4576      	cmp	r6, lr
 800a010:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a014:	f849 3b04 	str.w	r3, [r9], #4
 800a018:	d8e6      	bhi.n	8009fe8 <__mdiff+0x88>
 800a01a:	1b33      	subs	r3, r6, r4
 800a01c:	3b15      	subs	r3, #21
 800a01e:	f023 0303 	bic.w	r3, r3, #3
 800a022:	3415      	adds	r4, #21
 800a024:	3304      	adds	r3, #4
 800a026:	42a6      	cmp	r6, r4
 800a028:	bf38      	it	cc
 800a02a:	2304      	movcc	r3, #4
 800a02c:	441d      	add	r5, r3
 800a02e:	445b      	add	r3, fp
 800a030:	461e      	mov	r6, r3
 800a032:	462c      	mov	r4, r5
 800a034:	4544      	cmp	r4, r8
 800a036:	d30e      	bcc.n	800a056 <__mdiff+0xf6>
 800a038:	f108 0103 	add.w	r1, r8, #3
 800a03c:	1b49      	subs	r1, r1, r5
 800a03e:	f021 0103 	bic.w	r1, r1, #3
 800a042:	3d03      	subs	r5, #3
 800a044:	45a8      	cmp	r8, r5
 800a046:	bf38      	it	cc
 800a048:	2100      	movcc	r1, #0
 800a04a:	440b      	add	r3, r1
 800a04c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a050:	b199      	cbz	r1, 800a07a <__mdiff+0x11a>
 800a052:	6117      	str	r7, [r2, #16]
 800a054:	e79e      	b.n	8009f94 <__mdiff+0x34>
 800a056:	46e6      	mov	lr, ip
 800a058:	f854 1b04 	ldr.w	r1, [r4], #4
 800a05c:	fa1f fc81 	uxth.w	ip, r1
 800a060:	44f4      	add	ip, lr
 800a062:	0c08      	lsrs	r0, r1, #16
 800a064:	4471      	add	r1, lr
 800a066:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a06a:	b289      	uxth	r1, r1
 800a06c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a074:	f846 1b04 	str.w	r1, [r6], #4
 800a078:	e7dc      	b.n	800a034 <__mdiff+0xd4>
 800a07a:	3f01      	subs	r7, #1
 800a07c:	e7e6      	b.n	800a04c <__mdiff+0xec>
 800a07e:	bf00      	nop
 800a080:	0800ae36 	.word	0x0800ae36
 800a084:	0800ae47 	.word	0x0800ae47

0800a088 <__d2b>:
 800a088:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a08c:	2101      	movs	r1, #1
 800a08e:	4690      	mov	r8, r2
 800a090:	4699      	mov	r9, r3
 800a092:	9e08      	ldr	r6, [sp, #32]
 800a094:	f7ff fcd0 	bl	8009a38 <_Balloc>
 800a098:	4604      	mov	r4, r0
 800a09a:	b930      	cbnz	r0, 800a0aa <__d2b+0x22>
 800a09c:	4602      	mov	r2, r0
 800a09e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a0a2:	4b23      	ldr	r3, [pc, #140]	@ (800a130 <__d2b+0xa8>)
 800a0a4:	4823      	ldr	r0, [pc, #140]	@ (800a134 <__d2b+0xac>)
 800a0a6:	f000 fc25 	bl	800a8f4 <__assert_func>
 800a0aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0b2:	b10d      	cbz	r5, 800a0b8 <__d2b+0x30>
 800a0b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	f1b8 0300 	subs.w	r3, r8, #0
 800a0be:	d024      	beq.n	800a10a <__d2b+0x82>
 800a0c0:	4668      	mov	r0, sp
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	f7ff fd7f 	bl	8009bc6 <__lo0bits>
 800a0c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0cc:	b1d8      	cbz	r0, 800a106 <__d2b+0x7e>
 800a0ce:	f1c0 0320 	rsb	r3, r0, #32
 800a0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	40c2      	lsrs	r2, r0
 800a0da:	6163      	str	r3, [r4, #20]
 800a0dc:	9201      	str	r2, [sp, #4]
 800a0de:	9b01      	ldr	r3, [sp, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bf0c      	ite	eq
 800a0e4:	2201      	moveq	r2, #1
 800a0e6:	2202      	movne	r2, #2
 800a0e8:	61a3      	str	r3, [r4, #24]
 800a0ea:	6122      	str	r2, [r4, #16]
 800a0ec:	b1ad      	cbz	r5, 800a11a <__d2b+0x92>
 800a0ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0f2:	4405      	add	r5, r0
 800a0f4:	6035      	str	r5, [r6, #0]
 800a0f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0fc:	6018      	str	r0, [r3, #0]
 800a0fe:	4620      	mov	r0, r4
 800a100:	b002      	add	sp, #8
 800a102:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a106:	6161      	str	r1, [r4, #20]
 800a108:	e7e9      	b.n	800a0de <__d2b+0x56>
 800a10a:	a801      	add	r0, sp, #4
 800a10c:	f7ff fd5b 	bl	8009bc6 <__lo0bits>
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	6163      	str	r3, [r4, #20]
 800a116:	3020      	adds	r0, #32
 800a118:	e7e7      	b.n	800a0ea <__d2b+0x62>
 800a11a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a11e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a122:	6030      	str	r0, [r6, #0]
 800a124:	6918      	ldr	r0, [r3, #16]
 800a126:	f7ff fd2f 	bl	8009b88 <__hi0bits>
 800a12a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a12e:	e7e4      	b.n	800a0fa <__d2b+0x72>
 800a130:	0800ae36 	.word	0x0800ae36
 800a134:	0800ae47 	.word	0x0800ae47

0800a138 <__ssputs_r>:
 800a138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a13c:	461f      	mov	r7, r3
 800a13e:	688e      	ldr	r6, [r1, #8]
 800a140:	4682      	mov	sl, r0
 800a142:	42be      	cmp	r6, r7
 800a144:	460c      	mov	r4, r1
 800a146:	4690      	mov	r8, r2
 800a148:	680b      	ldr	r3, [r1, #0]
 800a14a:	d82d      	bhi.n	800a1a8 <__ssputs_r+0x70>
 800a14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a154:	d026      	beq.n	800a1a4 <__ssputs_r+0x6c>
 800a156:	6965      	ldr	r5, [r4, #20]
 800a158:	6909      	ldr	r1, [r1, #16]
 800a15a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a15e:	eba3 0901 	sub.w	r9, r3, r1
 800a162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a166:	1c7b      	adds	r3, r7, #1
 800a168:	444b      	add	r3, r9
 800a16a:	106d      	asrs	r5, r5, #1
 800a16c:	429d      	cmp	r5, r3
 800a16e:	bf38      	it	cc
 800a170:	461d      	movcc	r5, r3
 800a172:	0553      	lsls	r3, r2, #21
 800a174:	d527      	bpl.n	800a1c6 <__ssputs_r+0x8e>
 800a176:	4629      	mov	r1, r5
 800a178:	f7fd fde8 	bl	8007d4c <_malloc_r>
 800a17c:	4606      	mov	r6, r0
 800a17e:	b360      	cbz	r0, 800a1da <__ssputs_r+0xa2>
 800a180:	464a      	mov	r2, r9
 800a182:	6921      	ldr	r1, [r4, #16]
 800a184:	f7fe fdf8 	bl	8008d78 <memcpy>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	6126      	str	r6, [r4, #16]
 800a196:	444e      	add	r6, r9
 800a198:	6026      	str	r6, [r4, #0]
 800a19a:	463e      	mov	r6, r7
 800a19c:	6165      	str	r5, [r4, #20]
 800a19e:	eba5 0509 	sub.w	r5, r5, r9
 800a1a2:	60a5      	str	r5, [r4, #8]
 800a1a4:	42be      	cmp	r6, r7
 800a1a6:	d900      	bls.n	800a1aa <__ssputs_r+0x72>
 800a1a8:	463e      	mov	r6, r7
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	4641      	mov	r1, r8
 800a1ae:	6820      	ldr	r0, [r4, #0]
 800a1b0:	f000 fb63 	bl	800a87a <memmove>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	1b9b      	subs	r3, r3, r6
 800a1ba:	60a3      	str	r3, [r4, #8]
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	4433      	add	r3, r6
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	f000 fbd8 	bl	800a97c <_realloc_r>
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1e0      	bne.n	800a194 <__ssputs_r+0x5c>
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	6921      	ldr	r1, [r4, #16]
 800a1d6:	f7fd fd47 	bl	8007c68 <_free_r>
 800a1da:	230c      	movs	r3, #12
 800a1dc:	f8ca 3000 	str.w	r3, [sl]
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	e7e9      	b.n	800a1c2 <__ssputs_r+0x8a>
	...

0800a1f0 <_svfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	4698      	mov	r8, r3
 800a1f6:	898b      	ldrh	r3, [r1, #12]
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	061b      	lsls	r3, r3, #24
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	4614      	mov	r4, r2
 800a200:	b09d      	sub	sp, #116	@ 0x74
 800a202:	d510      	bpl.n	800a226 <_svfiprintf_r+0x36>
 800a204:	690b      	ldr	r3, [r1, #16]
 800a206:	b973      	cbnz	r3, 800a226 <_svfiprintf_r+0x36>
 800a208:	2140      	movs	r1, #64	@ 0x40
 800a20a:	f7fd fd9f 	bl	8007d4c <_malloc_r>
 800a20e:	6028      	str	r0, [r5, #0]
 800a210:	6128      	str	r0, [r5, #16]
 800a212:	b930      	cbnz	r0, 800a222 <_svfiprintf_r+0x32>
 800a214:	230c      	movs	r3, #12
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a21c:	b01d      	add	sp, #116	@ 0x74
 800a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a222:	2340      	movs	r3, #64	@ 0x40
 800a224:	616b      	str	r3, [r5, #20]
 800a226:	2300      	movs	r3, #0
 800a228:	9309      	str	r3, [sp, #36]	@ 0x24
 800a22a:	2320      	movs	r3, #32
 800a22c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a230:	2330      	movs	r3, #48	@ 0x30
 800a232:	f04f 0901 	mov.w	r9, #1
 800a236:	f8cd 800c 	str.w	r8, [sp, #12]
 800a23a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a3d4 <_svfiprintf_r+0x1e4>
 800a23e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a242:	4623      	mov	r3, r4
 800a244:	469a      	mov	sl, r3
 800a246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24a:	b10a      	cbz	r2, 800a250 <_svfiprintf_r+0x60>
 800a24c:	2a25      	cmp	r2, #37	@ 0x25
 800a24e:	d1f9      	bne.n	800a244 <_svfiprintf_r+0x54>
 800a250:	ebba 0b04 	subs.w	fp, sl, r4
 800a254:	d00b      	beq.n	800a26e <_svfiprintf_r+0x7e>
 800a256:	465b      	mov	r3, fp
 800a258:	4622      	mov	r2, r4
 800a25a:	4629      	mov	r1, r5
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff ff6b 	bl	800a138 <__ssputs_r>
 800a262:	3001      	adds	r0, #1
 800a264:	f000 80a7 	beq.w	800a3b6 <_svfiprintf_r+0x1c6>
 800a268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a26a:	445a      	add	r2, fp
 800a26c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a26e:	f89a 3000 	ldrb.w	r3, [sl]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 809f 	beq.w	800a3b6 <_svfiprintf_r+0x1c6>
 800a278:	2300      	movs	r3, #0
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a282:	f10a 0a01 	add.w	sl, sl, #1
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a28e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a290:	4654      	mov	r4, sl
 800a292:	2205      	movs	r2, #5
 800a294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a298:	484e      	ldr	r0, [pc, #312]	@ (800a3d4 <_svfiprintf_r+0x1e4>)
 800a29a:	f7fe fd5f 	bl	8008d5c <memchr>
 800a29e:	9a04      	ldr	r2, [sp, #16]
 800a2a0:	b9d8      	cbnz	r0, 800a2da <_svfiprintf_r+0xea>
 800a2a2:	06d0      	lsls	r0, r2, #27
 800a2a4:	bf44      	itt	mi
 800a2a6:	2320      	movmi	r3, #32
 800a2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ac:	0711      	lsls	r1, r2, #28
 800a2ae:	bf44      	itt	mi
 800a2b0:	232b      	movmi	r3, #43	@ 0x2b
 800a2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2bc:	d015      	beq.n	800a2ea <_svfiprintf_r+0xfa>
 800a2be:	4654      	mov	r4, sl
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f04f 0c0a 	mov.w	ip, #10
 800a2c6:	9a07      	ldr	r2, [sp, #28]
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ce:	3b30      	subs	r3, #48	@ 0x30
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d94b      	bls.n	800a36c <_svfiprintf_r+0x17c>
 800a2d4:	b1b0      	cbz	r0, 800a304 <_svfiprintf_r+0x114>
 800a2d6:	9207      	str	r2, [sp, #28]
 800a2d8:	e014      	b.n	800a304 <_svfiprintf_r+0x114>
 800a2da:	eba0 0308 	sub.w	r3, r0, r8
 800a2de:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	46a2      	mov	sl, r4
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	e7d2      	b.n	800a290 <_svfiprintf_r+0xa0>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	1d19      	adds	r1, r3, #4
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	9103      	str	r1, [sp, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bfbb      	ittet	lt
 800a2f6:	425b      	neglt	r3, r3
 800a2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fc:	9307      	strge	r3, [sp, #28]
 800a2fe:	9307      	strlt	r3, [sp, #28]
 800a300:	bfb8      	it	lt
 800a302:	9204      	strlt	r2, [sp, #16]
 800a304:	7823      	ldrb	r3, [r4, #0]
 800a306:	2b2e      	cmp	r3, #46	@ 0x2e
 800a308:	d10a      	bne.n	800a320 <_svfiprintf_r+0x130>
 800a30a:	7863      	ldrb	r3, [r4, #1]
 800a30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a30e:	d132      	bne.n	800a376 <_svfiprintf_r+0x186>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	3402      	adds	r4, #2
 800a314:	1d1a      	adds	r2, r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	9203      	str	r2, [sp, #12]
 800a31a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a31e:	9305      	str	r3, [sp, #20]
 800a320:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a3d8 <_svfiprintf_r+0x1e8>
 800a324:	2203      	movs	r2, #3
 800a326:	4650      	mov	r0, sl
 800a328:	7821      	ldrb	r1, [r4, #0]
 800a32a:	f7fe fd17 	bl	8008d5c <memchr>
 800a32e:	b138      	cbz	r0, 800a340 <_svfiprintf_r+0x150>
 800a330:	2240      	movs	r2, #64	@ 0x40
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	eba0 000a 	sub.w	r0, r0, sl
 800a338:	4082      	lsls	r2, r0
 800a33a:	4313      	orrs	r3, r2
 800a33c:	3401      	adds	r4, #1
 800a33e:	9304      	str	r3, [sp, #16]
 800a340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a344:	2206      	movs	r2, #6
 800a346:	4825      	ldr	r0, [pc, #148]	@ (800a3dc <_svfiprintf_r+0x1ec>)
 800a348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a34c:	f7fe fd06 	bl	8008d5c <memchr>
 800a350:	2800      	cmp	r0, #0
 800a352:	d036      	beq.n	800a3c2 <_svfiprintf_r+0x1d2>
 800a354:	4b22      	ldr	r3, [pc, #136]	@ (800a3e0 <_svfiprintf_r+0x1f0>)
 800a356:	bb1b      	cbnz	r3, 800a3a0 <_svfiprintf_r+0x1b0>
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	3307      	adds	r3, #7
 800a35c:	f023 0307 	bic.w	r3, r3, #7
 800a360:	3308      	adds	r3, #8
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a366:	4433      	add	r3, r6
 800a368:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36a:	e76a      	b.n	800a242 <_svfiprintf_r+0x52>
 800a36c:	460c      	mov	r4, r1
 800a36e:	2001      	movs	r0, #1
 800a370:	fb0c 3202 	mla	r2, ip, r2, r3
 800a374:	e7a8      	b.n	800a2c8 <_svfiprintf_r+0xd8>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 0c0a 	mov.w	ip, #10
 800a37c:	4619      	mov	r1, r3
 800a37e:	3401      	adds	r4, #1
 800a380:	9305      	str	r3, [sp, #20]
 800a382:	4620      	mov	r0, r4
 800a384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a388:	3a30      	subs	r2, #48	@ 0x30
 800a38a:	2a09      	cmp	r2, #9
 800a38c:	d903      	bls.n	800a396 <_svfiprintf_r+0x1a6>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0c6      	beq.n	800a320 <_svfiprintf_r+0x130>
 800a392:	9105      	str	r1, [sp, #20]
 800a394:	e7c4      	b.n	800a320 <_svfiprintf_r+0x130>
 800a396:	4604      	mov	r4, r0
 800a398:	2301      	movs	r3, #1
 800a39a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39e:	e7f0      	b.n	800a382 <_svfiprintf_r+0x192>
 800a3a0:	ab03      	add	r3, sp, #12
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	462a      	mov	r2, r5
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e4 <_svfiprintf_r+0x1f4>)
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	f7fd fdf8 	bl	8007fa0 <_printf_float>
 800a3b0:	1c42      	adds	r2, r0, #1
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	d1d6      	bne.n	800a364 <_svfiprintf_r+0x174>
 800a3b6:	89ab      	ldrh	r3, [r5, #12]
 800a3b8:	065b      	lsls	r3, r3, #25
 800a3ba:	f53f af2d 	bmi.w	800a218 <_svfiprintf_r+0x28>
 800a3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c0:	e72c      	b.n	800a21c <_svfiprintf_r+0x2c>
 800a3c2:	ab03      	add	r3, sp, #12
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	4b06      	ldr	r3, [pc, #24]	@ (800a3e4 <_svfiprintf_r+0x1f4>)
 800a3cc:	a904      	add	r1, sp, #16
 800a3ce:	f7fe f885 	bl	80084dc <_printf_i>
 800a3d2:	e7ed      	b.n	800a3b0 <_svfiprintf_r+0x1c0>
 800a3d4:	0800afa0 	.word	0x0800afa0
 800a3d8:	0800afa6 	.word	0x0800afa6
 800a3dc:	0800afaa 	.word	0x0800afaa
 800a3e0:	08007fa1 	.word	0x08007fa1
 800a3e4:	0800a139 	.word	0x0800a139

0800a3e8 <__sfputc_r>:
 800a3e8:	6893      	ldr	r3, [r2, #8]
 800a3ea:	b410      	push	{r4}
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	6093      	str	r3, [r2, #8]
 800a3f2:	da07      	bge.n	800a404 <__sfputc_r+0x1c>
 800a3f4:	6994      	ldr	r4, [r2, #24]
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	db01      	blt.n	800a3fe <__sfputc_r+0x16>
 800a3fa:	290a      	cmp	r1, #10
 800a3fc:	d102      	bne.n	800a404 <__sfputc_r+0x1c>
 800a3fe:	bc10      	pop	{r4}
 800a400:	f7fe bb35 	b.w	8008a6e <__swbuf_r>
 800a404:	6813      	ldr	r3, [r2, #0]
 800a406:	1c58      	adds	r0, r3, #1
 800a408:	6010      	str	r0, [r2, #0]
 800a40a:	7019      	strb	r1, [r3, #0]
 800a40c:	4608      	mov	r0, r1
 800a40e:	bc10      	pop	{r4}
 800a410:	4770      	bx	lr

0800a412 <__sfputs_r>:
 800a412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a414:	4606      	mov	r6, r0
 800a416:	460f      	mov	r7, r1
 800a418:	4614      	mov	r4, r2
 800a41a:	18d5      	adds	r5, r2, r3
 800a41c:	42ac      	cmp	r4, r5
 800a41e:	d101      	bne.n	800a424 <__sfputs_r+0x12>
 800a420:	2000      	movs	r0, #0
 800a422:	e007      	b.n	800a434 <__sfputs_r+0x22>
 800a424:	463a      	mov	r2, r7
 800a426:	4630      	mov	r0, r6
 800a428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42c:	f7ff ffdc 	bl	800a3e8 <__sfputc_r>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d1f3      	bne.n	800a41c <__sfputs_r+0xa>
 800a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a438 <_vfiprintf_r>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	460d      	mov	r5, r1
 800a43e:	4614      	mov	r4, r2
 800a440:	4698      	mov	r8, r3
 800a442:	4606      	mov	r6, r0
 800a444:	b09d      	sub	sp, #116	@ 0x74
 800a446:	b118      	cbz	r0, 800a450 <_vfiprintf_r+0x18>
 800a448:	6a03      	ldr	r3, [r0, #32]
 800a44a:	b90b      	cbnz	r3, 800a450 <_vfiprintf_r+0x18>
 800a44c:	f7fe f9f2 	bl	8008834 <__sinit>
 800a450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a452:	07d9      	lsls	r1, r3, #31
 800a454:	d405      	bmi.n	800a462 <_vfiprintf_r+0x2a>
 800a456:	89ab      	ldrh	r3, [r5, #12]
 800a458:	059a      	lsls	r2, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_vfiprintf_r+0x2a>
 800a45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a45e:	f7f7 fcd7 	bl	8001e10 <__retarget_lock_acquire_recursive>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	071b      	lsls	r3, r3, #28
 800a466:	d501      	bpl.n	800a46c <_vfiprintf_r+0x34>
 800a468:	692b      	ldr	r3, [r5, #16]
 800a46a:	b99b      	cbnz	r3, 800a494 <_vfiprintf_r+0x5c>
 800a46c:	4629      	mov	r1, r5
 800a46e:	4630      	mov	r0, r6
 800a470:	f7fe fb3c 	bl	8008aec <__swsetup_r>
 800a474:	b170      	cbz	r0, 800a494 <_vfiprintf_r+0x5c>
 800a476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a478:	07dc      	lsls	r4, r3, #31
 800a47a:	d504      	bpl.n	800a486 <_vfiprintf_r+0x4e>
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a480:	b01d      	add	sp, #116	@ 0x74
 800a482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a486:	89ab      	ldrh	r3, [r5, #12]
 800a488:	0598      	lsls	r0, r3, #22
 800a48a:	d4f7      	bmi.n	800a47c <_vfiprintf_r+0x44>
 800a48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a48e:	f7f7 fcd4 	bl	8001e3a <__retarget_lock_release_recursive>
 800a492:	e7f3      	b.n	800a47c <_vfiprintf_r+0x44>
 800a494:	2300      	movs	r3, #0
 800a496:	9309      	str	r3, [sp, #36]	@ 0x24
 800a498:	2320      	movs	r3, #32
 800a49a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a49e:	2330      	movs	r3, #48	@ 0x30
 800a4a0:	f04f 0901 	mov.w	r9, #1
 800a4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a654 <_vfiprintf_r+0x21c>
 800a4ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	469a      	mov	sl, r3
 800a4b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b8:	b10a      	cbz	r2, 800a4be <_vfiprintf_r+0x86>
 800a4ba:	2a25      	cmp	r2, #37	@ 0x25
 800a4bc:	d1f9      	bne.n	800a4b2 <_vfiprintf_r+0x7a>
 800a4be:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c2:	d00b      	beq.n	800a4dc <_vfiprintf_r+0xa4>
 800a4c4:	465b      	mov	r3, fp
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ffa1 	bl	800a412 <__sfputs_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f000 80a7 	beq.w	800a624 <_vfiprintf_r+0x1ec>
 800a4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d8:	445a      	add	r2, fp
 800a4da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 809f 	beq.w	800a624 <_vfiprintf_r+0x1ec>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f0:	f10a 0a01 	add.w	sl, sl, #1
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	9307      	str	r3, [sp, #28]
 800a4f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4fe:	4654      	mov	r4, sl
 800a500:	2205      	movs	r2, #5
 800a502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a506:	4853      	ldr	r0, [pc, #332]	@ (800a654 <_vfiprintf_r+0x21c>)
 800a508:	f7fe fc28 	bl	8008d5c <memchr>
 800a50c:	9a04      	ldr	r2, [sp, #16]
 800a50e:	b9d8      	cbnz	r0, 800a548 <_vfiprintf_r+0x110>
 800a510:	06d1      	lsls	r1, r2, #27
 800a512:	bf44      	itt	mi
 800a514:	2320      	movmi	r3, #32
 800a516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a51a:	0713      	lsls	r3, r2, #28
 800a51c:	bf44      	itt	mi
 800a51e:	232b      	movmi	r3, #43	@ 0x2b
 800a520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a524:	f89a 3000 	ldrb.w	r3, [sl]
 800a528:	2b2a      	cmp	r3, #42	@ 0x2a
 800a52a:	d015      	beq.n	800a558 <_vfiprintf_r+0x120>
 800a52c:	4654      	mov	r4, sl
 800a52e:	2000      	movs	r0, #0
 800a530:	f04f 0c0a 	mov.w	ip, #10
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	4621      	mov	r1, r4
 800a538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a53c:	3b30      	subs	r3, #48	@ 0x30
 800a53e:	2b09      	cmp	r3, #9
 800a540:	d94b      	bls.n	800a5da <_vfiprintf_r+0x1a2>
 800a542:	b1b0      	cbz	r0, 800a572 <_vfiprintf_r+0x13a>
 800a544:	9207      	str	r2, [sp, #28]
 800a546:	e014      	b.n	800a572 <_vfiprintf_r+0x13a>
 800a548:	eba0 0308 	sub.w	r3, r0, r8
 800a54c:	fa09 f303 	lsl.w	r3, r9, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	46a2      	mov	sl, r4
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	e7d2      	b.n	800a4fe <_vfiprintf_r+0xc6>
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	1d19      	adds	r1, r3, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	9103      	str	r1, [sp, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	bfbb      	ittet	lt
 800a564:	425b      	neglt	r3, r3
 800a566:	f042 0202 	orrlt.w	r2, r2, #2
 800a56a:	9307      	strge	r3, [sp, #28]
 800a56c:	9307      	strlt	r3, [sp, #28]
 800a56e:	bfb8      	it	lt
 800a570:	9204      	strlt	r2, [sp, #16]
 800a572:	7823      	ldrb	r3, [r4, #0]
 800a574:	2b2e      	cmp	r3, #46	@ 0x2e
 800a576:	d10a      	bne.n	800a58e <_vfiprintf_r+0x156>
 800a578:	7863      	ldrb	r3, [r4, #1]
 800a57a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a57c:	d132      	bne.n	800a5e4 <_vfiprintf_r+0x1ac>
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	3402      	adds	r4, #2
 800a582:	1d1a      	adds	r2, r3, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	9203      	str	r2, [sp, #12]
 800a588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a658 <_vfiprintf_r+0x220>
 800a592:	2203      	movs	r2, #3
 800a594:	4650      	mov	r0, sl
 800a596:	7821      	ldrb	r1, [r4, #0]
 800a598:	f7fe fbe0 	bl	8008d5c <memchr>
 800a59c:	b138      	cbz	r0, 800a5ae <_vfiprintf_r+0x176>
 800a59e:	2240      	movs	r2, #64	@ 0x40
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	eba0 000a 	sub.w	r0, r0, sl
 800a5a6:	4082      	lsls	r2, r0
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	3401      	adds	r4, #1
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b2:	2206      	movs	r2, #6
 800a5b4:	4829      	ldr	r0, [pc, #164]	@ (800a65c <_vfiprintf_r+0x224>)
 800a5b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5ba:	f7fe fbcf 	bl	8008d5c <memchr>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d03f      	beq.n	800a642 <_vfiprintf_r+0x20a>
 800a5c2:	4b27      	ldr	r3, [pc, #156]	@ (800a660 <_vfiprintf_r+0x228>)
 800a5c4:	bb1b      	cbnz	r3, 800a60e <_vfiprintf_r+0x1d6>
 800a5c6:	9b03      	ldr	r3, [sp, #12]
 800a5c8:	3307      	adds	r3, #7
 800a5ca:	f023 0307 	bic.w	r3, r3, #7
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	9303      	str	r3, [sp, #12]
 800a5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d4:	443b      	add	r3, r7
 800a5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d8:	e76a      	b.n	800a4b0 <_vfiprintf_r+0x78>
 800a5da:	460c      	mov	r4, r1
 800a5dc:	2001      	movs	r0, #1
 800a5de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e2:	e7a8      	b.n	800a536 <_vfiprintf_r+0xfe>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f04f 0c0a 	mov.w	ip, #10
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f6:	3a30      	subs	r2, #48	@ 0x30
 800a5f8:	2a09      	cmp	r2, #9
 800a5fa:	d903      	bls.n	800a604 <_vfiprintf_r+0x1cc>
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0c6      	beq.n	800a58e <_vfiprintf_r+0x156>
 800a600:	9105      	str	r1, [sp, #20]
 800a602:	e7c4      	b.n	800a58e <_vfiprintf_r+0x156>
 800a604:	4604      	mov	r4, r0
 800a606:	2301      	movs	r3, #1
 800a608:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60c:	e7f0      	b.n	800a5f0 <_vfiprintf_r+0x1b8>
 800a60e:	ab03      	add	r3, sp, #12
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	462a      	mov	r2, r5
 800a614:	4630      	mov	r0, r6
 800a616:	4b13      	ldr	r3, [pc, #76]	@ (800a664 <_vfiprintf_r+0x22c>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	f7fd fcc1 	bl	8007fa0 <_printf_float>
 800a61e:	4607      	mov	r7, r0
 800a620:	1c78      	adds	r0, r7, #1
 800a622:	d1d6      	bne.n	800a5d2 <_vfiprintf_r+0x19a>
 800a624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a626:	07d9      	lsls	r1, r3, #31
 800a628:	d405      	bmi.n	800a636 <_vfiprintf_r+0x1fe>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d402      	bmi.n	800a636 <_vfiprintf_r+0x1fe>
 800a630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a632:	f7f7 fc02 	bl	8001e3a <__retarget_lock_release_recursive>
 800a636:	89ab      	ldrh	r3, [r5, #12]
 800a638:	065b      	lsls	r3, r3, #25
 800a63a:	f53f af1f 	bmi.w	800a47c <_vfiprintf_r+0x44>
 800a63e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a640:	e71e      	b.n	800a480 <_vfiprintf_r+0x48>
 800a642:	ab03      	add	r3, sp, #12
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	462a      	mov	r2, r5
 800a648:	4630      	mov	r0, r6
 800a64a:	4b06      	ldr	r3, [pc, #24]	@ (800a664 <_vfiprintf_r+0x22c>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	f7fd ff45 	bl	80084dc <_printf_i>
 800a652:	e7e4      	b.n	800a61e <_vfiprintf_r+0x1e6>
 800a654:	0800afa0 	.word	0x0800afa0
 800a658:	0800afa6 	.word	0x0800afa6
 800a65c:	0800afaa 	.word	0x0800afaa
 800a660:	08007fa1 	.word	0x08007fa1
 800a664:	0800a413 	.word	0x0800a413

0800a668 <__sflush_r>:
 800a668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	0716      	lsls	r6, r2, #28
 800a670:	4605      	mov	r5, r0
 800a672:	460c      	mov	r4, r1
 800a674:	d454      	bmi.n	800a720 <__sflush_r+0xb8>
 800a676:	684b      	ldr	r3, [r1, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dc02      	bgt.n	800a682 <__sflush_r+0x1a>
 800a67c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	dd48      	ble.n	800a714 <__sflush_r+0xac>
 800a682:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a684:	2e00      	cmp	r6, #0
 800a686:	d045      	beq.n	800a714 <__sflush_r+0xac>
 800a688:	2300      	movs	r3, #0
 800a68a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a68e:	682f      	ldr	r7, [r5, #0]
 800a690:	6a21      	ldr	r1, [r4, #32]
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	d030      	beq.n	800a6f8 <__sflush_r+0x90>
 800a696:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	0759      	lsls	r1, r3, #29
 800a69c:	d505      	bpl.n	800a6aa <__sflush_r+0x42>
 800a69e:	6863      	ldr	r3, [r4, #4]
 800a6a0:	1ad2      	subs	r2, r2, r3
 800a6a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6a4:	b10b      	cbz	r3, 800a6aa <__sflush_r+0x42>
 800a6a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6a8:	1ad2      	subs	r2, r2, r3
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6b0:	6a21      	ldr	r1, [r4, #32]
 800a6b2:	47b0      	blx	r6
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	d106      	bne.n	800a6c8 <__sflush_r+0x60>
 800a6ba:	6829      	ldr	r1, [r5, #0]
 800a6bc:	291d      	cmp	r1, #29
 800a6be:	d82b      	bhi.n	800a718 <__sflush_r+0xb0>
 800a6c0:	4a28      	ldr	r2, [pc, #160]	@ (800a764 <__sflush_r+0xfc>)
 800a6c2:	410a      	asrs	r2, r1
 800a6c4:	07d6      	lsls	r6, r2, #31
 800a6c6:	d427      	bmi.n	800a718 <__sflush_r+0xb0>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	6062      	str	r2, [r4, #4]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	04d9      	lsls	r1, r3, #19
 800a6d0:	6022      	str	r2, [r4, #0]
 800a6d2:	d504      	bpl.n	800a6de <__sflush_r+0x76>
 800a6d4:	1c42      	adds	r2, r0, #1
 800a6d6:	d101      	bne.n	800a6dc <__sflush_r+0x74>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b903      	cbnz	r3, 800a6de <__sflush_r+0x76>
 800a6dc:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6e0:	602f      	str	r7, [r5, #0]
 800a6e2:	b1b9      	cbz	r1, 800a714 <__sflush_r+0xac>
 800a6e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6e8:	4299      	cmp	r1, r3
 800a6ea:	d002      	beq.n	800a6f2 <__sflush_r+0x8a>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7fd fabb 	bl	8007c68 <_free_r>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6f6:	e00d      	b.n	800a714 <__sflush_r+0xac>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b0      	blx	r6
 800a6fe:	4602      	mov	r2, r0
 800a700:	1c50      	adds	r0, r2, #1
 800a702:	d1c9      	bne.n	800a698 <__sflush_r+0x30>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0c6      	beq.n	800a698 <__sflush_r+0x30>
 800a70a:	2b1d      	cmp	r3, #29
 800a70c:	d001      	beq.n	800a712 <__sflush_r+0xaa>
 800a70e:	2b16      	cmp	r3, #22
 800a710:	d11d      	bne.n	800a74e <__sflush_r+0xe6>
 800a712:	602f      	str	r7, [r5, #0]
 800a714:	2000      	movs	r0, #0
 800a716:	e021      	b.n	800a75c <__sflush_r+0xf4>
 800a718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a71c:	b21b      	sxth	r3, r3
 800a71e:	e01a      	b.n	800a756 <__sflush_r+0xee>
 800a720:	690f      	ldr	r7, [r1, #16]
 800a722:	2f00      	cmp	r7, #0
 800a724:	d0f6      	beq.n	800a714 <__sflush_r+0xac>
 800a726:	0793      	lsls	r3, r2, #30
 800a728:	bf18      	it	ne
 800a72a:	2300      	movne	r3, #0
 800a72c:	680e      	ldr	r6, [r1, #0]
 800a72e:	bf08      	it	eq
 800a730:	694b      	ldreq	r3, [r1, #20]
 800a732:	1bf6      	subs	r6, r6, r7
 800a734:	600f      	str	r7, [r1, #0]
 800a736:	608b      	str	r3, [r1, #8]
 800a738:	2e00      	cmp	r6, #0
 800a73a:	ddeb      	ble.n	800a714 <__sflush_r+0xac>
 800a73c:	4633      	mov	r3, r6
 800a73e:	463a      	mov	r2, r7
 800a740:	4628      	mov	r0, r5
 800a742:	6a21      	ldr	r1, [r4, #32]
 800a744:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a748:	47e0      	blx	ip
 800a74a:	2800      	cmp	r0, #0
 800a74c:	dc07      	bgt.n	800a75e <__sflush_r+0xf6>
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75e:	4407      	add	r7, r0
 800a760:	1a36      	subs	r6, r6, r0
 800a762:	e7e9      	b.n	800a738 <__sflush_r+0xd0>
 800a764:	dfbffffe 	.word	0xdfbffffe

0800a768 <_fflush_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	690b      	ldr	r3, [r1, #16]
 800a76c:	4605      	mov	r5, r0
 800a76e:	460c      	mov	r4, r1
 800a770:	b913      	cbnz	r3, 800a778 <_fflush_r+0x10>
 800a772:	2500      	movs	r5, #0
 800a774:	4628      	mov	r0, r5
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	b118      	cbz	r0, 800a782 <_fflush_r+0x1a>
 800a77a:	6a03      	ldr	r3, [r0, #32]
 800a77c:	b90b      	cbnz	r3, 800a782 <_fflush_r+0x1a>
 800a77e:	f7fe f859 	bl	8008834 <__sinit>
 800a782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0f3      	beq.n	800a772 <_fflush_r+0xa>
 800a78a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a78c:	07d0      	lsls	r0, r2, #31
 800a78e:	d404      	bmi.n	800a79a <_fflush_r+0x32>
 800a790:	0599      	lsls	r1, r3, #22
 800a792:	d402      	bmi.n	800a79a <_fflush_r+0x32>
 800a794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a796:	f7f7 fb3b 	bl	8001e10 <__retarget_lock_acquire_recursive>
 800a79a:	4628      	mov	r0, r5
 800a79c:	4621      	mov	r1, r4
 800a79e:	f7ff ff63 	bl	800a668 <__sflush_r>
 800a7a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	07da      	lsls	r2, r3, #31
 800a7a8:	d4e4      	bmi.n	800a774 <_fflush_r+0xc>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	059b      	lsls	r3, r3, #22
 800a7ae:	d4e1      	bmi.n	800a774 <_fflush_r+0xc>
 800a7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7b2:	f7f7 fb42 	bl	8001e3a <__retarget_lock_release_recursive>
 800a7b6:	e7dd      	b.n	800a774 <_fflush_r+0xc>

0800a7b8 <__swhatbuf_r>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c0:	4615      	mov	r5, r2
 800a7c2:	2900      	cmp	r1, #0
 800a7c4:	461e      	mov	r6, r3
 800a7c6:	b096      	sub	sp, #88	@ 0x58
 800a7c8:	da0c      	bge.n	800a7e4 <__swhatbuf_r+0x2c>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7d2:	bf14      	ite	ne
 800a7d4:	2340      	movne	r3, #64	@ 0x40
 800a7d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7da:	2000      	movs	r0, #0
 800a7dc:	6031      	str	r1, [r6, #0]
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	b016      	add	sp, #88	@ 0x58
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
 800a7e4:	466a      	mov	r2, sp
 800a7e6:	f000 f863 	bl	800a8b0 <_fstat_r>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	dbed      	blt.n	800a7ca <__swhatbuf_r+0x12>
 800a7ee:	9901      	ldr	r1, [sp, #4]
 800a7f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7f8:	4259      	negs	r1, r3
 800a7fa:	4159      	adcs	r1, r3
 800a7fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a800:	e7eb      	b.n	800a7da <__swhatbuf_r+0x22>

0800a802 <__smakebuf_r>:
 800a802:	898b      	ldrh	r3, [r1, #12]
 800a804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a806:	079d      	lsls	r5, r3, #30
 800a808:	4606      	mov	r6, r0
 800a80a:	460c      	mov	r4, r1
 800a80c:	d507      	bpl.n	800a81e <__smakebuf_r+0x1c>
 800a80e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	2301      	movs	r3, #1
 800a818:	6163      	str	r3, [r4, #20]
 800a81a:	b003      	add	sp, #12
 800a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a81e:	466a      	mov	r2, sp
 800a820:	ab01      	add	r3, sp, #4
 800a822:	f7ff ffc9 	bl	800a7b8 <__swhatbuf_r>
 800a826:	9f00      	ldr	r7, [sp, #0]
 800a828:	4605      	mov	r5, r0
 800a82a:	4639      	mov	r1, r7
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7fd fa8d 	bl	8007d4c <_malloc_r>
 800a832:	b948      	cbnz	r0, 800a848 <__smakebuf_r+0x46>
 800a834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a838:	059a      	lsls	r2, r3, #22
 800a83a:	d4ee      	bmi.n	800a81a <__smakebuf_r+0x18>
 800a83c:	f023 0303 	bic.w	r3, r3, #3
 800a840:	f043 0302 	orr.w	r3, r3, #2
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	e7e2      	b.n	800a80e <__smakebuf_r+0xc>
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	6020      	str	r0, [r4, #0]
 800a858:	b15b      	cbz	r3, 800a872 <__smakebuf_r+0x70>
 800a85a:	4630      	mov	r0, r6
 800a85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a860:	f000 f838 	bl	800a8d4 <_isatty_r>
 800a864:	b128      	cbz	r0, 800a872 <__smakebuf_r+0x70>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f023 0303 	bic.w	r3, r3, #3
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	431d      	orrs	r5, r3
 800a876:	81a5      	strh	r5, [r4, #12]
 800a878:	e7cf      	b.n	800a81a <__smakebuf_r+0x18>

0800a87a <memmove>:
 800a87a:	4288      	cmp	r0, r1
 800a87c:	b510      	push	{r4, lr}
 800a87e:	eb01 0402 	add.w	r4, r1, r2
 800a882:	d902      	bls.n	800a88a <memmove+0x10>
 800a884:	4284      	cmp	r4, r0
 800a886:	4623      	mov	r3, r4
 800a888:	d807      	bhi.n	800a89a <memmove+0x20>
 800a88a:	1e43      	subs	r3, r0, #1
 800a88c:	42a1      	cmp	r1, r4
 800a88e:	d008      	beq.n	800a8a2 <memmove+0x28>
 800a890:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a894:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a898:	e7f8      	b.n	800a88c <memmove+0x12>
 800a89a:	4601      	mov	r1, r0
 800a89c:	4402      	add	r2, r0
 800a89e:	428a      	cmp	r2, r1
 800a8a0:	d100      	bne.n	800a8a4 <memmove+0x2a>
 800a8a2:	bd10      	pop	{r4, pc}
 800a8a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ac:	e7f7      	b.n	800a89e <memmove+0x24>
	...

0800a8b0 <_fstat_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4d06      	ldr	r5, [pc, #24]	@ (800a8d0 <_fstat_r+0x20>)
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	f7f7 f8bd 	bl	8001a3c <_fstat>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d102      	bne.n	800a8cc <_fstat_r+0x1c>
 800a8c6:	682b      	ldr	r3, [r5, #0]
 800a8c8:	b103      	cbz	r3, 800a8cc <_fstat_r+0x1c>
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20001f8c 	.word	0x20001f8c

0800a8d4 <_isatty_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d05      	ldr	r5, [pc, #20]	@ (800a8f0 <_isatty_r+0x1c>)
 800a8da:	4604      	mov	r4, r0
 800a8dc:	4608      	mov	r0, r1
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	f7f7 f8bb 	bl	8001a5a <_isatty>
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	d102      	bne.n	800a8ee <_isatty_r+0x1a>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	b103      	cbz	r3, 800a8ee <_isatty_r+0x1a>
 800a8ec:	6023      	str	r3, [r4, #0]
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	20001f8c 	.word	0x20001f8c

0800a8f4 <__assert_func>:
 800a8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8f6:	4614      	mov	r4, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4b09      	ldr	r3, [pc, #36]	@ (800a920 <__assert_func+0x2c>)
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68d8      	ldr	r0, [r3, #12]
 800a902:	b954      	cbnz	r4, 800a91a <__assert_func+0x26>
 800a904:	4b07      	ldr	r3, [pc, #28]	@ (800a924 <__assert_func+0x30>)
 800a906:	461c      	mov	r4, r3
 800a908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a90c:	9100      	str	r1, [sp, #0]
 800a90e:	462b      	mov	r3, r5
 800a910:	4905      	ldr	r1, [pc, #20]	@ (800a928 <__assert_func+0x34>)
 800a912:	f000 f86f 	bl	800a9f4 <fiprintf>
 800a916:	f000 f87f 	bl	800aa18 <abort>
 800a91a:	4b04      	ldr	r3, [pc, #16]	@ (800a92c <__assert_func+0x38>)
 800a91c:	e7f4      	b.n	800a908 <__assert_func+0x14>
 800a91e:	bf00      	nop
 800a920:	2000001c 	.word	0x2000001c
 800a924:	0800aff6 	.word	0x0800aff6
 800a928:	0800afc8 	.word	0x0800afc8
 800a92c:	0800afbb 	.word	0x0800afbb

0800a930 <_calloc_r>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	fba1 5402 	umull	r5, r4, r1, r2
 800a936:	b93c      	cbnz	r4, 800a948 <_calloc_r+0x18>
 800a938:	4629      	mov	r1, r5
 800a93a:	f7fd fa07 	bl	8007d4c <_malloc_r>
 800a93e:	4606      	mov	r6, r0
 800a940:	b928      	cbnz	r0, 800a94e <_calloc_r+0x1e>
 800a942:	2600      	movs	r6, #0
 800a944:	4630      	mov	r0, r6
 800a946:	bd70      	pop	{r4, r5, r6, pc}
 800a948:	220c      	movs	r2, #12
 800a94a:	6002      	str	r2, [r0, #0]
 800a94c:	e7f9      	b.n	800a942 <_calloc_r+0x12>
 800a94e:	462a      	mov	r2, r5
 800a950:	4621      	mov	r1, r4
 800a952:	f7fe f921 	bl	8008b98 <memset>
 800a956:	e7f5      	b.n	800a944 <_calloc_r+0x14>

0800a958 <__ascii_mbtowc>:
 800a958:	b082      	sub	sp, #8
 800a95a:	b901      	cbnz	r1, 800a95e <__ascii_mbtowc+0x6>
 800a95c:	a901      	add	r1, sp, #4
 800a95e:	b142      	cbz	r2, 800a972 <__ascii_mbtowc+0x1a>
 800a960:	b14b      	cbz	r3, 800a976 <__ascii_mbtowc+0x1e>
 800a962:	7813      	ldrb	r3, [r2, #0]
 800a964:	600b      	str	r3, [r1, #0]
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	1e10      	subs	r0, r2, #0
 800a96a:	bf18      	it	ne
 800a96c:	2001      	movne	r0, #1
 800a96e:	b002      	add	sp, #8
 800a970:	4770      	bx	lr
 800a972:	4610      	mov	r0, r2
 800a974:	e7fb      	b.n	800a96e <__ascii_mbtowc+0x16>
 800a976:	f06f 0001 	mvn.w	r0, #1
 800a97a:	e7f8      	b.n	800a96e <__ascii_mbtowc+0x16>

0800a97c <_realloc_r>:
 800a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a980:	4680      	mov	r8, r0
 800a982:	4615      	mov	r5, r2
 800a984:	460c      	mov	r4, r1
 800a986:	b921      	cbnz	r1, 800a992 <_realloc_r+0x16>
 800a988:	4611      	mov	r1, r2
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f7fd b9dd 	b.w	8007d4c <_malloc_r>
 800a992:	b92a      	cbnz	r2, 800a9a0 <_realloc_r+0x24>
 800a994:	f7fd f968 	bl	8007c68 <_free_r>
 800a998:	2400      	movs	r4, #0
 800a99a:	4620      	mov	r0, r4
 800a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a0:	f000 f841 	bl	800aa26 <_malloc_usable_size_r>
 800a9a4:	4285      	cmp	r5, r0
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	d802      	bhi.n	800a9b0 <_realloc_r+0x34>
 800a9aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9ae:	d8f4      	bhi.n	800a99a <_realloc_r+0x1e>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7fd f9ca 	bl	8007d4c <_malloc_r>
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d0ec      	beq.n	800a998 <_realloc_r+0x1c>
 800a9be:	42b5      	cmp	r5, r6
 800a9c0:	462a      	mov	r2, r5
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	bf28      	it	cs
 800a9c6:	4632      	movcs	r2, r6
 800a9c8:	f7fe f9d6 	bl	8008d78 <memcpy>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f7fd f94a 	bl	8007c68 <_free_r>
 800a9d4:	463c      	mov	r4, r7
 800a9d6:	e7e0      	b.n	800a99a <_realloc_r+0x1e>

0800a9d8 <__ascii_wctomb>:
 800a9d8:	4603      	mov	r3, r0
 800a9da:	4608      	mov	r0, r1
 800a9dc:	b141      	cbz	r1, 800a9f0 <__ascii_wctomb+0x18>
 800a9de:	2aff      	cmp	r2, #255	@ 0xff
 800a9e0:	d904      	bls.n	800a9ec <__ascii_wctomb+0x14>
 800a9e2:	228a      	movs	r2, #138	@ 0x8a
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	4770      	bx	lr
 800a9ec:	2001      	movs	r0, #1
 800a9ee:	700a      	strb	r2, [r1, #0]
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <fiprintf>:
 800a9f4:	b40e      	push	{r1, r2, r3}
 800a9f6:	b503      	push	{r0, r1, lr}
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	ab03      	add	r3, sp, #12
 800a9fc:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <fiprintf+0x20>)
 800a9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa02:	6800      	ldr	r0, [r0, #0]
 800aa04:	9301      	str	r3, [sp, #4]
 800aa06:	f7ff fd17 	bl	800a438 <_vfiprintf_r>
 800aa0a:	b002      	add	sp, #8
 800aa0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa10:	b003      	add	sp, #12
 800aa12:	4770      	bx	lr
 800aa14:	2000001c 	.word	0x2000001c

0800aa18 <abort>:
 800aa18:	2006      	movs	r0, #6
 800aa1a:	b508      	push	{r3, lr}
 800aa1c:	f000 f834 	bl	800aa88 <raise>
 800aa20:	2001      	movs	r0, #1
 800aa22:	f7f6 ffd8 	bl	80019d6 <_exit>

0800aa26 <_malloc_usable_size_r>:
 800aa26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa2a:	1f18      	subs	r0, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfbc      	itt	lt
 800aa30:	580b      	ldrlt	r3, [r1, r0]
 800aa32:	18c0      	addlt	r0, r0, r3
 800aa34:	4770      	bx	lr

0800aa36 <_raise_r>:
 800aa36:	291f      	cmp	r1, #31
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	d904      	bls.n	800aa4a <_raise_r+0x14>
 800aa40:	2316      	movs	r3, #22
 800aa42:	6003      	str	r3, [r0, #0]
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa48:	bd38      	pop	{r3, r4, r5, pc}
 800aa4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa4c:	b112      	cbz	r2, 800aa54 <_raise_r+0x1e>
 800aa4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa52:	b94b      	cbnz	r3, 800aa68 <_raise_r+0x32>
 800aa54:	4628      	mov	r0, r5
 800aa56:	f000 f831 	bl	800aabc <_getpid_r>
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	4628      	mov	r0, r5
 800aa60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa64:	f000 b818 	b.w	800aa98 <_kill_r>
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d00a      	beq.n	800aa82 <_raise_r+0x4c>
 800aa6c:	1c59      	adds	r1, r3, #1
 800aa6e:	d103      	bne.n	800aa78 <_raise_r+0x42>
 800aa70:	2316      	movs	r3, #22
 800aa72:	6003      	str	r3, [r0, #0]
 800aa74:	2001      	movs	r0, #1
 800aa76:	e7e7      	b.n	800aa48 <_raise_r+0x12>
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa80:	4798      	blx	r3
 800aa82:	2000      	movs	r0, #0
 800aa84:	e7e0      	b.n	800aa48 <_raise_r+0x12>
	...

0800aa88 <raise>:
 800aa88:	4b02      	ldr	r3, [pc, #8]	@ (800aa94 <raise+0xc>)
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	f7ff bfd2 	b.w	800aa36 <_raise_r>
 800aa92:	bf00      	nop
 800aa94:	2000001c 	.word	0x2000001c

0800aa98 <_kill_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4d06      	ldr	r5, [pc, #24]	@ (800aab8 <_kill_r+0x20>)
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	f7f6 ff86 	bl	80019b6 <_kill>
 800aaaa:	1c43      	adds	r3, r0, #1
 800aaac:	d102      	bne.n	800aab4 <_kill_r+0x1c>
 800aaae:	682b      	ldr	r3, [r5, #0]
 800aab0:	b103      	cbz	r3, 800aab4 <_kill_r+0x1c>
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	bd38      	pop	{r3, r4, r5, pc}
 800aab6:	bf00      	nop
 800aab8:	20001f8c 	.word	0x20001f8c

0800aabc <_getpid_r>:
 800aabc:	f7f6 bf74 	b.w	80019a8 <_getpid>

0800aac0 <_init>:
 800aac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac2:	bf00      	nop
 800aac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac6:	bc08      	pop	{r3}
 800aac8:	469e      	mov	lr, r3
 800aaca:	4770      	bx	lr

0800aacc <_fini>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr
