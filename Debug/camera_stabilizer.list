
camera_stabilizer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004364  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044cc  080044cc  00006020  2**0
                  CONTENTS
  4 .ARM          00000000  080044cc  080044cc  00006020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044cc  080044cc  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080044d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b8  20000020  080044f4  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019d8  080044f4  000069d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010911  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae8  00000000  00000000  0001695a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00019448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae4  00000000  00000000  0001a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029e1  00000000  00000000  0001ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f69d  00000000  00000000  0001d74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be3b  00000000  00000000  0002cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8c25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039bc  00000000  00000000  000b8c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000bc624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	0800445c 	.word	0x0800445c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	0800445c 	.word	0x0800445c

08000150 <StartLEDTask>:
        // Handle received data in rxBuffer
        HAL_UART_Transmit(&huart2, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);
    }
}

void StartLEDTask(void *argument) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 8000158:	2120      	movs	r1, #32
 800015a:	480b      	ldr	r0, [pc, #44]	@ (8000188 <StartLEDTask+0x38>)
 800015c:	f000 fd30 	bl	8000bc0 <HAL_GPIO_TogglePin>
        osDelay(100); // Delay for 500ms
 8000160:	2064      	movs	r0, #100	@ 0x64
 8000162:	f001 fd09 	bl	8001b78 <osDelay>
        uint8_t rxBuffer[10];
        HAL_UART_Transmit(&huart2, message, sizeof(message) - 1, HAL_MAX_DELAY); // Send message
 8000166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800016a:	220e      	movs	r2, #14
 800016c:	4907      	ldr	r1, [pc, #28]	@ (800018c <StartLEDTask+0x3c>)
 800016e:	4808      	ldr	r0, [pc, #32]	@ (8000190 <StartLEDTask+0x40>)
 8000170:	f001 f9c2 	bl	80014f8 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart2, rxBuffer, sizeof(rxBuffer));
 8000174:	f107 030c 	add.w	r3, r7, #12
 8000178:	220a      	movs	r2, #10
 800017a:	4619      	mov	r1, r3
 800017c:	4804      	ldr	r0, [pc, #16]	@ (8000190 <StartLEDTask+0x40>)
 800017e:	f001 fa46 	bl	800160e <HAL_UART_Receive_IT>
    while (1) {
 8000182:	bf00      	nop
 8000184:	e7e8      	b.n	8000158 <StartLEDTask+0x8>
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800
 800018c:	20000000 	.word	0x20000000
 8000190:	2000003c 	.word	0x2000003c

08000194 <StartDefaultTask>:
    }
}

void StartDefaultTask(void *argument) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Toggle another LED
 800019c:	2101      	movs	r1, #1
 800019e:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <StartDefaultTask+0x1c>)
 80001a0:	f000 fd0e 	bl	8000bc0 <HAL_GPIO_TogglePin>
        osDelay(1000); // Delay for 1 second
 80001a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a8:	f001 fce6 	bl	8001b78 <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // Toggle another LED
 80001ac:	bf00      	nop
 80001ae:	e7f5      	b.n	800019c <StartDefaultTask+0x8>
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 f9f6 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f808 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f882 	bl	80002c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001c4:	f000 f9a0 	bl	8000508 <MX_USART2_UART_Init>
  /* Start scheduler */
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MX_FREERTOS_Init();
 80001c8:	f000 f844 	bl	8000254 <MX_FREERTOS_Init>

  while (1)
 80001cc:	bf00      	nop
 80001ce:	e7fd      	b.n	80001cc <main+0x18>

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	@ 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f004 f902 	bl	80043e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fa:	2310      	movs	r3, #16
 80001fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000202:	2300      	movs	r3, #0
 8000204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000206:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800020a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fd11 	bl	8000c38 <HAL_RCC_OscConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800021c:	f000 f8c2 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000220:	230f      	movs	r3, #15
 8000222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000224:	2302      	movs	r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f000 ff7e 	bl	800113c <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000246:	f000 f8ad 	bl	80003a4 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	@ 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_FREERTOS_Init>:

void MX_FREERTOS_Init(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b092      	sub	sp, #72	@ 0x48
 8000258:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800025a:	f001 fbb3 	bl	80019c4 <osKernelInitialize>

    osThreadAttr_t ledTaskAttr = {
 800025e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000262:	2224      	movs	r2, #36	@ 0x24
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f004 f8be 	bl	80043e8 <memset>
 800026c:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_FREERTOS_Init+0x64>)
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000274:	2318      	movs	r3, #24
 8000276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        .name = "LEDTask",
        .priority = osPriorityNormal,
        .stack_size = 128
    };

    osThreadAttr_t defaultTaskAttr = {
 8000278:	463b      	mov	r3, r7
 800027a:	2224      	movs	r2, #36	@ 0x24
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f004 f8b2 	bl	80043e8 <memset>
 8000284:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <MX_FREERTOS_Init+0x68>)
 8000286:	603b      	str	r3, [r7, #0]
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	2308      	movs	r3, #8
 800028e:	61bb      	str	r3, [r7, #24]
        .name = "DefaultTask",
        .priority = osPriorityLow,
        .stack_size = 128
    };

    osThreadNew(StartLEDTask, NULL, &ledTaskAttr);
 8000290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000294:	461a      	mov	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	4809      	ldr	r0, [pc, #36]	@ (80002c0 <MX_FREERTOS_Init+0x6c>)
 800029a:	f001 fbdb 	bl	8001a54 <osThreadNew>
    osThreadNew(StartDefaultTask, NULL, &defaultTaskAttr);
 800029e:	463b      	mov	r3, r7
 80002a0:	461a      	mov	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <MX_FREERTOS_Init+0x70>)
 80002a6:	f001 fbd5 	bl	8001a54 <osThreadNew>

    osKernelStart();
 80002aa:	f001 fbad 	bl	8001a08 <osKernelStart>
}
 80002ae:	bf00      	nop
 80002b0:	3748      	adds	r7, #72	@ 0x48
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	08004474 	.word	0x08004474
 80002bc:	0800447c 	.word	0x0800447c
 80002c0:	08000151 	.word	0x08000151
 80002c4:	08000195 	.word	0x08000195

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a2c      	ldr	r2, [pc, #176]	@ (8000394 <MX_GPIO_Init+0xcc>)
 80002e2:	f043 0310 	orr.w	r3, r3, #16
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000394 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0310 	and.w	r3, r3, #16
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f4:	4b27      	ldr	r3, [pc, #156]	@ (8000394 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <MX_GPIO_Init+0xcc>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b24      	ldr	r3, [pc, #144]	@ (8000394 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0320 	and.w	r3, r3, #32
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a20      	ldr	r2, [pc, #128]	@ (8000394 <MX_GPIO_Init+0xcc>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000324:	4b1b      	ldr	r3, [pc, #108]	@ (8000394 <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a1a      	ldr	r2, [pc, #104]	@ (8000394 <MX_GPIO_Init+0xcc>)
 800032a:	f043 0308 	orr.w	r3, r3, #8
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b18      	ldr	r3, [pc, #96]	@ (8000394 <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0308 	and.w	r3, r3, #8
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	4815      	ldr	r0, [pc, #84]	@ (8000398 <MX_GPIO_Init+0xd0>)
 8000342:	f000 fc25 	bl	8000b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000346:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800034a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800034c:	4b13      	ldr	r3, [pc, #76]	@ (800039c <MX_GPIO_Init+0xd4>)
 800034e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	@ (80003a0 <MX_GPIO_Init+0xd8>)
 800035c:	f000 fa94 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000360:	2320      	movs	r3, #32
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4808      	ldr	r0, [pc, #32]	@ (8000398 <MX_GPIO_Init+0xd0>)
 8000378:	f000 fa86 	bl	8000888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2105      	movs	r1, #5
 8000380:	2028      	movs	r0, #40	@ 0x28
 8000382:	f000 fa4a 	bl	800081a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000386:	2028      	movs	r0, #40	@ 0x28
 8000388:	f000 fa63 	bl	8000852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038c:	bf00      	nop
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40021000 	.word	0x40021000
 8000398:	40010800 	.word	0x40010800
 800039c:	10110000 	.word	0x10110000
 80003a0:	40011000 	.word	0x40011000

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <Error_Handler+0x8>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <HAL_MspInit+0x68>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <HAL_MspInit+0x68>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <HAL_MspInit+0x68>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_MspInit+0x68>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <HAL_MspInit+0x68>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <HAL_MspInit+0x68>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	210f      	movs	r1, #15
 80003ea:	f06f 0001 	mvn.w	r0, #1
 80003ee:	f000 fa14 	bl	800081a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <HAL_MspInit+0x6c>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	4a04      	ldr	r2, [pc, #16]	@ (800041c <HAL_MspInit+0x6c>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40010000 	.word	0x40010000

08000420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a15      	ldr	r2, [pc, #84]	@ (8000490 <HAL_UART_MspInit+0x70>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d123      	bne.n	8000488 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <HAL_UART_MspInit+0x74>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a13      	ldr	r2, [pc, #76]	@ (8000494 <HAL_UART_MspInit+0x74>)
 8000446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800044a:	61d3      	str	r3, [r2, #28]
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <HAL_UART_MspInit+0x74>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <HAL_UART_MspInit+0x74>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a0d      	ldr	r2, [pc, #52]	@ (8000494 <HAL_UART_MspInit+0x74>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <HAL_UART_MspInit+0x74>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000470:	230c      	movs	r3, #12
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000474:	2302      	movs	r3, #2
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2302      	movs	r3, #2
 800047a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <HAL_UART_MspInit+0x78>)
 8000484:	f000 fa00 	bl	8000888 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40004400 	.word	0x40004400
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <NMI_Handler+0x4>

080004a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <HardFault_Handler+0x4>

080004ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f8ae 	bl	8000634 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004d8:	f002 ff6c 	bl	80033b4 <xTaskGetSchedulerState>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d001      	beq.n	80004e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004e2:	f003 fd11 	bl	8003f08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}

080004ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004f2:	f000 fb7f 	bl	8000bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}

080004fa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <MX_USART2_UART_Init>:

#include "main.h"

UART_HandleTypeDef huart2;

void MX_USART2_UART_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <MX_USART2_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000514:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000518:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000540:	f000 ff8a 	bl	8001458 <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x46>
        Error_Handler();
 800054a:	f7ff ff2b 	bl	80003a4 <Error_Handler>
    }
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000003c 	.word	0x2000003c
 8000558:	40004400 	.word	0x40004400

0800055c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800055c:	f7ff ffcd 	bl	80004fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480b      	ldr	r0, [pc, #44]	@ (8000590 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000562:	490c      	ldr	r1, [pc, #48]	@ (8000594 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a09      	ldr	r2, [pc, #36]	@ (800059c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000578:	4c09      	ldr	r4, [pc, #36]	@ (80005a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000586:	f003 ff37 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff fe13 	bl	80001b4 <main>
  bx lr
 800058e:	4770      	bx	lr
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000598:	080044d4 	.word	0x080044d4
  ldr r2, =_sbss
 800059c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80005a0:	200019d8 	.word	0x200019d8

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_Init+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <HAL_Init+0x28>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f923 	bl	8000804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f7ff fef4 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f93b 	bl	800086e <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000610:	f000 f903 	bl	800081a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000010 	.word	0x20000010
 800062c:	20000018 	.word	0x20000018
 8000630:	20000014 	.word	0x20000014

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x1c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_IncTick+0x20>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a03      	ldr	r2, [pc, #12]	@ (8000654 <HAL_IncTick+0x20>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000018 	.word	0x20000018
 8000654:	20000084 	.word	0x20000084

08000658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b02      	ldr	r3, [pc, #8]	@ (8000668 <HAL_GetTick+0x10>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000084 	.word	0x20000084

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	@ (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4906      	ldr	r1, [pc, #24]	@ (8000704 <__NVIC_EnableIRQ+0x34>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	@ 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007d0:	d301      	bcc.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e00f      	b.n	80007f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SysTick_Config+0x40>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e4:	f7ff ff90 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <SysTick_Config+0x40>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <SysTick_Config+0x40>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff2d 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
 8000826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800082c:	f7ff ff42 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 8000830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	6978      	ldr	r0, [r7, #20]
 8000838:	f7ff ff90 	bl	800075c <NVIC_EncodePriority>
 800083c:	4602      	mov	r2, r0
 800083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000842:	4611      	mov	r1, r2
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5f 	bl	8000708 <__NVIC_SetPriority>
}
 800084a:	bf00      	nop
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff35 	bl	80006d0 <__NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ffa2 	bl	80007c0 <SysTick_Config>
 800087c:	4603      	mov	r3, r0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000888:	b480      	push	{r7}
 800088a:	b08b      	sub	sp, #44	@ 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089a:	e169      	b.n	8000b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800089c:	2201      	movs	r2, #1
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	4013      	ands	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	f040 8158 	bne.w	8000b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a9a      	ldr	r2, [pc, #616]	@ (8000b28 <HAL_GPIO_Init+0x2a0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d05e      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008c4:	4a98      	ldr	r2, [pc, #608]	@ (8000b28 <HAL_GPIO_Init+0x2a0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d875      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008ca:	4a98      	ldr	r2, [pc, #608]	@ (8000b2c <HAL_GPIO_Init+0x2a4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d058      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008d0:	4a96      	ldr	r2, [pc, #600]	@ (8000b2c <HAL_GPIO_Init+0x2a4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d86f      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008d6:	4a96      	ldr	r2, [pc, #600]	@ (8000b30 <HAL_GPIO_Init+0x2a8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d052      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008dc:	4a94      	ldr	r2, [pc, #592]	@ (8000b30 <HAL_GPIO_Init+0x2a8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d869      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008e2:	4a94      	ldr	r2, [pc, #592]	@ (8000b34 <HAL_GPIO_Init+0x2ac>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d04c      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008e8:	4a92      	ldr	r2, [pc, #584]	@ (8000b34 <HAL_GPIO_Init+0x2ac>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d863      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008ee:	4a92      	ldr	r2, [pc, #584]	@ (8000b38 <HAL_GPIO_Init+0x2b0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d046      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008f4:	4a90      	ldr	r2, [pc, #576]	@ (8000b38 <HAL_GPIO_Init+0x2b0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d85d      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d82a      	bhi.n	8000954 <HAL_GPIO_Init+0xcc>
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d859      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 8000902:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <HAL_GPIO_Init+0x80>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000983 	.word	0x08000983
 800090c:	0800095d 	.word	0x0800095d
 8000910:	0800096f 	.word	0x0800096f
 8000914:	080009b1 	.word	0x080009b1
 8000918:	080009b7 	.word	0x080009b7
 800091c:	080009b7 	.word	0x080009b7
 8000920:	080009b7 	.word	0x080009b7
 8000924:	080009b7 	.word	0x080009b7
 8000928:	080009b7 	.word	0x080009b7
 800092c:	080009b7 	.word	0x080009b7
 8000930:	080009b7 	.word	0x080009b7
 8000934:	080009b7 	.word	0x080009b7
 8000938:	080009b7 	.word	0x080009b7
 800093c:	080009b7 	.word	0x080009b7
 8000940:	080009b7 	.word	0x080009b7
 8000944:	080009b7 	.word	0x080009b7
 8000948:	080009b7 	.word	0x080009b7
 800094c:	08000965 	.word	0x08000965
 8000950:	08000979 	.word	0x08000979
 8000954:	4a79      	ldr	r2, [pc, #484]	@ (8000b3c <HAL_GPIO_Init+0x2b4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d013      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095a:	e02c      	b.n	80009b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e029      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	3304      	adds	r3, #4
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e024      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	3308      	adds	r3, #8
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e01f      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	330c      	adds	r3, #12
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e01a      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098a:	2304      	movs	r3, #4
 800098c:	623b      	str	r3, [r7, #32]
          break;
 800098e:	e013      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d105      	bne.n	80009a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000998:	2308      	movs	r3, #8
 800099a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	611a      	str	r2, [r3, #16]
          break;
 80009a2:	e009      	b.n	80009b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	615a      	str	r2, [r3, #20]
          break;
 80009ae:	e003      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e000      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          break;
 80009b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	2bff      	cmp	r3, #255	@ 0xff
 80009bc:	d801      	bhi.n	80009c2 <HAL_GPIO_Init+0x13a>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	e001      	b.n	80009c6 <HAL_GPIO_Init+0x13e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3304      	adds	r3, #4
 80009c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2bff      	cmp	r3, #255	@ 0xff
 80009cc:	d802      	bhi.n	80009d4 <HAL_GPIO_Init+0x14c>
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x152>
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	3b08      	subs	r3, #8
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	210f      	movs	r1, #15
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	401a      	ands	r2, r3
 80009ec:	6a39      	ldr	r1, [r7, #32]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	431a      	orrs	r2, r3
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80b1 	beq.w	8000b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a08:	4b4d      	ldr	r3, [pc, #308]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b4a      	ldr	r3, [pc, #296]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a20:	4a48      	ldr	r2, [pc, #288]	@ (8000b44 <HAL_GPIO_Init+0x2bc>)
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <HAL_GPIO_Init+0x2c0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d013      	beq.n	8000a74 <HAL_GPIO_Init+0x1ec>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b4c <HAL_GPIO_Init+0x2c4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d00d      	beq.n	8000a70 <HAL_GPIO_Init+0x1e8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <HAL_GPIO_Init+0x2c8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x1e4>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b54 <HAL_GPIO_Init+0x2cc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d101      	bne.n	8000a68 <HAL_GPIO_Init+0x1e0>
 8000a64:	2303      	movs	r3, #3
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a74:	2300      	movs	r3, #0
 8000a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a86:	492f      	ldr	r1, [pc, #188]	@ (8000b44 <HAL_GPIO_Init+0x2bc>)
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	492c      	ldr	r1, [pc, #176]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	608b      	str	r3, [r1, #8]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4928      	ldr	r1, [pc, #160]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	4922      	ldr	r1, [pc, #136]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60cb      	str	r3, [r1, #12]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad6:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	491e      	ldr	r1, [pc, #120]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4918      	ldr	r1, [pc, #96]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4914      	ldr	r1, [pc, #80]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d021      	beq.n	8000b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	490e      	ldr	r1, [pc, #56]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
 8000b24:	e021      	b.n	8000b6a <HAL_GPIO_Init+0x2e2>
 8000b26:	bf00      	nop
 8000b28:	10320000 	.word	0x10320000
 8000b2c:	10310000 	.word	0x10310000
 8000b30:	10220000 	.word	0x10220000
 8000b34:	10210000 	.word	0x10210000
 8000b38:	10120000 	.word	0x10120000
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40011400 	.word	0x40011400
 8000b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4909      	ldr	r1, [pc, #36]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f47f ae8e 	bne.w	800089c <HAL_GPIO_Init+0x14>
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	372c      	adds	r7, #44	@ 0x2c
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bac:	e003      	b.n	8000bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	041a      	lsls	r2, r3, #16
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43d9      	mvns	r1, r3
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	400b      	ands	r3, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	611a      	str	r2, [r3, #16]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
	...

08000bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f806 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e272      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8087 	beq.w	8000d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	4b92      	ldr	r3, [pc, #584]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00c      	beq.n	8000c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c64:	4b8f      	ldr	r3, [pc, #572]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d112      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
 8000c70:	4b8c      	ldr	r3, [pc, #560]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	4b89      	ldr	r3, [pc, #548]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d06c      	beq.n	8000d64 <HAL_RCC_OscConfig+0x12c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d168      	bne.n	8000d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e24c      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x76>
 8000ca0:	4b80      	ldr	r3, [pc, #512]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7f      	ldr	r2, [pc, #508]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e02e      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x98>
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a7a      	ldr	r2, [pc, #488]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b78      	ldr	r3, [pc, #480]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a77      	ldr	r2, [pc, #476]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xbc>
 8000cda:	4b72      	ldr	r3, [pc, #456]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a71      	ldr	r2, [pc, #452]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a6e      	ldr	r2, [pc, #440]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6a      	ldr	r2, [pc, #424]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b68      	ldr	r3, [pc, #416]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a67      	ldr	r2, [pc, #412]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fca0 	bl	8000658 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fc9c 	bl	8000658 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	@ 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e200      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe4>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fc8c 	bl	8000658 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fc88 	bl	8000658 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	@ 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1ec      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	4b53      	ldr	r3, [pc, #332]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x10c>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d063      	beq.n	8000e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d72:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7e:	4b49      	ldr	r3, [pc, #292]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d11c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
 8000d8a:	4b46      	ldr	r3, [pc, #280]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1c0      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4939      	ldr	r1, [pc, #228]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e03a      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc41 	bl	8000658 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc3d 	bl	8000658 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e1a1      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4927      	ldr	r1, [pc, #156]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc20 	bl	8000658 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc1c 	bl	8000658 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e180      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03a      	beq.n	8000ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d019      	beq.n	8000e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fc00 	bl	8000658 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fbfc 	bl	8000658 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e160      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 face 	bl	800141c <RCC_Delay>
 8000e80:	e01c      	b.n	8000ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fbe6 	bl	8000658 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8e:	e00f      	b.n	8000eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fbe2 	bl	8000658 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d908      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e146      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	42420000 	.word	0x42420000
 8000eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	4b92      	ldr	r3, [pc, #584]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e9      	bne.n	8000e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a6 	beq.w	8001016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ece:	4b8b      	ldr	r3, [pc, #556]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b88      	ldr	r3, [pc, #544]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a87      	ldr	r2, [pc, #540]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b85      	ldr	r3, [pc, #532]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b82      	ldr	r3, [pc, #520]	@ (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f02:	4b7f      	ldr	r3, [pc, #508]	@ (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7e      	ldr	r2, [pc, #504]	@ (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fba3 	bl	8000658 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f16:	f7ff fb9f 	bl	8000658 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	@ 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e103      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	4b75      	ldr	r3, [pc, #468]	@ (8001100 <HAL_RCC_OscConfig+0x4c8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x312>
 8000f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a6e      	ldr	r2, [pc, #440]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e02d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x334>
 8000f52:	4b6a      	ldr	r3, [pc, #424]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a69      	ldr	r2, [pc, #420]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b67      	ldr	r3, [pc, #412]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a66      	ldr	r2, [pc, #408]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x356>
 8000f74:	4b61      	ldr	r3, [pc, #388]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a60      	ldr	r2, [pc, #384]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	4b5e      	ldr	r3, [pc, #376]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a5d      	ldr	r2, [pc, #372]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a5a      	ldr	r2, [pc, #360]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b58      	ldr	r3, [pc, #352]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a57      	ldr	r2, [pc, #348]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fb53 	bl	8000658 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fb4f 	bl	8000658 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0b1      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x37e>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb3d 	bl	8000658 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb39 	bl	8000658 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e09b      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b40      	ldr	r3, [pc, #256]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a3b      	ldr	r2, [pc, #236]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8087 	beq.w	800112e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d061      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d146      	bne.n	80010c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <HAL_RCC_OscConfig+0x4cc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb0d 	bl	8000658 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb09 	bl	8000658 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e06d      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001068:	d108      	bne.n	800107c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4921      	ldr	r1, [pc, #132]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a19      	ldr	r1, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	430b      	orrs	r3, r1
 800108e:	491b      	ldr	r1, [pc, #108]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_RCC_OscConfig+0x4cc>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fadd 	bl	8000658 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fad9 	bl	8000658 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e03d      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46a>
 80010c0:	e035      	b.n	800112e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_RCC_OscConfig+0x4cc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fac6 	bl	8000658 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff fac2 	bl	8000658 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e026      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x498>
 80010ee:	e01e      	b.n	800112e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e019      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
 80010fc:	40021000 	.word	0x40021000
 8001100:	40007000 	.word	0x40007000
 8001104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_RCC_OscConfig+0x500>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	429a      	cmp	r2, r3
 800111a:	d106      	bne.n	800112a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001126:	429a      	cmp	r2, r3
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0d0      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001150:	4b6a      	ldr	r3, [pc, #424]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d910      	bls.n	8001180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b67      	ldr	r3, [pc, #412]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0207 	bic.w	r2, r3, #7
 8001166:	4965      	ldr	r1, [pc, #404]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b63      	ldr	r3, [pc, #396]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0b8      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d020      	beq.n	80011ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001198:	4b59      	ldr	r3, [pc, #356]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a58      	ldr	r2, [pc, #352]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011b0:	4b53      	ldr	r3, [pc, #332]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011bc:	4b50      	ldr	r3, [pc, #320]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	494d      	ldr	r1, [pc, #308]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d040      	beq.n	800125c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d115      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e07f      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	4b41      	ldr	r3, [pc, #260]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e073      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e06b      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121a:	4b39      	ldr	r3, [pc, #228]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f023 0203 	bic.w	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	4936      	ldr	r1, [pc, #216]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800122c:	f7ff fa14 	bl	8000658 <HAL_GetTick>
 8001230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001232:	e00a      	b.n	800124a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001234:	f7ff fa10 	bl	8000658 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001242:	4293      	cmp	r3, r2
 8001244:	d901      	bls.n	800124a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e053      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 020c 	and.w	r2, r3, #12
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	429a      	cmp	r2, r3
 800125a:	d1eb      	bne.n	8001234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800125c:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d210      	bcs.n	800128c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 0207 	bic.w	r2, r3, #7
 8001272:	4922      	ldr	r1, [pc, #136]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e032      	b.n	80012f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4916      	ldr	r1, [pc, #88]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	490e      	ldr	r1, [pc, #56]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ca:	f000 f821 	bl	8001310 <HAL_RCC_GetSysClockFreq>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	490a      	ldr	r1, [pc, #40]	@ (8001304 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	5ccb      	ldrb	r3, [r1, r3]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_RCC_ClockConfig+0x1cc>)
 80012e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_ClockConfig+0x1d0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f972 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000
 8001300:	40021000 	.word	0x40021000
 8001304:	080044a0 	.word	0x080044a0
 8001308:	20000010 	.word	0x20000010
 800130c:	20000014 	.word	0x20000014

08001310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d002      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x30>
 800133a:	2b08      	cmp	r3, #8
 800133c:	d003      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x36>
 800133e:	e027      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001342:	613b      	str	r3, [r7, #16]
      break;
 8001344:	e027      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001350:	5cd3      	ldrb	r3, [r2, r3]
 8001352:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d010      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0c5b      	lsrs	r3, r3, #17
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	4a11      	ldr	r2, [pc, #68]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001372:	fb03 f202 	mul.w	r2, r3, r2
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	fbb2 f3f3 	udiv	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e004      	b.n	800138a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	613b      	str	r3, [r7, #16]
      break;
 800138e:	e002      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001392:	613b      	str	r3, [r7, #16]
      break;
 8001394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001396:	693b      	ldr	r3, [r7, #16]
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	007a1200 	.word	0x007a1200
 80013ac:	080044b8 	.word	0x080044b8
 80013b0:	080044c8 	.word	0x080044c8
 80013b4:	003d0900 	.word	0x003d0900

080013b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013bc:	4b02      	ldr	r3, [pc, #8]	@ (80013c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000010 	.word	0x20000010

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013d0:	f7ff fff2 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	@ (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	080044b0 	.word	0x080044b0

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0adb      	lsrs	r3, r3, #11
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	@ (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	080044b0 	.word	0x080044b0

0800141c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <RCC_Delay+0x34>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <RCC_Delay+0x38>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0a5b      	lsrs	r3, r3, #9
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001438:	bf00      	nop
  }
  while (Delay --);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	60fa      	str	r2, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <RCC_Delay+0x1c>
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	20000010 	.word	0x20000010
 8001454:	10624dd3 	.word	0x10624dd3

08001458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e042      	b.n	80014f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7fe ffce 	bl	8000420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2224      	movs	r2, #36	@ 0x24
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800149a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f9cf 	bl	8001840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2220      	movs	r2, #32
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b20      	cmp	r3, #32
 8001516:	d175      	bne.n	8001604 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_UART_Transmit+0x2c>
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e06e      	b.n	8001606 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2221      	movs	r2, #33	@ 0x21
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001536:	f7ff f88f 	bl	8000658 <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001550:	d108      	bne.n	8001564 <HAL_UART_Transmit+0x6c>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d104      	bne.n	8001564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	e003      	b.n	800156c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800156c:	e02e      	b.n	80015cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	2180      	movs	r1, #128	@ 0x80
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 f86d 	bl	8001658 <UART_WaitOnFlagUntilTimeout>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e03a      	b.n	8001606 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	3302      	adds	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	e007      	b.n	80015be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1cb      	bne.n	800156e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	@ 0x40
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f839 	bl	8001658 <UART_WaitOnFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e006      	b.n	8001606 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	e000      	b.n	8001606 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001604:	2302      	movs	r3, #2
  }
}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	4613      	mov	r3, r2
 800161a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b20      	cmp	r3, #32
 8001626:	d112      	bne.n	800164e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_UART_Receive_IT+0x26>
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e00b      	b.n	8001650 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	461a      	mov	r2, r3
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f860 	bl	800170a <UART_Start_Receive_IT>
 800164a:	4603      	mov	r3, r0
 800164c:	e000      	b.n	8001650 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001668:	e03b      	b.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001670:	d037      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001672:	f7fe fff1 	bl	8000658 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	6a3a      	ldr	r2, [r7, #32]
 800167e:	429a      	cmp	r2, r3
 8001680:	d302      	bcc.n	8001688 <UART_WaitOnFlagUntilTimeout+0x30>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e03a      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d023      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b80      	cmp	r3, #128	@ 0x80
 800169e:	d020      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b40      	cmp	r3, #64	@ 0x40
 80016a4:	d01d      	beq.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d116      	bne.n	80016e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f856 	bl	800177c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2208      	movs	r2, #8
 80016d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4013      	ands	r3, r2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	bf0c      	ite	eq
 80016f2:	2301      	moveq	r3, #1
 80016f4:	2300      	movne	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d0b4      	beq.n	800166a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	4613      	mov	r3, r2
 8001716:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2222      	movs	r2, #34	@ 0x22
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800174e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800177c:	b480      	push	{r7}
 800177e:	b095      	sub	sp, #84	@ 0x54
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	330c      	adds	r3, #12
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178e:	e853 3f00 	ldrex	r3, [r3]
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	330c      	adds	r3, #12
 80017a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80017aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017ac:	e841 2300 	strex	r3, r2, [r1]
 80017b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80017b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e5      	bne.n	8001784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3314      	adds	r3, #20
 80017be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	e853 3f00 	ldrex	r3, [r3]
 80017c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3314      	adds	r3, #20
 80017d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e0:	e841 2300 	strex	r3, r2, [r1]
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e5      	bne.n	80017b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d119      	bne.n	8001828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	330c      	adds	r3, #12
 80017fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	e853 3f00 	ldrex	r3, [r3]
 8001802:	60bb      	str	r3, [r7, #8]
   return(result);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f023 0310 	bic.w	r3, r3, #16
 800180a:	647b      	str	r3, [r7, #68]	@ 0x44
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	330c      	adds	r3, #12
 8001812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001814:	61ba      	str	r2, [r7, #24]
 8001816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	e841 2300 	strex	r3, r2, [r1]
 8001820:	613b      	str	r3, [r7, #16]
   return(result);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e5      	bne.n	80017f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001836:	bf00      	nop
 8001838:	3754      	adds	r7, #84	@ 0x54
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800187a:	f023 030c 	bic.w	r3, r3, #12
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	68b9      	ldr	r1, [r7, #8]
 8001884:	430b      	orrs	r3, r1
 8001886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699a      	ldr	r2, [r3, #24]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001954 <UART_SetConfig+0x114>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d103      	bne.n	80018b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80018a8:	f7ff fda4 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	e002      	b.n	80018b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80018b0:	f7ff fd8c 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009a      	lsls	r2, r3, #2
 80018c0:	441a      	add	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	4a22      	ldr	r2, [pc, #136]	@ (8001958 <UART_SetConfig+0x118>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	0119      	lsls	r1, r3, #4
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	009a      	lsls	r2, r3, #2
 80018e0:	441a      	add	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <UART_SetConfig+0x118>)
 80018ee:	fba3 0302 	umull	r0, r3, r3, r2
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2064      	movs	r0, #100	@ 0x64
 80018f6:	fb00 f303 	mul.w	r3, r0, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	3332      	adds	r3, #50	@ 0x32
 8001900:	4a15      	ldr	r2, [pc, #84]	@ (8001958 <UART_SetConfig+0x118>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800190c:	4419      	add	r1, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	441a      	add	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fbb2 f2f3 	udiv	r2, r2, r3
 8001924:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <UART_SetConfig+0x118>)
 8001926:	fba3 0302 	umull	r0, r3, r3, r2
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2064      	movs	r0, #100	@ 0x64
 800192e:	fb00 f303 	mul.w	r3, r0, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	3332      	adds	r3, #50	@ 0x32
 8001938:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <UART_SetConfig+0x118>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	f003 020f 	and.w	r2, r3, #15
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	440a      	add	r2, r1
 800194a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40013800 	.word	0x40013800
 8001958:	51eb851f 	.word	0x51eb851f

0800195c <__NVIC_SetPriority>:
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	@ (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80019b4:	2100      	movs	r1, #0
 80019b6:	f06f 0004 	mvn.w	r0, #4
 80019ba:	f7ff ffcf 	bl	800195c <__NVIC_SetPriority>
#endif
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019ca:	f3ef 8305 	mrs	r3, IPSR
 80019ce:	603b      	str	r3, [r7, #0]
  return(result);
 80019d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80019d6:	f06f 0305 	mvn.w	r3, #5
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	e00c      	b.n	80019f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <osKernelInitialize+0x40>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <osKernelInitialize+0x40>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	e002      	b.n	80019f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000088 	.word	0x20000088

08001a08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a0e:	f3ef 8305 	mrs	r3, IPSR
 8001a12:	603b      	str	r3, [r7, #0]
  return(result);
 8001a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001a1a:	f06f 0305 	mvn.w	r3, #5
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	e010      	b.n	8001a44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <osKernelStart+0x48>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d109      	bne.n	8001a3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001a2a:	f7ff ffc1 	bl	80019b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <osKernelStart+0x48>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001a34:	f001 f872 	bl	8002b1c <vTaskStartScheduler>
      stat = osOK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	e002      	b.n	8001a44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000088 	.word	0x20000088

08001a54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	@ 0x38
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a64:	f3ef 8305 	mrs	r3, IPSR
 8001a68:	617b      	str	r3, [r7, #20]
  return(result);
 8001a6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d17e      	bne.n	8001b6e <osThreadNew+0x11a>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d07b      	beq.n	8001b6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a7a:	2318      	movs	r3, #24
 8001a7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d045      	beq.n	8001b1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <osThreadNew+0x48>
        name = attr->name;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <osThreadNew+0x6e>
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b38      	cmp	r3, #56	@ 0x38
 8001ab4:	d805      	bhi.n	8001ac2 <osThreadNew+0x6e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <osThreadNew+0x72>
        return (NULL);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e054      	b.n	8001b70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00e      	beq.n	8001afc <osThreadNew+0xa8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b5b      	cmp	r3, #91	@ 0x5b
 8001ae4:	d90a      	bls.n	8001afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <osThreadNew+0xa8>
        mem = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	e010      	b.n	8001b1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10c      	bne.n	8001b1e <osThreadNew+0xca>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d108      	bne.n	8001b1e <osThreadNew+0xca>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <osThreadNew+0xca>
          mem = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	e001      	b.n	8001b1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d110      	bne.n	8001b46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b2c:	9202      	str	r2, [sp, #8]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6a3a      	ldr	r2, [r7, #32]
 8001b38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fe12 	bl	8002764 <xTaskCreateStatic>
 8001b40:	4603      	mov	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	e013      	b.n	8001b6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d110      	bne.n	8001b6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fe60 	bl	8002824 <xTaskCreate>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <osThreadNew+0x11a>
            hTask = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b6e:	693b      	ldr	r3, [r7, #16]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b80:	f3ef 8305 	mrs	r3, IPSR
 8001b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <osDelay+0x1c>
    stat = osErrorISR;
 8001b8c:	f06f 0305 	mvn.w	r3, #5
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e007      	b.n	8001ba4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 ff86 	bl	8002ab0 <vTaskDelay>
    }
  }

  return (stat);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a06      	ldr	r2, [pc, #24]	@ (8001bd8 <vApplicationGetIdleTaskMemory+0x28>)
 8001bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8001bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	@ 0x80
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	2000008c 	.word	0x2000008c
 8001bdc:	200000e8 	.word	0x200000e8

08001be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <vApplicationGetTimerTaskMemory+0x30>)
 8001bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200002e8 	.word	0x200002e8
 8001c10:	20000344 	.word	0x20000344

08001c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0208 	add.w	r2, r3, #8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0208 	add.w	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cc6:	d103      	bne.n	8001cd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e00c      	b.n	8001cea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <vListInsert+0x2e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d2f6      	bcs.n	8001cd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6892      	ldr	r2, [r2, #8]
 8001d36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6852      	ldr	r2, [r2, #4]
 8001d40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d103      	bne.n	8001d54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001da0:	f002 f834 	bl	8003e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	441a      	add	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dd6:	fb01 f303 	mul.w	r3, r1, r3
 8001dda:	441a      	add	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	22ff      	movs	r2, #255	@ 0xff
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	22ff      	movs	r2, #255	@ 0xff
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d114      	bne.n	8001e20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01a      	beq.n	8001e34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3310      	adds	r3, #16
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 f916 	bl	8003034 <xTaskRemoveFromEventList>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <xQueueGenericReset+0xd0>)
 8001e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	e009      	b.n	8001e34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3310      	adds	r3, #16
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fef5 	bl	8001c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3324      	adds	r3, #36	@ 0x24
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fef0 	bl	8001c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e34:	f002 f81a 	bl	8003e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	@ 0x38
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10b      	bne.n	8001e74 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e60:	f383 8811 	msr	BASEPRI, r3
 8001e64:	f3bf 8f6f 	isb	sy
 8001e68:	f3bf 8f4f 	dsb	sy
 8001e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <xQueueGenericCreateStatic+0x56>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <xQueueGenericCreateStatic+0x5a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <xQueueGenericCreateStatic+0x5c>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	623b      	str	r3, [r7, #32]
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <xQueueGenericCreateStatic+0x84>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <xQueueGenericCreateStatic+0x88>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <xQueueGenericCreateStatic+0x8a>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10b      	bne.n	8001eee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eda:	f383 8811 	msr	BASEPRI, r3
 8001ede:	f3bf 8f6f 	isb	sy
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	61fb      	str	r3, [r7, #28]
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001eee:	2350      	movs	r3, #80	@ 0x50
 8001ef0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b50      	cmp	r3, #80	@ 0x50
 8001ef6:	d00b      	beq.n	8001f10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	61bb      	str	r3, [r7, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00d      	beq.n	8001f38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f805 	bl	8001f42 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3730      	adds	r7, #48	@ 0x30
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e002      	b.n	8001f64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f70:	2101      	movs	r1, #1
 8001f72:	69b8      	ldr	r0, [r7, #24]
 8001f74:	f7ff fefe 	bl	8001d74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	@ 0x38
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f96:	2300      	movs	r3, #0
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10b      	bne.n	8001fbc <xQueueGenericSend+0x34>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fb6:	bf00      	nop
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <xQueueGenericSend+0x42>
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <xQueueGenericSend+0x46>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <xQueueGenericSend+0x48>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <xQueueGenericSend+0x64>
	__asm volatile
 8001fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fd8:	f383 8811 	msr	BASEPRI, r3
 8001fdc:	f3bf 8f6f 	isb	sy
 8001fe0:	f3bf 8f4f 	dsb	sy
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d103      	bne.n	8001ffa <xQueueGenericSend+0x72>
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <xQueueGenericSend+0x76>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <xQueueGenericSend+0x78>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericSend+0x94>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	623b      	str	r3, [r7, #32]
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800201c:	f001 f9ca 	bl	80033b4 <xTaskGetSchedulerState>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <xQueueGenericSend+0xa4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <xQueueGenericSend+0xa8>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <xQueueGenericSend+0xaa>
 8002030:	2300      	movs	r3, #0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <xQueueGenericSend+0xc6>
	__asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	61fb      	str	r3, [r7, #28]
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	e7fd      	b.n	800204a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800204e:	f001 fedd 	bl	8003e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <xQueueGenericSend+0xdc>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d129      	bne.n	80020b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800206a:	f000 fa0f 	bl	800248c <prvCopyDataToQueue>
 800206e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207a:	3324      	adds	r3, #36	@ 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f000 ffd9 	bl	8003034 <xTaskRemoveFromEventList>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002088:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <xQueueGenericSend+0x200>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	e00a      	b.n	80020b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800209a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <xQueueGenericSend+0x200>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020b0:	f001 fedc 	bl	8003e6c <vPortExitCritical>
				return pdPASS;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e063      	b.n	8002180 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020be:	f001 fed5 	bl	8003e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e05c      	b.n	8002180 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 f813 	bl	80030fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020da:	f001 fec7 	bl	8003e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020de:	f000 fd85 	bl	8002bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020e2:	f001 fe93 	bl	8003e0c <vPortEnterCritical>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020ec:	b25b      	sxtb	r3, r3
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020f2:	d103      	bne.n	80020fc <xQueueGenericSend+0x174>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002102:	b25b      	sxtb	r3, r3
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002108:	d103      	bne.n	8002112 <xQueueGenericSend+0x18a>
 800210a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002112:	f001 feab 	bl	8003e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f802 	bl	8003128 <xTaskCheckForTimeOut>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d124      	bne.n	8002174 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800212a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800212c:	f000 faa6 	bl	800267c <prvIsQueueFull>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d018      	beq.n	8002168 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	3310      	adds	r3, #16
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f000 ff26 	bl	8002f90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002146:	f000 fa31 	bl	80025ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800214a:	f000 fd5d 	bl	8002c08 <xTaskResumeAll>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f af7c 	bne.w	800204e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002156:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <xQueueGenericSend+0x200>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	e772      	b.n	800204e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800216a:	f000 fa1f 	bl	80025ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800216e:	f000 fd4b 	bl	8002c08 <xTaskResumeAll>
 8002172:	e76c      	b.n	800204e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002176:	f000 fa19 	bl	80025ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800217a:	f000 fd45 	bl	8002c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800217e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002180:	4618      	mov	r0, r3
 8002182:	3738      	adds	r7, #56	@ 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000ed04 	.word	0xe000ed04

0800218c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b090      	sub	sp, #64	@ 0x40
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800219e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10b      	bne.n	80021bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <xQueueGenericSendFromISR+0x3e>
 80021c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <xQueueGenericSendFromISR+0x42>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <xQueueGenericSendFromISR+0x44>
 80021ce:	2300      	movs	r3, #0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d103      	bne.n	80021fa <xQueueGenericSendFromISR+0x6e>
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <xQueueGenericSendFromISR+0x72>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <xQueueGenericSendFromISR+0x74>
 80021fe:	2300      	movs	r3, #0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10b      	bne.n	800221c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	623b      	str	r3, [r7, #32]
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800221c:	f001 feb8 	bl	8003f90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002220:	f3ef 8211 	mrs	r2, BASEPRI
 8002224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002228:	f383 8811 	msr	BASEPRI, r3
 800222c:	f3bf 8f6f 	isb	sy
 8002230:	f3bf 8f4f 	dsb	sy
 8002234:	61fa      	str	r2, [r7, #28]
 8002236:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002238:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800223a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	429a      	cmp	r2, r3
 8002246:	d302      	bcc.n	800224e <xQueueGenericSendFromISR+0xc2>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d12f      	bne.n	80022ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800224e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002254:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002264:	f000 f912 	bl	800248c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002268:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002270:	d112      	bne.n	8002298 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	3324      	adds	r3, #36	@ 0x24
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fed8 	bl	8003034 <xTaskRemoveFromEventList>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e007      	b.n	80022a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002298:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800229c:	3301      	adds	r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80022a8:	2301      	movs	r3, #1
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80022ac:	e001      	b.n	80022b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3740      	adds	r7, #64	@ 0x40
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	@ 0x30
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <xQueueReceive+0x32>
	__asm volatile
 80022e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	623b      	str	r3, [r7, #32]
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	e7fd      	b.n	80022f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <xQueueReceive+0x40>
 8002300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <xQueueReceive+0x44>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <xQueueReceive+0x46>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <xQueueReceive+0x62>
	__asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	61fb      	str	r3, [r7, #28]
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	e7fd      	b.n	8002326 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800232a:	f001 f843 	bl	80033b4 <xTaskGetSchedulerState>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <xQueueReceive+0x72>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <xQueueReceive+0x76>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <xQueueReceive+0x78>
 800233e:	2300      	movs	r3, #0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <xQueueReceive+0x94>
	__asm volatile
 8002344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	61bb      	str	r3, [r7, #24]
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800235c:	f001 fd56 	bl	8003e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01f      	beq.n	80023ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002370:	f000 f8f6 	bl	8002560 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00f      	beq.n	80023a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	3310      	adds	r3, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fe53 	bl	8003034 <xTaskRemoveFromEventList>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002394:	4b3c      	ldr	r3, [pc, #240]	@ (8002488 <xQueueReceive+0x1c0>)
 8002396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023a4:	f001 fd62 	bl	8003e6c <vPortExitCritical>
				return pdPASS;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e069      	b.n	8002480 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023b2:	f001 fd5b 	bl	8003e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e062      	b.n	8002480 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fe99 	bl	80030fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023ce:	f001 fd4d 	bl	8003e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d2:	f000 fc0b 	bl	8002bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d6:	f001 fd19 	bl	8003e0c <vPortEnterCritical>
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023e6:	d103      	bne.n	80023f0 <xQueueReceive+0x128>
 80023e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023fc:	d103      	bne.n	8002406 <xQueueReceive+0x13e>
 80023fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002406:	f001 fd31 	bl	8003e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800240a:	1d3a      	adds	r2, r7, #4
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fe88 	bl	8003128 <xTaskCheckForTimeOut>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d123      	bne.n	8002466 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800241e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002420:	f000 f916 	bl	8002650 <prvIsQueueEmpty>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d017      	beq.n	800245a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	3324      	adds	r3, #36	@ 0x24
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fdac 	bl	8002f90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800243a:	f000 f8b7 	bl	80025ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800243e:	f000 fbe3 	bl	8002c08 <xTaskResumeAll>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d189      	bne.n	800235c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <xQueueReceive+0x1c0>)
 800244a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	e780      	b.n	800235c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800245a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800245c:	f000 f8a6 	bl	80025ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002460:	f000 fbd2 	bl	8002c08 <xTaskResumeAll>
 8002464:	e77a      	b.n	800235c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002468:	f000 f8a0 	bl	80025ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800246c:	f000 fbcc 	bl	8002c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002470:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002472:	f000 f8ed 	bl	8002650 <prvIsQueueEmpty>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	f43f af6f 	beq.w	800235c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800247e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	@ 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	e000ed04 	.word	0xe000ed04

0800248c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d14d      	bne.n	800254e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 ff9a 	bl	80033f0 <xTaskPriorityDisinherit>
 80024bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e043      	b.n	800254e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d119      	bne.n	8002500 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6858      	ldr	r0, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	461a      	mov	r2, r3
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	f001 ffb2 	bl	8004440 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	441a      	add	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d32b      	bcc.n	800254e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	e026      	b.n	800254e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68d8      	ldr	r0, [r3, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	461a      	mov	r2, r3
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	f001 ff98 	bl	8004440 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	425b      	negs	r3, r3
 800251a:	441a      	add	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	425b      	negs	r3, r3
 8002536:	441a      	add	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d105      	bne.n	800254e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	3b01      	subs	r3, #1
 800254c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002556:	697b      	ldr	r3, [r7, #20]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	441a      	add	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d303      	bcc.n	8002594 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68d9      	ldr	r1, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	461a      	mov	r2, r3
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f001 ff4e 	bl	8004440 <memcpy>
	}
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025b4:	f001 fc2a 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c0:	e011      	b.n	80025e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3324      	adds	r3, #36	@ 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd30 	bl	8003034 <xTaskRemoveFromEventList>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80025da:	f000 fe09 	bl	80031f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	dce9      	bgt.n	80025c2 <prvUnlockQueue+0x16>
 80025ee:	e000      	b.n	80025f2 <prvUnlockQueue+0x46>
					break;
 80025f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	22ff      	movs	r2, #255	@ 0xff
 80025f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80025fa:	f001 fc37 	bl	8003e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025fe:	f001 fc05 	bl	8003e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002608:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800260a:	e011      	b.n	8002630 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3310      	adds	r3, #16
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fd0b 	bl	8003034 <xTaskRemoveFromEventList>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002624:	f000 fde4 	bl	80031f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002628:	7bbb      	ldrb	r3, [r7, #14]
 800262a:	3b01      	subs	r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002634:	2b00      	cmp	r3, #0
 8002636:	dce9      	bgt.n	800260c <prvUnlockQueue+0x60>
 8002638:	e000      	b.n	800263c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800263a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002644:	f001 fc12 	bl	8003e6c <vPortExitCritical>
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002658:	f001 fbd8 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002664:	2301      	movs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e001      	b.n	800266e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800266e:	f001 fbfd 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 8002672:	68fb      	ldr	r3, [r7, #12]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002684:	f001 fbc2 	bl	8003e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	429a      	cmp	r2, r3
 8002692:	d102      	bne.n	800269a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002694:	2301      	movs	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	e001      	b.n	800269e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800269e:	f001 fbe5 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	e014      	b.n	80026e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026bc:	4a0e      	ldr	r2, [pc, #56]	@ (80026f8 <vQueueAddToRegistry+0x4c>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80026c8:	490b      	ldr	r1, [pc, #44]	@ (80026f8 <vQueueAddToRegistry+0x4c>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <vQueueAddToRegistry+0x4c>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80026de:	e006      	b.n	80026ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b07      	cmp	r3, #7
 80026ea:	d9e7      	bls.n	80026bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000744 	.word	0x20000744

080026fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800270c:	f001 fb7e 	bl	8003e0c <vPortEnterCritical>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002716:	b25b      	sxtb	r3, r3
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271c:	d103      	bne.n	8002726 <vQueueWaitForMessageRestricted+0x2a>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002732:	d103      	bne.n	800273c <vQueueWaitForMessageRestricted+0x40>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800273c:	f001 fb96 	bl	8003e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3324      	adds	r3, #36	@ 0x24
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fc43 	bl	8002fdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff28 	bl	80025ac <prvUnlockQueue>
	}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	@ 0x38
 8002768:	af04      	add	r7, sp, #16
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	623b      	str	r3, [r7, #32]
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	61fb      	str	r3, [r7, #28]
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027ae:	235c      	movs	r3, #92	@ 0x5c
 80027b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80027b6:	d00b      	beq.n	80027d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	61bb      	str	r3, [r7, #24]
}
 80027ca:	bf00      	nop
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01e      	beq.n	8002816 <xTaskCreateStatic+0xb2>
 80027d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01b      	beq.n	8002816 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027f0:	2300      	movs	r3, #0
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f850 	bl	80028ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800280e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002810:	f000 f8de 	bl	80029d0 <prvAddNewTaskToReadyList>
 8002814:	e001      	b.n	800281a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800281a:	697b      	ldr	r3, [r7, #20]
	}
 800281c:	4618      	mov	r0, r3
 800281e:	3728      	adds	r7, #40	@ 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08c      	sub	sp, #48	@ 0x30
 8002828:	af04      	add	r7, sp, #16
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f001 fbe9 	bl	8004010 <pvPortMalloc>
 800283e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002846:	205c      	movs	r0, #92	@ 0x5c
 8002848:	f001 fbe2 	bl	8004010 <pvPortMalloc>
 800284c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e005      	b.n	8002868 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f001 fca5 	bl	80041ac <vPortFree>
 8002862:	e001      	b.n	8002868 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d017      	beq.n	800289e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	2300      	movs	r3, #0
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f80e 	bl	80028ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f000 f89c 	bl	80029d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e002      	b.n	80028a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028a4:	69bb      	ldr	r3, [r7, #24]
	}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	21a5      	movs	r1, #165	@ 0xa5
 80028c8:	f001 fd8e 	bl	80043e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028d6:	3b01      	subs	r3, #1
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	617b      	str	r3, [r7, #20]
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01f      	beq.n	800294e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e012      	b.n	800293a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	7819      	ldrb	r1, [r3, #0]
 800291c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	3334      	adds	r3, #52	@ 0x34
 8002924:	460a      	mov	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d9e9      	bls.n	8002914 <prvInitialiseNewTask+0x66>
 8002940:	e000      	b.n	8002944 <prvInitialiseNewTask+0x96>
			{
				break;
 8002942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800294c:	e003      	b.n	8002956 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	2b37      	cmp	r3, #55	@ 0x37
 800295a:	d901      	bls.n	8002960 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800295c:	2337      	movs	r3, #55	@ 0x37
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	2200      	movs	r2, #0
 8002970:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002974:	3304      	adds	r3, #4
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f96b 	bl	8001c52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	3318      	adds	r3, #24
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f966 	bl	8001c52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	2200      	movs	r2, #0
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	69b8      	ldr	r0, [r7, #24]
 80029b0:	f001 f93a 	bl	8003c28 <pxPortInitialiseStack>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029d8:	f001 fa18 	bl	8003e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a94 <prvAddNewTaskToReadyList+0xc4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a94 <prvAddNewTaskToReadyList+0xc4>)
 80029e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <prvAddNewTaskToReadyList+0xc8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002a98 <prvAddNewTaskToReadyList+0xc8>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <prvAddNewTaskToReadyList+0xc4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d110      	bne.n	8002a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029fc:	f000 fc1c 	bl	8003238 <prvInitialiseTaskLists>
 8002a00:	e00d      	b.n	8002a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a02:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <prvAddNewTaskToReadyList+0xcc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <prvAddNewTaskToReadyList+0xc8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d802      	bhi.n	8002a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a18:	4a1f      	ldr	r2, [pc, #124]	@ (8002a98 <prvAddNewTaskToReadyList+0xc8>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <prvAddNewTaskToReadyList+0xd0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <prvAddNewTaskToReadyList+0xd0>)
 8002a26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <prvAddNewTaskToReadyList+0xd0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <prvAddNewTaskToReadyList+0xd4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d903      	bls.n	8002a44 <prvAddNewTaskToReadyList+0x74>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <prvAddNewTaskToReadyList+0xd4>)
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <prvAddNewTaskToReadyList+0xd8>)
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7ff f905 	bl	8001c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a60:	f001 fa04 	bl	8003e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <prvAddNewTaskToReadyList+0xcc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <prvAddNewTaskToReadyList+0xc8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d207      	bcs.n	8002a8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <prvAddNewTaskToReadyList+0xdc>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000c58 	.word	0x20000c58
 8002a98:	20000784 	.word	0x20000784
 8002a9c:	20000c64 	.word	0x20000c64
 8002aa0:	20000c74 	.word	0x20000c74
 8002aa4:	20000c60 	.word	0x20000c60
 8002aa8:	20000788 	.word	0x20000788
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <vTaskDelay+0x64>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <vTaskDelay+0x32>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	60bb      	str	r3, [r7, #8]
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	e7fd      	b.n	8002ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ae2:	f000 f883 	bl	8002bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fcf1 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002aee:	f000 f88b 	bl	8002c08 <xTaskResumeAll>
 8002af2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <vTaskDelay+0x68>)
 8002afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000c80 	.word	0x20000c80
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b2a:	463a      	mov	r2, r7
 8002b2c:	1d39      	adds	r1, r7, #4
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f83c 	bl	8001bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	9202      	str	r2, [sp, #8]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	4922      	ldr	r1, [pc, #136]	@ (8002bd4 <vTaskStartScheduler+0xb8>)
 8002b4c:	4822      	ldr	r0, [pc, #136]	@ (8002bd8 <vTaskStartScheduler+0xbc>)
 8002b4e:	f7ff fe09 	bl	8002764 <xTaskCreateStatic>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <vTaskStartScheduler+0xc0>)
 8002b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b58:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <vTaskStartScheduler+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e001      	b.n	8002b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b70:	f000 fd02 	bl	8003578 <xTimerCreateTimerTask>
 8002b74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d116      	bne.n	8002baa <vTaskStartScheduler+0x8e>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	613b      	str	r3, [r7, #16]
}
 8002b8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <vTaskStartScheduler+0xc4>)
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <vTaskStartScheduler+0xc8>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <vTaskStartScheduler+0xcc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ba4:	f001 f8c0 	bl	8003d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ba8:	e00f      	b.n	8002bca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bb0:	d10b      	bne.n	8002bca <vTaskStartScheduler+0xae>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	60fb      	str	r3, [r7, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <vTaskStartScheduler+0xaa>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08004488 	.word	0x08004488
 8002bd8:	08003209 	.word	0x08003209
 8002bdc:	20000c7c 	.word	0x20000c7c
 8002be0:	20000c78 	.word	0x20000c78
 8002be4:	20000c64 	.word	0x20000c64
 8002be8:	20000c5c 	.word	0x20000c5c

08002bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <vTaskSuspendAll+0x18>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	4a03      	ldr	r2, [pc, #12]	@ (8002c04 <vTaskSuspendAll+0x18>)
 8002bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000c80 	.word	0x20000c80

08002c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c16:	4b42      	ldr	r3, [pc, #264]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <xTaskResumeAll+0x2e>
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	603b      	str	r3, [r7, #0]
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	e7fd      	b.n	8002c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c36:	f001 f8e9 	bl	8003e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c3a:	4b39      	ldr	r3, [pc, #228]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	4a37      	ldr	r2, [pc, #220]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c44:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <xTaskResumeAll+0x118>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d162      	bne.n	8002d12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c4c:	4b35      	ldr	r3, [pc, #212]	@ (8002d24 <xTaskResumeAll+0x11c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05e      	beq.n	8002d12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c54:	e02f      	b.n	8002cb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c56:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <xTaskResumeAll+0x120>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3318      	adds	r3, #24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff f85c 	bl	8001d20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f857 	bl	8001d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <xTaskResumeAll+0x124>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d903      	bls.n	8002c86 <xTaskResumeAll+0x7e>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	4a2a      	ldr	r2, [pc, #168]	@ (8002d2c <xTaskResumeAll+0x124>)
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <xTaskResumeAll+0x128>)
 8002c94:	441a      	add	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7fe ffe4 	bl	8001c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca6:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <xTaskResumeAll+0x12c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <xTaskResumeAll+0x120>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1cb      	bne.n	8002c56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cc4:	f000 fb56 	bl	8003374 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <xTaskResumeAll+0x134>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cd4:	f000 f844 	bl	8002d60 <xTaskIncrementTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002cde:	4b16      	ldr	r3, [pc, #88]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f1      	bne.n	8002cd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002cf0:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <xTaskResumeAll+0x134>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <xTaskResumeAll+0x130>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <xTaskResumeAll+0x138>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d12:	f001 f8ab 	bl	8003e6c <vPortExitCritical>

	return xAlreadyYielded;
 8002d16:	68bb      	ldr	r3, [r7, #8]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000c80 	.word	0x20000c80
 8002d24:	20000c58 	.word	0x20000c58
 8002d28:	20000c18 	.word	0x20000c18
 8002d2c:	20000c60 	.word	0x20000c60
 8002d30:	20000788 	.word	0x20000788
 8002d34:	20000784 	.word	0x20000784
 8002d38:	20000c6c 	.word	0x20000c6c
 8002d3c:	20000c68 	.word	0x20000c68
 8002d40:	e000ed04 	.word	0xe000ed04

08002d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <xTaskGetTickCount+0x18>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000c5c 	.word	0x20000c5c

08002d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea8 <xTaskIncrementTick+0x148>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8090 	bne.w	8002e94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d74:	4b4d      	ldr	r3, [pc, #308]	@ (8002eac <xTaskIncrementTick+0x14c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002eac <xTaskIncrementTick+0x14c>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d121      	bne.n	8002dcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d88:	4b49      	ldr	r3, [pc, #292]	@ (8002eb0 <xTaskIncrementTick+0x150>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	603b      	str	r3, [r7, #0]
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <xTaskIncrementTick+0x46>
 8002daa:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <xTaskIncrementTick+0x150>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <xTaskIncrementTick+0x154>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb0 <xTaskIncrementTick+0x150>)
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4a3e      	ldr	r2, [pc, #248]	@ (8002eb4 <xTaskIncrementTick+0x154>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb8 <xTaskIncrementTick+0x158>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb8 <xTaskIncrementTick+0x158>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	f000 fad4 	bl	8003374 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <xTaskIncrementTick+0x15c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d349      	bcc.n	8002e6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd6:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <xTaskIncrementTick+0x150>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <xTaskIncrementTick+0x15c>)
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002de6:	601a      	str	r2, [r3, #0]
					break;
 8002de8:	e03f      	b.n	8002e6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <xTaskIncrementTick+0x150>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d203      	bcs.n	8002e0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e02:	4a2e      	ldr	r2, [pc, #184]	@ (8002ebc <xTaskIncrementTick+0x15c>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e08:	e02f      	b.n	8002e6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe ff86 	bl	8001d20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fe ff7d 	bl	8001d20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <xTaskIncrementTick+0x160>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d903      	bls.n	8002e3a <xTaskIncrementTick+0xda>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <xTaskIncrementTick+0x160>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <xTaskIncrementTick+0x164>)
 8002e48:	441a      	add	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe ff0a 	bl	8001c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <xTaskIncrementTick+0x168>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3b8      	bcc.n	8002dd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e68:	e7b5      	b.n	8002dd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <xTaskIncrementTick+0x168>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e70:	4914      	ldr	r1, [pc, #80]	@ (8002ec4 <xTaskIncrementTick+0x164>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d901      	bls.n	8002e86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <xTaskIncrementTick+0x16c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e004      	b.n	8002e9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <xTaskIncrementTick+0x170>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <xTaskIncrementTick+0x170>)
 8002e9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e9e:	697b      	ldr	r3, [r7, #20]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000c80 	.word	0x20000c80
 8002eac:	20000c5c 	.word	0x20000c5c
 8002eb0:	20000c10 	.word	0x20000c10
 8002eb4:	20000c14 	.word	0x20000c14
 8002eb8:	20000c70 	.word	0x20000c70
 8002ebc:	20000c78 	.word	0x20000c78
 8002ec0:	20000c60 	.word	0x20000c60
 8002ec4:	20000788 	.word	0x20000788
 8002ec8:	20000784 	.word	0x20000784
 8002ecc:	20000c6c 	.word	0x20000c6c
 8002ed0:	20000c68 	.word	0x20000c68

08002ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eda:	4b28      	ldr	r3, [pc, #160]	@ (8002f7c <vTaskSwitchContext+0xa8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ee2:	4b27      	ldr	r3, [pc, #156]	@ (8002f80 <vTaskSwitchContext+0xac>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ee8:	e042      	b.n	8002f70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <vTaskSwitchContext+0xac>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef0:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <vTaskSwitchContext+0xb0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e011      	b.n	8002f1c <vTaskSwitchContext+0x48>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10b      	bne.n	8002f16 <vTaskSwitchContext+0x42>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	607b      	str	r3, [r7, #4]
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	e7fd      	b.n	8002f12 <vTaskSwitchContext+0x3e>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	491a      	ldr	r1, [pc, #104]	@ (8002f88 <vTaskSwitchContext+0xb4>)
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e3      	beq.n	8002ef8 <vTaskSwitchContext+0x24>
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a13      	ldr	r2, [pc, #76]	@ (8002f88 <vTaskSwitchContext+0xb4>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3308      	adds	r3, #8
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d104      	bne.n	8002f60 <vTaskSwitchContext+0x8c>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <vTaskSwitchContext+0xb8>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4a06      	ldr	r2, [pc, #24]	@ (8002f84 <vTaskSwitchContext+0xb0>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000c80 	.word	0x20000c80
 8002f80:	20000c6c 	.word	0x20000c6c
 8002f84:	20000c60 	.word	0x20000c60
 8002f88:	20000788 	.word	0x20000788
 8002f8c:	20000784 	.word	0x20000784

08002f90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60fb      	str	r3, [r7, #12]
}
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fb8:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <vTaskPlaceOnEventList+0x48>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fe fe75 	bl	8001cb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	6838      	ldr	r0, [r7, #0]
 8002fca:	f000 fa81 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000784 	.word	0x20000784

08002fdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	617b      	str	r3, [r7, #20]
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <vTaskPlaceOnEventListRestricted+0x54>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3318      	adds	r3, #24
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7fe fe2b 	bl	8001c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800301e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	f000 fa54 	bl	80034d0 <prvAddCurrentTaskToDelayedList>
	}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000784 	.word	0x20000784

08003034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60fb      	str	r3, [r7, #12]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3318      	adds	r3, #24
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fe5a 	bl	8001d20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306c:	4b1d      	ldr	r3, [pc, #116]	@ (80030e4 <xTaskRemoveFromEventList+0xb0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11d      	bne.n	80030b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3304      	adds	r3, #4
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fe51 	bl	8001d20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <xTaskRemoveFromEventList+0xb4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d903      	bls.n	8003092 <xTaskRemoveFromEventList+0x5e>
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <xTaskRemoveFromEventList+0xb4>)
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <xTaskRemoveFromEventList+0xb8>)
 80030a0:	441a      	add	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe fdde 	bl	8001c6a <vListInsertEnd>
 80030ae:	e005      	b.n	80030bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	3318      	adds	r3, #24
 80030b4:	4619      	mov	r1, r3
 80030b6:	480e      	ldr	r0, [pc, #56]	@ (80030f0 <xTaskRemoveFromEventList+0xbc>)
 80030b8:	f7fe fdd7 	bl	8001c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <xTaskRemoveFromEventList+0xc0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d905      	bls.n	80030d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <xTaskRemoveFromEventList+0xc4>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e001      	b.n	80030da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20000c80 	.word	0x20000c80
 80030e8:	20000c60 	.word	0x20000c60
 80030ec:	20000788 	.word	0x20000788
 80030f0:	20000c18 	.word	0x20000c18
 80030f4:	20000784 	.word	0x20000784
 80030f8:	20000c6c 	.word	0x20000c6c

080030fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <vTaskInternalSetTimeOutState+0x24>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <vTaskInternalSetTimeOutState+0x28>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	605a      	str	r2, [r3, #4]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000c70 	.word	0x20000c70
 8003124:	20000c5c 	.word	0x20000c5c

08003128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	613b      	str	r3, [r7, #16]
}
 800314a:	bf00      	nop
 800314c:	bf00      	nop
 800314e:	e7fd      	b.n	800314c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	60fb      	str	r3, [r7, #12]
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	e7fd      	b.n	800316a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800316e:	f000 fe4d 	bl	8003e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003172:	4b1d      	ldr	r3, [pc, #116]	@ (80031e8 <xTaskCheckForTimeOut+0xc0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318a:	d102      	bne.n	8003192 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e023      	b.n	80031da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <xTaskCheckForTimeOut+0xc4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d007      	beq.n	80031ae <xTaskCheckForTimeOut+0x86>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	e015      	b.n	80031da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d20b      	bcs.n	80031d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff99 	bl	80030fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e004      	b.n	80031da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031da:	f000 fe47 	bl	8003e6c <vPortExitCritical>

	return xReturn;
 80031de:	69fb      	ldr	r3, [r7, #28]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000c5c 	.word	0x20000c5c
 80031ec:	20000c70 	.word	0x20000c70

080031f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031f4:	4b03      	ldr	r3, [pc, #12]	@ (8003204 <vTaskMissedYield+0x14>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000c6c 	.word	0x20000c6c

08003208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003210:	f000 f852 	bl	80032b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <prvIdleTask+0x28>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d9f9      	bls.n	8003210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <prvIdleTask+0x2c>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800322c:	e7f0      	b.n	8003210 <prvIdleTask+0x8>
 800322e:	bf00      	nop
 8003230:	20000788 	.word	0x20000788
 8003234:	e000ed04 	.word	0xe000ed04

08003238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	e00c      	b.n	800325e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <prvInitialiseTaskLists+0x60>)
 8003250:	4413      	add	r3, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fcde 	bl	8001c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b37      	cmp	r3, #55	@ 0x37
 8003262:	d9ef      	bls.n	8003244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003264:	480d      	ldr	r0, [pc, #52]	@ (800329c <prvInitialiseTaskLists+0x64>)
 8003266:	f7fe fcd5 	bl	8001c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800326a:	480d      	ldr	r0, [pc, #52]	@ (80032a0 <prvInitialiseTaskLists+0x68>)
 800326c:	f7fe fcd2 	bl	8001c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003270:	480c      	ldr	r0, [pc, #48]	@ (80032a4 <prvInitialiseTaskLists+0x6c>)
 8003272:	f7fe fccf 	bl	8001c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003276:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <prvInitialiseTaskLists+0x70>)
 8003278:	f7fe fccc 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800327c:	480b      	ldr	r0, [pc, #44]	@ (80032ac <prvInitialiseTaskLists+0x74>)
 800327e:	f7fe fcc9 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003282:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <prvInitialiseTaskLists+0x78>)
 8003284:	4a05      	ldr	r2, [pc, #20]	@ (800329c <prvInitialiseTaskLists+0x64>)
 8003286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003288:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <prvInitialiseTaskLists+0x7c>)
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <prvInitialiseTaskLists+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000788 	.word	0x20000788
 800329c:	20000be8 	.word	0x20000be8
 80032a0:	20000bfc 	.word	0x20000bfc
 80032a4:	20000c18 	.word	0x20000c18
 80032a8:	20000c2c 	.word	0x20000c2c
 80032ac:	20000c44 	.word	0x20000c44
 80032b0:	20000c10 	.word	0x20000c10
 80032b4:	20000c14 	.word	0x20000c14

080032b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032be:	e019      	b.n	80032f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032c0:	f000 fda4 	bl	8003e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <prvCheckTasksWaitingTermination+0x50>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fd25 	bl	8001d20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032d6:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <prvCheckTasksWaitingTermination+0x54>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3b01      	subs	r3, #1
 80032dc:	4a0b      	ldr	r2, [pc, #44]	@ (800330c <prvCheckTasksWaitingTermination+0x54>)
 80032de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <prvCheckTasksWaitingTermination+0x58>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <prvCheckTasksWaitingTermination+0x58>)
 80032e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032ea:	f000 fdbf 	bl	8003e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f810 	bl	8003314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <prvCheckTasksWaitingTermination+0x58>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e1      	bne.n	80032c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000c2c 	.word	0x20000c2c
 800330c:	20000c58 	.word	0x20000c58
 8003310:	20000c40 	.word	0x20000c40

08003314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff3e 	bl	80041ac <vPortFree>
				vPortFree( pxTCB );
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 ff3b 	bl	80041ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003336:	e019      	b.n	800336c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800333e:	2b01      	cmp	r3, #1
 8003340:	d103      	bne.n	800334a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 ff32 	bl	80041ac <vPortFree>
	}
 8003348:	e010      	b.n	800336c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003350:	2b02      	cmp	r3, #2
 8003352:	d00b      	beq.n	800336c <prvDeleteTCB+0x58>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <prvDeleteTCB+0x54>
	}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337a:	4b0c      	ldr	r3, [pc, #48]	@ (80033ac <prvResetNextTaskUnblockTime+0x38>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003384:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <prvResetNextTaskUnblockTime+0x3c>)
 8003386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800338a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800338c:	e008      	b.n	80033a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338e:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <prvResetNextTaskUnblockTime+0x38>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a04      	ldr	r2, [pc, #16]	@ (80033b0 <prvResetNextTaskUnblockTime+0x3c>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000c10 	.word	0x20000c10
 80033b0:	20000c78 	.word	0x20000c78

080033b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <xTaskGetSchedulerState+0x34>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033c2:	2301      	movs	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e008      	b.n	80033da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <xTaskGetSchedulerState+0x38>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033d0:	2302      	movs	r3, #2
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	e001      	b.n	80033da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033da:	687b      	ldr	r3, [r7, #4]
	}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000c64 	.word	0x20000c64
 80033ec:	20000c80 	.word	0x20000c80

080033f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d058      	beq.n	80034b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003406:	4b2f      	ldr	r3, [pc, #188]	@ (80034c4 <xTaskPriorityDisinherit+0xd4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d00b      	beq.n	8003428 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	60fb      	str	r3, [r7, #12]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	60bb      	str	r3, [r7, #8]
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	429a      	cmp	r2, r3
 800345c:	d02c      	beq.n	80034b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d128      	bne.n	80034b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3304      	adds	r3, #4
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fc58 	bl	8001d20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <xTaskPriorityDisinherit+0xd8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <xTaskPriorityDisinherit+0xa8>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <xTaskPriorityDisinherit+0xd8>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a09      	ldr	r2, [pc, #36]	@ (80034cc <xTaskPriorityDisinherit+0xdc>)
 80034a6:	441a      	add	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fbdb 	bl	8001c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034b8:	697b      	ldr	r3, [r7, #20]
	}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000784 	.word	0x20000784
 80034c8:	20000c60 	.word	0x20000c60
 80034cc:	20000788 	.word	0x20000788

080034d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034da:	4b21      	ldr	r3, [pc, #132]	@ (8003560 <prvAddCurrentTaskToDelayedList+0x90>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x94>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fc1a 	bl	8001d20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034f2:	d10a      	bne.n	800350a <prvAddCurrentTaskToDelayedList+0x3a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x94>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3304      	adds	r3, #4
 8003500:	4619      	mov	r1, r3
 8003502:	4819      	ldr	r0, [pc, #100]	@ (8003568 <prvAddCurrentTaskToDelayedList+0x98>)
 8003504:	f7fe fbb1 	bl	8001c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003508:	e026      	b.n	8003558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003512:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x94>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	429a      	cmp	r2, r3
 8003520:	d209      	bcs.n	8003536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003522:	4b12      	ldr	r3, [pc, #72]	@ (800356c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x94>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f7fe fbbe 	bl	8001cb0 <vListInsert>
}
 8003534:	e010      	b.n	8003558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003536:	4b0e      	ldr	r3, [pc, #56]	@ (8003570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <prvAddCurrentTaskToDelayedList+0x94>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe fbb4 	bl	8001cb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d202      	bcs.n	8003558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003552:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	20000c5c 	.word	0x20000c5c
 8003564:	20000784 	.word	0x20000784
 8003568:	20000c44 	.word	0x20000c44
 800356c:	20000c14 	.word	0x20000c14
 8003570:	20000c10 	.word	0x20000c10
 8003574:	20000c78 	.word	0x20000c78

08003578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003582:	f000 fb11 	bl	8003ba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003586:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <xTimerCreateTimerTask+0x84>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d021      	beq.n	80035d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003596:	1d3a      	adds	r2, r7, #4
 8003598:	f107 0108 	add.w	r1, r7, #8
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fb1d 	bl	8001be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	9202      	str	r2, [sp, #8]
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	2302      	movs	r3, #2
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	460a      	mov	r2, r1
 80035b8:	4911      	ldr	r1, [pc, #68]	@ (8003600 <xTimerCreateTimerTask+0x88>)
 80035ba:	4812      	ldr	r0, [pc, #72]	@ (8003604 <xTimerCreateTimerTask+0x8c>)
 80035bc:	f7ff f8d2 	bl	8002764 <xTaskCreateStatic>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4a11      	ldr	r2, [pc, #68]	@ (8003608 <xTimerCreateTimerTask+0x90>)
 80035c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <xTimerCreateTimerTask+0x90>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	613b      	str	r3, [r7, #16]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80035f0:	697b      	ldr	r3, [r7, #20]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000cb4 	.word	0x20000cb4
 8003600:	08004490 	.word	0x08004490
 8003604:	08003745 	.word	0x08003745
 8003608:	20000cb8 	.word	0x20000cb8

0800360c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <xTimerGenericCommand+0x30>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	623b      	str	r3, [r7, #32]
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	e7fd      	b.n	8003638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <xTimerGenericCommand+0x98>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d02a      	beq.n	800369a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	dc18      	bgt.n	8003688 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003656:	f7ff fead 	bl	80033b4 <xTaskGetSchedulerState>
 800365a:	4603      	mov	r3, r0
 800365c:	2b02      	cmp	r3, #2
 800365e:	d109      	bne.n	8003674 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003660:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <xTimerGenericCommand+0x98>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f107 0110 	add.w	r1, r7, #16
 8003668:	2300      	movs	r3, #0
 800366a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800366c:	f7fe fc8c 	bl	8001f88 <xQueueGenericSend>
 8003670:	6278      	str	r0, [r7, #36]	@ 0x24
 8003672:	e012      	b.n	800369a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <xTimerGenericCommand+0x98>)
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	f107 0110 	add.w	r1, r7, #16
 800367c:	2300      	movs	r3, #0
 800367e:	2200      	movs	r2, #0
 8003680:	f7fe fc82 	bl	8001f88 <xQueueGenericSend>
 8003684:	6278      	str	r0, [r7, #36]	@ 0x24
 8003686:	e008      	b.n	800369a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <xTimerGenericCommand+0x98>)
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	f107 0110 	add.w	r1, r7, #16
 8003690:	2300      	movs	r3, #0
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	f7fe fd7a 	bl	800218c <xQueueGenericSendFromISR>
 8003698:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	@ 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000cb4 	.word	0x20000cb4

080036a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b2:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <prvProcessExpiredTimer+0x98>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3304      	adds	r3, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe fb2d 	bl	8001d20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d023      	beq.n	800371c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	18d1      	adds	r1, r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	6978      	ldr	r0, [r7, #20]
 80036e2:	f000 f8d3 	bl	800388c <prvInsertTimerInActiveList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	2100      	movs	r1, #0
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff88 	bl	800360c <xTimerGenericCommand>
 80036fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d114      	bne.n	800372e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60fb      	str	r3, [r7, #12]
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	6978      	ldr	r0, [r7, #20]
 8003734:	4798      	blx	r3
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000cac 	.word	0x20000cac

08003744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800374c:	f107 0308 	add.w	r3, r7, #8
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f859 	bl	8003808 <prvGetNextExpireTime>
 8003756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f805 	bl	800376c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003762:	f000 f8d5 	bl	8003910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003766:	bf00      	nop
 8003768:	e7f0      	b.n	800374c <prvTimerTask+0x8>
	...

0800376c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003776:	f7ff fa39 	bl	8002bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800377a:	f107 0308 	add.w	r3, r7, #8
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f864 	bl	800384c <prvSampleTimeNow>
 8003784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d130      	bne.n	80037ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <prvProcessTimerOrBlockTask+0x3c>
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	429a      	cmp	r2, r3
 8003798:	d806      	bhi.n	80037a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800379a:	f7ff fa35 	bl	8002c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff81 	bl	80036a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80037a6:	e024      	b.n	80037f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <prvProcessTimerOrBlockTask+0x90>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <prvProcessTimerOrBlockTask+0x50>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <prvProcessTimerOrBlockTask+0x52>
 80037bc:	2300      	movs	r3, #0
 80037be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <prvProcessTimerOrBlockTask+0x94>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	f7fe ff95 	bl	80026fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80037d2:	f7ff fa19 	bl	8002c08 <xTaskResumeAll>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <prvProcessTimerOrBlockTask+0x98>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
}
 80037ec:	e001      	b.n	80037f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037ee:	f7ff fa0b 	bl	8002c08 <xTaskResumeAll>
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000cb0 	.word	0x20000cb0
 8003800:	20000cb4 	.word	0x20000cb4
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <prvGetNextExpireTime+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <prvGetNextExpireTime+0x16>
 800381a:	2201      	movs	r2, #1
 800381c:	e000      	b.n	8003820 <prvGetNextExpireTime+0x18>
 800381e:	2200      	movs	r2, #0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <prvGetNextExpireTime+0x40>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e001      	b.n	800383c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	20000cac 	.word	0x20000cac

0800384c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003854:	f7ff fa76 	bl	8002d44 <xTaskGetTickCount>
 8003858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <prvSampleTimeNow+0x3c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	429a      	cmp	r2, r3
 8003862:	d205      	bcs.n	8003870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003864:	f000 f93a 	bl	8003adc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e002      	b.n	8003876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003876:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <prvSampleTimeNow+0x3c>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800387c:	68fb      	ldr	r3, [r7, #12]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000cbc 	.word	0x20000cbc

0800388c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d812      	bhi.n	80038d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d302      	bcc.n	80038c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e01b      	b.n	80038fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <prvInsertTimerInActiveList+0x7c>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7fe f9ed 	bl	8001cb0 <vListInsert>
 80038d6:	e012      	b.n	80038fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d206      	bcs.n	80038ee <prvInsertTimerInActiveList+0x62>
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d302      	bcc.n	80038ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	e007      	b.n	80038fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <prvInsertTimerInActiveList+0x80>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fe f9d9 	bl	8001cb0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038fe:	697b      	ldr	r3, [r7, #20]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000cb0 	.word	0x20000cb0
 800390c:	20000cac 	.word	0x20000cac

08003910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	@ 0x38
 8003914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003916:	e0ce      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da19      	bge.n	8003952 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	3304      	adds	r3, #4
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	61fb      	str	r3, [r7, #28]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003948:	6850      	ldr	r0, [r2, #4]
 800394a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800394c:	6892      	ldr	r2, [r2, #8]
 800394e:	4611      	mov	r1, r2
 8003950:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f2c0 80ae 	blt.w	8003ab6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	3304      	adds	r3, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe f9d8 	bl	8001d20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003970:	463b      	mov	r3, r7
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff6a 	bl	800384c <prvSampleTimeNow>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b09      	cmp	r3, #9
 800397e:	f200 8097 	bhi.w	8003ab0 <prvProcessReceivedCommands+0x1a0>
 8003982:	a201      	add	r2, pc, #4	@ (adr r2, 8003988 <prvProcessReceivedCommands+0x78>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039b1 	.word	0x080039b1
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b1 	.word	0x080039b1
 8003994:	08003a27 	.word	0x08003a27
 8003998:	08003a3b 	.word	0x08003a3b
 800399c:	08003a87 	.word	0x08003a87
 80039a0:	080039b1 	.word	0x080039b1
 80039a4:	080039b1 	.word	0x080039b1
 80039a8:	08003a27 	.word	0x08003a27
 80039ac:	08003a3b 	.word	0x08003a3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	18d1      	adds	r1, r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039d0:	f7ff ff5c 	bl	800388c <prvInsertTimerInActiveList>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d06c      	beq.n	8003ab4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d061      	beq.n	8003ab4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	441a      	add	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	2100      	movs	r1, #0
 8003a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a02:	f7ff fe03 	bl	800360c <xTimerGenericCommand>
 8003a06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d152      	bne.n	8003ab4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	61bb      	str	r3, [r7, #24]
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003a38:	e03d      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	617b      	str	r3, [r7, #20]
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	e7fd      	b.n	8003a6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	18d1      	adds	r1, r2, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a80:	f7ff ff04 	bl	800388c <prvInsertTimerInActiveList>
					break;
 8003a84:	e017      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a96:	f000 fb89 	bl	80041ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a9a:	e00c      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003aae:	e002      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <prvProcessReceivedCommands+0x1a6>
					break;
 8003ab4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ab6:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <prvProcessReceivedCommands+0x1c8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	1d39      	adds	r1, r7, #4
 8003abc:	2200      	movs	r2, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fc02 	bl	80022c8 <xQueueReceive>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f47f af26 	bne.w	8003918 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3730      	adds	r7, #48	@ 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000cb4 	.word	0x20000cb4

08003adc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ae2:	e049      	b.n	8003b78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe f90f 	bl	8001d20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d02f      	beq.n	8003b78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d90e      	bls.n	8003b48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fe f8b5 	bl	8001cb0 <vListInsert>
 8003b46:	e017      	b.n	8003b78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	2100      	movs	r1, #0
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f7ff fd5a 	bl	800360c <xTimerGenericCommand>
 8003b58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	603b      	str	r3, [r7, #0]
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b78:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1b0      	bne.n	8003ae4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b82:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b88:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <prvSwitchTimerLists+0xc8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <prvSwitchTimerLists+0xc4>)
 8003b8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b90:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <prvSwitchTimerLists+0xc8>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6013      	str	r3, [r2, #0]
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000cac 	.word	0x20000cac
 8003ba4:	20000cb0 	.word	0x20000cb0

08003ba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003bae:	f000 f92d 	bl	8003e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <prvCheckForValidListAndQueue+0x60>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d120      	bne.n	8003bfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003bba:	4814      	ldr	r0, [pc, #80]	@ (8003c0c <prvCheckForValidListAndQueue+0x64>)
 8003bbc:	f7fe f82a 	bl	8001c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003bc0:	4813      	ldr	r0, [pc, #76]	@ (8003c10 <prvCheckForValidListAndQueue+0x68>)
 8003bc2:	f7fe f827 	bl	8001c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <prvCheckForValidListAndQueue+0x6c>)
 8003bc8:	4a10      	ldr	r2, [pc, #64]	@ (8003c0c <prvCheckForValidListAndQueue+0x64>)
 8003bca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <prvCheckForValidListAndQueue+0x70>)
 8003bce:	4a10      	ldr	r2, [pc, #64]	@ (8003c10 <prvCheckForValidListAndQueue+0x68>)
 8003bd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4b11      	ldr	r3, [pc, #68]	@ (8003c1c <prvCheckForValidListAndQueue+0x74>)
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <prvCheckForValidListAndQueue+0x78>)
 8003bda:	2110      	movs	r1, #16
 8003bdc:	200a      	movs	r0, #10
 8003bde:	f7fe f933 	bl	8001e48 <xQueueGenericCreateStatic>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4a08      	ldr	r2, [pc, #32]	@ (8003c08 <prvCheckForValidListAndQueue+0x60>)
 8003be6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003be8:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <prvCheckForValidListAndQueue+0x60>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <prvCheckForValidListAndQueue+0x60>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	490b      	ldr	r1, [pc, #44]	@ (8003c24 <prvCheckForValidListAndQueue+0x7c>)
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fd58 	bl	80026ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bfc:	f000 f936 	bl	8003e6c <vPortExitCritical>
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000cb4 	.word	0x20000cb4
 8003c0c:	20000c84 	.word	0x20000c84
 8003c10:	20000c98 	.word	0x20000c98
 8003c14:	20000cac 	.word	0x20000cac
 8003c18:	20000cb0 	.word	0x20000cb0
 8003c1c:	20000d60 	.word	0x20000d60
 8003c20:	20000cc0 	.word	0x20000cc0
 8003c24:	08004498 	.word	0x08004498

08003c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c58:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <pxPortInitialiseStack+0x54>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b14      	subs	r3, #20
 8003c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b20      	subs	r3, #32
 8003c6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c70:	68fb      	ldr	r3, [r7, #12]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	08003c81 	.word	0x08003c81

08003c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c8a:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <prvTaskExitError+0x54>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c92:	d00b      	beq.n	8003cac <prvTaskExitError+0x2c>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <prvTaskExitError+0x28>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60bb      	str	r3, [r7, #8]
}
 8003cbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cc0:	bf00      	nop
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0fc      	beq.n	8003cc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	2000001c 	.word	0x2000001c
	...

08003ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <pxCurrentTCBConst2>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cea:	f380 8809 	msr	PSP, r0
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003cfe:	4770      	bx	lr

08003d00 <pxCurrentTCBConst2>:
 8003d00:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop

08003d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d08:	4806      	ldr	r0, [pc, #24]	@ (8003d24 <prvPortStartFirstTask+0x1c>)
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	6800      	ldr	r0, [r0, #0]
 8003d0e:	f380 8808 	msr	MSP, r0
 8003d12:	b662      	cpsie	i
 8003d14:	b661      	cpsie	f
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	df00      	svc	0
 8003d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d22:	bf00      	nop
 8003d24:	e000ed08 	.word	0xe000ed08

08003d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d2e:	4b32      	ldr	r3, [pc, #200]	@ (8003df8 <xPortStartScheduler+0xd0>)
 8003d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	@ 0xff
 8003d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <xPortStartScheduler+0xd4>)
 8003d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d56:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5c:	e009      	b.n	8003d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d0ef      	beq.n	8003d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00b      	beq.n	8003da2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003db4:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dd8:	f000 f8b8 	bl	8003f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <xPortStartScheduler+0xe0>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003de2:	f7ff ff91 	bl	8003d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003de6:	f7ff f875 	bl	8002ed4 <vTaskSwitchContext>
	prvTaskExitError();
 8003dea:	f7ff ff49 	bl	8003c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e000e400 	.word	0xe000e400
 8003dfc:	20000db0 	.word	0x20000db0
 8003e00:	20000db4 	.word	0x20000db4
 8003e04:	e000ed20 	.word	0xe000ed20
 8003e08:	2000001c 	.word	0x2000001c

08003e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
}
 8003e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d110      	bne.n	8003e5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	603b      	str	r3, [r7, #0]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <vPortEnterCritical+0x4a>
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	2000001c 	.word	0x2000001c
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <vPortExitCritical+0x26>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	607b      	str	r3, [r7, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <vPortExitCritical+0x44>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f383 8811 	msr	BASEPRI, r3
}
 8003eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	2000001c 	.word	0x2000001c

08003ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ec0:	f3ef 8009 	mrs	r0, PSP
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <pxCurrentTCBConst>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ed0:	6010      	str	r0, [r2, #0]
 8003ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ed6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003eda:	f380 8811 	msr	BASEPRI, r0
 8003ede:	f7fe fff9 	bl	8002ed4 <vTaskSwitchContext>
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8811 	msr	BASEPRI, r0
 8003eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6808      	ldr	r0, [r1, #0]
 8003ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ef6:	f380 8809 	msr	PSP, r0
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	4770      	bx	lr

08003f00 <pxCurrentTCBConst>:
 8003f00:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f7fe ff1d 	bl	8002d60 <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <xPortSysTickHandler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e010 	.word	0xe000e010
 8003f80:	e000e018 	.word	0xe000e018
 8003f84:	20000010 	.word	0x20000010
 8003f88:	10624dd3 	.word	0x10624dd3
 8003f8c:	e000e014 	.word	0xe000e014

08003f90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f96:	f3ef 8305 	mrs	r3, IPSR
 8003f9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d915      	bls.n	8003fce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003fa2:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <vPortValidateInterruptPriority+0x70>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003fac:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <vPortValidateInterruptPriority+0x74>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	7afa      	ldrb	r2, [r7, #11]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d20b      	bcs.n	8003fce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	607b      	str	r3, [r7, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	e7fd      	b.n	8003fca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <vPortValidateInterruptPriority+0x78>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <vPortValidateInterruptPriority+0x7c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d90b      	bls.n	8003ff6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <vPortValidateInterruptPriority+0x62>
	}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	e000e3f0 	.word	0xe000e3f0
 8004004:	20000db0 	.word	0x20000db0
 8004008:	e000ed0c 	.word	0xe000ed0c
 800400c:	20000db4 	.word	0x20000db4

08004010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800401c:	f7fe fde6 	bl	8002bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004020:	4b5c      	ldr	r3, [pc, #368]	@ (8004194 <pvPortMalloc+0x184>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004028:	f000 f924 	bl	8004274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800402c:	4b5a      	ldr	r3, [pc, #360]	@ (8004198 <pvPortMalloc+0x188>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8095 	bne.w	8004164 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01e      	beq.n	800407e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004040:	2208      	movs	r2, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	3308      	adds	r3, #8
 800405a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <pvPortMalloc+0x6e>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d06f      	beq.n	8004164 <pvPortMalloc+0x154>
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <pvPortMalloc+0x18c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d86a      	bhi.n	8004164 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800408e:	4b44      	ldr	r3, [pc, #272]	@ (80041a0 <pvPortMalloc+0x190>)
 8004090:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004092:	4b43      	ldr	r3, [pc, #268]	@ (80041a0 <pvPortMalloc+0x190>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004098:	e004      	b.n	80040a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d903      	bls.n	80040b6 <pvPortMalloc+0xa6>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040b6:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <pvPortMalloc+0x184>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	429a      	cmp	r2, r3
 80040be:	d051      	beq.n	8004164 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	4413      	add	r3, r2
 80040c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	2308      	movs	r3, #8
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	429a      	cmp	r2, r3
 80040e0:	d920      	bls.n	8004124 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <pvPortMalloc+0xfc>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800411e:	69b8      	ldr	r0, [r7, #24]
 8004120:	f000 f90a 	bl	8004338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004124:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <pvPortMalloc+0x18c>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <pvPortMalloc+0x18c>)
 8004130:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004132:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <pvPortMalloc+0x18c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <pvPortMalloc+0x194>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d203      	bcs.n	8004146 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800413e:	4b17      	ldr	r3, [pc, #92]	@ (800419c <pvPortMalloc+0x18c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <pvPortMalloc+0x194>)
 8004144:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <pvPortMalloc+0x188>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	431a      	orrs	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800415a:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <pvPortMalloc+0x198>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a11      	ldr	r2, [pc, #68]	@ (80041a8 <pvPortMalloc+0x198>)
 8004162:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004164:	f7fe fd50 	bl	8002c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <pvPortMalloc+0x17a>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	60fb      	str	r3, [r7, #12]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <pvPortMalloc+0x176>
	return pvReturn;
 800418a:	69fb      	ldr	r3, [r7, #28]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200019c0 	.word	0x200019c0
 8004198:	200019d4 	.word	0x200019d4
 800419c:	200019c4 	.word	0x200019c4
 80041a0:	200019b8 	.word	0x200019b8
 80041a4:	200019c8 	.word	0x200019c8
 80041a8:	200019cc 	.word	0x200019cc

080041ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d04f      	beq.n	800425e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041be:	2308      	movs	r3, #8
 80041c0:	425b      	negs	r3, r3
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <vPortFree+0xbc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <vPortFree+0x46>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <vPortFree+0x66>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <vPortFree+0xbc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01e      	beq.n	800425e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <vPortFree+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004238:	f7fe fcd8 	bl	8002bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <vPortFree+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4413      	add	r3, r2
 8004246:	4a09      	ldr	r2, [pc, #36]	@ (800426c <vPortFree+0xc0>)
 8004248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800424a:	6938      	ldr	r0, [r7, #16]
 800424c:	f000 f874 	bl	8004338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <vPortFree+0xc4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a06      	ldr	r2, [pc, #24]	@ (8004270 <vPortFree+0xc4>)
 8004258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800425a:	f7fe fcd5 	bl	8002c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200019d4 	.word	0x200019d4
 800426c:	200019c4 	.word	0x200019c4
 8004270:	200019d0 	.word	0x200019d0

08004274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800427a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800427e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004280:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <prvHeapInit+0xac>)
 8004282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <prvHeapInit+0xac>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <prvHeapInit+0xb0>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <prvHeapInit+0xb0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a15      	ldr	r2, [pc, #84]	@ (8004328 <prvHeapInit+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <prvHeapInit+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <prvHeapInit+0xb4>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <prvHeapInit+0xb8>)
 8004302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <prvHeapInit+0xbc>)
 800430a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <prvHeapInit+0xc0>)
 800430e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000db8 	.word	0x20000db8
 8004324:	200019b8 	.word	0x200019b8
 8004328:	200019c0 	.word	0x200019c0
 800432c:	200019c8 	.word	0x200019c8
 8004330:	200019c4 	.word	0x200019c4
 8004334:	200019d4 	.word	0x200019d4

08004338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <prvInsertBlockIntoFreeList+0xa8>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e002      	b.n	800434c <prvInsertBlockIntoFreeList+0x14>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d8f7      	bhi.n	8004346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d108      	bne.n	800437a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d118      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d00d      	beq.n	80043b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e008      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e003      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	200019b8 	.word	0x200019b8
 80043e4:	200019c0 	.word	0x200019c0

080043e8 <memset>:
 80043e8:	4603      	mov	r3, r0
 80043ea:	4402      	add	r2, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	2600      	movs	r6, #0
 80043fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004430 <__libc_init_array+0x38>)
 80043fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004434 <__libc_init_array+0x3c>)
 8004400:	1b64      	subs	r4, r4, r5
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	f000 f828 	bl	800445c <_init>
 800440c:	2600      	movs	r6, #0
 800440e:	4d0a      	ldr	r5, [pc, #40]	@ (8004438 <__libc_init_array+0x40>)
 8004410:	4c0a      	ldr	r4, [pc, #40]	@ (800443c <__libc_init_array+0x44>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	080044cc 	.word	0x080044cc
 8004434:	080044cc 	.word	0x080044cc
 8004438:	080044cc 	.word	0x080044cc
 800443c:	080044d0 	.word	0x080044d0

08004440 <memcpy>:
 8004440:	440a      	add	r2, r1
 8004442:	4291      	cmp	r1, r2
 8004444:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004448:	d100      	bne.n	800444c <memcpy+0xc>
 800444a:	4770      	bx	lr
 800444c:	b510      	push	{r4, lr}
 800444e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004452:	4291      	cmp	r1, r2
 8004454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004458:	d1f9      	bne.n	800444e <memcpy+0xe>
 800445a:	bd10      	pop	{r4, pc}

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
